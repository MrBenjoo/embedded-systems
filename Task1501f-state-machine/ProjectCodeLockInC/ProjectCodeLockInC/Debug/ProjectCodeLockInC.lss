
ProjectCodeLockInC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000059bc  00080000  00080000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  000859bc  000859bc  0000d9bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009a4  20070000  000859c4  00010000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00008320  200709a8  00086370  000109a8  2**3
                  ALLOC
  4 .stack        00002000  20078cc8  0008e690  000109a8  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  000109a4  2**0
                  CONTENTS, READONLY
  6 .comment      0000005b  00000000  00000000  000109cd  2**0
                  CONTENTS, READONLY
  7 .debug_info   00012fc9  00000000  00000000  00010a28  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000391d  00000000  00000000  000239f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000080cc  00000000  00000000  0002730e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000ea0  00000000  00000000  0002f3da  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000d78  00000000  00000000  0003027a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001bb12  00000000  00000000  00030ff2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00015ff6  00000000  00000000  0004cb04  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000699c3  00000000  00000000  00062afa  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00002ac8  00000000  00000000  000cc4c0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	2007acc8 	.word	0x2007acc8
   80004:	00082625 	.word	0x00082625
   80008:	00082621 	.word	0x00082621
   8000c:	00082621 	.word	0x00082621
   80010:	00082621 	.word	0x00082621
   80014:	00082621 	.word	0x00082621
   80018:	00082621 	.word	0x00082621
	...
   8002c:	000808fd 	.word	0x000808fd
   80030:	00082621 	.word	0x00082621
   80034:	00000000 	.word	0x00000000
   80038:	00080979 	.word	0x00080979
   8003c:	000809b5 	.word	0x000809b5
   80040:	00082621 	.word	0x00082621
   80044:	00082621 	.word	0x00082621
   80048:	00082621 	.word	0x00082621
   8004c:	00082621 	.word	0x00082621
   80050:	00082621 	.word	0x00082621
   80054:	00082621 	.word	0x00082621
   80058:	00082621 	.word	0x00082621
   8005c:	00082621 	.word	0x00082621
   80060:	00082621 	.word	0x00082621
   80064:	00082621 	.word	0x00082621
   80068:	00000000 	.word	0x00000000
   8006c:	00082491 	.word	0x00082491
   80070:	000824a5 	.word	0x000824a5
   80074:	000824b9 	.word	0x000824b9
   80078:	000824cd 	.word	0x000824cd
	...
   80084:	00081e71 	.word	0x00081e71
   80088:	00082621 	.word	0x00082621
   8008c:	00082621 	.word	0x00082621
   80090:	00082621 	.word	0x00082621
   80094:	00082621 	.word	0x00082621
   80098:	00082621 	.word	0x00082621
   8009c:	00082621 	.word	0x00082621
   800a0:	00082621 	.word	0x00082621
   800a4:	00000000 	.word	0x00000000
   800a8:	00082621 	.word	0x00082621
   800ac:	00082621 	.word	0x00082621
   800b0:	00082621 	.word	0x00082621
   800b4:	00082621 	.word	0x00082621
   800b8:	00082621 	.word	0x00082621
   800bc:	00082621 	.word	0x00082621
   800c0:	00082621 	.word	0x00082621
   800c4:	00082621 	.word	0x00082621
   800c8:	00082621 	.word	0x00082621
   800cc:	00082621 	.word	0x00082621
   800d0:	00082621 	.word	0x00082621
   800d4:	00082621 	.word	0x00082621
   800d8:	00082621 	.word	0x00082621
   800dc:	00082621 	.word	0x00082621
   800e0:	00082621 	.word	0x00082621
   800e4:	00082621 	.word	0x00082621
   800e8:	00082621 	.word	0x00082621
   800ec:	00082621 	.word	0x00082621
   800f0:	00082621 	.word	0x00082621

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	200709a8 	.word	0x200709a8
   80110:	00000000 	.word	0x00000000
   80114:	000859c4 	.word	0x000859c4

00080118 <frame_dummy>:
   80118:	b508      	push	{r3, lr}
   8011a:	4b06      	ldr	r3, [pc, #24]	; (80134 <frame_dummy+0x1c>)
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4806      	ldr	r0, [pc, #24]	; (80138 <frame_dummy+0x20>)
   80120:	4906      	ldr	r1, [pc, #24]	; (8013c <frame_dummy+0x24>)
   80122:	f3af 8000 	nop.w
   80126:	4806      	ldr	r0, [pc, #24]	; (80140 <frame_dummy+0x28>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b113      	cbz	r3, 80132 <frame_dummy+0x1a>
   8012c:	4b05      	ldr	r3, [pc, #20]	; (80144 <frame_dummy+0x2c>)
   8012e:	b103      	cbz	r3, 80132 <frame_dummy+0x1a>
   80130:	4798      	blx	r3
   80132:	bd08      	pop	{r3, pc}
   80134:	00000000 	.word	0x00000000
   80138:	000859c4 	.word	0x000859c4
   8013c:	200709ac 	.word	0x200709ac
   80140:	000859c4 	.word	0x000859c4
   80144:	00000000 	.word	0x00000000

00080148 <main>:
#include "Tasks/task_led.h"



int main (void)
{
   80148:	b510      	push	{r4, lr}
   8014a:	b084      	sub	sp, #16
	/* Insert system clock initialization code here (sysclk_init()). */
	sysclk_init();
   8014c:	4b1a      	ldr	r3, [pc, #104]	; (801b8 <main+0x70>)
   8014e:	4798      	blx	r3
	board_init();
   80150:	4b1a      	ldr	r3, [pc, #104]	; (801bc <main+0x74>)
   80152:	4798      	blx	r3

	/* Initialise console UART */
	configureConsole();
   80154:	4b1a      	ldr	r3, [pc, #104]	; (801c0 <main+0x78>)
   80156:	4798      	blx	r3
	
	printf("-- FreeRTOS Exemple – Tasks --\n\r");
   80158:	481a      	ldr	r0, [pc, #104]	; (801c4 <main+0x7c>)
   8015a:	4c1b      	ldr	r4, [pc, #108]	; (801c8 <main+0x80>)
   8015c:	47a0      	blx	r4
	printf("-- %s\n\r", BOARD_NAME);
   8015e:	481b      	ldr	r0, [pc, #108]	; (801cc <main+0x84>)
   80160:	491b      	ldr	r1, [pc, #108]	; (801d0 <main+0x88>)
   80162:	47a0      	blx	r4
	printf("-- Compiled: %s %s --\n\r", __DATE__, __TIME__);
   80164:	481b      	ldr	r0, [pc, #108]	; (801d4 <main+0x8c>)
   80166:	491c      	ldr	r1, [pc, #112]	; (801d8 <main+0x90>)
   80168:	4a1c      	ldr	r2, [pc, #112]	; (801dc <main+0x94>)
   8016a:	47a0      	blx	r4
	
	/* Create the first task for running the code lock */
	if( xTaskCreate(task_codeLock, (const signed char * const) "codeLock", TASK_CODELOCK_STACK_SIZE, NULL, TASK_CODELOCK_STACK_PRIORITY, NULL) != pdPASS )
   8016c:	2302      	movs	r3, #2
   8016e:	9300      	str	r3, [sp, #0]
   80170:	2300      	movs	r3, #0
   80172:	9301      	str	r3, [sp, #4]
   80174:	9302      	str	r3, [sp, #8]
   80176:	9303      	str	r3, [sp, #12]
   80178:	4819      	ldr	r0, [pc, #100]	; (801e0 <main+0x98>)
   8017a:	491a      	ldr	r1, [pc, #104]	; (801e4 <main+0x9c>)
   8017c:	f44f 7200 	mov.w	r2, #512	; 0x200
   80180:	4c19      	ldr	r4, [pc, #100]	; (801e8 <main+0xa0>)
   80182:	47a0      	blx	r4
   80184:	2801      	cmp	r0, #1
   80186:	d002      	beq.n	8018e <main+0x46>
	{
		printf("Failed to create code lock task\r\n");
   80188:	4818      	ldr	r0, [pc, #96]	; (801ec <main+0xa4>)
   8018a:	4b0f      	ldr	r3, [pc, #60]	; (801c8 <main+0x80>)
   8018c:	4798      	blx	r3
	}

	/* Create the second task with blinking LED */
	if( xTaskCreate(task_led, (const signed char * const) "led", TASK_LED_STACK_SIZE, NULL, TASK_LED_STACK_PRIORITY, NULL) != pdPASS ) 
   8018e:	2300      	movs	r3, #0
   80190:	9300      	str	r3, [sp, #0]
   80192:	9301      	str	r3, [sp, #4]
   80194:	9302      	str	r3, [sp, #8]
   80196:	9303      	str	r3, [sp, #12]
   80198:	4815      	ldr	r0, [pc, #84]	; (801f0 <main+0xa8>)
   8019a:	4916      	ldr	r1, [pc, #88]	; (801f4 <main+0xac>)
   8019c:	f44f 7280 	mov.w	r2, #256	; 0x100
   801a0:	4c11      	ldr	r4, [pc, #68]	; (801e8 <main+0xa0>)
   801a2:	47a0      	blx	r4
   801a4:	2801      	cmp	r0, #1
   801a6:	d002      	beq.n	801ae <main+0x66>
	{
		printf("Failed to create LED task\r\n");
   801a8:	4813      	ldr	r0, [pc, #76]	; (801f8 <main+0xb0>)
   801aa:	4b07      	ldr	r3, [pc, #28]	; (801c8 <main+0x80>)
   801ac:	4798      	blx	r3
	}

	/* Start the FreeRTOS scheduler running all tasks indefinitely*/
	vTaskStartScheduler();
   801ae:	4b13      	ldr	r3, [pc, #76]	; (801fc <main+0xb4>)
   801b0:	4798      	blx	r3
}
   801b2:	2000      	movs	r0, #0
   801b4:	b004      	add	sp, #16
   801b6:	bd10      	pop	{r4, pc}
   801b8:	00082119 	.word	0x00082119
   801bc:	0008217d 	.word	0x0008217d
   801c0:	00082021 	.word	0x00082021
   801c4:	00085838 	.word	0x00085838
   801c8:	00082891 	.word	0x00082891
   801cc:	0008585c 	.word	0x0008585c
   801d0:	00085864 	.word	0x00085864
   801d4:	00085874 	.word	0x00085874
   801d8:	0008588c 	.word	0x0008588c
   801dc:	00085898 	.word	0x00085898
   801e0:	00080255 	.word	0x00080255
   801e4:	000858a4 	.word	0x000858a4
   801e8:	0008112d 	.word	0x0008112d
   801ec:	000858b0 	.word	0x000858b0
   801f0:	000803c1 	.word	0x000803c1
   801f4:	000858d4 	.word	0x000858d4
   801f8:	000858d8 	.word	0x000858d8
   801fc:	00081335 	.word	0x00081335

00080200 <startCodeLock>:
	{ Locked, Locked,  Locked, OPEN}
};

void startCodeLock(codeLockPtrType foo)     /* Making sure the FSM starts in the right state */
{
	foo->state = Locked;
   80200:	2300      	movs	r3, #0
   80202:	7003      	strb	r3, [r0, #0]
   80204:	4770      	bx	lr
   80206:	bf00      	nop

00080208 <pushButton1>:
}

void pushButton1(codeLockPtrType foo)		/* Yellow button is pushed */
{
	const states currentState = foo->state;
	foo->state = OurTransitionTable[currentState][yellowButton];
   80208:	7802      	ldrb	r2, [r0, #0]
   8020a:	4b02      	ldr	r3, [pc, #8]	; (80214 <pushButton1+0xc>)
   8020c:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   80210:	7003      	strb	r3, [r0, #0]
   80212:	4770      	bx	lr
   80214:	000858f4 	.word	0x000858f4

00080218 <pushButton2>:
}

void pushButton2(codeLockPtrType foo)		/* Red button is pushed */
{
	const states currentState = foo->state;
	foo->state = OurTransitionTable[currentState][redButton];
   80218:	7802      	ldrb	r2, [r0, #0]
   8021a:	4b03      	ldr	r3, [pc, #12]	; (80228 <pushButton2+0x10>)
   8021c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   80220:	785b      	ldrb	r3, [r3, #1]
   80222:	7003      	strb	r3, [r0, #0]
   80224:	4770      	bx	lr
   80226:	bf00      	nop
   80228:	000858f4 	.word	0x000858f4

0008022c <pushButton3>:
}

void pushButton3(codeLockPtrType foo)		/* Green button is pushed */
{
	const states currentState = foo->state;
	foo->state = OurTransitionTable[currentState][greenButton];
   8022c:	7802      	ldrb	r2, [r0, #0]
   8022e:	4b03      	ldr	r3, [pc, #12]	; (8023c <pushButton3+0x10>)
   80230:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   80234:	789b      	ldrb	r3, [r3, #2]
   80236:	7003      	strb	r3, [r0, #0]
   80238:	4770      	bx	lr
   8023a:	bf00      	nop
   8023c:	000858f4 	.word	0x000858f4

00080240 <releaseButton>:


void releaseButton(codeLockPtrType foo)	    /* No button is pushed */
{
	const states currentState = foo->state;
	foo->state = OurTransitionTable[currentState][releaseBtn];
   80240:	7802      	ldrb	r2, [r0, #0]
   80242:	4b03      	ldr	r3, [pc, #12]	; (80250 <releaseButton+0x10>)
   80244:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   80248:	78db      	ldrb	r3, [r3, #3]
   8024a:	7003      	strb	r3, [r0, #0]
   8024c:	4770      	bx	lr
   8024e:	bf00      	nop
   80250:	000858f4 	.word	0x000858f4

00080254 <task_codeLock>:
/**
* This task will run the code lock and change the I/O
*/
void task_codeLock(void *pvParameters)

{
   80254:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   80258:	b087      	sub	sp, #28
	/* ------------------------ Init pins ----------------------- */
	pinMode(GREEN_BUTTON, INPUT);  /* set green button as an input */
   8025a:	2003      	movs	r0, #3
   8025c:	2101      	movs	r1, #1
   8025e:	4c4b      	ldr	r4, [pc, #300]	; (8038c <task_codeLock+0x138>)
   80260:	47a0      	blx	r4
	pinMode(YELLOW_BUTTON, INPUT); /* set yellow button as an input */
   80262:	2004      	movs	r0, #4
   80264:	2101      	movs	r1, #1
   80266:	47a0      	blx	r4
	pinMode(RED_BUTTON, INPUT);    /* set red button as an input */
   80268:	2005      	movs	r0, #5
   8026a:	2101      	movs	r1, #1
   8026c:	47a0      	blx	r4

	pinMode(GREEN_LED, OUTPUT);    /* set green led as an output */
   8026e:	2006      	movs	r0, #6
   80270:	2100      	movs	r1, #0
   80272:	47a0      	blx	r4
	pinMode(YELLOW_LED, OUTPUT);   /* set yellow led as an output */
   80274:	2007      	movs	r0, #7
   80276:	2100      	movs	r1, #0
   80278:	47a0      	blx	r4
	pinMode(RED_LED, OUTPUT);      /* set red led as an output */
   8027a:	2008      	movs	r0, #8
   8027c:	2100      	movs	r1, #0
   8027e:	47a0      	blx	r4
	pinMode(UNLOCKED_LED, OUTPUT); /* set big led as an output */
   80280:	2009      	movs	r0, #9
   80282:	2100      	movs	r1, #0
   80284:	47a0      	blx	r4

	digitalWrite(GREEN_LED, LOW);
   80286:	2006      	movs	r0, #6
   80288:	2100      	movs	r1, #0
   8028a:	4c41      	ldr	r4, [pc, #260]	; (80390 <task_codeLock+0x13c>)
   8028c:	47a0      	blx	r4
	digitalWrite(YELLOW_LED, LOW);
   8028e:	2007      	movs	r0, #7
   80290:	2100      	movs	r1, #0
   80292:	47a0      	blx	r4
	digitalWrite(RED_LED, LOW);
   80294:	2008      	movs	r0, #8
   80296:	2100      	movs	r1, #0
   80298:	47a0      	blx	r4
	digitalWrite(UNLOCKED_LED, HIGH);
   8029a:	2009      	movs	r0, #9
   8029c:	2101      	movs	r1, #1
   8029e:	47a0      	blx	r4
	/* --------------------------------------------------------- */
	
	/* Initialise console UART */
	configureConsole();
   802a0:	4b3c      	ldr	r3, [pc, #240]	; (80394 <task_codeLock+0x140>)
   802a2:	4798      	blx	r3
	
	delayInit();
   802a4:	4b3c      	ldr	r3, [pc, #240]	; (80398 <task_codeLock+0x144>)
   802a6:	4798      	blx	r3
	
	codeLockType SM;
	codeLockPtrType instance;
	
	instance = &SM; /* Points to the memory area of codelock */
	startCodeLock(instance); /* Making the statemachine start in locked state */
   802a8:	a801      	add	r0, sp, #4
   802aa:	4b3c      	ldr	r3, [pc, #240]	; (8039c <task_codeLock+0x148>)
   802ac:	4798      	blx	r3
	
	while(1)
	{

		if(digitalRead(YELLOW_BUTTON) == HIGH)
   802ae:	4c3c      	ldr	r4, [pc, #240]	; (803a0 <task_codeLock+0x14c>)
		
		else if(digitalRead(RED_BUTTON) == HIGH)
		{
			while(digitalRead(RED_BUTTON) == HIGH)
			{
				pushButton2(instance);
   802b0:	f8df 9104 	ldr.w	r9, [pc, #260]	; 803b8 <task_codeLock+0x164>
			}
			
			releaseButton(instance);
   802b4:	f8df 8104 	ldr.w	r8, [pc, #260]	; 803bc <task_codeLock+0x168>
		
		else if(digitalRead(GREEN_BUTTON) == HIGH)
		{
			while(digitalRead(GREEN_BUTTON) == HIGH)
			{
				pushButton3(instance);
   802b8:	4f3a      	ldr	r7, [pc, #232]	; (803a4 <task_codeLock+0x150>)
	startCodeLock(instance); /* Making the statemachine start in locked state */
	
	while(1)
	{

		if(digitalRead(YELLOW_BUTTON) == HIGH)
   802ba:	2004      	movs	r0, #4
   802bc:	47a0      	blx	r4
   802be:	2801      	cmp	r0, #1
   802c0:	d10e      	bne.n	802e0 <task_codeLock+0x8c>
		{
			while(digitalRead(YELLOW_BUTTON) == HIGH)
			{
				pushButton1(instance);
   802c2:	4e39      	ldr	r6, [pc, #228]	; (803a8 <task_codeLock+0x154>)
				delayMicroseconds(500000); /* This delay is needed to give the program a chance to turn off the LEDs in the locked state, otherwise it goes from locked state to pushOne almost instantaneously */
   802c4:	4d39      	ldr	r5, [pc, #228]	; (803ac <task_codeLock+0x158>)
   802c6:	e004      	b.n	802d2 <task_codeLock+0x7e>

		if(digitalRead(YELLOW_BUTTON) == HIGH)
		{
			while(digitalRead(YELLOW_BUTTON) == HIGH)
			{
				pushButton1(instance);
   802c8:	a801      	add	r0, sp, #4
   802ca:	47b0      	blx	r6
				delayMicroseconds(500000); /* This delay is needed to give the program a chance to turn off the LEDs in the locked state, otherwise it goes from locked state to pushOne almost instantaneously */
   802cc:	4628      	mov	r0, r5
   802ce:	4b38      	ldr	r3, [pc, #224]	; (803b0 <task_codeLock+0x15c>)
   802d0:	4798      	blx	r3
	while(1)
	{

		if(digitalRead(YELLOW_BUTTON) == HIGH)
		{
			while(digitalRead(YELLOW_BUTTON) == HIGH)
   802d2:	2004      	movs	r0, #4
   802d4:	47a0      	blx	r4
   802d6:	2801      	cmp	r0, #1
   802d8:	d0f6      	beq.n	802c8 <task_codeLock+0x74>
			{
				pushButton1(instance);
				delayMicroseconds(500000); /* This delay is needed to give the program a chance to turn off the LEDs in the locked state, otherwise it goes from locked state to pushOne almost instantaneously */
			}

			releaseButton(instance);
   802da:	a801      	add	r0, sp, #4
   802dc:	47c0      	blx	r8
   802de:	e01c      	b.n	8031a <task_codeLock+0xc6>
		}
		
		else if(digitalRead(GREEN_BUTTON) == HIGH)
   802e0:	2003      	movs	r0, #3
   802e2:	47a0      	blx	r4
   802e4:	2801      	cmp	r0, #1
   802e6:	d10a      	bne.n	802fe <task_codeLock+0xaa>
		{
			while(digitalRead(GREEN_BUTTON) == HIGH)
   802e8:	2503      	movs	r5, #3
   802ea:	e001      	b.n	802f0 <task_codeLock+0x9c>
			{
				pushButton3(instance);
   802ec:	a801      	add	r0, sp, #4
   802ee:	47b8      	blx	r7
			releaseButton(instance);
		}
		
		else if(digitalRead(GREEN_BUTTON) == HIGH)
		{
			while(digitalRead(GREEN_BUTTON) == HIGH)
   802f0:	4628      	mov	r0, r5
   802f2:	47a0      	blx	r4
   802f4:	2801      	cmp	r0, #1
   802f6:	d0f9      	beq.n	802ec <task_codeLock+0x98>
			{
				pushButton3(instance);
			}
			
			releaseButton(instance);
   802f8:	a801      	add	r0, sp, #4
   802fa:	47c0      	blx	r8
   802fc:	e00d      	b.n	8031a <task_codeLock+0xc6>
		}
		
		else if(digitalRead(RED_BUTTON) == HIGH)
   802fe:	2005      	movs	r0, #5
   80300:	47a0      	blx	r4
   80302:	2801      	cmp	r0, #1
   80304:	d109      	bne.n	8031a <task_codeLock+0xc6>
		{
			while(digitalRead(RED_BUTTON) == HIGH)
   80306:	2505      	movs	r5, #5
   80308:	e001      	b.n	8030e <task_codeLock+0xba>
			{
				pushButton2(instance);
   8030a:	a801      	add	r0, sp, #4
   8030c:	47c8      	blx	r9
			releaseButton(instance);
		}
		
		else if(digitalRead(RED_BUTTON) == HIGH)
		{
			while(digitalRead(RED_BUTTON) == HIGH)
   8030e:	4628      	mov	r0, r5
   80310:	47a0      	blx	r4
   80312:	2801      	cmp	r0, #1
   80314:	d0f9      	beq.n	8030a <task_codeLock+0xb6>
			{
				pushButton2(instance);
			}
			
			releaseButton(instance);
   80316:	a801      	add	r0, sp, #4
   80318:	47c0      	blx	r8
		* lamps[0] = YELLOW_LED
		* lamps[1] = GREEN_LED
		* lamps[2] = RED_LED
		* lamps[3] = UNLOCKED_LED 
		*/
		if(instance->state == Locked)
   8031a:	f89d 3004 	ldrb.w	r3, [sp, #4]
   8031e:	b993      	cbnz	r3, 80346 <task_codeLock+0xf2>
		{
			instance->lamps[0] = LOW;
   80320:	2100      	movs	r1, #0
   80322:	9102      	str	r1, [sp, #8]
			instance->lamps[1] = LOW;
   80324:	9103      	str	r1, [sp, #12]
			instance->lamps[2] = LOW;
   80326:	9104      	str	r1, [sp, #16]
			instance->lamps[3] = HIGH;
   80328:	2301      	movs	r3, #1
   8032a:	9305      	str	r3, [sp, #20]
			digitalWrite( YELLOW_LED, instance->lamps[0] );
   8032c:	2007      	movs	r0, #7
   8032e:	4d18      	ldr	r5, [pc, #96]	; (80390 <task_codeLock+0x13c>)
   80330:	47a8      	blx	r5
			digitalWrite( GREEN_LED, instance->lamps[1] );
   80332:	2006      	movs	r0, #6
   80334:	9903      	ldr	r1, [sp, #12]
   80336:	47a8      	blx	r5
			digitalWrite( RED_LED, instance->lamps[2] );
   80338:	2008      	movs	r0, #8
   8033a:	9904      	ldr	r1, [sp, #16]
   8033c:	47a8      	blx	r5
			digitalWrite( UNLOCKED_LED, instance->lamps[3] );
   8033e:	2009      	movs	r0, #9
   80340:	9905      	ldr	r1, [sp, #20]
   80342:	47a8      	blx	r5
   80344:	e01e      	b.n	80384 <task_codeLock+0x130>
		}
		else if(instance->state == ReleaseOne)
   80346:	2b02      	cmp	r3, #2
   80348:	d105      	bne.n	80356 <task_codeLock+0x102>
		{
			instance->lamps[0] = HIGH;
   8034a:	2101      	movs	r1, #1
   8034c:	9102      	str	r1, [sp, #8]
			digitalWrite( YELLOW_LED, instance->lamps[0] );
   8034e:	2007      	movs	r0, #7
   80350:	4b0f      	ldr	r3, [pc, #60]	; (80390 <task_codeLock+0x13c>)
   80352:	4798      	blx	r3
   80354:	e016      	b.n	80384 <task_codeLock+0x130>
		}
		else if(instance->state == ReleaseTwo)
   80356:	2b04      	cmp	r3, #4
   80358:	d105      	bne.n	80366 <task_codeLock+0x112>
		{
			instance->lamps[1] = HIGH;
   8035a:	2101      	movs	r1, #1
   8035c:	9103      	str	r1, [sp, #12]
			digitalWrite( GREEN_LED, instance->lamps[1] );
   8035e:	2006      	movs	r0, #6
   80360:	4b0b      	ldr	r3, [pc, #44]	; (80390 <task_codeLock+0x13c>)
   80362:	4798      	blx	r3
   80364:	e00e      	b.n	80384 <task_codeLock+0x130>
		}
		else if(instance->state == ReleaseThree)
   80366:	2b06      	cmp	r3, #6
   80368:	d105      	bne.n	80376 <task_codeLock+0x122>
		{
			instance->lamps[2] = HIGH;
   8036a:	2101      	movs	r1, #1
   8036c:	9104      	str	r1, [sp, #16]
			digitalWrite( RED_LED, instance->lamps[2] );
   8036e:	2008      	movs	r0, #8
   80370:	4b07      	ldr	r3, [pc, #28]	; (80390 <task_codeLock+0x13c>)
   80372:	4798      	blx	r3
   80374:	e006      	b.n	80384 <task_codeLock+0x130>
		}
		else if(instance->state == OPEN)
   80376:	2b08      	cmp	r3, #8
   80378:	d104      	bne.n	80384 <task_codeLock+0x130>
		{
			instance->lamps[3] = LOW;
   8037a:	2100      	movs	r1, #0
   8037c:	9105      	str	r1, [sp, #20]
			digitalWrite( UNLOCKED_LED, instance->lamps[3] );
   8037e:	2009      	movs	r0, #9
   80380:	4b03      	ldr	r3, [pc, #12]	; (80390 <task_codeLock+0x13c>)
   80382:	4798      	blx	r3
		}
		/*----------------------------------------------------*/
		
		vTaskDelay(200); /* 200 millisecond delay */
   80384:	20c8      	movs	r0, #200	; 0xc8
   80386:	4b0b      	ldr	r3, [pc, #44]	; (803b4 <task_codeLock+0x160>)
   80388:	4798      	blx	r3
	}
   8038a:	e796      	b.n	802ba <task_codeLock+0x66>
   8038c:	000803ed 	.word	0x000803ed
   80390:	000804d5 	.word	0x000804d5
   80394:	00082021 	.word	0x00082021
   80398:	000820a1 	.word	0x000820a1
   8039c:	00080201 	.word	0x00080201
   803a0:	000805d9 	.word	0x000805d9
   803a4:	0008022d 	.word	0x0008022d
   803a8:	00080209 	.word	0x00080209
   803ac:	0007a120 	.word	0x0007a120
   803b0:	000820dd 	.word	0x000820dd
   803b4:	0008169d 	.word	0x0008169d
   803b8:	00080219 	.word	0x00080219
   803bc:	00080241 	.word	0x00080241

000803c0 <task_led>:

/**
 *  This tasks makes the on-board LED blink every second
 */
void task_led(void *pvParameters)
{
   803c0:	b570      	push	{r4, r5, r6, lr}
   803c2:	b082      	sub	sp, #8
    portTickType xLastWakeTime;
    const portTickType xTimeIncrement = 500;

    xLastWakeTime = xTaskGetTickCount(); /* Initialise the xLastWakeTime variable with the current time. */
   803c4:	4b06      	ldr	r3, [pc, #24]	; (803e0 <task_led+0x20>)
   803c6:	4798      	blx	r3
   803c8:	ac02      	add	r4, sp, #8
   803ca:	f824 0d02 	strh.w	r0, [r4, #-2]!
    while (1) {
        vTaskDelayUntil(&xLastWakeTime, xTimeIncrement); /* Wait for the next cycle. */
   803ce:	4e05      	ldr	r6, [pc, #20]	; (803e4 <task_led+0x24>)
        gpio_toggle_pin(LED0_GPIO);
   803d0:	4d05      	ldr	r5, [pc, #20]	; (803e8 <task_led+0x28>)
    portTickType xLastWakeTime;
    const portTickType xTimeIncrement = 500;

    xLastWakeTime = xTaskGetTickCount(); /* Initialise the xLastWakeTime variable with the current time. */
    while (1) {
        vTaskDelayUntil(&xLastWakeTime, xTimeIncrement); /* Wait for the next cycle. */
   803d2:	4620      	mov	r0, r4
   803d4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
   803d8:	47b0      	blx	r6
        gpio_toggle_pin(LED0_GPIO);
   803da:	203b      	movs	r0, #59	; 0x3b
   803dc:	47a8      	blx	r5
   803de:	e7f8      	b.n	803d2 <task_led+0x12>
   803e0:	000813b1 	.word	0x000813b1
   803e4:	00081605 	.word	0x00081605
   803e8:	000822a1 	.word	0x000822a1

000803ec <pinMode>:
uint32_t *const p_PIOC_PDSR = (uint32_t *) (PIOC_BASE_ADDRESS+0x003CU); /* defines the address for pin data status register, with this register we can read the pins */


void pinMode(int pinNumber, mode_definition mode)
{
	if(mode == OUTPUT)
   803ec:	2900      	cmp	r1, #0
   803ee:	d13b      	bne.n	80468 <pinMode+0x7c>
	{
		if(pinNumber == UNLOCKED_LED)
   803f0:	2809      	cmp	r0, #9
   803f2:	d10c      	bne.n	8040e <pinMode+0x22>
		{
			*p_PIOC_PER |= (1<<21); /* Enable the PIO to control UNLOCKED_LED */
   803f4:	4b34      	ldr	r3, [pc, #208]	; (804c8 <pinMode+0xdc>)
   803f6:	681a      	ldr	r2, [r3, #0]
   803f8:	f442 1000 	orr.w	r0, r2, #2097152	; 0x200000
			*p_PIOC_OER |= (1<<21); /* Set UNLOCKED_LED as an output */
   803fc:	4a33      	ldr	r2, [pc, #204]	; (804cc <pinMode+0xe0>)
   803fe:	6811      	ldr	r1, [r2, #0]
   80400:	f441 1100 	orr.w	r1, r1, #2097152	; 0x200000
   80404:	6011      	str	r1, [r2, #0]
			*p_PIOC_PER ^= (1<<21);	/* Disable the PIO to control UNLOCKED_LED */
   80406:	f480 1200 	eor.w	r2, r0, #2097152	; 0x200000
   8040a:	601a      	str	r2, [r3, #0]
   8040c:	4770      	bx	lr
		}
		else if(pinNumber == YELLOW_LED)
   8040e:	2807      	cmp	r0, #7
   80410:	d10c      	bne.n	8042c <pinMode+0x40>
		{
			*p_PIOC_PER |= (1<<23);
   80412:	4b2d      	ldr	r3, [pc, #180]	; (804c8 <pinMode+0xdc>)
   80414:	681a      	ldr	r2, [r3, #0]
   80416:	f442 0000 	orr.w	r0, r2, #8388608	; 0x800000
			*p_PIOC_OER |= (1<<23);
   8041a:	4a2c      	ldr	r2, [pc, #176]	; (804cc <pinMode+0xe0>)
   8041c:	6811      	ldr	r1, [r2, #0]
   8041e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   80422:	6011      	str	r1, [r2, #0]
			*p_PIOC_PER ^= (1<<23);
   80424:	f480 0200 	eor.w	r2, r0, #8388608	; 0x800000
   80428:	601a      	str	r2, [r3, #0]
   8042a:	4770      	bx	lr
		}
		else if(pinNumber == GREEN_LED)
   8042c:	2806      	cmp	r0, #6
   8042e:	d10c      	bne.n	8044a <pinMode+0x5e>
		{
			*p_PIOC_PER |= (1<<24);
   80430:	4b25      	ldr	r3, [pc, #148]	; (804c8 <pinMode+0xdc>)
   80432:	681a      	ldr	r2, [r3, #0]
   80434:	f042 7080 	orr.w	r0, r2, #16777216	; 0x1000000
			*p_PIOC_OER |= (1<<24);
   80438:	4a24      	ldr	r2, [pc, #144]	; (804cc <pinMode+0xe0>)
   8043a:	6811      	ldr	r1, [r2, #0]
   8043c:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
   80440:	6011      	str	r1, [r2, #0]
			*p_PIOC_PER ^= (1<<24);
   80442:	f080 7280 	eor.w	r2, r0, #16777216	; 0x1000000
   80446:	601a      	str	r2, [r3, #0]
   80448:	4770      	bx	lr
		}
		else if(pinNumber == RED_LED)
   8044a:	2808      	cmp	r0, #8
   8044c:	d13a      	bne.n	804c4 <pinMode+0xd8>
		{
			*p_PIOC_PER |= (1<<22);
   8044e:	4b1e      	ldr	r3, [pc, #120]	; (804c8 <pinMode+0xdc>)
   80450:	681a      	ldr	r2, [r3, #0]
   80452:	f442 0080 	orr.w	r0, r2, #4194304	; 0x400000
			*p_PIOC_OER |= (1<<22);
   80456:	4a1d      	ldr	r2, [pc, #116]	; (804cc <pinMode+0xe0>)
   80458:	6811      	ldr	r1, [r2, #0]
   8045a:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
   8045e:	6011      	str	r1, [r2, #0]
			*p_PIOC_PER ^= (1<<22);
   80460:	f480 0280 	eor.w	r2, r0, #4194304	; 0x400000
   80464:	601a      	str	r2, [r3, #0]
   80466:	4770      	bx	lr
		}
	}
	else if(mode == INPUT)
   80468:	2901      	cmp	r1, #1
   8046a:	d12b      	bne.n	804c4 <pinMode+0xd8>
	{
		if(pinNumber == GREEN_BUTTON)
   8046c:	2803      	cmp	r0, #3
   8046e:	d10c      	bne.n	8048a <pinMode+0x9e>
		{
			*p_PIOC_PER |= (1<<28); /* Enable the PIO to control GREEN_BUTTON */
   80470:	4b15      	ldr	r3, [pc, #84]	; (804c8 <pinMode+0xdc>)
   80472:	681a      	ldr	r2, [r3, #0]
   80474:	f042 5080 	orr.w	r0, r2, #268435456	; 0x10000000
			*p_PIOC_ODR |= (1<<28); /* Set GREEN_BUTTON as an input */
   80478:	4a15      	ldr	r2, [pc, #84]	; (804d0 <pinMode+0xe4>)
   8047a:	6811      	ldr	r1, [r2, #0]
   8047c:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
   80480:	6011      	str	r1, [r2, #0]
			*p_PIOC_PER ^= (1<<28);	/* Disable the PIO to control GREEN_BUTTON */
   80482:	f080 5280 	eor.w	r2, r0, #268435456	; 0x10000000
   80486:	601a      	str	r2, [r3, #0]
   80488:	4770      	bx	lr
		}
		else if(pinNumber == YELLOW_BUTTON)
   8048a:	2804      	cmp	r0, #4
   8048c:	d10c      	bne.n	804a8 <pinMode+0xbc>
		{
			*p_PIOC_PER |= (1<<26);
   8048e:	4b0e      	ldr	r3, [pc, #56]	; (804c8 <pinMode+0xdc>)
   80490:	681a      	ldr	r2, [r3, #0]
   80492:	f042 6080 	orr.w	r0, r2, #67108864	; 0x4000000
			*p_PIOC_ODR |= (1<<26);
   80496:	4a0e      	ldr	r2, [pc, #56]	; (804d0 <pinMode+0xe4>)
   80498:	6811      	ldr	r1, [r2, #0]
   8049a:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
   8049e:	6011      	str	r1, [r2, #0]
			*p_PIOC_PER ^= (1<<26);
   804a0:	f080 6280 	eor.w	r2, r0, #67108864	; 0x4000000
   804a4:	601a      	str	r2, [r3, #0]
   804a6:	4770      	bx	lr
		}
		else if(pinNumber == RED_BUTTON)
   804a8:	2805      	cmp	r0, #5
   804aa:	d10b      	bne.n	804c4 <pinMode+0xd8>
		{
			*p_PIOC_PER |= (1<<25);
   804ac:	4b06      	ldr	r3, [pc, #24]	; (804c8 <pinMode+0xdc>)
   804ae:	681a      	ldr	r2, [r3, #0]
   804b0:	f042 7000 	orr.w	r0, r2, #33554432	; 0x2000000
			*p_PIOC_ODR |= (1<<25);
   804b4:	4a06      	ldr	r2, [pc, #24]	; (804d0 <pinMode+0xe4>)
   804b6:	6811      	ldr	r1, [r2, #0]
   804b8:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
   804bc:	6011      	str	r1, [r2, #0]
			*p_PIOC_PER ^= (1<<25);
   804be:	f080 7200 	eor.w	r2, r0, #33554432	; 0x2000000
   804c2:	601a      	str	r2, [r3, #0]
   804c4:	4770      	bx	lr
   804c6:	bf00      	nop
   804c8:	400e1200 	.word	0x400e1200
   804cc:	400e1210 	.word	0x400e1210
   804d0:	400e1214 	.word	0x400e1214

000804d4 <digitalWrite>:
	}
}

void digitalWrite(int pinNumber, int value)
{
	if(value == HIGH)
   804d4:	2901      	cmp	r1, #1
   804d6:	d13b      	bne.n	80550 <digitalWrite+0x7c>
	{
		if(pinNumber == UNLOCKED_LED)
   804d8:	2809      	cmp	r0, #9
   804da:	d10c      	bne.n	804f6 <digitalWrite+0x22>
		{
			*p_PIOC_PER |= (1<<21);  /* Enable the PIO to control UNLOCKED_LED */
   804dc:	4b3b      	ldr	r3, [pc, #236]	; (805cc <digitalWrite+0xf8>)
   804de:	681a      	ldr	r2, [r3, #0]
   804e0:	f442 1000 	orr.w	r0, r2, #2097152	; 0x200000
			*p_PIOC_SODR |= (1<<21); /* Set UNLOCKED_LED to high */
   804e4:	4a3a      	ldr	r2, [pc, #232]	; (805d0 <digitalWrite+0xfc>)
   804e6:	6811      	ldr	r1, [r2, #0]
   804e8:	f441 1100 	orr.w	r1, r1, #2097152	; 0x200000
   804ec:	6011      	str	r1, [r2, #0]
			*p_PIOC_PER ^= (1<<21);  /* Disable the PIO to control UNLOCKED_LED */
   804ee:	f480 1200 	eor.w	r2, r0, #2097152	; 0x200000
   804f2:	601a      	str	r2, [r3, #0]
   804f4:	4770      	bx	lr
		}
		
		else if(pinNumber == YELLOW_LED)
   804f6:	2807      	cmp	r0, #7
   804f8:	d10c      	bne.n	80514 <digitalWrite+0x40>
		{
			*p_PIOC_PER |= (1<<23);
   804fa:	4b34      	ldr	r3, [pc, #208]	; (805cc <digitalWrite+0xf8>)
   804fc:	681a      	ldr	r2, [r3, #0]
   804fe:	f442 0000 	orr.w	r0, r2, #8388608	; 0x800000
			*p_PIOC_SODR |= (1<<23);
   80502:	4a33      	ldr	r2, [pc, #204]	; (805d0 <digitalWrite+0xfc>)
   80504:	6811      	ldr	r1, [r2, #0]
   80506:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   8050a:	6011      	str	r1, [r2, #0]
			*p_PIOC_PER ^= (1<<23);
   8050c:	f480 0200 	eor.w	r2, r0, #8388608	; 0x800000
   80510:	601a      	str	r2, [r3, #0]
   80512:	4770      	bx	lr
		}
		else if(pinNumber == GREEN_LED)
   80514:	2806      	cmp	r0, #6
   80516:	d10c      	bne.n	80532 <digitalWrite+0x5e>
		{
			*p_PIOC_PER |= (1<<24);
   80518:	4b2c      	ldr	r3, [pc, #176]	; (805cc <digitalWrite+0xf8>)
   8051a:	681a      	ldr	r2, [r3, #0]
   8051c:	f042 7080 	orr.w	r0, r2, #16777216	; 0x1000000
			*p_PIOC_SODR |= (1<<24);
   80520:	4a2b      	ldr	r2, [pc, #172]	; (805d0 <digitalWrite+0xfc>)
   80522:	6811      	ldr	r1, [r2, #0]
   80524:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
   80528:	6011      	str	r1, [r2, #0]
			*p_PIOC_PER ^= (1<<24);
   8052a:	f080 7280 	eor.w	r2, r0, #16777216	; 0x1000000
   8052e:	601a      	str	r2, [r3, #0]
   80530:	4770      	bx	lr
		}
		else if(pinNumber == RED_LED)
   80532:	2808      	cmp	r0, #8
   80534:	d149      	bne.n	805ca <digitalWrite+0xf6>
		{
			*p_PIOC_PER |= (1<<22);
   80536:	4b25      	ldr	r3, [pc, #148]	; (805cc <digitalWrite+0xf8>)
   80538:	681a      	ldr	r2, [r3, #0]
   8053a:	f442 0080 	orr.w	r0, r2, #4194304	; 0x400000
			*p_PIOC_SODR |= (1<<22);
   8053e:	4a24      	ldr	r2, [pc, #144]	; (805d0 <digitalWrite+0xfc>)
   80540:	6811      	ldr	r1, [r2, #0]
   80542:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
   80546:	6011      	str	r1, [r2, #0]
			*p_PIOC_PER ^= (1<<22);
   80548:	f480 0280 	eor.w	r2, r0, #4194304	; 0x400000
   8054c:	601a      	str	r2, [r3, #0]
   8054e:	4770      	bx	lr
		}
	}
	else if(value == LOW)
   80550:	2900      	cmp	r1, #0
   80552:	d13a      	bne.n	805ca <digitalWrite+0xf6>
	{
		if(pinNumber == UNLOCKED_LED)
   80554:	2809      	cmp	r0, #9
   80556:	d10c      	bne.n	80572 <digitalWrite+0x9e>
		{
			*p_PIOC_PER |= (1<<21);  /* Enable the PIO to control UNLOCKED_LED */
   80558:	4b1c      	ldr	r3, [pc, #112]	; (805cc <digitalWrite+0xf8>)
   8055a:	681a      	ldr	r2, [r3, #0]
   8055c:	f442 1000 	orr.w	r0, r2, #2097152	; 0x200000
			*p_PIOC_CODR |= (1<<21); /* Set UNLOCKED_LED to LOW */
   80560:	4a1c      	ldr	r2, [pc, #112]	; (805d4 <digitalWrite+0x100>)
   80562:	6811      	ldr	r1, [r2, #0]
   80564:	f441 1100 	orr.w	r1, r1, #2097152	; 0x200000
   80568:	6011      	str	r1, [r2, #0]
			*p_PIOC_PER ^= (1<<21);  /* Disable the PIO to control UNLOCKED_LED */
   8056a:	f480 1200 	eor.w	r2, r0, #2097152	; 0x200000
   8056e:	601a      	str	r2, [r3, #0]
   80570:	4770      	bx	lr
		}
		else if(pinNumber == YELLOW_LED)
   80572:	2807      	cmp	r0, #7
   80574:	d10c      	bne.n	80590 <digitalWrite+0xbc>
		{
			*p_PIOC_PER |= (1<<23);
   80576:	4b15      	ldr	r3, [pc, #84]	; (805cc <digitalWrite+0xf8>)
   80578:	681a      	ldr	r2, [r3, #0]
   8057a:	f442 0000 	orr.w	r0, r2, #8388608	; 0x800000
			*p_PIOC_CODR |= (1<<23);
   8057e:	4a15      	ldr	r2, [pc, #84]	; (805d4 <digitalWrite+0x100>)
   80580:	6811      	ldr	r1, [r2, #0]
   80582:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   80586:	6011      	str	r1, [r2, #0]
			*p_PIOC_PER ^= (1<<23);
   80588:	f480 0200 	eor.w	r2, r0, #8388608	; 0x800000
   8058c:	601a      	str	r2, [r3, #0]
   8058e:	4770      	bx	lr
		}
		else if(pinNumber == GREEN_LED)
   80590:	2806      	cmp	r0, #6
   80592:	d10c      	bne.n	805ae <digitalWrite+0xda>
		{
			*p_PIOC_PER |= (1<<24);
   80594:	4b0d      	ldr	r3, [pc, #52]	; (805cc <digitalWrite+0xf8>)
   80596:	681a      	ldr	r2, [r3, #0]
   80598:	f042 7080 	orr.w	r0, r2, #16777216	; 0x1000000
			*p_PIOC_CODR |= (1<<24);
   8059c:	4a0d      	ldr	r2, [pc, #52]	; (805d4 <digitalWrite+0x100>)
   8059e:	6811      	ldr	r1, [r2, #0]
   805a0:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
   805a4:	6011      	str	r1, [r2, #0]
			*p_PIOC_PER ^= (1<<24);
   805a6:	f080 7280 	eor.w	r2, r0, #16777216	; 0x1000000
   805aa:	601a      	str	r2, [r3, #0]
   805ac:	4770      	bx	lr
		}
		else if(pinNumber == RED_LED)
   805ae:	2808      	cmp	r0, #8
   805b0:	d10b      	bne.n	805ca <digitalWrite+0xf6>
		{
			*p_PIOC_PER |= (1<<22);
   805b2:	4b06      	ldr	r3, [pc, #24]	; (805cc <digitalWrite+0xf8>)
   805b4:	681a      	ldr	r2, [r3, #0]
   805b6:	f442 0080 	orr.w	r0, r2, #4194304	; 0x400000
			*p_PIOC_CODR |= (1<<22);
   805ba:	4a06      	ldr	r2, [pc, #24]	; (805d4 <digitalWrite+0x100>)
   805bc:	6811      	ldr	r1, [r2, #0]
   805be:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
   805c2:	6011      	str	r1, [r2, #0]
			*p_PIOC_PER ^= (1<<22);
   805c4:	f480 0280 	eor.w	r2, r0, #4194304	; 0x400000
   805c8:	601a      	str	r2, [r3, #0]
   805ca:	4770      	bx	lr
   805cc:	400e1200 	.word	0x400e1200
   805d0:	400e1230 	.word	0x400e1230
   805d4:	400e1234 	.word	0x400e1234

000805d8 <digitalRead>:
	}
}

int digitalRead(int pinNumber)
{
	if(pinNumber == GREEN_BUTTON)
   805d8:	2803      	cmp	r0, #3
   805da:	d104      	bne.n	805e6 <digitalRead+0xe>
	{
		int greenBtnPressed = (*p_PIOC_PDSR) & (1<<28); //read GREEN_BUTTON to check if its pressed
   805dc:	4b09      	ldr	r3, [pc, #36]	; (80604 <digitalRead+0x2c>)
		
		if(greenBtnPressed) // if pressed
   805de:	6818      	ldr	r0, [r3, #0]
   805e0:	f3c0 7000 	ubfx	r0, r0, #28, #1
   805e4:	4770      	bx	lr
		{
			return 1;
		}
	}
	else if(pinNumber == YELLOW_BUTTON)
   805e6:	2804      	cmp	r0, #4
   805e8:	d104      	bne.n	805f4 <digitalRead+0x1c>
	{
		int yellowBtnPressed = (*p_PIOC_PDSR) & (1<<26);
   805ea:	4b06      	ldr	r3, [pc, #24]	; (80604 <digitalRead+0x2c>)
		
		if(yellowBtnPressed)
   805ec:	6818      	ldr	r0, [r3, #0]
   805ee:	f3c0 6080 	ubfx	r0, r0, #26, #1
   805f2:	4770      	bx	lr
		{
			return 1;
		}
	}
	else if(pinNumber == RED_BUTTON)
   805f4:	2805      	cmp	r0, #5
	{
		int redBtnPressed = (*p_PIOC_PDSR) & (1<<25);
   805f6:	bf03      	ittte	eq
   805f8:	4b02      	ldreq	r3, [pc, #8]	; (80604 <digitalRead+0x2c>)
		
		if(redBtnPressed)
   805fa:	6818      	ldreq	r0, [r3, #0]
   805fc:	f3c0 6040 	ubfxeq	r0, r0, #25, #1
		{
			return 1;
		}
	}
	
	return 0;
   80600:	2000      	movne	r0, #0
	
}
   80602:	4770      	bx	lr
   80604:	400e123c 	.word	0x400e123c

00080608 <usart_serial_read_packet>:
 * \param len    Length of data
 *
 */
status_code_t usart_serial_read_packet(usart_if usart, uint8_t *data,
		size_t len)
{
   80608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8060c:	b083      	sub	sp, #12
   8060e:	4605      	mov	r5, r0
	while (len) {
   80610:	4690      	mov	r8, r2
   80612:	2a00      	cmp	r2, #0
   80614:	d047      	beq.n	806a6 <usart_serial_read_packet+0x9e>
   80616:	1c4e      	adds	r6, r1, #1
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   80618:	4f25      	ldr	r7, [pc, #148]	; (806b0 <usart_serial_read_packet+0xa8>)
		while (usart_read(p_usart, &val));
   8061a:	4c26      	ldr	r4, [pc, #152]	; (806b4 <usart_serial_read_packet+0xac>)
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   8061c:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 806c8 <usart_serial_read_packet+0xc0>
	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
   80620:	f8df b094 	ldr.w	fp, [pc, #148]	; 806b8 <usart_serial_read_packet+0xb0>
   80624:	f106 39ff 	add.w	r9, r6, #4294967295
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
	uint32_t val = 0;
   80628:	2300      	movs	r3, #0
   8062a:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   8062c:	4b22      	ldr	r3, [pc, #136]	; (806b8 <usart_serial_read_packet+0xb0>)
   8062e:	429d      	cmp	r5, r3
   80630:	d106      	bne.n	80640 <usart_serial_read_packet+0x38>
		while (uart_read((Uart*)p_usart, data));
   80632:	4658      	mov	r0, fp
   80634:	4649      	mov	r1, r9
   80636:	4b21      	ldr	r3, [pc, #132]	; (806bc <usart_serial_read_packet+0xb4>)
   80638:	4798      	blx	r3
   8063a:	2800      	cmp	r0, #0
   8063c:	d1f9      	bne.n	80632 <usart_serial_read_packet+0x2a>
   8063e:	e019      	b.n	80674 <usart_serial_read_packet+0x6c>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   80640:	4b1f      	ldr	r3, [pc, #124]	; (806c0 <usart_serial_read_packet+0xb8>)
   80642:	429d      	cmp	r5, r3
   80644:	d109      	bne.n	8065a <usart_serial_read_packet+0x52>
		while (usart_read(p_usart, &val));
   80646:	4699      	mov	r9, r3
   80648:	4648      	mov	r0, r9
   8064a:	a901      	add	r1, sp, #4
   8064c:	47a0      	blx	r4
   8064e:	2800      	cmp	r0, #0
   80650:	d1fa      	bne.n	80648 <usart_serial_read_packet+0x40>
		*data = (uint8_t)(val & 0xFF);
   80652:	9b01      	ldr	r3, [sp, #4]
   80654:	f806 3c01 	strb.w	r3, [r6, #-1]
   80658:	e017      	b.n	8068a <usart_serial_read_packet+0x82>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   8065a:	4b1a      	ldr	r3, [pc, #104]	; (806c4 <usart_serial_read_packet+0xbc>)
   8065c:	429d      	cmp	r5, r3
   8065e:	d109      	bne.n	80674 <usart_serial_read_packet+0x6c>
		while (usart_read(p_usart, &val));
   80660:	4699      	mov	r9, r3
   80662:	4648      	mov	r0, r9
   80664:	a901      	add	r1, sp, #4
   80666:	47a0      	blx	r4
   80668:	2800      	cmp	r0, #0
   8066a:	d1fa      	bne.n	80662 <usart_serial_read_packet+0x5a>
		*data = (uint8_t)(val & 0xFF);
   8066c:	9b01      	ldr	r3, [sp, #4]
   8066e:	f806 3c01 	strb.w	r3, [r6, #-1]
   80672:	e014      	b.n	8069e <usart_serial_read_packet+0x96>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   80674:	4555      	cmp	r5, sl
   80676:	d108      	bne.n	8068a <usart_serial_read_packet+0x82>
		while (usart_read(p_usart, &val));
   80678:	4650      	mov	r0, sl
   8067a:	a901      	add	r1, sp, #4
   8067c:	47a0      	blx	r4
   8067e:	2800      	cmp	r0, #0
   80680:	d1fa      	bne.n	80678 <usart_serial_read_packet+0x70>
		*data = (uint8_t)(val & 0xFF);
   80682:	9b01      	ldr	r3, [sp, #4]
   80684:	f806 3c01 	strb.w	r3, [r6, #-1]
   80688:	e009      	b.n	8069e <usart_serial_read_packet+0x96>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   8068a:	42bd      	cmp	r5, r7
   8068c:	d107      	bne.n	8069e <usart_serial_read_packet+0x96>
		while (usart_read(p_usart, &val));
   8068e:	4638      	mov	r0, r7
   80690:	a901      	add	r1, sp, #4
   80692:	47a0      	blx	r4
   80694:	2800      	cmp	r0, #0
   80696:	d1fa      	bne.n	8068e <usart_serial_read_packet+0x86>
		*data = (uint8_t)(val & 0xFF);
   80698:	9b01      	ldr	r3, [sp, #4]
   8069a:	f806 3c01 	strb.w	r3, [r6, #-1]
   8069e:	3601      	adds	r6, #1
   806a0:	f1b8 0801 	subs.w	r8, r8, #1
   806a4:	d1be      	bne.n	80624 <usart_serial_read_packet+0x1c>
		usart_serial_getchar(usart, data);
		len--;
		data++;
	}
	return STATUS_OK;
}
   806a6:	2000      	movs	r0, #0
   806a8:	b003      	add	sp, #12
   806aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   806ae:	bf00      	nop
   806b0:	400a4000 	.word	0x400a4000
   806b4:	0008080d 	.word	0x0008080d
   806b8:	400e0800 	.word	0x400e0800
   806bc:	000807e5 	.word	0x000807e5
   806c0:	40098000 	.word	0x40098000
   806c4:	4009c000 	.word	0x4009c000
   806c8:	400a0000 	.word	0x400a0000

000806cc <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   806cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   806d0:	460c      	mov	r4, r1
   806d2:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
   806d4:	b960      	cbnz	r0, 806f0 <_read+0x24>
		return -1;
	}

	for (; len > 0; --len) {
   806d6:	2a00      	cmp	r2, #0
   806d8:	dd0e      	ble.n	806f8 <_read+0x2c>
   806da:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   806dc:	4e09      	ldr	r6, [pc, #36]	; (80704 <_read+0x38>)
   806de:	4d0a      	ldr	r5, [pc, #40]	; (80708 <_read+0x3c>)
   806e0:	6830      	ldr	r0, [r6, #0]
   806e2:	4621      	mov	r1, r4
   806e4:	682b      	ldr	r3, [r5, #0]
   806e6:	4798      	blx	r3
		ptr++;
   806e8:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   806ea:	42bc      	cmp	r4, r7
   806ec:	d1f8      	bne.n	806e0 <_read+0x14>
   806ee:	e006      	b.n	806fe <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
   806f0:	f04f 30ff 	mov.w	r0, #4294967295
   806f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	for (; len > 0; --len) {
   806f8:	2000      	movs	r0, #0
   806fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
   806fe:	4640      	mov	r0, r8
	}
	return nChars;
}
   80700:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80704:	20078cc0 	.word	0x20078cc0
   80708:	20078cb8 	.word	0x20078cb8

0008070c <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
   8070c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80710:	460e      	mov	r6, r1
   80712:	4615      	mov	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   80714:	3801      	subs	r0, #1
   80716:	2802      	cmp	r0, #2
   80718:	d80f      	bhi.n	8073a <_write+0x2e>
		return -1;
	}

	for (; len != 0; --len) {
   8071a:	b192      	cbz	r2, 80742 <_write+0x36>
   8071c:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
   8071e:	f8df 803c 	ldr.w	r8, [pc, #60]	; 8075c <_write+0x50>
   80722:	4f0d      	ldr	r7, [pc, #52]	; (80758 <_write+0x4c>)
   80724:	f8d8 0000 	ldr.w	r0, [r8]
   80728:	5d31      	ldrb	r1, [r6, r4]
   8072a:	683b      	ldr	r3, [r7, #0]
   8072c:	4798      	blx	r3
   8072e:	2800      	cmp	r0, #0
   80730:	db0a      	blt.n	80748 <_write+0x3c>
			return -1;
		}
		++nChars;
   80732:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   80734:	42a5      	cmp	r5, r4
   80736:	d1f5      	bne.n	80724 <_write+0x18>
   80738:	e00a      	b.n	80750 <_write+0x44>
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
   8073a:	f04f 30ff 	mov.w	r0, #4294967295
   8073e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	for (; len != 0; --len) {
   80742:	2000      	movs	r0, #0
   80744:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
   80748:	f04f 30ff 	mov.w	r0, #4294967295
   8074c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}
		++nChars;
   80750:	4620      	mov	r0, r4
	}
	return nChars;
}
   80752:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80756:	bf00      	nop
   80758:	20078cbc 	.word	0x20078cbc
   8075c:	20078cc0 	.word	0x20078cc0

00080760 <tc_init>:
 * This is because the setting forces TIOB to be an input even if the
 * external event trigger has not been enabled with \c TC_CMR_ENETRG, and
 * thus prevents normal operation of TIOB.
 */
void tc_init(Tc *p_tc, uint32_t ul_channel, uint32_t ul_mode)
{
   80760:	b410      	push	{r4}
	TcChannel *tc_channel;

	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   80762:	0189      	lsls	r1, r1, #6
   80764:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
   80766:	2402      	movs	r4, #2
   80768:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
   8076a:	f04f 31ff 	mov.w	r1, #4294967295
   8076e:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
   80770:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
   80772:	605a      	str	r2, [r3, #4]
}
   80774:	f85d 4b04 	ldr.w	r4, [sp], #4
   80778:	4770      	bx	lr
   8077a:	bf00      	nop

0008077c <tc_set_block_mode>:
 * \param ul_blockmode Block mode register value to set.
 *
 */
void tc_set_block_mode(Tc *p_tc, uint32_t ul_blockmode)
{
	p_tc->TC_BMR = ul_blockmode;
   8077c:	f8c0 10c4 	str.w	r1, [r0, #196]	; 0xc4
   80780:	4770      	bx	lr
   80782:	bf00      	nop

00080784 <tc_start>:
void tc_start(Tc *p_tc, uint32_t ul_channel)
{
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
   80784:	0189      	lsls	r1, r1, #6
   80786:	2305      	movs	r3, #5
   80788:	5043      	str	r3, [r0, r1]
   8078a:	4770      	bx	lr

0008078c <tc_stop>:
void tc_stop(Tc *p_tc, uint32_t ul_channel)
{
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKDIS;
   8078c:	0189      	lsls	r1, r1, #6
   8078e:	2302      	movs	r3, #2
   80790:	5043      	str	r3, [r0, r1]
   80792:	4770      	bx	lr

00080794 <tc_read_cv>:
uint32_t tc_read_cv(Tc *p_tc, uint32_t ul_channel)
{
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	return p_tc->TC_CHANNEL[ul_channel].TC_CV;
   80794:	eb00 1181 	add.w	r1, r0, r1, lsl #6
   80798:	6908      	ldr	r0, [r1, #16]
}
   8079a:	4770      	bx	lr

0008079c <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   8079c:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   8079e:	23ac      	movs	r3, #172	; 0xac
   807a0:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   807a2:	680a      	ldr	r2, [r1, #0]
   807a4:	684b      	ldr	r3, [r1, #4]
   807a6:	fbb2 f3f3 	udiv	r3, r2, r3
   807aa:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   807ac:	1e5c      	subs	r4, r3, #1
   807ae:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   807b2:	4294      	cmp	r4, r2
   807b4:	d80a      	bhi.n	807cc <uart_init+0x30>
		return 1;

	p_uart->UART_BRGR = cd;
   807b6:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   807b8:	688b      	ldr	r3, [r1, #8]
   807ba:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   807bc:	f240 2302 	movw	r3, #514	; 0x202
   807c0:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   807c4:	2350      	movs	r3, #80	; 0x50
   807c6:	6003      	str	r3, [r0, #0]

	return 0;
   807c8:	2000      	movs	r0, #0
   807ca:	e000      	b.n	807ce <uart_init+0x32>

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
		return 1;
   807cc:	2001      	movs	r0, #1

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;

	return 0;
}
   807ce:	f85d 4b04 	ldr.w	r4, [sp], #4
   807d2:	4770      	bx	lr

000807d4 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   807d4:	6943      	ldr	r3, [r0, #20]
   807d6:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
   807da:	bf1a      	itte	ne
   807dc:	61c1      	strne	r1, [r0, #28]
	return 0;
   807de:	2000      	movne	r0, #0
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
   807e0:	2001      	moveq	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
   807e2:	4770      	bx	lr

000807e4 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   807e4:	6943      	ldr	r3, [r0, #20]
   807e6:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   807ea:	bf1d      	ittte	ne
   807ec:	6983      	ldrne	r3, [r0, #24]
   807ee:	700b      	strbne	r3, [r1, #0]
	return 0;
   807f0:	2000      	movne	r0, #0
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
   807f2:	2001      	moveq	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
   807f4:	4770      	bx	lr
   807f6:	bf00      	nop

000807f8 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   807f8:	6943      	ldr	r3, [r0, #20]
   807fa:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   807fe:	bf1d      	ittte	ne
   80800:	f3c1 0108 	ubfxne	r1, r1, #0, #9
   80804:	61c1      	strne	r1, [r0, #28]
	return 0;
   80806:	2000      	movne	r0, #0
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
   80808:	2001      	moveq	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
   8080a:	4770      	bx	lr

0008080c <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   8080c:	6943      	ldr	r3, [r0, #20]
   8080e:	f013 0f01 	tst.w	r3, #1
   80812:	d005      	beq.n	80820 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   80814:	6983      	ldr	r3, [r0, #24]
   80816:	f3c3 0308 	ubfx	r3, r3, #0, #9
   8081a:	600b      	str	r3, [r1, #0]

	return 0;
   8081c:	2000      	movs	r0, #0
   8081e:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
   80820:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
   80822:	4770      	bx	lr

00080824 <vListInitialise>:
void vListInitialise( xList *pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
   80824:	f100 0308 	add.w	r3, r0, #8
   80828:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
   8082a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   8082e:	8102      	strh	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
   80830:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
   80832:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
   80834:	2300      	movs	r3, #0
   80836:	6003      	str	r3, [r0, #0]
   80838:	4770      	bx	lr
   8083a:	bf00      	nop

0008083c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
   8083c:	2300      	movs	r3, #0
   8083e:	6103      	str	r3, [r0, #16]
   80840:	4770      	bx	lr
   80842:	bf00      	nop

00080844 <vListInsertEnd>:

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
   80844:	6843      	ldr	r3, [r0, #4]

	pxNewListItem->pxNext = pxIndex->pxNext;
   80846:	685a      	ldr	r2, [r3, #4]
   80848:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
   8084a:	6842      	ldr	r2, [r0, #4]
   8084c:	608a      	str	r2, [r1, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   8084e:	685a      	ldr	r2, [r3, #4]
   80850:	6091      	str	r1, [r2, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
   80852:	6059      	str	r1, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
   80854:	6041      	str	r1, [r0, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   80856:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
   80858:	6803      	ldr	r3, [r0, #0]
   8085a:	3301      	adds	r3, #1
   8085c:	6003      	str	r3, [r0, #0]
   8085e:	4770      	bx	lr

00080860 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
   80860:	b410      	push	{r4}
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
   80862:	880c      	ldrh	r4, [r1, #0]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
   80864:	f64f 73ff 	movw	r3, #65535	; 0xffff
   80868:	429c      	cmp	r4, r3
   8086a:	d101      	bne.n	80870 <vListInsert+0x10>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
   8086c:	6903      	ldr	r3, [r0, #16]
   8086e:	e00c      	b.n	8088a <vListInsert+0x2a>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/

		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
   80870:	f100 0308 	add.w	r3, r0, #8
   80874:	68c2      	ldr	r2, [r0, #12]
   80876:	8812      	ldrh	r2, [r2, #0]
   80878:	b292      	uxth	r2, r2
   8087a:	4294      	cmp	r4, r2
   8087c:	d305      	bcc.n	8088a <vListInsert+0x2a>
   8087e:	685b      	ldr	r3, [r3, #4]
   80880:	685a      	ldr	r2, [r3, #4]
   80882:	8812      	ldrh	r2, [r2, #0]
   80884:	b292      	uxth	r2, r2
   80886:	4294      	cmp	r4, r2
   80888:	d2f9      	bcs.n	8087e <vListInsert+0x1e>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
   8088a:	685a      	ldr	r2, [r3, #4]
   8088c:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   8088e:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
   80890:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
   80892:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   80894:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
   80896:	6803      	ldr	r3, [r0, #0]
   80898:	3301      	adds	r3, #1
   8089a:	6003      	str	r3, [r0, #0]
}
   8089c:	f85d 4b04 	ldr.w	r4, [sp], #4
   808a0:	4770      	bx	lr
   808a2:	bf00      	nop

000808a4 <uxListRemove>:

unsigned portBASE_TYPE uxListRemove( xListItem *pxItemToRemove )
{
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   808a4:	6843      	ldr	r3, [r0, #4]
   808a6:	6882      	ldr	r2, [r0, #8]
   808a8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   808aa:	6883      	ldr	r3, [r0, #8]
   808ac:	6842      	ldr	r2, [r0, #4]
   808ae:	605a      	str	r2, [r3, #4]

	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
   808b0:	6903      	ldr	r3, [r0, #16]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   808b2:	685a      	ldr	r2, [r3, #4]
   808b4:	4282      	cmp	r2, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   808b6:	bf04      	itt	eq
   808b8:	6882      	ldreq	r2, [r0, #8]
   808ba:	605a      	streq	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
   808bc:	2200      	movs	r2, #0
   808be:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
   808c0:	681a      	ldr	r2, [r3, #0]
   808c2:	3a01      	subs	r2, #1
   808c4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
   808c6:	6818      	ldr	r0, [r3, #0]
}
   808c8:	4770      	bx	lr
   808ca:	bf00      	nop

000808cc <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
   808cc:	4803      	ldr	r0, [pc, #12]	; (808dc <prvPortStartFirstTask+0x10>)
   808ce:	6800      	ldr	r0, [r0, #0]
   808d0:	6800      	ldr	r0, [r0, #0]
   808d2:	f380 8808 	msr	MSP, r0
   808d6:	b662      	cpsie	i
   808d8:	df00      	svc	0
   808da:	bf00      	nop
   808dc:	e000ed08 	.word	0xe000ed08

000808e0 <pxPortInitialiseStack>:
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
   808e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   808e4:	f840 3c04 	str.w	r3, [r0, #-4]
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
   808e8:	f840 1c08 	str.w	r1, [r0, #-8]
	pxTopOfStack--;
	*pxTopOfStack = 0;	/* LR */
   808ec:	2300      	movs	r3, #0
   808ee:	f840 3c0c 	str.w	r3, [r0, #-12]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
   808f2:	f840 2c20 	str.w	r2, [r0, #-32]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */

	return pxTopOfStack;
}
   808f6:	3840      	subs	r0, #64	; 0x40
   808f8:	4770      	bx	lr
   808fa:	bf00      	nop

000808fc <SVC_Handler>:
/*-----------------------------------------------------------*/

__attribute__ (( naked )) void SVC_Handler( void )
{
	__asm volatile (
   808fc:	4b06      	ldr	r3, [pc, #24]	; (80918 <pxCurrentTCBConst2>)
   808fe:	6819      	ldr	r1, [r3, #0]
   80900:	6808      	ldr	r0, [r1, #0]
   80902:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   80906:	f380 8809 	msr	PSP, r0
   8090a:	f04f 0000 	mov.w	r0, #0
   8090e:	f380 8811 	msr	BASEPRI, r0
   80912:	f04e 0e0d 	orr.w	lr, lr, #13
   80916:	4770      	bx	lr

00080918 <pxCurrentTCBConst2>:
   80918:	20078af0 	.word	0x20078af0

0008091c <vPortYieldFromISR>:
/*-----------------------------------------------------------*/

void vPortYieldFromISR( void )
{
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   8091c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   80920:	4b01      	ldr	r3, [pc, #4]	; (80928 <vPortYieldFromISR+0xc>)
   80922:	601a      	str	r2, [r3, #0]
   80924:	4770      	bx	lr
   80926:	bf00      	nop
   80928:	e000ed04 	.word	0xe000ed04

0008092c <ulPortSetInterruptMask>:
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) unsigned long ulPortSetInterruptMask( void )
{
	__asm volatile														\
   8092c:	f3ef 8011 	mrs	r0, BASEPRI
   80930:	f04f 01a0 	mov.w	r1, #160	; 0xa0
   80934:	f381 8811 	msr	BASEPRI, r1
   80938:	4770      	bx	lr
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return 0;
}
   8093a:	2000      	movs	r0, #0

0008093c <vPortEnterCritical>:
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
   8093c:	b508      	push	{r3, lr}
	portDISABLE_INTERRUPTS();
   8093e:	4b03      	ldr	r3, [pc, #12]	; (8094c <vPortEnterCritical+0x10>)
   80940:	4798      	blx	r3
	uxCriticalNesting++;
   80942:	4b03      	ldr	r3, [pc, #12]	; (80950 <vPortEnterCritical+0x14>)
   80944:	681a      	ldr	r2, [r3, #0]
   80946:	3201      	adds	r2, #1
   80948:	601a      	str	r2, [r3, #0]
   8094a:	bd08      	pop	{r3, pc}
   8094c:	0008092d 	.word	0x0008092d
   80950:	2007012c 	.word	0x2007012c

00080954 <vPortClearInterruptMask>:
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) void vPortClearInterruptMask( unsigned long ulNewMaskValue )
{
	__asm volatile													\
   80954:	f380 8811 	msr	BASEPRI, r0
   80958:	4770      	bx	lr
   8095a:	bf00      	nop

0008095c <vPortExitCritical>:
	uxCriticalNesting++;
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
   8095c:	b508      	push	{r3, lr}
	uxCriticalNesting--;
   8095e:	4a04      	ldr	r2, [pc, #16]	; (80970 <vPortExitCritical+0x14>)
   80960:	6813      	ldr	r3, [r2, #0]
   80962:	3b01      	subs	r3, #1
   80964:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
   80966:	b913      	cbnz	r3, 8096e <vPortExitCritical+0x12>
	{
		portENABLE_INTERRUPTS();
   80968:	2000      	movs	r0, #0
   8096a:	4b02      	ldr	r3, [pc, #8]	; (80974 <vPortExitCritical+0x18>)
   8096c:	4798      	blx	r3
   8096e:	bd08      	pop	{r3, pc}
   80970:	2007012c 	.word	0x2007012c
   80974:	00080955 	.word	0x00080955

00080978 <PendSV_Handler>:

__attribute__(( naked )) void PendSV_Handler( void )
{
	/* This is a naked function. */

	__asm volatile
   80978:	f3ef 8009 	mrs	r0, PSP
   8097c:	4b0c      	ldr	r3, [pc, #48]	; (809b0 <pxCurrentTCBConst>)
   8097e:	681a      	ldr	r2, [r3, #0]
   80980:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   80984:	6010      	str	r0, [r2, #0]
   80986:	e92d 4008 	stmdb	sp!, {r3, lr}
   8098a:	f04f 00a0 	mov.w	r0, #160	; 0xa0
   8098e:	f380 8811 	msr	BASEPRI, r0
   80992:	f000 feeb 	bl	8176c <vTaskSwitchContext>
   80996:	f04f 0000 	mov.w	r0, #0
   8099a:	f380 8811 	msr	BASEPRI, r0
   8099e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   809a2:	6819      	ldr	r1, [r3, #0]
   809a4:	6808      	ldr	r0, [r1, #0]
   809a6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   809aa:	f380 8809 	msr	PSP, r0
   809ae:	4770      	bx	lr

000809b0 <pxCurrentTCBConst>:
   809b0:	20078af0 	.word	0x20078af0

000809b4 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void SysTick_Handler( void )
{
   809b4:	b508      	push	{r3, lr}
	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   809b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   809ba:	4b05      	ldr	r3, [pc, #20]	; (809d0 <SysTick_Handler+0x1c>)
   809bc:	601a      	str	r2, [r3, #0]
	to generate the tick interrupt. */
	#if configUSE_TICKLESS_IDLE == 1
		portNVIC_SYSTICK_LOAD_REG = ulTimerReloadValueForOneTick;
	#endif

	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
   809be:	4b05      	ldr	r3, [pc, #20]	; (809d4 <SysTick_Handler+0x20>)
   809c0:	4798      	blx	r3
	{
		vTaskIncrementTick();
   809c2:	4b05      	ldr	r3, [pc, #20]	; (809d8 <SysTick_Handler+0x24>)
   809c4:	4798      	blx	r3
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
   809c6:	2000      	movs	r0, #0
   809c8:	4b04      	ldr	r3, [pc, #16]	; (809dc <SysTick_Handler+0x28>)
   809ca:	4798      	blx	r3
   809cc:	bd08      	pop	{r3, pc}
   809ce:	bf00      	nop
   809d0:	e000ed04 	.word	0xe000ed04
   809d4:	0008092d 	.word	0x0008092d
   809d8:	000813d1 	.word	0x000813d1
   809dc:	00080955 	.word	0x00080955

000809e0 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = 45UL / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;;
   809e0:	4a03      	ldr	r2, [pc, #12]	; (809f0 <vPortSetupTimerInterrupt+0x10>)
   809e2:	4b04      	ldr	r3, [pc, #16]	; (809f4 <vPortSetupTimerInterrupt+0x14>)
   809e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
   809e6:	2207      	movs	r2, #7
   809e8:	3b04      	subs	r3, #4
   809ea:	601a      	str	r2, [r3, #0]
   809ec:	4770      	bx	lr
   809ee:	bf00      	nop
   809f0:	0001481f 	.word	0x0001481f
   809f4:	e000e014 	.word	0xe000e014

000809f8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
   809f8:	b510      	push	{r4, lr}
	/* configMAX_SYSCALL_INTERRUPT_PRIORITY must not be set to 0.
	See http://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
   809fa:	4b09      	ldr	r3, [pc, #36]	; (80a20 <xPortStartScheduler+0x28>)
   809fc:	681a      	ldr	r2, [r3, #0]
   809fe:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
   80a02:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
   80a04:	681a      	ldr	r2, [r3, #0]
   80a06:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
   80a0a:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
   80a0c:	4b05      	ldr	r3, [pc, #20]	; (80a24 <xPortStartScheduler+0x2c>)
   80a0e:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
   80a10:	2400      	movs	r4, #0
   80a12:	4b05      	ldr	r3, [pc, #20]	; (80a28 <xPortStartScheduler+0x30>)
   80a14:	601c      	str	r4, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
   80a16:	4b05      	ldr	r3, [pc, #20]	; (80a2c <xPortStartScheduler+0x34>)
   80a18:	4798      	blx	r3

	/* Should not get here! */
	return 0;
}
   80a1a:	4620      	mov	r0, r4
   80a1c:	bd10      	pop	{r4, pc}
   80a1e:	bf00      	nop
   80a20:	e000ed20 	.word	0xe000ed20
   80a24:	000809e1 	.word	0x000809e1
   80a28:	2007012c 	.word	0x2007012c
   80a2c:	000808cd 	.word	0x000808cd

00080a30 <prvInsertBlockIntoFreeList>:
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( xBlockLink *pxBlockToInsert )
{
   80a30:	b430      	push	{r4, r5}
xBlockLink *pxIterator;
unsigned char *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
   80a32:	4a13      	ldr	r2, [pc, #76]	; (80a80 <prvInsertBlockIntoFreeList+0x50>)
   80a34:	6813      	ldr	r3, [r2, #0]
   80a36:	4283      	cmp	r3, r0
   80a38:	d201      	bcs.n	80a3e <prvInsertBlockIntoFreeList+0xe>
   80a3a:	461a      	mov	r2, r3
   80a3c:	e7fa      	b.n	80a34 <prvInsertBlockIntoFreeList+0x4>
   80a3e:	4611      	mov	r1, r2
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */	
	puc = ( unsigned char * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( unsigned char * ) pxBlockToInsert )
   80a40:	6854      	ldr	r4, [r2, #4]
   80a42:	1915      	adds	r5, r2, r4
   80a44:	4285      	cmp	r5, r0
   80a46:	d103      	bne.n	80a50 <prvInsertBlockIntoFreeList+0x20>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
   80a48:	6868      	ldr	r0, [r5, #4]
   80a4a:	4404      	add	r4, r0
   80a4c:	6054      	str	r4, [r2, #4]
   80a4e:	4610      	mov	r0, r2
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( unsigned char * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( unsigned char * ) pxIterator->pxNextFreeBlock )
   80a50:	6842      	ldr	r2, [r0, #4]
   80a52:	1884      	adds	r4, r0, r2
   80a54:	42a3      	cmp	r3, r4
   80a56:	d10c      	bne.n	80a72 <prvInsertBlockIntoFreeList+0x42>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
   80a58:	4c0a      	ldr	r4, [pc, #40]	; (80a84 <prvInsertBlockIntoFreeList+0x54>)
   80a5a:	6824      	ldr	r4, [r4, #0]
   80a5c:	429c      	cmp	r4, r3
   80a5e:	d006      	beq.n	80a6e <prvInsertBlockIntoFreeList+0x3e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
   80a60:	685b      	ldr	r3, [r3, #4]
   80a62:	441a      	add	r2, r3
   80a64:	6042      	str	r2, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
   80a66:	680b      	ldr	r3, [r1, #0]
   80a68:	681b      	ldr	r3, [r3, #0]
   80a6a:	6003      	str	r3, [r0, #0]
   80a6c:	e002      	b.n	80a74 <prvInsertBlockIntoFreeList+0x44>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
   80a6e:	6003      	str	r3, [r0, #0]
   80a70:	e000      	b.n	80a74 <prvInsertBlockIntoFreeList+0x44>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;		
   80a72:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
   80a74:	4281      	cmp	r1, r0
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
   80a76:	bf18      	it	ne
   80a78:	6008      	strne	r0, [r1, #0]
	}
}
   80a7a:	bc30      	pop	{r4, r5}
   80a7c:	4770      	bx	lr
   80a7e:	bf00      	nop
   80a80:	200789cc 	.word	0x200789cc
   80a84:	200789c8 	.word	0x200789c8

00080a88 <pvPortMalloc>:
/* STATIC FUNCTIONS ARE DEFINED AS MACROS TO MINIMIZE THE FUNCTION CALL DEPTH. */

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
   80a88:	b538      	push	{r3, r4, r5, lr}
   80a8a:	4604      	mov	r4, r0
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
   80a8c:	4b28      	ldr	r3, [pc, #160]	; (80b30 <pvPortMalloc+0xa8>)
   80a8e:	4798      	blx	r3
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
   80a90:	4b28      	ldr	r3, [pc, #160]	; (80b34 <pvPortMalloc+0xac>)
   80a92:	681b      	ldr	r3, [r3, #0]
   80a94:	b99b      	cbnz	r3, 80abe <pvPortMalloc+0x36>
	/* Ensure the start of the heap is aligned. */
	configASSERT( ( ( ( unsigned long ) xHeap.ucHeap ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) xHeap.ucHeap;
   80a96:	4a28      	ldr	r2, [pc, #160]	; (80b38 <pvPortMalloc+0xb0>)
   80a98:	4b28      	ldr	r3, [pc, #160]	; (80b3c <pvPortMalloc+0xb4>)
   80a9a:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
   80a9c:	2100      	movs	r1, #0
   80a9e:	6051      	str	r1, [r2, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	pucHeapEnd = xHeap.ucHeap + xTotalHeapSize;
	pucHeapEnd -= heapSTRUCT_SIZE;
	pxEnd = ( void * ) pucHeapEnd;
   80aa0:	f647 72f0 	movw	r2, #32752	; 0x7ff0
   80aa4:	1898      	adds	r0, r3, r2
   80aa6:	4d23      	ldr	r5, [pc, #140]	; (80b34 <pvPortMalloc+0xac>)
   80aa8:	6028      	str	r0, [r5, #0]
	configASSERT( ( ( ( unsigned long ) pxEnd ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );
	pxEnd->xBlockSize = 0;
   80aaa:	f647 75f4 	movw	r5, #32756	; 0x7ff4
   80aae:	5159      	str	r1, [r3, r5]
	pxEnd->pxNextFreeBlock = NULL;
   80ab0:	5099      	str	r1, [r3, r2]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) xHeap.ucHeap;
	pxFirstFreeBlock->xBlockSize = xTotalHeapSize - heapSTRUCT_SIZE;
   80ab2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
   80ab4:	6018      	str	r0, [r3, #0]

	/* The heap now contains pxEnd. */
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
   80ab6:	4b22      	ldr	r3, [pc, #136]	; (80b40 <pvPortMalloc+0xb8>)
   80ab8:	681a      	ldr	r2, [r3, #0]
   80aba:	3a10      	subs	r2, #16
   80abc:	601a      	str	r2, [r3, #0]
			prvHeapInit();
		}

		/* The wanted size is increased so it can contain a xBlockLink
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
   80abe:	2c00      	cmp	r4, #0
   80ac0:	d02d      	beq.n	80b1e <pvPortMalloc+0x96>
		{
			xWantedSize += heapSTRUCT_SIZE;
   80ac2:	f104 0210 	add.w	r2, r4, #16

			/* Ensure that blocks are always aligned to the required number of 
			bytes. */
			if( xWantedSize & portBYTE_ALIGNMENT_MASK )
   80ac6:	f012 0f07 	tst.w	r2, #7
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
   80aca:	bf1c      	itt	ne
   80acc:	f022 0207 	bicne.w	r2, r2, #7
   80ad0:	3208      	addne	r2, #8
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < xTotalHeapSize ) )
   80ad2:	1e51      	subs	r1, r2, #1
   80ad4:	f647 73fe 	movw	r3, #32766	; 0x7ffe
   80ad8:	4299      	cmp	r1, r3
   80ada:	d822      	bhi.n	80b22 <pvPortMalloc+0x9a>
		{
			/* Traverse the list from the start	(lowest address) block until one
			of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
   80adc:	4916      	ldr	r1, [pc, #88]	; (80b38 <pvPortMalloc+0xb0>)
   80ade:	680c      	ldr	r4, [r1, #0]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   80ae0:	6863      	ldr	r3, [r4, #4]
   80ae2:	429a      	cmp	r2, r3
   80ae4:	d904      	bls.n	80af0 <pvPortMalloc+0x68>
   80ae6:	6823      	ldr	r3, [r4, #0]
   80ae8:	b113      	cbz	r3, 80af0 <pvPortMalloc+0x68>
   80aea:	4621      	mov	r1, r4
			{
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
   80aec:	461c      	mov	r4, r3
   80aee:	e7f7      	b.n	80ae0 <pvPortMalloc+0x58>
			}

			/* If the end marker was reached then a block of adequate size was
			not found. */
			if( pxBlock != pxEnd )
   80af0:	4b10      	ldr	r3, [pc, #64]	; (80b34 <pvPortMalloc+0xac>)
   80af2:	681b      	ldr	r3, [r3, #0]
   80af4:	429c      	cmp	r4, r3
   80af6:	d016      	beq.n	80b26 <pvPortMalloc+0x9e>
			{
				/* Return the memory space - jumping over the xBlockLink structure
				at its start. */
				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
   80af8:	680d      	ldr	r5, [r1, #0]
   80afa:	3510      	adds	r5, #16

				/* This block is being returned for use so must be taken out of
				the	list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
   80afc:	6823      	ldr	r3, [r4, #0]
   80afe:	600b      	str	r3, [r1, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
   80b00:	6863      	ldr	r3, [r4, #4]
   80b02:	1a9b      	subs	r3, r3, r2
   80b04:	2b20      	cmp	r3, #32
   80b06:	d904      	bls.n	80b12 <pvPortMalloc+0x8a>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
   80b08:	18a0      	adds	r0, r4, r2

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
   80b0a:	6043      	str	r3, [r0, #4]
					pxBlock->xBlockSize = xWantedSize;
   80b0c:	6062      	str	r2, [r4, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
   80b0e:	4b0d      	ldr	r3, [pc, #52]	; (80b44 <pvPortMalloc+0xbc>)
   80b10:	4798      	blx	r3
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
   80b12:	4b0b      	ldr	r3, [pc, #44]	; (80b40 <pvPortMalloc+0xb8>)
   80b14:	681a      	ldr	r2, [r3, #0]
   80b16:	6861      	ldr	r1, [r4, #4]
   80b18:	1a52      	subs	r2, r2, r1
   80b1a:	601a      	str	r2, [r3, #0]
   80b1c:	e004      	b.n	80b28 <pvPortMalloc+0xa0>
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
   80b1e:	2500      	movs	r5, #0
   80b20:	e002      	b.n	80b28 <pvPortMalloc+0xa0>
   80b22:	2500      	movs	r5, #0
   80b24:	e000      	b.n	80b28 <pvPortMalloc+0xa0>
   80b26:	2500      	movs	r5, #0

				xFreeBytesRemaining -= pxBlock->xBlockSize;
			}
		}
	}
	xTaskResumeAll();
   80b28:	4b07      	ldr	r3, [pc, #28]	; (80b48 <pvPortMalloc+0xc0>)
   80b2a:	4798      	blx	r3
		}
	}
	#endif

	return pvReturn;
}
   80b2c:	4628      	mov	r0, r5
   80b2e:	bd38      	pop	{r3, r4, r5, pc}
   80b30:	000813a1 	.word	0x000813a1
   80b34:	200789c8 	.word	0x200789c8
   80b38:	200789cc 	.word	0x200789cc
   80b3c:	200709c8 	.word	0x200709c8
   80b40:	20070130 	.word	0x20070130
   80b44:	00080a31 	.word	0x00080a31
   80b48:	000814fd 	.word	0x000814fd

00080b4c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
   80b4c:	b510      	push	{r4, lr}
unsigned char *puc = ( unsigned char * ) pv;
xBlockLink *pxLink;

	if( pv != NULL )
   80b4e:	4604      	mov	r4, r0
   80b50:	b168      	cbz	r0, 80b6e <vPortFree+0x22>
		puc -= heapSTRUCT_SIZE;

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;

		vTaskSuspendAll();
   80b52:	4b07      	ldr	r3, [pc, #28]	; (80b70 <vPortFree+0x24>)
   80b54:	4798      	blx	r3
		{
			/* Add this block to the list of free blocks. */
			xFreeBytesRemaining += pxLink->xBlockSize;
   80b56:	4b07      	ldr	r3, [pc, #28]	; (80b74 <vPortFree+0x28>)
   80b58:	6819      	ldr	r1, [r3, #0]
   80b5a:	f854 2c0c 	ldr.w	r2, [r4, #-12]
   80b5e:	440a      	add	r2, r1
   80b60:	601a      	str	r2, [r3, #0]
			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );			
   80b62:	f1a4 0010 	sub.w	r0, r4, #16
   80b66:	4b04      	ldr	r3, [pc, #16]	; (80b78 <vPortFree+0x2c>)
   80b68:	4798      	blx	r3
		}
		xTaskResumeAll();
   80b6a:	4b04      	ldr	r3, [pc, #16]	; (80b7c <vPortFree+0x30>)
   80b6c:	4798      	blx	r3
   80b6e:	bd10      	pop	{r4, pc}
   80b70:	000813a1 	.word	0x000813a1
   80b74:	20070130 	.word	0x20070130
   80b78:	00080a31 	.word	0x00080a31
   80b7c:	000814fd 	.word	0x000814fd

00080b80 <prvCopyDataToQueue>:

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
   80b80:	b510      	push	{r4, lr}
   80b82:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
   80b84:	6c03      	ldr	r3, [r0, #64]	; 0x40
   80b86:	b93b      	cbnz	r3, 80b98 <prvCopyDataToQueue+0x18>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   80b88:	6803      	ldr	r3, [r0, #0]
   80b8a:	bb1b      	cbnz	r3, 80bd4 <prvCopyDataToQueue+0x54>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
   80b8c:	6840      	ldr	r0, [r0, #4]
   80b8e:	4b13      	ldr	r3, [pc, #76]	; (80bdc <prvCopyDataToQueue+0x5c>)
   80b90:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
   80b92:	2300      	movs	r3, #0
   80b94:	6063      	str	r3, [r4, #4]
   80b96:	e01d      	b.n	80bd4 <prvCopyDataToQueue+0x54>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
   80b98:	b96a      	cbnz	r2, 80bb6 <prvCopyDataToQueue+0x36>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
   80b9a:	6880      	ldr	r0, [r0, #8]
   80b9c:	461a      	mov	r2, r3
   80b9e:	4b10      	ldr	r3, [pc, #64]	; (80be0 <prvCopyDataToQueue+0x60>)
   80ba0:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
   80ba2:	68a2      	ldr	r2, [r4, #8]
   80ba4:	6c23      	ldr	r3, [r4, #64]	; 0x40
   80ba6:	4413      	add	r3, r2
   80ba8:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
   80baa:	6862      	ldr	r2, [r4, #4]
   80bac:	4293      	cmp	r3, r2
   80bae:	d311      	bcc.n	80bd4 <prvCopyDataToQueue+0x54>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
   80bb0:	6823      	ldr	r3, [r4, #0]
   80bb2:	60a3      	str	r3, [r4, #8]
   80bb4:	e00e      	b.n	80bd4 <prvCopyDataToQueue+0x54>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
   80bb6:	68c0      	ldr	r0, [r0, #12]
   80bb8:	461a      	mov	r2, r3
   80bba:	4b09      	ldr	r3, [pc, #36]	; (80be0 <prvCopyDataToQueue+0x60>)
   80bbc:	4798      	blx	r3
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
   80bbe:	6c22      	ldr	r2, [r4, #64]	; 0x40
   80bc0:	4252      	negs	r2, r2
   80bc2:	68e3      	ldr	r3, [r4, #12]
   80bc4:	4413      	add	r3, r2
   80bc6:	60e3      	str	r3, [r4, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
   80bc8:	6821      	ldr	r1, [r4, #0]
   80bca:	428b      	cmp	r3, r1
   80bcc:	d202      	bcs.n	80bd4 <prvCopyDataToQueue+0x54>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
   80bce:	6863      	ldr	r3, [r4, #4]
   80bd0:	441a      	add	r2, r3
   80bd2:	60e2      	str	r2, [r4, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
   80bd4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   80bd6:	3301      	adds	r3, #1
   80bd8:	63a3      	str	r3, [r4, #56]	; 0x38
   80bda:	bd10      	pop	{r4, pc}
   80bdc:	00081a95 	.word	0x00081a95
   80be0:	000828b9 	.word	0x000828b9

00080be4 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
   80be4:	b538      	push	{r3, r4, r5, lr}
   80be6:	4603      	mov	r3, r0
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
   80be8:	6805      	ldr	r5, [r0, #0]
   80bea:	b15d      	cbz	r5, 80c04 <prvCopyDataFromQueue+0x20>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
   80bec:	6c02      	ldr	r2, [r0, #64]	; 0x40
   80bee:	68c4      	ldr	r4, [r0, #12]
   80bf0:	4414      	add	r4, r2
   80bf2:	60c4      	str	r4, [r0, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
   80bf4:	6840      	ldr	r0, [r0, #4]
   80bf6:	4284      	cmp	r4, r0
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
   80bf8:	bf28      	it	cs
   80bfa:	60dd      	strcs	r5, [r3, #12]
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
   80bfc:	4608      	mov	r0, r1
   80bfe:	68d9      	ldr	r1, [r3, #12]
   80c00:	4b01      	ldr	r3, [pc, #4]	; (80c08 <prvCopyDataFromQueue+0x24>)
   80c02:	4798      	blx	r3
   80c04:	bd38      	pop	{r3, r4, r5, pc}
   80c06:	bf00      	nop
   80c08:	000828b9 	.word	0x000828b9

00080c0c <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
   80c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80c0e:	4604      	mov	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
   80c10:	4b1d      	ldr	r3, [pc, #116]	; (80c88 <prvUnlockQueue+0x7c>)
   80c12:	4798      	blx	r3
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
   80c14:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   80c16:	2b00      	cmp	r3, #0
   80c18:	dd12      	ble.n	80c40 <prvUnlockQueue+0x34>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   80c1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   80c1c:	b183      	cbz	r3, 80c40 <prvUnlockQueue+0x34>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   80c1e:	f104 0624 	add.w	r6, r4, #36	; 0x24
   80c22:	4d1a      	ldr	r5, [pc, #104]	; (80c8c <prvUnlockQueue+0x80>)
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
   80c24:	4f1a      	ldr	r7, [pc, #104]	; (80c90 <prvUnlockQueue+0x84>)
   80c26:	e001      	b.n	80c2c <prvUnlockQueue+0x20>
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   80c28:	6a63      	ldr	r3, [r4, #36]	; 0x24
   80c2a:	b14b      	cbz	r3, 80c40 <prvUnlockQueue+0x34>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   80c2c:	4630      	mov	r0, r6
   80c2e:	47a8      	blx	r5
   80c30:	b100      	cbz	r0, 80c34 <prvUnlockQueue+0x28>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
   80c32:	47b8      	blx	r7
				}

				--( pxQueue->xTxLock );
   80c34:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   80c36:	3b01      	subs	r3, #1
   80c38:	64a3      	str	r3, [r4, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
   80c3a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   80c3c:	2b00      	cmp	r3, #0
   80c3e:	dcf3      	bgt.n	80c28 <prvUnlockQueue+0x1c>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
   80c40:	f04f 33ff 	mov.w	r3, #4294967295
   80c44:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
   80c46:	4b13      	ldr	r3, [pc, #76]	; (80c94 <prvUnlockQueue+0x88>)
   80c48:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
   80c4a:	4b0f      	ldr	r3, [pc, #60]	; (80c88 <prvUnlockQueue+0x7c>)
   80c4c:	4798      	blx	r3
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
   80c4e:	6c63      	ldr	r3, [r4, #68]	; 0x44
   80c50:	2b00      	cmp	r3, #0
   80c52:	dd12      	ble.n	80c7a <prvUnlockQueue+0x6e>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   80c54:	6923      	ldr	r3, [r4, #16]
   80c56:	b183      	cbz	r3, 80c7a <prvUnlockQueue+0x6e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   80c58:	f104 0610 	add.w	r6, r4, #16
   80c5c:	4d0b      	ldr	r5, [pc, #44]	; (80c8c <prvUnlockQueue+0x80>)
				{
					vTaskMissedYield();
   80c5e:	4f0c      	ldr	r7, [pc, #48]	; (80c90 <prvUnlockQueue+0x84>)
   80c60:	e001      	b.n	80c66 <prvUnlockQueue+0x5a>
	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   80c62:	6923      	ldr	r3, [r4, #16]
   80c64:	b14b      	cbz	r3, 80c7a <prvUnlockQueue+0x6e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   80c66:	4630      	mov	r0, r6
   80c68:	47a8      	blx	r5
   80c6a:	b100      	cbz	r0, 80c6e <prvUnlockQueue+0x62>
				{
					vTaskMissedYield();
   80c6c:	47b8      	blx	r7
				}

				--( pxQueue->xRxLock );
   80c6e:	6c63      	ldr	r3, [r4, #68]	; 0x44
   80c70:	3b01      	subs	r3, #1
   80c72:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
   80c74:	6c63      	ldr	r3, [r4, #68]	; 0x44
   80c76:	2b00      	cmp	r3, #0
   80c78:	dcf3      	bgt.n	80c62 <prvUnlockQueue+0x56>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
   80c7a:	f04f 33ff 	mov.w	r3, #4294967295
   80c7e:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
   80c80:	4b04      	ldr	r3, [pc, #16]	; (80c94 <prvUnlockQueue+0x88>)
   80c82:	4798      	blx	r3
   80c84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   80c86:	bf00      	nop
   80c88:	0008093d 	.word	0x0008093d
   80c8c:	000818a9 	.word	0x000818a9
   80c90:	000819e1 	.word	0x000819e1
   80c94:	0008095d 	.word	0x0008095d

00080c98 <xQueueGenericReset>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle pxQueue, portBASE_TYPE xNewQueue )
{
   80c98:	b538      	push	{r3, r4, r5, lr}
   80c9a:	460d      	mov	r5, r1
	configASSERT( pxQueue );
   80c9c:	4604      	mov	r4, r0
   80c9e:	b918      	cbnz	r0, 80ca8 <xQueueGenericReset+0x10>
   80ca0:	4b16      	ldr	r3, [pc, #88]	; (80cfc <xQueueGenericReset+0x64>)
   80ca2:	4798      	blx	r3
   80ca4:	bf00      	nop
   80ca6:	e7fd      	b.n	80ca4 <xQueueGenericReset+0xc>

	taskENTER_CRITICAL();
   80ca8:	4b15      	ldr	r3, [pc, #84]	; (80d00 <xQueueGenericReset+0x68>)
   80caa:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
   80cac:	6823      	ldr	r3, [r4, #0]
   80cae:	6c22      	ldr	r2, [r4, #64]	; 0x40
   80cb0:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   80cb2:	fb00 f002 	mul.w	r0, r0, r2
   80cb6:	1819      	adds	r1, r3, r0
   80cb8:	6061      	str	r1, [r4, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
   80cba:	2100      	movs	r1, #0
   80cbc:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
   80cbe:	60a3      	str	r3, [r4, #8]
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
   80cc0:	1a82      	subs	r2, r0, r2
   80cc2:	4413      	add	r3, r2
   80cc4:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
   80cc6:	f04f 33ff 	mov.w	r3, #4294967295
   80cca:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
   80ccc:	64a3      	str	r3, [r4, #72]	; 0x48

		if( xNewQueue == pdFALSE )
   80cce:	b955      	cbnz	r5, 80ce6 <xQueueGenericReset+0x4e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to	write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   80cd0:	6923      	ldr	r3, [r4, #16]
   80cd2:	b17b      	cbz	r3, 80cf4 <xQueueGenericReset+0x5c>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
   80cd4:	f104 0010 	add.w	r0, r4, #16
   80cd8:	4b0a      	ldr	r3, [pc, #40]	; (80d04 <xQueueGenericReset+0x6c>)
   80cda:	4798      	blx	r3
   80cdc:	2801      	cmp	r0, #1
   80cde:	d109      	bne.n	80cf4 <xQueueGenericReset+0x5c>
				{
					portYIELD_WITHIN_API();
   80ce0:	4b09      	ldr	r3, [pc, #36]	; (80d08 <xQueueGenericReset+0x70>)
   80ce2:	4798      	blx	r3
   80ce4:	e006      	b.n	80cf4 <xQueueGenericReset+0x5c>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
   80ce6:	f104 0010 	add.w	r0, r4, #16
   80cea:	4d08      	ldr	r5, [pc, #32]	; (80d0c <xQueueGenericReset+0x74>)
   80cec:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
   80cee:	f104 0024 	add.w	r0, r4, #36	; 0x24
   80cf2:	47a8      	blx	r5
		}
	}
	taskEXIT_CRITICAL();
   80cf4:	4b06      	ldr	r3, [pc, #24]	; (80d10 <xQueueGenericReset+0x78>)
   80cf6:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
   80cf8:	2001      	movs	r0, #1
   80cfa:	bd38      	pop	{r3, r4, r5, pc}
   80cfc:	0008092d 	.word	0x0008092d
   80d00:	0008093d 	.word	0x0008093d
   80d04:	000818a9 	.word	0x000818a9
   80d08:	0008091d 	.word	0x0008091d
   80d0c:	00080825 	.word	0x00080825
   80d10:	0008095d 	.word	0x0008095d

00080d14 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
   80d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80d16:	460d      	mov	r5, r1
   80d18:	4617      	mov	r7, r2
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
   80d1a:	4606      	mov	r6, r0
   80d1c:	b188      	cbz	r0, 80d42 <xQueueGenericCreate+0x2e>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
   80d1e:	2050      	movs	r0, #80	; 0x50
   80d20:	4b0e      	ldr	r3, [pc, #56]	; (80d5c <xQueueGenericCreate+0x48>)
   80d22:	4798      	blx	r3
		if( pxNewQueue != NULL )
   80d24:	4604      	mov	r4, r0
   80d26:	b160      	cbz	r0, 80d42 <xQueueGenericCreate+0x2e>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
   80d28:	fb05 f006 	mul.w	r0, r5, r6

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
   80d2c:	3001      	adds	r0, #1
   80d2e:	4b0b      	ldr	r3, [pc, #44]	; (80d5c <xQueueGenericCreate+0x48>)
   80d30:	4798      	blx	r3
   80d32:	6020      	str	r0, [r4, #0]
			if( pxNewQueue->pcHead != NULL )
   80d34:	b940      	cbnz	r0, 80d48 <xQueueGenericCreate+0x34>
				xReturn = pxNewQueue;
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
   80d36:	4620      	mov	r0, r4
   80d38:	4b09      	ldr	r3, [pc, #36]	; (80d60 <xQueueGenericCreate+0x4c>)
   80d3a:	4798      	blx	r3
   80d3c:	e001      	b.n	80d42 <xQueueGenericCreate+0x2e>
			}
		}
	}

	configASSERT( xReturn );
   80d3e:	bf00      	nop
   80d40:	e7fd      	b.n	80d3e <xQueueGenericCreate+0x2a>
   80d42:	4b08      	ldr	r3, [pc, #32]	; (80d64 <xQueueGenericCreate+0x50>)
   80d44:	4798      	blx	r3
   80d46:	e7fa      	b.n	80d3e <xQueueGenericCreate+0x2a>
			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
			if( pxNewQueue->pcHead != NULL )
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
   80d48:	63e6      	str	r6, [r4, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
   80d4a:	6425      	str	r5, [r4, #64]	; 0x40
				xQueueGenericReset( pxNewQueue, pdTRUE );
   80d4c:	4620      	mov	r0, r4
   80d4e:	2101      	movs	r1, #1
   80d50:	4b05      	ldr	r3, [pc, #20]	; (80d68 <xQueueGenericCreate+0x54>)
   80d52:	4798      	blx	r3
				#if ( configUSE_TRACE_FACILITY == 1 )
				{
					pxNewQueue->ucQueueType = ucQueueType;
   80d54:	f884 704d 	strb.w	r7, [r4, #77]	; 0x4d
	}

	configASSERT( xReturn );

	return xReturn;
}
   80d58:	4620      	mov	r0, r4
   80d5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   80d5c:	00080a89 	.word	0x00080a89
   80d60:	00080b4d 	.word	0x00080b4d
   80d64:	0008092d 	.word	0x0008092d
   80d68:	00080c99 	.word	0x00080c99

00080d6c <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
   80d6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80d70:	b085      	sub	sp, #20
   80d72:	468a      	mov	sl, r1
   80d74:	469b      	mov	fp, r3
   80d76:	f8ad 2006 	strh.w	r2, [sp, #6]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
xTimeOutType xTimeOut;

	configASSERT( pxQueue );
   80d7a:	4604      	mov	r4, r0
   80d7c:	b918      	cbnz	r0, 80d86 <xQueueGenericSend+0x1a>
   80d7e:	4b38      	ldr	r3, [pc, #224]	; (80e60 <xQueueGenericSend+0xf4>)
   80d80:	4798      	blx	r3
   80d82:	bf00      	nop
   80d84:	e7fd      	b.n	80d82 <xQueueGenericSend+0x16>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   80d86:	b909      	cbnz	r1, 80d8c <xQueueGenericSend+0x20>
   80d88:	6c03      	ldr	r3, [r0, #64]	; 0x40
   80d8a:	b91b      	cbnz	r3, 80d94 <xQueueGenericSend+0x28>

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
   80d8c:	2700      	movs	r7, #0
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   80d8e:	4e35      	ldr	r6, [pc, #212]	; (80e64 <xQueueGenericSend+0xf8>)
					vTaskSetTimeOutState( &xTimeOut );
					xEntryTimeSet = pdTRUE;
				}
			}
		}
		taskEXIT_CRITICAL();
   80d90:	4d35      	ldr	r5, [pc, #212]	; (80e68 <xQueueGenericSend+0xfc>)
   80d92:	e003      	b.n	80d9c <xQueueGenericSend+0x30>
{
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
xTimeOutType xTimeOut;

	configASSERT( pxQueue );
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   80d94:	4b32      	ldr	r3, [pc, #200]	; (80e60 <xQueueGenericSend+0xf4>)
   80d96:	4798      	blx	r3
   80d98:	bf00      	nop
   80d9a:	e7fd      	b.n	80d98 <xQueueGenericSend+0x2c>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   80d9c:	47b0      	blx	r6
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
   80d9e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   80da0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   80da2:	429a      	cmp	r2, r3
   80da4:	d212      	bcs.n	80dcc <xQueueGenericSend+0x60>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   80da6:	4620      	mov	r0, r4
   80da8:	4651      	mov	r1, sl
   80daa:	465a      	mov	r2, fp
   80dac:	4b2f      	ldr	r3, [pc, #188]	; (80e6c <xQueueGenericSend+0x100>)
   80dae:	4798      	blx	r3

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   80db0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   80db2:	b13b      	cbz	r3, 80dc4 <xQueueGenericSend+0x58>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
   80db4:	f104 0024 	add.w	r0, r4, #36	; 0x24
   80db8:	4b2d      	ldr	r3, [pc, #180]	; (80e70 <xQueueGenericSend+0x104>)
   80dba:	4798      	blx	r3
   80dbc:	2801      	cmp	r0, #1
   80dbe:	d101      	bne.n	80dc4 <xQueueGenericSend+0x58>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
   80dc0:	4b2c      	ldr	r3, [pc, #176]	; (80e74 <xQueueGenericSend+0x108>)
   80dc2:	4798      	blx	r3
					}
				}

				taskEXIT_CRITICAL();
   80dc4:	4b28      	ldr	r3, [pc, #160]	; (80e68 <xQueueGenericSend+0xfc>)
   80dc6:	4798      	blx	r3

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
   80dc8:	2001      	movs	r0, #1
   80dca:	e046      	b.n	80e5a <xQueueGenericSend+0xee>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
   80dcc:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   80dd0:	b91b      	cbnz	r3, 80dda <xQueueGenericSend+0x6e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   80dd2:	4b25      	ldr	r3, [pc, #148]	; (80e68 <xQueueGenericSend+0xfc>)
   80dd4:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
   80dd6:	2000      	movs	r0, #0
   80dd8:	e03f      	b.n	80e5a <xQueueGenericSend+0xee>
				}
				else if( xEntryTimeSet == pdFALSE )
   80dda:	b91f      	cbnz	r7, 80de4 <xQueueGenericSend+0x78>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   80ddc:	a802      	add	r0, sp, #8
   80dde:	4b26      	ldr	r3, [pc, #152]	; (80e78 <xQueueGenericSend+0x10c>)
   80de0:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   80de2:	2701      	movs	r7, #1
				}
			}
		}
		taskEXIT_CRITICAL();
   80de4:	47a8      	blx	r5

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   80de6:	4b25      	ldr	r3, [pc, #148]	; (80e7c <xQueueGenericSend+0x110>)
   80de8:	4798      	blx	r3
		prvLockQueue( pxQueue );
   80dea:	47b0      	blx	r6
   80dec:	6c63      	ldr	r3, [r4, #68]	; 0x44
   80dee:	f1b3 3fff 	cmp.w	r3, #4294967295
   80df2:	bf04      	itt	eq
   80df4:	2300      	moveq	r3, #0
   80df6:	6463      	streq	r3, [r4, #68]	; 0x44
   80df8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   80dfa:	f1b3 3fff 	cmp.w	r3, #4294967295
   80dfe:	bf04      	itt	eq
   80e00:	2300      	moveq	r3, #0
   80e02:	64a3      	streq	r3, [r4, #72]	; 0x48
   80e04:	47a8      	blx	r5

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   80e06:	a802      	add	r0, sp, #8
   80e08:	f10d 0106 	add.w	r1, sp, #6
   80e0c:	4b1c      	ldr	r3, [pc, #112]	; (80e80 <xQueueGenericSend+0x114>)
   80e0e:	4798      	blx	r3
   80e10:	b9e8      	cbnz	r0, 80e4e <xQueueGenericSend+0xe2>

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
   80e12:	47b0      	blx	r6
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
   80e14:	f8d4 9038 	ldr.w	r9, [r4, #56]	; 0x38
   80e18:	f8d4 803c 	ldr.w	r8, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
   80e1c:	47a8      	blx	r5
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
   80e1e:	45c1      	cmp	r9, r8
   80e20:	d10f      	bne.n	80e42 <xQueueGenericSend+0xd6>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
   80e22:	f104 0010 	add.w	r0, r4, #16
   80e26:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   80e2a:	4b16      	ldr	r3, [pc, #88]	; (80e84 <xQueueGenericSend+0x118>)
   80e2c:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
   80e2e:	4620      	mov	r0, r4
   80e30:	4b15      	ldr	r3, [pc, #84]	; (80e88 <xQueueGenericSend+0x11c>)
   80e32:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
   80e34:	4b15      	ldr	r3, [pc, #84]	; (80e8c <xQueueGenericSend+0x120>)
   80e36:	4798      	blx	r3
   80e38:	2800      	cmp	r0, #0
   80e3a:	d1af      	bne.n	80d9c <xQueueGenericSend+0x30>
				{
					portYIELD_WITHIN_API();
   80e3c:	4b0d      	ldr	r3, [pc, #52]	; (80e74 <xQueueGenericSend+0x108>)
   80e3e:	4798      	blx	r3
   80e40:	e7ac      	b.n	80d9c <xQueueGenericSend+0x30>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   80e42:	4620      	mov	r0, r4
   80e44:	4b10      	ldr	r3, [pc, #64]	; (80e88 <xQueueGenericSend+0x11c>)
   80e46:	4798      	blx	r3
				( void ) xTaskResumeAll();
   80e48:	4b10      	ldr	r3, [pc, #64]	; (80e8c <xQueueGenericSend+0x120>)
   80e4a:	4798      	blx	r3
   80e4c:	e7a6      	b.n	80d9c <xQueueGenericSend+0x30>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
   80e4e:	4620      	mov	r0, r4
   80e50:	4b0d      	ldr	r3, [pc, #52]	; (80e88 <xQueueGenericSend+0x11c>)
   80e52:	4798      	blx	r3
			( void ) xTaskResumeAll();
   80e54:	4b0d      	ldr	r3, [pc, #52]	; (80e8c <xQueueGenericSend+0x120>)
   80e56:	4798      	blx	r3

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
   80e58:	2000      	movs	r0, #0
		}
	}
}
   80e5a:	b005      	add	sp, #20
   80e5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80e60:	0008092d 	.word	0x0008092d
   80e64:	0008093d 	.word	0x0008093d
   80e68:	0008095d 	.word	0x0008095d
   80e6c:	00080b81 	.word	0x00080b81
   80e70:	000818a9 	.word	0x000818a9
   80e74:	0008091d 	.word	0x0008091d
   80e78:	0008192d 	.word	0x0008192d
   80e7c:	000813a1 	.word	0x000813a1
   80e80:	00081955 	.word	0x00081955
   80e84:	000817fd 	.word	0x000817fd
   80e88:	00080c0d 	.word	0x00080c0d
   80e8c:	000814fd 	.word	0x000814fd

00080e90 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
   80e90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80e94:	460e      	mov	r6, r1
   80e96:	4615      	mov	r5, r2
   80e98:	4698      	mov	r8, r3
signed portBASE_TYPE xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	configASSERT( pxQueue );
   80e9a:	4604      	mov	r4, r0
   80e9c:	b918      	cbnz	r0, 80ea6 <xQueueGenericSendFromISR+0x16>
   80e9e:	4b1c      	ldr	r3, [pc, #112]	; (80f10 <xQueueGenericSendFromISR+0x80>)
   80ea0:	4798      	blx	r3
   80ea2:	bf00      	nop
   80ea4:	e7fd      	b.n	80ea2 <xQueueGenericSendFromISR+0x12>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   80ea6:	b929      	cbnz	r1, 80eb4 <xQueueGenericSendFromISR+0x24>
   80ea8:	6c03      	ldr	r3, [r0, #64]	; 0x40
   80eaa:	b11b      	cbz	r3, 80eb4 <xQueueGenericSendFromISR+0x24>
   80eac:	4b18      	ldr	r3, [pc, #96]	; (80f10 <xQueueGenericSendFromISR+0x80>)
   80eae:	4798      	blx	r3
   80eb0:	bf00      	nop
   80eb2:	e7fd      	b.n	80eb0 <xQueueGenericSendFromISR+0x20>
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   80eb4:	4b16      	ldr	r3, [pc, #88]	; (80f10 <xQueueGenericSendFromISR+0x80>)
   80eb6:	4798      	blx	r3
   80eb8:	4607      	mov	r7, r0
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
   80eba:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   80ebc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   80ebe:	429a      	cmp	r2, r3
   80ec0:	d218      	bcs.n	80ef4 <xQueueGenericSendFromISR+0x64>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   80ec2:	4620      	mov	r0, r4
   80ec4:	4631      	mov	r1, r6
   80ec6:	4642      	mov	r2, r8
   80ec8:	4b12      	ldr	r3, [pc, #72]	; (80f14 <xQueueGenericSendFromISR+0x84>)
   80eca:	4798      	blx	r3

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
   80ecc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   80ece:	f1b3 3fff 	cmp.w	r3, #4294967295
   80ed2:	d10a      	bne.n	80eea <xQueueGenericSendFromISR+0x5a>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   80ed4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   80ed6:	b17b      	cbz	r3, 80ef8 <xQueueGenericSendFromISR+0x68>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   80ed8:	f104 0024 	add.w	r0, r4, #36	; 0x24
   80edc:	4b0e      	ldr	r3, [pc, #56]	; (80f18 <xQueueGenericSendFromISR+0x88>)
   80ede:	4798      	blx	r3
   80ee0:	b160      	cbz	r0, 80efc <xQueueGenericSendFromISR+0x6c>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						if( pxHigherPriorityTaskWoken != NULL )
   80ee2:	b16d      	cbz	r5, 80f00 <xQueueGenericSendFromISR+0x70>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
   80ee4:	2401      	movs	r4, #1
   80ee6:	602c      	str	r4, [r5, #0]
   80ee8:	e00b      	b.n	80f02 <xQueueGenericSendFromISR+0x72>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
   80eea:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   80eec:	3301      	adds	r3, #1
   80eee:	64a3      	str	r3, [r4, #72]	; 0x48
			}

			xReturn = pdPASS;
   80ef0:	2401      	movs	r4, #1
   80ef2:	e006      	b.n	80f02 <xQueueGenericSendFromISR+0x72>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
   80ef4:	2400      	movs	r4, #0
   80ef6:	e004      	b.n	80f02 <xQueueGenericSendFromISR+0x72>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
			}

			xReturn = pdPASS;
   80ef8:	2401      	movs	r4, #1
   80efa:	e002      	b.n	80f02 <xQueueGenericSendFromISR+0x72>
   80efc:	2401      	movs	r4, #1
   80efe:	e000      	b.n	80f02 <xQueueGenericSendFromISR+0x72>
   80f00:	2401      	movs	r4, #1
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   80f02:	4638      	mov	r0, r7
   80f04:	4b05      	ldr	r3, [pc, #20]	; (80f1c <xQueueGenericSendFromISR+0x8c>)
   80f06:	4798      	blx	r3

	return xReturn;
}
   80f08:	4620      	mov	r0, r4
   80f0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80f0e:	bf00      	nop
   80f10:	0008092d 	.word	0x0008092d
   80f14:	00080b81 	.word	0x00080b81
   80f18:	000818a9 	.word	0x000818a9
   80f1c:	00080955 	.word	0x00080955

00080f20 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
   80f20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80f24:	b085      	sub	sp, #20
   80f26:	4689      	mov	r9, r1
   80f28:	469a      	mov	sl, r3
   80f2a:	f8ad 2006 	strh.w	r2, [sp, #6]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
xTimeOutType xTimeOut;
signed char *pcOriginalReadPosition;

	configASSERT( pxQueue );
   80f2e:	4604      	mov	r4, r0
   80f30:	b918      	cbnz	r0, 80f3a <xQueueGenericReceive+0x1a>
   80f32:	4b46      	ldr	r3, [pc, #280]	; (8104c <xQueueGenericReceive+0x12c>)
   80f34:	4798      	blx	r3
   80f36:	bf00      	nop
   80f38:	e7fd      	b.n	80f36 <xQueueGenericReceive+0x16>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   80f3a:	b909      	cbnz	r1, 80f40 <xQueueGenericReceive+0x20>
   80f3c:	6c03      	ldr	r3, [r0, #64]	; 0x40
   80f3e:	b92b      	cbnz	r3, 80f4c <xQueueGenericReceive+0x2c>
	return xReturn;
}
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
   80f40:	2700      	movs	r7, #0
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   80f42:	4e43      	ldr	r6, [pc, #268]	; (81050 <xQueueGenericReceive+0x130>)
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   80f44:	f8df b138 	ldr.w	fp, [pc, #312]	; 81080 <xQueueGenericReceive+0x160>
					xEntryTimeSet = pdTRUE;
				}
			}
		}
		taskEXIT_CRITICAL();
   80f48:	4d42      	ldr	r5, [pc, #264]	; (81054 <xQueueGenericReceive+0x134>)
   80f4a:	e003      	b.n	80f54 <xQueueGenericReceive+0x34>
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
xTimeOutType xTimeOut;
signed char *pcOriginalReadPosition;

	configASSERT( pxQueue );
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   80f4c:	4b3f      	ldr	r3, [pc, #252]	; (8104c <xQueueGenericReceive+0x12c>)
   80f4e:	4798      	blx	r3
   80f50:	bf00      	nop
   80f52:	e7fd      	b.n	80f50 <xQueueGenericReceive+0x30>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   80f54:	47b0      	blx	r6
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
   80f56:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   80f58:	2b00      	cmp	r3, #0
   80f5a:	d028      	beq.n	80fae <xQueueGenericReceive+0x8e>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
   80f5c:	68e5      	ldr	r5, [r4, #12]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
   80f5e:	4620      	mov	r0, r4
   80f60:	4649      	mov	r1, r9
   80f62:	4b3d      	ldr	r3, [pc, #244]	; (81058 <xQueueGenericReceive+0x138>)
   80f64:	4798      	blx	r3

				if( xJustPeeking == pdFALSE )
   80f66:	f1ba 0f00 	cmp.w	sl, #0
   80f6a:	d112      	bne.n	80f92 <xQueueGenericReceive+0x72>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
   80f6c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   80f6e:	3b01      	subs	r3, #1
   80f70:	63a3      	str	r3, [r4, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   80f72:	6823      	ldr	r3, [r4, #0]
   80f74:	b913      	cbnz	r3, 80f7c <xQueueGenericReceive+0x5c>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
   80f76:	4b39      	ldr	r3, [pc, #228]	; (8105c <xQueueGenericReceive+0x13c>)
   80f78:	4798      	blx	r3
   80f7a:	6060      	str	r0, [r4, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   80f7c:	6923      	ldr	r3, [r4, #16]
   80f7e:	b193      	cbz	r3, 80fa6 <xQueueGenericReceive+0x86>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
   80f80:	f104 0010 	add.w	r0, r4, #16
   80f84:	4b36      	ldr	r3, [pc, #216]	; (81060 <xQueueGenericReceive+0x140>)
   80f86:	4798      	blx	r3
   80f88:	2801      	cmp	r0, #1
   80f8a:	d10c      	bne.n	80fa6 <xQueueGenericReceive+0x86>
						{
							portYIELD_WITHIN_API();
   80f8c:	4b35      	ldr	r3, [pc, #212]	; (81064 <xQueueGenericReceive+0x144>)
   80f8e:	4798      	blx	r3
   80f90:	e009      	b.n	80fa6 <xQueueGenericReceive+0x86>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
   80f92:	60e5      	str	r5, [r4, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   80f94:	6a63      	ldr	r3, [r4, #36]	; 0x24
   80f96:	b133      	cbz	r3, 80fa6 <xQueueGenericReceive+0x86>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   80f98:	f104 0024 	add.w	r0, r4, #36	; 0x24
   80f9c:	4b30      	ldr	r3, [pc, #192]	; (81060 <xQueueGenericReceive+0x140>)
   80f9e:	4798      	blx	r3
   80fa0:	b108      	cbz	r0, 80fa6 <xQueueGenericReceive+0x86>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
   80fa2:	4b30      	ldr	r3, [pc, #192]	; (81064 <xQueueGenericReceive+0x144>)
   80fa4:	4798      	blx	r3
						}
					}
				}

				taskEXIT_CRITICAL();
   80fa6:	4b2b      	ldr	r3, [pc, #172]	; (81054 <xQueueGenericReceive+0x134>)
   80fa8:	4798      	blx	r3
				return pdPASS;
   80faa:	2001      	movs	r0, #1
   80fac:	e04b      	b.n	81046 <xQueueGenericReceive+0x126>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
   80fae:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   80fb2:	b91b      	cbnz	r3, 80fbc <xQueueGenericReceive+0x9c>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   80fb4:	4b27      	ldr	r3, [pc, #156]	; (81054 <xQueueGenericReceive+0x134>)
   80fb6:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
   80fb8:	2000      	movs	r0, #0
   80fba:	e044      	b.n	81046 <xQueueGenericReceive+0x126>
				}
				else if( xEntryTimeSet == pdFALSE )
   80fbc:	b917      	cbnz	r7, 80fc4 <xQueueGenericReceive+0xa4>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   80fbe:	a802      	add	r0, sp, #8
   80fc0:	47d8      	blx	fp
					xEntryTimeSet = pdTRUE;
   80fc2:	2701      	movs	r7, #1
				}
			}
		}
		taskEXIT_CRITICAL();
   80fc4:	47a8      	blx	r5

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   80fc6:	4b28      	ldr	r3, [pc, #160]	; (81068 <xQueueGenericReceive+0x148>)
   80fc8:	4798      	blx	r3
		prvLockQueue( pxQueue );
   80fca:	47b0      	blx	r6
   80fcc:	6c63      	ldr	r3, [r4, #68]	; 0x44
   80fce:	f1b3 3fff 	cmp.w	r3, #4294967295
   80fd2:	bf04      	itt	eq
   80fd4:	2300      	moveq	r3, #0
   80fd6:	6463      	streq	r3, [r4, #68]	; 0x44
   80fd8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   80fda:	f1b3 3fff 	cmp.w	r3, #4294967295
   80fde:	bf04      	itt	eq
   80fe0:	2300      	moveq	r3, #0
   80fe2:	64a3      	streq	r3, [r4, #72]	; 0x48
   80fe4:	47a8      	blx	r5

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   80fe6:	a802      	add	r0, sp, #8
   80fe8:	f10d 0106 	add.w	r1, sp, #6
   80fec:	4b1f      	ldr	r3, [pc, #124]	; (8106c <xQueueGenericReceive+0x14c>)
   80fee:	4798      	blx	r3
   80ff0:	bb18      	cbnz	r0, 8103a <xQueueGenericReceive+0x11a>

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
   80ff2:	47b0      	blx	r6
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
   80ff4:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
   80ff8:	47a8      	blx	r5
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   80ffa:	f1b8 0f00 	cmp.w	r8, #0
   80ffe:	d116      	bne.n	8102e <xQueueGenericReceive+0x10e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   81000:	6823      	ldr	r3, [r4, #0]
   81002:	b923      	cbnz	r3, 8100e <xQueueGenericReceive+0xee>
					{
						portENTER_CRITICAL();
   81004:	47b0      	blx	r6
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
   81006:	6860      	ldr	r0, [r4, #4]
   81008:	4b19      	ldr	r3, [pc, #100]	; (81070 <xQueueGenericReceive+0x150>)
   8100a:	4798      	blx	r3
						}
						portEXIT_CRITICAL();
   8100c:	47a8      	blx	r5
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   8100e:	f104 0024 	add.w	r0, r4, #36	; 0x24
   81012:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   81016:	4b17      	ldr	r3, [pc, #92]	; (81074 <xQueueGenericReceive+0x154>)
   81018:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   8101a:	4620      	mov	r0, r4
   8101c:	4b16      	ldr	r3, [pc, #88]	; (81078 <xQueueGenericReceive+0x158>)
   8101e:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   81020:	4b16      	ldr	r3, [pc, #88]	; (8107c <xQueueGenericReceive+0x15c>)
   81022:	4798      	blx	r3
   81024:	2800      	cmp	r0, #0
   81026:	d195      	bne.n	80f54 <xQueueGenericReceive+0x34>
				{
					portYIELD_WITHIN_API();
   81028:	4b0e      	ldr	r3, [pc, #56]	; (81064 <xQueueGenericReceive+0x144>)
   8102a:	4798      	blx	r3
   8102c:	e792      	b.n	80f54 <xQueueGenericReceive+0x34>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   8102e:	4620      	mov	r0, r4
   81030:	4b11      	ldr	r3, [pc, #68]	; (81078 <xQueueGenericReceive+0x158>)
   81032:	4798      	blx	r3
				( void ) xTaskResumeAll();
   81034:	4b11      	ldr	r3, [pc, #68]	; (8107c <xQueueGenericReceive+0x15c>)
   81036:	4798      	blx	r3
   81038:	e78c      	b.n	80f54 <xQueueGenericReceive+0x34>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
   8103a:	4620      	mov	r0, r4
   8103c:	4b0e      	ldr	r3, [pc, #56]	; (81078 <xQueueGenericReceive+0x158>)
   8103e:	4798      	blx	r3
			( void ) xTaskResumeAll();
   81040:	4b0e      	ldr	r3, [pc, #56]	; (8107c <xQueueGenericReceive+0x15c>)
   81042:	4798      	blx	r3
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
   81044:	2000      	movs	r0, #0
		}
	}
}
   81046:	b005      	add	sp, #20
   81048:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8104c:	0008092d 	.word	0x0008092d
   81050:	0008093d 	.word	0x0008093d
   81054:	0008095d 	.word	0x0008095d
   81058:	00080be5 	.word	0x00080be5
   8105c:	000819ed 	.word	0x000819ed
   81060:	000818a9 	.word	0x000818a9
   81064:	0008091d 	.word	0x0008091d
   81068:	000813a1 	.word	0x000813a1
   8106c:	00081955 	.word	0x00081955
   81070:	00081a19 	.word	0x00081a19
   81074:	000817fd 	.word	0x000817fd
   81078:	00080c0d 	.word	0x00080c0d
   8107c:	000814fd 	.word	0x000814fd
   81080:	0008192d 	.word	0x0008192d

00081084 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vQueueWaitForMessageRestricted( xQueueHandle pxQueue, portTickType xTicksToWait )
	{
   81084:	b538      	push	{r3, r4, r5, lr}
   81086:	4604      	mov	r4, r0
   81088:	460d      	mov	r5, r1
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
   8108a:	4b0d      	ldr	r3, [pc, #52]	; (810c0 <vQueueWaitForMessageRestricted+0x3c>)
   8108c:	4798      	blx	r3
   8108e:	6c63      	ldr	r3, [r4, #68]	; 0x44
   81090:	f1b3 3fff 	cmp.w	r3, #4294967295
   81094:	bf04      	itt	eq
   81096:	2300      	moveq	r3, #0
   81098:	6463      	streq	r3, [r4, #68]	; 0x44
   8109a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   8109c:	f1b3 3fff 	cmp.w	r3, #4294967295
   810a0:	bf04      	itt	eq
   810a2:	2300      	moveq	r3, #0
   810a4:	64a3      	streq	r3, [r4, #72]	; 0x48
   810a6:	4b07      	ldr	r3, [pc, #28]	; (810c4 <vQueueWaitForMessageRestricted+0x40>)
   810a8:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0U )
   810aa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   810ac:	b923      	cbnz	r3, 810b8 <vQueueWaitForMessageRestricted+0x34>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   810ae:	f104 0024 	add.w	r0, r4, #36	; 0x24
   810b2:	4629      	mov	r1, r5
   810b4:	4b04      	ldr	r3, [pc, #16]	; (810c8 <vQueueWaitForMessageRestricted+0x44>)
   810b6:	4798      	blx	r3
		}
		prvUnlockQueue( pxQueue );
   810b8:	4620      	mov	r0, r4
   810ba:	4b04      	ldr	r3, [pc, #16]	; (810cc <vQueueWaitForMessageRestricted+0x48>)
   810bc:	4798      	blx	r3
   810be:	bd38      	pop	{r3, r4, r5, pc}
   810c0:	0008093d 	.word	0x0008093d
   810c4:	0008095d 	.word	0x0008095d
   810c8:	00081861 	.word	0x00081861
   810cc:	00080c0d 	.word	0x00080c0d

000810d0 <prvAddCurrentTaskToDelayedList>:
	#endif
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
   810d0:	b510      	push	{r4, lr}
   810d2:	4604      	mov	r4, r0
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
   810d4:	4b0f      	ldr	r3, [pc, #60]	; (81114 <prvAddCurrentTaskToDelayedList+0x44>)
   810d6:	681b      	ldr	r3, [r3, #0]
   810d8:	8098      	strh	r0, [r3, #4]

	if( xTimeToWake < xTickCount )
   810da:	4b0f      	ldr	r3, [pc, #60]	; (81118 <prvAddCurrentTaskToDelayedList+0x48>)
   810dc:	881b      	ldrh	r3, [r3, #0]
   810de:	b29b      	uxth	r3, r3
   810e0:	4298      	cmp	r0, r3
   810e2:	d207      	bcs.n	810f4 <prvAddCurrentTaskToDelayedList+0x24>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   810e4:	4b0d      	ldr	r3, [pc, #52]	; (8111c <prvAddCurrentTaskToDelayedList+0x4c>)
   810e6:	6818      	ldr	r0, [r3, #0]
   810e8:	4b0a      	ldr	r3, [pc, #40]	; (81114 <prvAddCurrentTaskToDelayedList+0x44>)
   810ea:	6819      	ldr	r1, [r3, #0]
   810ec:	3104      	adds	r1, #4
   810ee:	4b0c      	ldr	r3, [pc, #48]	; (81120 <prvAddCurrentTaskToDelayedList+0x50>)
   810f0:	4798      	blx	r3
   810f2:	bd10      	pop	{r4, pc}
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   810f4:	4b0b      	ldr	r3, [pc, #44]	; (81124 <prvAddCurrentTaskToDelayedList+0x54>)
   810f6:	6818      	ldr	r0, [r3, #0]
   810f8:	4b06      	ldr	r3, [pc, #24]	; (81114 <prvAddCurrentTaskToDelayedList+0x44>)
   810fa:	6819      	ldr	r1, [r3, #0]
   810fc:	3104      	adds	r1, #4
   810fe:	4b08      	ldr	r3, [pc, #32]	; (81120 <prvAddCurrentTaskToDelayedList+0x50>)
   81100:	4798      	blx	r3

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
   81102:	4b09      	ldr	r3, [pc, #36]	; (81128 <prvAddCurrentTaskToDelayedList+0x58>)
   81104:	881b      	ldrh	r3, [r3, #0]
   81106:	b29b      	uxth	r3, r3
   81108:	429c      	cmp	r4, r3
		{
			xNextTaskUnblockTime = xTimeToWake;
   8110a:	bf3c      	itt	cc
   8110c:	4b06      	ldrcc	r3, [pc, #24]	; (81128 <prvAddCurrentTaskToDelayedList+0x58>)
   8110e:	801c      	strhcc	r4, [r3, #0]
   81110:	bd10      	pop	{r4, pc}
   81112:	bf00      	nop
   81114:	20078af0 	.word	0x20078af0
   81118:	20078b0c 	.word	0x20078b0c
   8111c:	20078b10 	.word	0x20078b10
   81120:	00080861 	.word	0x00080861
   81124:	200789ec 	.word	0x200789ec
   81128:	20070134 	.word	0x20070134

0008112c <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
   8112c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81130:	460e      	mov	r6, r1
   81132:	4617      	mov	r7, r2
   81134:	469a      	mov	sl, r3
   81136:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   81138:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
signed portBASE_TYPE xReturn;
tskTCB * pxNewTCB;

	configASSERT( pxTaskCode );
   8113c:	4681      	mov	r9, r0
   8113e:	b918      	cbnz	r0, 81148 <xTaskGenericCreate+0x1c>
   81140:	4b62      	ldr	r3, [pc, #392]	; (812cc <xTaskGenericCreate+0x1a0>)
   81142:	4798      	blx	r3
   81144:	bf00      	nop
   81146:	e7fd      	b.n	81144 <xTaskGenericCreate+0x18>
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
   81148:	2d09      	cmp	r5, #9
   8114a:	d903      	bls.n	81154 <xTaskGenericCreate+0x28>
   8114c:	4b5f      	ldr	r3, [pc, #380]	; (812cc <xTaskGenericCreate+0x1a0>)
   8114e:	4798      	blx	r3
   81150:	bf00      	nop
   81152:	e7fd      	b.n	81150 <xTaskGenericCreate+0x24>
{
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
   81154:	2050      	movs	r0, #80	; 0x50
   81156:	4b5e      	ldr	r3, [pc, #376]	; (812d0 <xTaskGenericCreate+0x1a4>)
   81158:	4798      	blx	r3

	if( pxNewTCB != NULL )
   8115a:	4604      	mov	r4, r0
   8115c:	2800      	cmp	r0, #0
   8115e:	f000 80b1 	beq.w	812c4 <xTaskGenericCreate+0x198>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
   81162:	f1b8 0f00 	cmp.w	r8, #0
   81166:	f040 80a9 	bne.w	812bc <xTaskGenericCreate+0x190>
   8116a:	00b8      	lsls	r0, r7, #2
   8116c:	4b58      	ldr	r3, [pc, #352]	; (812d0 <xTaskGenericCreate+0x1a4>)
   8116e:	4798      	blx	r3
   81170:	6320      	str	r0, [r4, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
   81172:	b918      	cbnz	r0, 8117c <xTaskGenericCreate+0x50>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
   81174:	4620      	mov	r0, r4
   81176:	4b57      	ldr	r3, [pc, #348]	; (812d4 <xTaskGenericCreate+0x1a8>)
   81178:	4798      	blx	r3
   8117a:	e0a3      	b.n	812c4 <xTaskGenericCreate+0x198>
			pxNewTCB = NULL;
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
   8117c:	21a5      	movs	r1, #165	; 0xa5
   8117e:	00ba      	lsls	r2, r7, #2
   81180:	4b55      	ldr	r3, [pc, #340]	; (812d8 <xTaskGenericCreate+0x1ac>)
   81182:	4798      	blx	r3
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
   81184:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
   81188:	3f01      	subs	r7, #1
   8118a:	6b23      	ldr	r3, [r4, #48]	; 0x30
   8118c:	eb03 0387 	add.w	r3, r3, r7, lsl #2
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
   81190:	f023 0b07 	bic.w	fp, r3, #7
{
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
   81194:	f104 0034 	add.w	r0, r4, #52	; 0x34
   81198:	4631      	mov	r1, r6
   8119a:	2210      	movs	r2, #16
   8119c:	4b4f      	ldr	r3, [pc, #316]	; (812dc <xTaskGenericCreate+0x1b0>)
   8119e:	4798      	blx	r3
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
   811a0:	2300      	movs	r3, #0
   811a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   811a6:	2d09      	cmp	r5, #9
   811a8:	bf34      	ite	cc
   811aa:	462e      	movcc	r6, r5
   811ac:	2609      	movcs	r6, #9
	if( uxPriority >= configMAX_PRIORITIES )
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
	}

	pxTCB->uxPriority = uxPriority;
   811ae:	62e6      	str	r6, [r4, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
   811b0:	64e6      	str	r6, [r4, #76]	; 0x4c
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
   811b2:	1d27      	adds	r7, r4, #4
   811b4:	4638      	mov	r0, r7
   811b6:	f8df 8170 	ldr.w	r8, [pc, #368]	; 81328 <xTaskGenericCreate+0x1fc>
   811ba:	47c0      	blx	r8
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
   811bc:	f104 0018 	add.w	r0, r4, #24
   811c0:	47c0      	blx	r8

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
   811c2:	6124      	str	r4, [r4, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
   811c4:	f1c6 060a 	rsb	r6, r6, #10
   811c8:	8326      	strh	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
   811ca:	6264      	str	r4, [r4, #36]	; 0x24
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   811cc:	4658      	mov	r0, fp
   811ce:	4649      	mov	r1, r9
   811d0:	4652      	mov	r2, sl
   811d2:	4b43      	ldr	r3, [pc, #268]	; (812e0 <xTaskGenericCreate+0x1b4>)
   811d4:	4798      	blx	r3
   811d6:	6020      	str	r0, [r4, #0]
		}
		#endif

		/* Check the alignment of the initialised stack. */
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
   811d8:	f010 0f07 	tst.w	r0, #7
   811dc:	d003      	beq.n	811e6 <xTaskGenericCreate+0xba>
   811de:	4b3b      	ldr	r3, [pc, #236]	; (812cc <xTaskGenericCreate+0x1a0>)
   811e0:	4798      	blx	r3
   811e2:	bf00      	nop
   811e4:	e7fd      	b.n	811e2 <xTaskGenericCreate+0xb6>

		if( ( void * ) pxCreatedTask != NULL )
   811e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   811e8:	b103      	cbz	r3, 811ec <xTaskGenericCreate+0xc0>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
   811ea:	601c      	str	r4, [r3, #0]
		}

		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
   811ec:	4b3d      	ldr	r3, [pc, #244]	; (812e4 <xTaskGenericCreate+0x1b8>)
   811ee:	4798      	blx	r3
		{
			uxCurrentNumberOfTasks++;
   811f0:	4b3d      	ldr	r3, [pc, #244]	; (812e8 <xTaskGenericCreate+0x1bc>)
   811f2:	681a      	ldr	r2, [r3, #0]
   811f4:	3201      	adds	r2, #1
   811f6:	601a      	str	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
   811f8:	4b3c      	ldr	r3, [pc, #240]	; (812ec <xTaskGenericCreate+0x1c0>)
   811fa:	681b      	ldr	r3, [r3, #0]
   811fc:	bb2b      	cbnz	r3, 8124a <xTaskGenericCreate+0x11e>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
   811fe:	4b3b      	ldr	r3, [pc, #236]	; (812ec <xTaskGenericCreate+0x1c0>)
   81200:	601c      	str	r4, [r3, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
   81202:	4b39      	ldr	r3, [pc, #228]	; (812e8 <xTaskGenericCreate+0x1bc>)
   81204:	681b      	ldr	r3, [r3, #0]
   81206:	2b01      	cmp	r3, #1
   81208:	d129      	bne.n	8125e <xTaskGenericCreate+0x132>
   8120a:	4e39      	ldr	r6, [pc, #228]	; (812f0 <xTaskGenericCreate+0x1c4>)
   8120c:	f106 09c8 	add.w	r9, r6, #200	; 0xc8
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
   81210:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 812f4 <xTaskGenericCreate+0x1c8>
   81214:	4630      	mov	r0, r6
   81216:	47c0      	blx	r8
   81218:	3614      	adds	r6, #20

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
   8121a:	454e      	cmp	r6, r9
   8121c:	d1fa      	bne.n	81214 <xTaskGenericCreate+0xe8>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
   8121e:	f8df 910c 	ldr.w	r9, [pc, #268]	; 8132c <xTaskGenericCreate+0x200>
   81222:	4648      	mov	r0, r9
   81224:	4e33      	ldr	r6, [pc, #204]	; (812f4 <xTaskGenericCreate+0x1c8>)
   81226:	47b0      	blx	r6
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
   81228:	f8df 8104 	ldr.w	r8, [pc, #260]	; 81330 <xTaskGenericCreate+0x204>
   8122c:	4640      	mov	r0, r8
   8122e:	47b0      	blx	r6
	vListInitialise( ( xList * ) &xPendingReadyList );
   81230:	4831      	ldr	r0, [pc, #196]	; (812f8 <xTaskGenericCreate+0x1cc>)
   81232:	47b0      	blx	r6

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
   81234:	4831      	ldr	r0, [pc, #196]	; (812fc <xTaskGenericCreate+0x1d0>)
   81236:	47b0      	blx	r6
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
   81238:	4831      	ldr	r0, [pc, #196]	; (81300 <xTaskGenericCreate+0x1d4>)
   8123a:	47b0      	blx	r6
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
   8123c:	4b31      	ldr	r3, [pc, #196]	; (81304 <xTaskGenericCreate+0x1d8>)
   8123e:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
   81242:	4b31      	ldr	r3, [pc, #196]	; (81308 <xTaskGenericCreate+0x1dc>)
   81244:	f8c3 8000 	str.w	r8, [r3]
   81248:	e009      	b.n	8125e <xTaskGenericCreate+0x132>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
   8124a:	4b30      	ldr	r3, [pc, #192]	; (8130c <xTaskGenericCreate+0x1e0>)
   8124c:	681b      	ldr	r3, [r3, #0]
   8124e:	b933      	cbnz	r3, 8125e <xTaskGenericCreate+0x132>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
   81250:	4b26      	ldr	r3, [pc, #152]	; (812ec <xTaskGenericCreate+0x1c0>)
   81252:	681b      	ldr	r3, [r3, #0]
   81254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   81256:	429d      	cmp	r5, r3
					{
						pxCurrentTCB = pxNewTCB;
   81258:	bf24      	itt	cs
   8125a:	4b24      	ldrcs	r3, [pc, #144]	; (812ec <xTaskGenericCreate+0x1c0>)
   8125c:	601c      	strcs	r4, [r3, #0]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
   8125e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   81260:	4a2b      	ldr	r2, [pc, #172]	; (81310 <xTaskGenericCreate+0x1e4>)
   81262:	6812      	ldr	r2, [r2, #0]
   81264:	4293      	cmp	r3, r2
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
   81266:	bf84      	itt	hi
   81268:	4a29      	ldrhi	r2, [pc, #164]	; (81310 <xTaskGenericCreate+0x1e4>)
   8126a:	6013      	strhi	r3, [r2, #0]
			}

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
   8126c:	4a29      	ldr	r2, [pc, #164]	; (81314 <xTaskGenericCreate+0x1e8>)
   8126e:	6811      	ldr	r1, [r2, #0]
   81270:	6461      	str	r1, [r4, #68]	; 0x44
			}
			#endif
			uxTaskNumber++;
   81272:	3101      	adds	r1, #1
   81274:	6011      	str	r1, [r2, #0]

			prvAddTaskToReadyQueue( pxNewTCB );
   81276:	4a28      	ldr	r2, [pc, #160]	; (81318 <xTaskGenericCreate+0x1ec>)
   81278:	6812      	ldr	r2, [r2, #0]
   8127a:	4293      	cmp	r3, r2
   8127c:	bf84      	itt	hi
   8127e:	4a26      	ldrhi	r2, [pc, #152]	; (81318 <xTaskGenericCreate+0x1ec>)
   81280:	6013      	strhi	r3, [r2, #0]
   81282:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   81286:	481a      	ldr	r0, [pc, #104]	; (812f0 <xTaskGenericCreate+0x1c4>)
   81288:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   8128c:	4639      	mov	r1, r7
   8128e:	4b23      	ldr	r3, [pc, #140]	; (8131c <xTaskGenericCreate+0x1f0>)
   81290:	4798      	blx	r3

			xReturn = pdPASS;
			portSETUP_TCB( pxNewTCB );
			traceTASK_CREATE( pxNewTCB );
		}
		taskEXIT_CRITICAL();
   81292:	4b23      	ldr	r3, [pc, #140]	; (81320 <xTaskGenericCreate+0x1f4>)
   81294:	4798      	blx	r3
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
	{
		if( xSchedulerRunning != pdFALSE )
   81296:	4b1d      	ldr	r3, [pc, #116]	; (8130c <xTaskGenericCreate+0x1e0>)
   81298:	681b      	ldr	r3, [r3, #0]
   8129a:	b14b      	cbz	r3, 812b0 <xTaskGenericCreate+0x184>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
   8129c:	4b13      	ldr	r3, [pc, #76]	; (812ec <xTaskGenericCreate+0x1c0>)
   8129e:	681b      	ldr	r3, [r3, #0]
   812a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   812a2:	429d      	cmp	r5, r3
   812a4:	d907      	bls.n	812b6 <xTaskGenericCreate+0x18a>
			{
				portYIELD_WITHIN_API();
   812a6:	4b1f      	ldr	r3, [pc, #124]	; (81324 <xTaskGenericCreate+0x1f8>)
   812a8:	4798      	blx	r3
			#endif
			uxTaskNumber++;

			prvAddTaskToReadyQueue( pxNewTCB );

			xReturn = pdPASS;
   812aa:	2001      	movs	r0, #1
   812ac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   812b0:	2001      	movs	r0, #1
   812b2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   812b6:	2001      	movs	r0, #1
   812b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if( pxNewTCB != NULL )
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
   812bc:	f8c0 8030 	str.w	r8, [r0, #48]	; 0x30
   812c0:	4640      	mov	r0, r8
   812c2:	e75b      	b.n	8117c <xTaskGenericCreate+0x50>
		}
		taskEXIT_CRITICAL();
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   812c4:	f04f 30ff 	mov.w	r0, #4294967295
			}
		}
	}

	return xReturn;
}
   812c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   812cc:	0008092d 	.word	0x0008092d
   812d0:	00080a89 	.word	0x00080a89
   812d4:	00080b4d 	.word	0x00080b4d
   812d8:	000829a5 	.word	0x000829a5
   812dc:	00082ba9 	.word	0x00082ba9
   812e0:	000808e1 	.word	0x000808e1
   812e4:	0008093d 	.word	0x0008093d
   812e8:	20078b30 	.word	0x20078b30
   812ec:	20078af0 	.word	0x20078af0
   812f0:	20078a24 	.word	0x20078a24
   812f4:	00080825 	.word	0x00080825
   812f8:	20078af4 	.word	0x20078af4
   812fc:	200789f8 	.word	0x200789f8
   81300:	200789d8 	.word	0x200789d8
   81304:	200789ec 	.word	0x200789ec
   81308:	20078b10 	.word	0x20078b10
   8130c:	200789f0 	.word	0x200789f0
   81310:	20078b34 	.word	0x20078b34
   81314:	20078b14 	.word	0x20078b14
   81318:	20078a20 	.word	0x20078a20
   8131c:	00080845 	.word	0x00080845
   81320:	0008095d 	.word	0x0008095d
   81324:	0008091d 	.word	0x0008091d
   81328:	0008083d 	.word	0x0008083d
   8132c:	20078b18 	.word	0x20078b18
   81330:	20078a0c 	.word	0x20078a0c

00081334 <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
   81334:	b510      	push	{r4, lr}
   81336:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
   81338:	2300      	movs	r3, #0
   8133a:	9300      	str	r3, [sp, #0]
   8133c:	9301      	str	r3, [sp, #4]
   8133e:	9302      	str	r3, [sp, #8]
   81340:	9303      	str	r3, [sp, #12]
   81342:	480f      	ldr	r0, [pc, #60]	; (81380 <vTaskStartScheduler+0x4c>)
   81344:	490f      	ldr	r1, [pc, #60]	; (81384 <vTaskStartScheduler+0x50>)
   81346:	f44f 7280 	mov.w	r2, #256	; 0x100
   8134a:	4c0f      	ldr	r4, [pc, #60]	; (81388 <vTaskStartScheduler+0x54>)
   8134c:	47a0      	blx	r4
	}
	#endif

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
   8134e:	2801      	cmp	r0, #1
   81350:	d10e      	bne.n	81370 <vTaskStartScheduler+0x3c>
		{
			xReturn = xTimerCreateTimerTask();
   81352:	4b0e      	ldr	r3, [pc, #56]	; (8138c <vTaskStartScheduler+0x58>)
   81354:	4798      	blx	r3
		}
	}
	#endif

	if( xReturn == pdPASS )
   81356:	2801      	cmp	r0, #1
   81358:	d10a      	bne.n	81370 <vTaskStartScheduler+0x3c>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
   8135a:	4b0d      	ldr	r3, [pc, #52]	; (81390 <vTaskStartScheduler+0x5c>)
   8135c:	4798      	blx	r3

		xSchedulerRunning = pdTRUE;
   8135e:	2201      	movs	r2, #1
   81360:	4b0c      	ldr	r3, [pc, #48]	; (81394 <vTaskStartScheduler+0x60>)
   81362:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
   81364:	2200      	movs	r2, #0
   81366:	4b0c      	ldr	r3, [pc, #48]	; (81398 <vTaskStartScheduler+0x64>)
   81368:	801a      	strh	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
   8136a:	4b0c      	ldr	r3, [pc, #48]	; (8139c <vTaskStartScheduler+0x68>)
   8136c:	4798      	blx	r3
   8136e:	e004      	b.n	8137a <vTaskStartScheduler+0x46>
			/* Should only reach here if a task calls xTaskEndScheduler(). */
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
   81370:	b918      	cbnz	r0, 8137a <vTaskStartScheduler+0x46>
   81372:	4b07      	ldr	r3, [pc, #28]	; (81390 <vTaskStartScheduler+0x5c>)
   81374:	4798      	blx	r3
   81376:	bf00      	nop
   81378:	e7fd      	b.n	81376 <vTaskStartScheduler+0x42>
}
   8137a:	b004      	add	sp, #16
   8137c:	bd10      	pop	{r4, pc}
   8137e:	bf00      	nop
   81380:	000816e9 	.word	0x000816e9
   81384:	0008592c 	.word	0x0008592c
   81388:	0008112d 	.word	0x0008112d
   8138c:	00081b91 	.word	0x00081b91
   81390:	0008092d 	.word	0x0008092d
   81394:	200789f0 	.word	0x200789f0
   81398:	20078b0c 	.word	0x20078b0c
   8139c:	000809f9 	.word	0x000809f9

000813a0 <vTaskSuspendAll>:

void vTaskSuspendAll( void )
{
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
   813a0:	4b02      	ldr	r3, [pc, #8]	; (813ac <vTaskSuspendAll+0xc>)
   813a2:	681a      	ldr	r2, [r3, #0]
   813a4:	3201      	adds	r2, #1
   813a6:	601a      	str	r2, [r3, #0]
   813a8:	4770      	bx	lr
   813aa:	bf00      	nop
   813ac:	20078aec 	.word	0x20078aec

000813b0 <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
   813b0:	b510      	push	{r4, lr}
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
   813b2:	4b04      	ldr	r3, [pc, #16]	; (813c4 <xTaskGetTickCount+0x14>)
   813b4:	4798      	blx	r3
	{
		xTicks = xTickCount;
   813b6:	4b04      	ldr	r3, [pc, #16]	; (813c8 <xTaskGetTickCount+0x18>)
   813b8:	881c      	ldrh	r4, [r3, #0]
   813ba:	b2a4      	uxth	r4, r4
	}
	taskEXIT_CRITICAL();
   813bc:	4b03      	ldr	r3, [pc, #12]	; (813cc <xTaskGetTickCount+0x1c>)
   813be:	4798      	blx	r3

	return xTicks;
}
   813c0:	4620      	mov	r0, r4
   813c2:	bd10      	pop	{r4, pc}
   813c4:	0008093d 	.word	0x0008093d
   813c8:	20078b0c 	.word	0x20078b0c
   813cc:	0008095d 	.word	0x0008095d

000813d0 <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
   813d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   813d4:	4b3d      	ldr	r3, [pc, #244]	; (814cc <vTaskIncrementTick+0xfc>)
   813d6:	681b      	ldr	r3, [r3, #0]
   813d8:	2b00      	cmp	r3, #0
   813da:	d171      	bne.n	814c0 <vTaskIncrementTick+0xf0>
	{
		++xTickCount;
   813dc:	4b3c      	ldr	r3, [pc, #240]	; (814d0 <vTaskIncrementTick+0x100>)
   813de:	881a      	ldrh	r2, [r3, #0]
   813e0:	3201      	adds	r2, #1
   813e2:	b292      	uxth	r2, r2
   813e4:	801a      	strh	r2, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
   813e6:	881b      	ldrh	r3, [r3, #0]
   813e8:	b29b      	uxth	r3, r3
   813ea:	bb03      	cbnz	r3, 8142e <vTaskIncrementTick+0x5e>
			xList *pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
   813ec:	4b39      	ldr	r3, [pc, #228]	; (814d4 <vTaskIncrementTick+0x104>)
   813ee:	681b      	ldr	r3, [r3, #0]
   813f0:	681b      	ldr	r3, [r3, #0]
   813f2:	b11b      	cbz	r3, 813fc <vTaskIncrementTick+0x2c>
   813f4:	4b38      	ldr	r3, [pc, #224]	; (814d8 <vTaskIncrementTick+0x108>)
   813f6:	4798      	blx	r3
   813f8:	bf00      	nop
   813fa:	e7fd      	b.n	813f8 <vTaskIncrementTick+0x28>

			pxTemp = pxDelayedTaskList;
   813fc:	4b35      	ldr	r3, [pc, #212]	; (814d4 <vTaskIncrementTick+0x104>)
   813fe:	6819      	ldr	r1, [r3, #0]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
   81400:	4a36      	ldr	r2, [pc, #216]	; (814dc <vTaskIncrementTick+0x10c>)
   81402:	6810      	ldr	r0, [r2, #0]
   81404:	6018      	str	r0, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
   81406:	6011      	str	r1, [r2, #0]
			xNumOfOverflows++;
   81408:	4a35      	ldr	r2, [pc, #212]	; (814e0 <vTaskIncrementTick+0x110>)
   8140a:	6811      	ldr	r1, [r2, #0]
   8140c:	3101      	adds	r1, #1
   8140e:	6011      	str	r1, [r2, #0]

			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   81410:	681b      	ldr	r3, [r3, #0]
   81412:	681b      	ldr	r3, [r3, #0]
   81414:	b923      	cbnz	r3, 81420 <vTaskIncrementTick+0x50>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
   81416:	f64f 72ff 	movw	r2, #65535	; 0xffff
   8141a:	4b32      	ldr	r3, [pc, #200]	; (814e4 <vTaskIncrementTick+0x114>)
   8141c:	801a      	strh	r2, [r3, #0]
   8141e:	e006      	b.n	8142e <vTaskIncrementTick+0x5e>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   81420:	4b2c      	ldr	r3, [pc, #176]	; (814d4 <vTaskIncrementTick+0x104>)
   81422:	681b      	ldr	r3, [r3, #0]
   81424:	68db      	ldr	r3, [r3, #12]
   81426:	68db      	ldr	r3, [r3, #12]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
   81428:	889a      	ldrh	r2, [r3, #4]
   8142a:	4b2e      	ldr	r3, [pc, #184]	; (814e4 <vTaskIncrementTick+0x114>)
   8142c:	801a      	strh	r2, [r3, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
   8142e:	4b28      	ldr	r3, [pc, #160]	; (814d0 <vTaskIncrementTick+0x100>)
   81430:	881a      	ldrh	r2, [r3, #0]
   81432:	b292      	uxth	r2, r2
   81434:	4b2b      	ldr	r3, [pc, #172]	; (814e4 <vTaskIncrementTick+0x114>)
   81436:	881b      	ldrh	r3, [r3, #0]
   81438:	b29b      	uxth	r3, r3
   8143a:	429a      	cmp	r2, r3
   8143c:	d344      	bcc.n	814c8 <vTaskIncrementTick+0xf8>
   8143e:	4b25      	ldr	r3, [pc, #148]	; (814d4 <vTaskIncrementTick+0x104>)
   81440:	681b      	ldr	r3, [r3, #0]
   81442:	681b      	ldr	r3, [r3, #0]
   81444:	b153      	cbz	r3, 8145c <vTaskIncrementTick+0x8c>
   81446:	4b23      	ldr	r3, [pc, #140]	; (814d4 <vTaskIncrementTick+0x104>)
   81448:	681b      	ldr	r3, [r3, #0]
   8144a:	68db      	ldr	r3, [r3, #12]
   8144c:	68dc      	ldr	r4, [r3, #12]
   8144e:	88a3      	ldrh	r3, [r4, #4]
   81450:	4a1f      	ldr	r2, [pc, #124]	; (814d0 <vTaskIncrementTick+0x100>)
   81452:	8812      	ldrh	r2, [r2, #0]
   81454:	b292      	uxth	r2, r2
   81456:	4293      	cmp	r3, r2
   81458:	d914      	bls.n	81484 <vTaskIncrementTick+0xb4>
   8145a:	e00f      	b.n	8147c <vTaskIncrementTick+0xac>
   8145c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   81460:	4b20      	ldr	r3, [pc, #128]	; (814e4 <vTaskIncrementTick+0x114>)
   81462:	801a      	strh	r2, [r3, #0]
   81464:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81468:	4b1a      	ldr	r3, [pc, #104]	; (814d4 <vTaskIncrementTick+0x104>)
   8146a:	681b      	ldr	r3, [r3, #0]
   8146c:	68db      	ldr	r3, [r3, #12]
   8146e:	68dc      	ldr	r4, [r3, #12]
   81470:	88a3      	ldrh	r3, [r4, #4]
   81472:	4a17      	ldr	r2, [pc, #92]	; (814d0 <vTaskIncrementTick+0x100>)
   81474:	8812      	ldrh	r2, [r2, #0]
   81476:	b292      	uxth	r2, r2
   81478:	4293      	cmp	r3, r2
   8147a:	d907      	bls.n	8148c <vTaskIncrementTick+0xbc>
   8147c:	4a19      	ldr	r2, [pc, #100]	; (814e4 <vTaskIncrementTick+0x114>)
   8147e:	8013      	strh	r3, [r2, #0]
   81480:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81484:	4e18      	ldr	r6, [pc, #96]	; (814e8 <vTaskIncrementTick+0x118>)
   81486:	4f19      	ldr	r7, [pc, #100]	; (814ec <vTaskIncrementTick+0x11c>)
   81488:	f8df 806c 	ldr.w	r8, [pc, #108]	; 814f8 <vTaskIncrementTick+0x128>
   8148c:	1d25      	adds	r5, r4, #4
   8148e:	4628      	mov	r0, r5
   81490:	47b0      	blx	r6
   81492:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   81494:	b113      	cbz	r3, 8149c <vTaskIncrementTick+0xcc>
   81496:	f104 0018 	add.w	r0, r4, #24
   8149a:	47b0      	blx	r6
   8149c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   8149e:	683a      	ldr	r2, [r7, #0]
   814a0:	4293      	cmp	r3, r2
   814a2:	bf88      	it	hi
   814a4:	603b      	strhi	r3, [r7, #0]
   814a6:	eb03 0083 	add.w	r0, r3, r3, lsl #2
   814aa:	eb08 0080 	add.w	r0, r8, r0, lsl #2
   814ae:	4629      	mov	r1, r5
   814b0:	4b0f      	ldr	r3, [pc, #60]	; (814f0 <vTaskIncrementTick+0x120>)
   814b2:	4798      	blx	r3
   814b4:	4b07      	ldr	r3, [pc, #28]	; (814d4 <vTaskIncrementTick+0x104>)
   814b6:	681b      	ldr	r3, [r3, #0]
   814b8:	681b      	ldr	r3, [r3, #0]
   814ba:	2b00      	cmp	r3, #0
   814bc:	d1d4      	bne.n	81468 <vTaskIncrementTick+0x98>
   814be:	e7cd      	b.n	8145c <vTaskIncrementTick+0x8c>
	}
	else
	{
		++uxMissedTicks;
   814c0:	4b0c      	ldr	r3, [pc, #48]	; (814f4 <vTaskIncrementTick+0x124>)
   814c2:	681a      	ldr	r2, [r3, #0]
   814c4:	3201      	adds	r2, #1
   814c6:	601a      	str	r2, [r3, #0]
   814c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   814cc:	20078aec 	.word	0x20078aec
   814d0:	20078b0c 	.word	0x20078b0c
   814d4:	200789ec 	.word	0x200789ec
   814d8:	0008092d 	.word	0x0008092d
   814dc:	20078b10 	.word	0x20078b10
   814e0:	20078b08 	.word	0x20078b08
   814e4:	20070134 	.word	0x20070134
   814e8:	000808a5 	.word	0x000808a5
   814ec:	20078a20 	.word	0x20078a20
   814f0:	00080845 	.word	0x00080845
   814f4:	200789d4 	.word	0x200789d4
   814f8:	20078a24 	.word	0x20078a24

000814fc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE != 0  */
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
   814fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
   81500:	4b31      	ldr	r3, [pc, #196]	; (815c8 <xTaskResumeAll+0xcc>)
   81502:	681b      	ldr	r3, [r3, #0]
   81504:	b91b      	cbnz	r3, 8150e <xTaskResumeAll+0x12>
   81506:	4b31      	ldr	r3, [pc, #196]	; (815cc <xTaskResumeAll+0xd0>)
   81508:	4798      	blx	r3
   8150a:	bf00      	nop
   8150c:	e7fd      	b.n	8150a <xTaskResumeAll+0xe>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
   8150e:	4b30      	ldr	r3, [pc, #192]	; (815d0 <xTaskResumeAll+0xd4>)
   81510:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
   81512:	4b2d      	ldr	r3, [pc, #180]	; (815c8 <xTaskResumeAll+0xcc>)
   81514:	681a      	ldr	r2, [r3, #0]
   81516:	3a01      	subs	r2, #1
   81518:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   8151a:	681b      	ldr	r3, [r3, #0]
   8151c:	2b00      	cmp	r3, #0
   8151e:	d148      	bne.n	815b2 <xTaskResumeAll+0xb6>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
   81520:	4b2c      	ldr	r3, [pc, #176]	; (815d4 <xTaskResumeAll+0xd8>)
   81522:	681b      	ldr	r3, [r3, #0]
   81524:	2b00      	cmp	r3, #0
   81526:	d046      	beq.n	815b6 <xTaskResumeAll+0xba>
   81528:	2500      	movs	r5, #0
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
   8152a:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 81600 <xTaskResumeAll+0x104>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
					uxListRemove( &( pxTCB->xEventListItem ) );
   8152e:	4f2a      	ldr	r7, [pc, #168]	; (815d8 <xTaskResumeAll+0xdc>)
					uxListRemove( &( pxTCB->xGenericListItem ) );
					prvAddTaskToReadyQueue( pxTCB );
   81530:	4e2a      	ldr	r6, [pc, #168]	; (815dc <xTaskResumeAll+0xe0>)
   81532:	e01d      	b.n	81570 <xTaskResumeAll+0x74>

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
   81534:	f8d8 300c 	ldr.w	r3, [r8, #12]
   81538:	68dc      	ldr	r4, [r3, #12]
					uxListRemove( &( pxTCB->xEventListItem ) );
   8153a:	f104 0018 	add.w	r0, r4, #24
   8153e:	47b8      	blx	r7
					uxListRemove( &( pxTCB->xGenericListItem ) );
   81540:	f104 0904 	add.w	r9, r4, #4
   81544:	4648      	mov	r0, r9
   81546:	47b8      	blx	r7
					prvAddTaskToReadyQueue( pxTCB );
   81548:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   8154a:	6832      	ldr	r2, [r6, #0]
   8154c:	4293      	cmp	r3, r2
   8154e:	bf88      	it	hi
   81550:	6033      	strhi	r3, [r6, #0]
   81552:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   81556:	4822      	ldr	r0, [pc, #136]	; (815e0 <xTaskResumeAll+0xe4>)
   81558:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   8155c:	4649      	mov	r1, r9
   8155e:	4b21      	ldr	r3, [pc, #132]	; (815e4 <xTaskResumeAll+0xe8>)
   81560:	4798      	blx	r3

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   81562:	4b21      	ldr	r3, [pc, #132]	; (815e8 <xTaskResumeAll+0xec>)
   81564:	681b      	ldr	r3, [r3, #0]
   81566:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   81568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
					{
						xYieldRequired = pdTRUE;
   8156a:	429a      	cmp	r2, r3
   8156c:	bf28      	it	cs
   8156e:	2501      	movcs	r5, #1
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
   81570:	f8d8 3000 	ldr.w	r3, [r8]
   81574:	2b00      	cmp	r3, #0
   81576:	d1dd      	bne.n	81534 <xTaskResumeAll+0x38>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   81578:	4b1c      	ldr	r3, [pc, #112]	; (815ec <xTaskResumeAll+0xf0>)
   8157a:	681b      	ldr	r3, [r3, #0]
   8157c:	b163      	cbz	r3, 81598 <xTaskResumeAll+0x9c>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   8157e:	4b1b      	ldr	r3, [pc, #108]	; (815ec <xTaskResumeAll+0xf0>)
   81580:	681b      	ldr	r3, [r3, #0]
   81582:	b17b      	cbz	r3, 815a4 <xTaskResumeAll+0xa8>
					{
						vTaskIncrementTick();
   81584:	4d1a      	ldr	r5, [pc, #104]	; (815f0 <xTaskResumeAll+0xf4>)
						--uxMissedTicks;
   81586:	4c19      	ldr	r4, [pc, #100]	; (815ec <xTaskResumeAll+0xf0>)
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
					{
						vTaskIncrementTick();
   81588:	47a8      	blx	r5
						--uxMissedTicks;
   8158a:	6823      	ldr	r3, [r4, #0]
   8158c:	3b01      	subs	r3, #1
   8158e:	6023      	str	r3, [r4, #0]
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   81590:	6823      	ldr	r3, [r4, #0]
   81592:	2b00      	cmp	r3, #0
   81594:	d1f8      	bne.n	81588 <xTaskResumeAll+0x8c>
   81596:	e005      	b.n	815a4 <xTaskResumeAll+0xa8>
						xYieldRequired = pdTRUE;
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
   81598:	2d01      	cmp	r5, #1
   8159a:	d003      	beq.n	815a4 <xTaskResumeAll+0xa8>
   8159c:	4b15      	ldr	r3, [pc, #84]	; (815f4 <xTaskResumeAll+0xf8>)
   8159e:	681b      	ldr	r3, [r3, #0]
   815a0:	2b01      	cmp	r3, #1
   815a2:	d10a      	bne.n	815ba <xTaskResumeAll+0xbe>
				{
					xAlreadyYielded = pdTRUE;
					xMissedYield = pdFALSE;
   815a4:	2200      	movs	r2, #0
   815a6:	4b13      	ldr	r3, [pc, #76]	; (815f4 <xTaskResumeAll+0xf8>)
   815a8:	601a      	str	r2, [r3, #0]
					portYIELD_WITHIN_API();
   815aa:	4b13      	ldr	r3, [pc, #76]	; (815f8 <xTaskResumeAll+0xfc>)
   815ac:	4798      	blx	r3
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
				{
					xAlreadyYielded = pdTRUE;
   815ae:	2401      	movs	r4, #1
   815b0:	e004      	b.n	815bc <xTaskResumeAll+0xc0>
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
   815b2:	2400      	movs	r4, #0
   815b4:	e002      	b.n	815bc <xTaskResumeAll+0xc0>
   815b6:	2400      	movs	r4, #0
   815b8:	e000      	b.n	815bc <xTaskResumeAll+0xc0>
   815ba:	2400      	movs	r4, #0
					portYIELD_WITHIN_API();
				}
			}
		}
	}
	taskEXIT_CRITICAL();
   815bc:	4b0f      	ldr	r3, [pc, #60]	; (815fc <xTaskResumeAll+0x100>)
   815be:	4798      	blx	r3

	return xAlreadyYielded;
}
   815c0:	4620      	mov	r0, r4
   815c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   815c6:	bf00      	nop
   815c8:	20078aec 	.word	0x20078aec
   815cc:	0008092d 	.word	0x0008092d
   815d0:	0008093d 	.word	0x0008093d
   815d4:	20078b30 	.word	0x20078b30
   815d8:	000808a5 	.word	0x000808a5
   815dc:	20078a20 	.word	0x20078a20
   815e0:	20078a24 	.word	0x20078a24
   815e4:	00080845 	.word	0x00080845
   815e8:	20078af0 	.word	0x20078af0
   815ec:	200789d4 	.word	0x200789d4
   815f0:	000813d1 	.word	0x000813d1
   815f4:	20078b2c 	.word	0x20078b2c
   815f8:	0008091d 	.word	0x0008091d
   815fc:	0008095d 	.word	0x0008095d
   81600:	20078af4 	.word	0x20078af4

00081604 <vTaskDelayUntil>:
 *----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
   81604:	b538      	push	{r3, r4, r5, lr}
   81606:	460c      	mov	r4, r1
	portTickType xTimeToWake;
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;

		configASSERT( pxPreviousWakeTime );
   81608:	4605      	mov	r5, r0
   8160a:	b918      	cbnz	r0, 81614 <vTaskDelayUntil+0x10>
   8160c:	4b1b      	ldr	r3, [pc, #108]	; (8167c <vTaskDelayUntil+0x78>)
   8160e:	4798      	blx	r3
   81610:	bf00      	nop
   81612:	e7fd      	b.n	81610 <vTaskDelayUntil+0xc>
		configASSERT( ( xTimeIncrement > 0U ) );
   81614:	b919      	cbnz	r1, 8161e <vTaskDelayUntil+0x1a>
   81616:	4b19      	ldr	r3, [pc, #100]	; (8167c <vTaskDelayUntil+0x78>)
   81618:	4798      	blx	r3
   8161a:	bf00      	nop
   8161c:	e7fd      	b.n	8161a <vTaskDelayUntil+0x16>

		vTaskSuspendAll();
   8161e:	4b18      	ldr	r3, [pc, #96]	; (81680 <vTaskDelayUntil+0x7c>)
   81620:	4798      	blx	r3
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
   81622:	882b      	ldrh	r3, [r5, #0]
   81624:	441c      	add	r4, r3
   81626:	b2a4      	uxth	r4, r4

			if( xTickCount < *pxPreviousWakeTime )
   81628:	4a16      	ldr	r2, [pc, #88]	; (81684 <vTaskDelayUntil+0x80>)
   8162a:	8812      	ldrh	r2, [r2, #0]
   8162c:	b292      	uxth	r2, r2
   8162e:	4293      	cmp	r3, r2
   81630:	d908      	bls.n	81644 <vTaskDelayUntil+0x40>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
   81632:	42a3      	cmp	r3, r4
   81634:	d91e      	bls.n	81674 <vTaskDelayUntil+0x70>
   81636:	4b13      	ldr	r3, [pc, #76]	; (81684 <vTaskDelayUntil+0x80>)
   81638:	881b      	ldrh	r3, [r3, #0]
   8163a:	b29b      	uxth	r3, r3
					xShouldDelay = pdTRUE;
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
   8163c:	802c      	strh	r4, [r5, #0]

			if( xShouldDelay != pdFALSE )
   8163e:	429c      	cmp	r4, r3
   81640:	d910      	bls.n	81664 <vTaskDelayUntil+0x60>
   81642:	e007      	b.n	81654 <vTaskDelayUntil+0x50>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
   81644:	42a3      	cmp	r3, r4
   81646:	d813      	bhi.n	81670 <vTaskDelayUntil+0x6c>
   81648:	4b0e      	ldr	r3, [pc, #56]	; (81684 <vTaskDelayUntil+0x80>)
   8164a:	881b      	ldrh	r3, [r3, #0]
   8164c:	b29b      	uxth	r3, r3
   8164e:	429c      	cmp	r4, r3
   81650:	d80e      	bhi.n	81670 <vTaskDelayUntil+0x6c>
   81652:	e00f      	b.n	81674 <vTaskDelayUntil+0x70>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
   81654:	4b0c      	ldr	r3, [pc, #48]	; (81688 <vTaskDelayUntil+0x84>)
   81656:	6818      	ldr	r0, [r3, #0]
   81658:	3004      	adds	r0, #4
   8165a:	4b0c      	ldr	r3, [pc, #48]	; (8168c <vTaskDelayUntil+0x88>)
   8165c:	4798      	blx	r3
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
				}

				prvAddCurrentTaskToDelayedList( xTimeToWake );
   8165e:	4620      	mov	r0, r4
   81660:	4b0b      	ldr	r3, [pc, #44]	; (81690 <vTaskDelayUntil+0x8c>)
   81662:	4798      	blx	r3
			}
		}
		xAlreadyYielded = xTaskResumeAll();
   81664:	4b0b      	ldr	r3, [pc, #44]	; (81694 <vTaskDelayUntil+0x90>)
   81666:	4798      	blx	r3

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
   81668:	b930      	cbnz	r0, 81678 <vTaskDelayUntil+0x74>
		{
			portYIELD_WITHIN_API();
   8166a:	4b0b      	ldr	r3, [pc, #44]	; (81698 <vTaskDelayUntil+0x94>)
   8166c:	4798      	blx	r3
   8166e:	bd38      	pop	{r3, r4, r5, pc}
					xShouldDelay = pdTRUE;
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
   81670:	802c      	strh	r4, [r5, #0]
   81672:	e7ef      	b.n	81654 <vTaskDelayUntil+0x50>
   81674:	802c      	strh	r4, [r5, #0]
   81676:	e7f5      	b.n	81664 <vTaskDelayUntil+0x60>
   81678:	bd38      	pop	{r3, r4, r5, pc}
   8167a:	bf00      	nop
   8167c:	0008092d 	.word	0x0008092d
   81680:	000813a1 	.word	0x000813a1
   81684:	20078b0c 	.word	0x20078b0c
   81688:	20078af0 	.word	0x20078af0
   8168c:	000808a5 	.word	0x000808a5
   81690:	000810d1 	.word	0x000810d1
   81694:	000814fd 	.word	0x000814fd
   81698:	0008091d 	.word	0x0008091d

0008169c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
   8169c:	b510      	push	{r4, lr}
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
   8169e:	4604      	mov	r4, r0
   816a0:	b180      	cbz	r0, 816c4 <vTaskDelay+0x28>
		{
			vTaskSuspendAll();
   816a2:	4b0a      	ldr	r3, [pc, #40]	; (816cc <vTaskDelay+0x30>)
   816a4:	4798      	blx	r3
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
   816a6:	4b0a      	ldr	r3, [pc, #40]	; (816d0 <vTaskDelay+0x34>)
   816a8:	881b      	ldrh	r3, [r3, #0]
   816aa:	441c      	add	r4, r3
   816ac:	b2a4      	uxth	r4, r4

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
   816ae:	4b09      	ldr	r3, [pc, #36]	; (816d4 <vTaskDelay+0x38>)
   816b0:	6818      	ldr	r0, [r3, #0]
   816b2:	3004      	adds	r0, #4
   816b4:	4b08      	ldr	r3, [pc, #32]	; (816d8 <vTaskDelay+0x3c>)
   816b6:	4798      	blx	r3
					/* The current task must be in a ready list, so there is
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
   816b8:	4620      	mov	r0, r4
   816ba:	4b08      	ldr	r3, [pc, #32]	; (816dc <vTaskDelay+0x40>)
   816bc:	4798      	blx	r3
			}
			xAlreadyYielded = xTaskResumeAll();
   816be:	4b08      	ldr	r3, [pc, #32]	; (816e0 <vTaskDelay+0x44>)
   816c0:	4798      	blx	r3
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
   816c2:	b908      	cbnz	r0, 816c8 <vTaskDelay+0x2c>
		{
			portYIELD_WITHIN_API();
   816c4:	4b07      	ldr	r3, [pc, #28]	; (816e4 <vTaskDelay+0x48>)
   816c6:	4798      	blx	r3
   816c8:	bd10      	pop	{r4, pc}
   816ca:	bf00      	nop
   816cc:	000813a1 	.word	0x000813a1
   816d0:	20078b0c 	.word	0x20078b0c
   816d4:	20078af0 	.word	0x20078af0
   816d8:	000808a5 	.word	0x000808a5
   816dc:	000810d1 	.word	0x000810d1
   816e0:	000814fd 	.word	0x000814fd
   816e4:	0008091d 	.word	0x0008091d

000816e8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
   816e8:	b580      	push	{r7, lr}
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
   816ea:	4d15      	ldr	r5, [pc, #84]	; (81740 <prvIdleTask+0x58>)

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
   816ec:	4e15      	ldr	r6, [pc, #84]	; (81744 <prvIdleTask+0x5c>)
			{
				taskYIELD();
   816ee:	f8df 8078 	ldr.w	r8, [pc, #120]	; 81768 <prvIdleTask+0x80>
   816f2:	e01c      	b.n	8172e <prvIdleTask+0x46>

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
		{
			vTaskSuspendAll();
   816f4:	4b14      	ldr	r3, [pc, #80]	; (81748 <prvIdleTask+0x60>)
   816f6:	4798      	blx	r3
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
   816f8:	4b14      	ldr	r3, [pc, #80]	; (8174c <prvIdleTask+0x64>)
   816fa:	681c      	ldr	r4, [r3, #0]
			xTaskResumeAll();
   816fc:	4b14      	ldr	r3, [pc, #80]	; (81750 <prvIdleTask+0x68>)
   816fe:	4798      	blx	r3

			if( xListIsEmpty == pdFALSE )
   81700:	b1ac      	cbz	r4, 8172e <prvIdleTask+0x46>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
   81702:	4b14      	ldr	r3, [pc, #80]	; (81754 <prvIdleTask+0x6c>)
   81704:	4798      	blx	r3
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
   81706:	4b11      	ldr	r3, [pc, #68]	; (8174c <prvIdleTask+0x64>)
   81708:	68db      	ldr	r3, [r3, #12]
   8170a:	68dc      	ldr	r4, [r3, #12]
					uxListRemove( &( pxTCB->xGenericListItem ) );
   8170c:	1d20      	adds	r0, r4, #4
   8170e:	4b12      	ldr	r3, [pc, #72]	; (81758 <prvIdleTask+0x70>)
   81710:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
   81712:	4b12      	ldr	r3, [pc, #72]	; (8175c <prvIdleTask+0x74>)
   81714:	681a      	ldr	r2, [r3, #0]
   81716:	3a01      	subs	r2, #1
   81718:	601a      	str	r2, [r3, #0]
					--uxTasksDeleted;
   8171a:	682b      	ldr	r3, [r5, #0]
   8171c:	3b01      	subs	r3, #1
   8171e:	602b      	str	r3, [r5, #0]
				}
				taskEXIT_CRITICAL();
   81720:	4b0f      	ldr	r3, [pc, #60]	; (81760 <prvIdleTask+0x78>)
   81722:	4798      	blx	r3
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
   81724:	6b20      	ldr	r0, [r4, #48]	; 0x30
   81726:	4f0f      	ldr	r7, [pc, #60]	; (81764 <prvIdleTask+0x7c>)
   81728:	47b8      	blx	r7
		vPortFree( pxTCB );
   8172a:	4620      	mov	r0, r4
   8172c:	47b8      	blx	r7
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
   8172e:	682b      	ldr	r3, [r5, #0]
   81730:	2b00      	cmp	r3, #0
   81732:	d1df      	bne.n	816f4 <prvIdleTask+0xc>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
   81734:	6833      	ldr	r3, [r6, #0]
   81736:	2b01      	cmp	r3, #1
   81738:	d9f9      	bls.n	8172e <prvIdleTask+0x46>
			{
				taskYIELD();
   8173a:	47c0      	blx	r8
   8173c:	e7f7      	b.n	8172e <prvIdleTask+0x46>
   8173e:	bf00      	nop
   81740:	200789f4 	.word	0x200789f4
   81744:	20078a24 	.word	0x20078a24
   81748:	000813a1 	.word	0x000813a1
   8174c:	200789f8 	.word	0x200789f8
   81750:	000814fd 	.word	0x000814fd
   81754:	0008093d 	.word	0x0008093d
   81758:	000808a5 	.word	0x000808a5
   8175c:	20078b30 	.word	0x20078b30
   81760:	0008095d 	.word	0x0008095d
   81764:	00080b4d 	.word	0x00080b4d
   81768:	0008091d 	.word	0x0008091d

0008176c <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
   8176c:	b508      	push	{r3, lr}
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
   8176e:	4b1d      	ldr	r3, [pc, #116]	; (817e4 <vTaskSwitchContext+0x78>)
   81770:	681b      	ldr	r3, [r3, #0]
   81772:	b95b      	cbnz	r3, 8178c <vTaskSwitchContext+0x20>
		#endif

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
   81774:	4b1c      	ldr	r3, [pc, #112]	; (817e8 <vTaskSwitchContext+0x7c>)
   81776:	681b      	ldr	r3, [r3, #0]
   81778:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   8177c:	009b      	lsls	r3, r3, #2
   8177e:	4a1b      	ldr	r2, [pc, #108]	; (817ec <vTaskSwitchContext+0x80>)
   81780:	58d3      	ldr	r3, [r2, r3]
   81782:	b9cb      	cbnz	r3, 817b8 <vTaskSwitchContext+0x4c>
   81784:	4b18      	ldr	r3, [pc, #96]	; (817e8 <vTaskSwitchContext+0x7c>)
   81786:	681b      	ldr	r3, [r3, #0]
   81788:	b953      	cbnz	r3, 817a0 <vTaskSwitchContext+0x34>
   8178a:	e005      	b.n	81798 <vTaskSwitchContext+0x2c>
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
   8178c:	2201      	movs	r2, #1
   8178e:	4b18      	ldr	r3, [pc, #96]	; (817f0 <vTaskSwitchContext+0x84>)
   81790:	601a      	str	r2, [r3, #0]
   81792:	bd08      	pop	{r3, pc}
		#endif

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
   81794:	681a      	ldr	r2, [r3, #0]
   81796:	b92a      	cbnz	r2, 817a4 <vTaskSwitchContext+0x38>
   81798:	4b16      	ldr	r3, [pc, #88]	; (817f4 <vTaskSwitchContext+0x88>)
   8179a:	4798      	blx	r3
   8179c:	bf00      	nop
   8179e:	e7fd      	b.n	8179c <vTaskSwitchContext+0x30>
   817a0:	4b11      	ldr	r3, [pc, #68]	; (817e8 <vTaskSwitchContext+0x7c>)
   817a2:	4912      	ldr	r1, [pc, #72]	; (817ec <vTaskSwitchContext+0x80>)
   817a4:	681a      	ldr	r2, [r3, #0]
   817a6:	3a01      	subs	r2, #1
   817a8:	601a      	str	r2, [r3, #0]
   817aa:	681a      	ldr	r2, [r3, #0]
   817ac:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   817b0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
   817b4:	2a00      	cmp	r2, #0
   817b6:	d0ed      	beq.n	81794 <vTaskSwitchContext+0x28>
   817b8:	4b0b      	ldr	r3, [pc, #44]	; (817e8 <vTaskSwitchContext+0x7c>)
   817ba:	681b      	ldr	r3, [r3, #0]
   817bc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   817c0:	4a0a      	ldr	r2, [pc, #40]	; (817ec <vTaskSwitchContext+0x80>)
   817c2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   817c6:	685a      	ldr	r2, [r3, #4]
   817c8:	6852      	ldr	r2, [r2, #4]
   817ca:	605a      	str	r2, [r3, #4]
   817cc:	f103 0108 	add.w	r1, r3, #8
   817d0:	428a      	cmp	r2, r1
   817d2:	bf04      	itt	eq
   817d4:	6852      	ldreq	r2, [r2, #4]
   817d6:	605a      	streq	r2, [r3, #4]
   817d8:	685b      	ldr	r3, [r3, #4]
   817da:	68da      	ldr	r2, [r3, #12]
   817dc:	4b06      	ldr	r3, [pc, #24]	; (817f8 <vTaskSwitchContext+0x8c>)
   817de:	601a      	str	r2, [r3, #0]
   817e0:	bd08      	pop	{r3, pc}
   817e2:	bf00      	nop
   817e4:	20078aec 	.word	0x20078aec
   817e8:	20078a20 	.word	0x20078a20
   817ec:	20078a24 	.word	0x20078a24
   817f0:	20078b2c 	.word	0x20078b2c
   817f4:	0008092d 	.word	0x0008092d
   817f8:	20078af0 	.word	0x20078af0

000817fc <vTaskPlaceOnEventList>:
	}
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
   817fc:	b538      	push	{r3, r4, r5, lr}
   817fe:	460c      	mov	r4, r1
portTickType xTimeToWake;

	configASSERT( pxEventList );
   81800:	b918      	cbnz	r0, 8180a <vTaskPlaceOnEventList+0xe>
   81802:	4b0f      	ldr	r3, [pc, #60]	; (81840 <vTaskPlaceOnEventList+0x44>)
   81804:	4798      	blx	r3
   81806:	bf00      	nop
   81808:	e7fd      	b.n	81806 <vTaskPlaceOnEventList+0xa>
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
   8180a:	4d0e      	ldr	r5, [pc, #56]	; (81844 <vTaskPlaceOnEventList+0x48>)
   8180c:	6829      	ldr	r1, [r5, #0]
   8180e:	3118      	adds	r1, #24
   81810:	4b0d      	ldr	r3, [pc, #52]	; (81848 <vTaskPlaceOnEventList+0x4c>)
   81812:	4798      	blx	r3

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
   81814:	6828      	ldr	r0, [r5, #0]
   81816:	3004      	adds	r0, #4
   81818:	4b0c      	ldr	r3, [pc, #48]	; (8184c <vTaskPlaceOnEventList+0x50>)
   8181a:	4798      	blx	r3
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
   8181c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   81820:	429c      	cmp	r4, r3
   81822:	d105      	bne.n	81830 <vTaskPlaceOnEventList+0x34>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   81824:	6829      	ldr	r1, [r5, #0]
   81826:	480a      	ldr	r0, [pc, #40]	; (81850 <vTaskPlaceOnEventList+0x54>)
   81828:	3104      	adds	r1, #4
   8182a:	4b0a      	ldr	r3, [pc, #40]	; (81854 <vTaskPlaceOnEventList+0x58>)
   8182c:	4798      	blx	r3
   8182e:	bd38      	pop	{r3, r4, r5, pc}
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
   81830:	4b09      	ldr	r3, [pc, #36]	; (81858 <vTaskPlaceOnEventList+0x5c>)
   81832:	8818      	ldrh	r0, [r3, #0]
   81834:	4420      	add	r0, r4
			prvAddCurrentTaskToDelayedList( xTimeToWake );
   81836:	b280      	uxth	r0, r0
   81838:	4b08      	ldr	r3, [pc, #32]	; (8185c <vTaskPlaceOnEventList+0x60>)
   8183a:	4798      	blx	r3
   8183c:	bd38      	pop	{r3, r4, r5, pc}
   8183e:	bf00      	nop
   81840:	0008092d 	.word	0x0008092d
   81844:	20078af0 	.word	0x20078af0
   81848:	00080861 	.word	0x00080861
   8184c:	000808a5 	.word	0x000808a5
   81850:	200789d8 	.word	0x200789d8
   81854:	00080845 	.word	0x00080845
   81858:	20078b0c 	.word	0x20078b0c
   8185c:	000810d1 	.word	0x000810d1

00081860 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( const xList * const pxEventList, portTickType xTicksToWait )
	{
   81860:	b538      	push	{r3, r4, r5, lr}
   81862:	460d      	mov	r5, r1
	portTickType xTimeToWake;

		configASSERT( pxEventList );
   81864:	b918      	cbnz	r0, 8186e <vTaskPlaceOnEventListRestricted+0xe>
   81866:	4b0a      	ldr	r3, [pc, #40]	; (81890 <vTaskPlaceOnEventListRestricted+0x30>)
   81868:	4798      	blx	r3
   8186a:	bf00      	nop
   8186c:	e7fd      	b.n	8186a <vTaskPlaceOnEventListRestricted+0xa>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
   8186e:	4c09      	ldr	r4, [pc, #36]	; (81894 <vTaskPlaceOnEventListRestricted+0x34>)
   81870:	6821      	ldr	r1, [r4, #0]
   81872:	3118      	adds	r1, #24
   81874:	4b08      	ldr	r3, [pc, #32]	; (81898 <vTaskPlaceOnEventListRestricted+0x38>)
   81876:	4798      	blx	r3

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called form a critical section. */
		if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
   81878:	6820      	ldr	r0, [r4, #0]
   8187a:	3004      	adds	r0, #4
   8187c:	4b07      	ldr	r3, [pc, #28]	; (8189c <vTaskPlaceOnEventListRestricted+0x3c>)
   8187e:	4798      	blx	r3
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
		}

		/* Calculate the time at which the task should be woken if the event does
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;
   81880:	4b07      	ldr	r3, [pc, #28]	; (818a0 <vTaskPlaceOnEventListRestricted+0x40>)
   81882:	8818      	ldrh	r0, [r3, #0]
   81884:	4428      	add	r0, r5
		
		traceTASK_DELAY_UNTIL();
		prvAddCurrentTaskToDelayedList( xTimeToWake );
   81886:	b280      	uxth	r0, r0
   81888:	4b06      	ldr	r3, [pc, #24]	; (818a4 <vTaskPlaceOnEventListRestricted+0x44>)
   8188a:	4798      	blx	r3
   8188c:	bd38      	pop	{r3, r4, r5, pc}
   8188e:	bf00      	nop
   81890:	0008092d 	.word	0x0008092d
   81894:	20078af0 	.word	0x20078af0
   81898:	00080845 	.word	0x00080845
   8189c:	000808a5 	.word	0x000808a5
   818a0:	20078b0c 	.word	0x20078b0c
   818a4:	000810d1 	.word	0x000810d1

000818a8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
   818a8:	b538      	push	{r3, r4, r5, lr}
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
   818aa:	68c3      	ldr	r3, [r0, #12]
   818ac:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
   818ae:	b91c      	cbnz	r4, 818b8 <xTaskRemoveFromEventList+0x10>
   818b0:	4b16      	ldr	r3, [pc, #88]	; (8190c <xTaskRemoveFromEventList+0x64>)
   818b2:	4798      	blx	r3
   818b4:	bf00      	nop
   818b6:	e7fd      	b.n	818b4 <xTaskRemoveFromEventList+0xc>
	uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
   818b8:	f104 0518 	add.w	r5, r4, #24
   818bc:	4628      	mov	r0, r5
   818be:	4b14      	ldr	r3, [pc, #80]	; (81910 <xTaskRemoveFromEventList+0x68>)
   818c0:	4798      	blx	r3

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   818c2:	4b14      	ldr	r3, [pc, #80]	; (81914 <xTaskRemoveFromEventList+0x6c>)
   818c4:	681b      	ldr	r3, [r3, #0]
   818c6:	b99b      	cbnz	r3, 818f0 <xTaskRemoveFromEventList+0x48>
	{
		uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
   818c8:	1d25      	adds	r5, r4, #4
   818ca:	4628      	mov	r0, r5
   818cc:	4b10      	ldr	r3, [pc, #64]	; (81910 <xTaskRemoveFromEventList+0x68>)
   818ce:	4798      	blx	r3
		prvAddTaskToReadyQueue( pxUnblockedTCB );
   818d0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   818d2:	4a11      	ldr	r2, [pc, #68]	; (81918 <xTaskRemoveFromEventList+0x70>)
   818d4:	6812      	ldr	r2, [r2, #0]
   818d6:	4293      	cmp	r3, r2
   818d8:	bf84      	itt	hi
   818da:	4a0f      	ldrhi	r2, [pc, #60]	; (81918 <xTaskRemoveFromEventList+0x70>)
   818dc:	6013      	strhi	r3, [r2, #0]
   818de:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   818e2:	480e      	ldr	r0, [pc, #56]	; (8191c <xTaskRemoveFromEventList+0x74>)
   818e4:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   818e8:	4629      	mov	r1, r5
   818ea:	4b0d      	ldr	r3, [pc, #52]	; (81920 <xTaskRemoveFromEventList+0x78>)
   818ec:	4798      	blx	r3
   818ee:	e003      	b.n	818f8 <xTaskRemoveFromEventList+0x50>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
   818f0:	480c      	ldr	r0, [pc, #48]	; (81924 <xTaskRemoveFromEventList+0x7c>)
   818f2:	4629      	mov	r1, r5
   818f4:	4b0a      	ldr	r3, [pc, #40]	; (81920 <xTaskRemoveFromEventList+0x78>)
   818f6:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
   818f8:	4b0b      	ldr	r3, [pc, #44]	; (81928 <xTaskRemoveFromEventList+0x80>)
   818fa:	681b      	ldr	r3, [r3, #0]
   818fc:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   818fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	{
		xReturn = pdFALSE;
	}

	return xReturn;
}
   81900:	4298      	cmp	r0, r3
   81902:	bf34      	ite	cc
   81904:	2000      	movcc	r0, #0
   81906:	2001      	movcs	r0, #1
   81908:	bd38      	pop	{r3, r4, r5, pc}
   8190a:	bf00      	nop
   8190c:	0008092d 	.word	0x0008092d
   81910:	000808a5 	.word	0x000808a5
   81914:	20078aec 	.word	0x20078aec
   81918:	20078a20 	.word	0x20078a20
   8191c:	20078a24 	.word	0x20078a24
   81920:	00080845 	.word	0x00080845
   81924:	20078af4 	.word	0x20078af4
   81928:	20078af0 	.word	0x20078af0

0008192c <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
   8192c:	b508      	push	{r3, lr}
	configASSERT( pxTimeOut );
   8192e:	b918      	cbnz	r0, 81938 <vTaskSetTimeOutState+0xc>
   81930:	4b05      	ldr	r3, [pc, #20]	; (81948 <vTaskSetTimeOutState+0x1c>)
   81932:	4798      	blx	r3
   81934:	bf00      	nop
   81936:	e7fd      	b.n	81934 <vTaskSetTimeOutState+0x8>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   81938:	4a04      	ldr	r2, [pc, #16]	; (8194c <vTaskSetTimeOutState+0x20>)
   8193a:	6812      	ldr	r2, [r2, #0]
   8193c:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
   8193e:	4a04      	ldr	r2, [pc, #16]	; (81950 <vTaskSetTimeOutState+0x24>)
   81940:	8812      	ldrh	r2, [r2, #0]
   81942:	8082      	strh	r2, [r0, #4]
   81944:	bd08      	pop	{r3, pc}
   81946:	bf00      	nop
   81948:	0008092d 	.word	0x0008092d
   8194c:	20078b08 	.word	0x20078b08
   81950:	20078b0c 	.word	0x20078b0c

00081954 <xTaskCheckForTimeOut>:
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
   81954:	b538      	push	{r3, r4, r5, lr}
   81956:	460d      	mov	r5, r1
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
   81958:	4604      	mov	r4, r0
   8195a:	b918      	cbnz	r0, 81964 <xTaskCheckForTimeOut+0x10>
   8195c:	4b1a      	ldr	r3, [pc, #104]	; (819c8 <xTaskCheckForTimeOut+0x74>)
   8195e:	4798      	blx	r3
   81960:	bf00      	nop
   81962:	e7fd      	b.n	81960 <xTaskCheckForTimeOut+0xc>
	configASSERT( pxTicksToWait );
   81964:	b919      	cbnz	r1, 8196e <xTaskCheckForTimeOut+0x1a>
   81966:	4b18      	ldr	r3, [pc, #96]	; (819c8 <xTaskCheckForTimeOut+0x74>)
   81968:	4798      	blx	r3
   8196a:	bf00      	nop
   8196c:	e7fd      	b.n	8196a <xTaskCheckForTimeOut+0x16>

	taskENTER_CRITICAL();
   8196e:	4b17      	ldr	r3, [pc, #92]	; (819cc <xTaskCheckForTimeOut+0x78>)
   81970:	4798      	blx	r3
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
   81972:	882b      	ldrh	r3, [r5, #0]
   81974:	f64f 72ff 	movw	r2, #65535	; 0xffff
   81978:	4293      	cmp	r3, r2
   8197a:	d01c      	beq.n	819b6 <xTaskCheckForTimeOut+0x62>
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
   8197c:	4a14      	ldr	r2, [pc, #80]	; (819d0 <xTaskCheckForTimeOut+0x7c>)
   8197e:	6811      	ldr	r1, [r2, #0]
   81980:	6822      	ldr	r2, [r4, #0]
   81982:	428a      	cmp	r2, r1
   81984:	d005      	beq.n	81992 <xTaskCheckForTimeOut+0x3e>
   81986:	4a13      	ldr	r2, [pc, #76]	; (819d4 <xTaskCheckForTimeOut+0x80>)
   81988:	8812      	ldrh	r2, [r2, #0]
   8198a:	b292      	uxth	r2, r2
   8198c:	88a1      	ldrh	r1, [r4, #4]
   8198e:	4291      	cmp	r1, r2
   81990:	d913      	bls.n	819ba <xTaskCheckForTimeOut+0x66>
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
   81992:	4a10      	ldr	r2, [pc, #64]	; (819d4 <xTaskCheckForTimeOut+0x80>)
   81994:	8811      	ldrh	r1, [r2, #0]
   81996:	88a2      	ldrh	r2, [r4, #4]
   81998:	1a89      	subs	r1, r1, r2
   8199a:	b289      	uxth	r1, r1
   8199c:	428b      	cmp	r3, r1
   8199e:	d90e      	bls.n	819be <xTaskCheckForTimeOut+0x6a>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
   819a0:	490c      	ldr	r1, [pc, #48]	; (819d4 <xTaskCheckForTimeOut+0x80>)
   819a2:	8809      	ldrh	r1, [r1, #0]
   819a4:	b289      	uxth	r1, r1
   819a6:	1a52      	subs	r2, r2, r1
   819a8:	4413      	add	r3, r2
   819aa:	802b      	strh	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
   819ac:	4620      	mov	r0, r4
   819ae:	4b0a      	ldr	r3, [pc, #40]	; (819d8 <xTaskCheckForTimeOut+0x84>)
   819b0:	4798      	blx	r3
			xReturn = pdFALSE;
   819b2:	2400      	movs	r4, #0
   819b4:	e004      	b.n	819c0 <xTaskCheckForTimeOut+0x6c>
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
			{
				xReturn = pdFALSE;
   819b6:	2400      	movs	r4, #0
   819b8:	e002      	b.n	819c0 <xTaskCheckForTimeOut+0x6c>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
   819ba:	2401      	movs	r4, #1
   819bc:	e000      	b.n	819c0 <xTaskCheckForTimeOut+0x6c>
			vTaskSetTimeOutState( pxTimeOut );
			xReturn = pdFALSE;
		}
		else
		{
			xReturn = pdTRUE;
   819be:	2401      	movs	r4, #1
		}
	}
	taskEXIT_CRITICAL();
   819c0:	4b06      	ldr	r3, [pc, #24]	; (819dc <xTaskCheckForTimeOut+0x88>)
   819c2:	4798      	blx	r3

	return xReturn;
}
   819c4:	4620      	mov	r0, r4
   819c6:	bd38      	pop	{r3, r4, r5, pc}
   819c8:	0008092d 	.word	0x0008092d
   819cc:	0008093d 	.word	0x0008093d
   819d0:	20078b08 	.word	0x20078b08
   819d4:	20078b0c 	.word	0x20078b0c
   819d8:	0008192d 	.word	0x0008192d
   819dc:	0008095d 	.word	0x0008095d

000819e0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xMissedYield = pdTRUE;
   819e0:	2201      	movs	r2, #1
   819e2:	4b01      	ldr	r3, [pc, #4]	; (819e8 <vTaskMissedYield+0x8>)
   819e4:	601a      	str	r2, [r3, #0]
   819e6:	4770      	bx	lr
   819e8:	20078b2c 	.word	0x20078b2c

000819ec <xTaskGetCurrentTaskHandle>:
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
   819ec:	4b01      	ldr	r3, [pc, #4]	; (819f4 <xTaskGetCurrentTaskHandle+0x8>)
   819ee:	6818      	ldr	r0, [r3, #0]

		return xReturn;
	}
   819f0:	4770      	bx	lr
   819f2:	bf00      	nop
   819f4:	20078af0 	.word	0x20078af0

000819f8 <xTaskGetSchedulerState>:

	portBASE_TYPE xTaskGetSchedulerState( void )
	{
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
   819f8:	4b05      	ldr	r3, [pc, #20]	; (81a10 <xTaskGetSchedulerState+0x18>)
   819fa:	681b      	ldr	r3, [r3, #0]
   819fc:	b133      	cbz	r3, 81a0c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   819fe:	4b05      	ldr	r3, [pc, #20]	; (81a14 <xTaskGetSchedulerState+0x1c>)
   81a00:	681b      	ldr	r3, [r3, #0]
			{
				xReturn = taskSCHEDULER_RUNNING;
   81a02:	2b00      	cmp	r3, #0
   81a04:	bf14      	ite	ne
   81a06:	2002      	movne	r0, #2
   81a08:	2001      	moveq	r0, #1
   81a0a:	4770      	bx	lr
	{
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
   81a0c:	2000      	movs	r0, #0
				xReturn = taskSCHEDULER_SUSPENDED;
			}
		}

		return xReturn;
	}
   81a0e:	4770      	bx	lr
   81a10:	200789f0 	.word	0x200789f0
   81a14:	20078aec 	.word	0x20078aec

00081a18 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
   81a18:	b538      	push	{r3, r4, r5, lr}
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
   81a1a:	4604      	mov	r4, r0
   81a1c:	2800      	cmp	r0, #0
   81a1e:	d02e      	beq.n	81a7e <vTaskPriorityInherit+0x66>
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
   81a20:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   81a22:	4a17      	ldr	r2, [pc, #92]	; (81a80 <vTaskPriorityInherit+0x68>)
   81a24:	6812      	ldr	r2, [r2, #0]
   81a26:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
   81a28:	4293      	cmp	r3, r2
   81a2a:	d228      	bcs.n	81a7e <vTaskPriorityInherit+0x66>
			{
				/* Adjust the mutex holder state to account for its new priority. */
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
   81a2c:	4a14      	ldr	r2, [pc, #80]	; (81a80 <vTaskPriorityInherit+0x68>)
   81a2e:	6812      	ldr	r2, [r2, #0]
   81a30:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
   81a32:	f1c2 020a 	rsb	r2, r2, #10
   81a36:	8302      	strh	r2, [r0, #24]

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
   81a38:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   81a3c:	4a11      	ldr	r2, [pc, #68]	; (81a84 <vTaskPriorityInherit+0x6c>)
   81a3e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   81a42:	6942      	ldr	r2, [r0, #20]
   81a44:	429a      	cmp	r2, r3
   81a46:	d116      	bne.n	81a76 <vTaskPriorityInherit+0x5e>
				{
					if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
   81a48:	1d05      	adds	r5, r0, #4
   81a4a:	4628      	mov	r0, r5
   81a4c:	4b0e      	ldr	r3, [pc, #56]	; (81a88 <vTaskPriorityInherit+0x70>)
   81a4e:	4798      	blx	r3
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
   81a50:	4b0b      	ldr	r3, [pc, #44]	; (81a80 <vTaskPriorityInherit+0x68>)
   81a52:	681b      	ldr	r3, [r3, #0]
   81a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   81a56:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyQueue( pxTCB );
   81a58:	4a0c      	ldr	r2, [pc, #48]	; (81a8c <vTaskPriorityInherit+0x74>)
   81a5a:	6812      	ldr	r2, [r2, #0]
   81a5c:	4293      	cmp	r3, r2
   81a5e:	bf84      	itt	hi
   81a60:	4a0a      	ldrhi	r2, [pc, #40]	; (81a8c <vTaskPriorityInherit+0x74>)
   81a62:	6013      	strhi	r3, [r2, #0]
   81a64:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   81a68:	4806      	ldr	r0, [pc, #24]	; (81a84 <vTaskPriorityInherit+0x6c>)
   81a6a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   81a6e:	4629      	mov	r1, r5
   81a70:	4b07      	ldr	r3, [pc, #28]	; (81a90 <vTaskPriorityInherit+0x78>)
   81a72:	4798      	blx	r3
   81a74:	bd38      	pop	{r3, r4, r5, pc}
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
   81a76:	4b02      	ldr	r3, [pc, #8]	; (81a80 <vTaskPriorityInherit+0x68>)
   81a78:	681b      	ldr	r3, [r3, #0]
   81a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   81a7c:	62c3      	str	r3, [r0, #44]	; 0x2c
   81a7e:	bd38      	pop	{r3, r4, r5, pc}
   81a80:	20078af0 	.word	0x20078af0
   81a84:	20078a24 	.word	0x20078a24
   81a88:	000808a5 	.word	0x000808a5
   81a8c:	20078a20 	.word	0x20078a20
   81a90:	00080845 	.word	0x00080845

00081a94 <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
   81a94:	b538      	push	{r3, r4, r5, lr}
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		if( pxMutexHolder != NULL )
   81a96:	4604      	mov	r4, r0
   81a98:	b1d0      	cbz	r0, 81ad0 <vTaskPriorityDisinherit+0x3c>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
   81a9a:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   81a9c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   81a9e:	429a      	cmp	r2, r3
   81aa0:	d016      	beq.n	81ad0 <vTaskPriorityDisinherit+0x3c>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
   81aa2:	1d05      	adds	r5, r0, #4
   81aa4:	4628      	mov	r0, r5
   81aa6:	4b0b      	ldr	r3, [pc, #44]	; (81ad4 <vTaskPriorityDisinherit+0x40>)
   81aa8:	4798      	blx	r3
				}

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
   81aaa:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   81aac:	62e3      	str	r3, [r4, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
   81aae:	f1c3 020a 	rsb	r2, r3, #10
   81ab2:	8322      	strh	r2, [r4, #24]
				prvAddTaskToReadyQueue( pxTCB );
   81ab4:	4a08      	ldr	r2, [pc, #32]	; (81ad8 <vTaskPriorityDisinherit+0x44>)
   81ab6:	6812      	ldr	r2, [r2, #0]
   81ab8:	4293      	cmp	r3, r2
   81aba:	bf84      	itt	hi
   81abc:	4a06      	ldrhi	r2, [pc, #24]	; (81ad8 <vTaskPriorityDisinherit+0x44>)
   81abe:	6013      	strhi	r3, [r2, #0]
   81ac0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   81ac4:	4805      	ldr	r0, [pc, #20]	; (81adc <vTaskPriorityDisinherit+0x48>)
   81ac6:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   81aca:	4629      	mov	r1, r5
   81acc:	4b04      	ldr	r3, [pc, #16]	; (81ae0 <vTaskPriorityDisinherit+0x4c>)
   81ace:	4798      	blx	r3
   81ad0:	bd38      	pop	{r3, r4, r5, pc}
   81ad2:	bf00      	nop
   81ad4:	000808a5 	.word	0x000808a5
   81ad8:	20078a20 	.word	0x20078a20
   81adc:	20078a24 	.word	0x20078a24
   81ae0:	00080845 	.word	0x00080845

00081ae4 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
   81ae4:	b510      	push	{r4, lr}
   81ae6:	4604      	mov	r4, r0
portBASE_TYPE xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
   81ae8:	8081      	strh	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   81aea:	6120      	str	r0, [r4, #16]

	if( xNextExpiryTime <= xTimeNow )
   81aec:	4291      	cmp	r1, r2
   81aee:	d80b      	bhi.n	81b08 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( portTickType ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
   81af0:	1ad3      	subs	r3, r2, r3
   81af2:	8b01      	ldrh	r1, [r0, #24]
   81af4:	b29b      	uxth	r3, r3
   81af6:	4299      	cmp	r1, r3
   81af8:	d911      	bls.n	81b1e <prvInsertTimerInActiveList+0x3a>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
   81afa:	4b0b      	ldr	r3, [pc, #44]	; (81b28 <prvInsertTimerInActiveList+0x44>)
   81afc:	6818      	ldr	r0, [r3, #0]
   81afe:	1d21      	adds	r1, r4, #4
   81b00:	4b0a      	ldr	r3, [pc, #40]	; (81b2c <prvInsertTimerInActiveList+0x48>)
   81b02:	4798      	blx	r3
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
portBASE_TYPE xProcessTimerNow = pdFALSE;
   81b04:	2000      	movs	r0, #0
   81b06:	bd10      	pop	{r4, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
   81b08:	429a      	cmp	r2, r3
   81b0a:	d201      	bcs.n	81b10 <prvInsertTimerInActiveList+0x2c>
   81b0c:	4299      	cmp	r1, r3
   81b0e:	d208      	bcs.n	81b22 <prvInsertTimerInActiveList+0x3e>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   81b10:	4b07      	ldr	r3, [pc, #28]	; (81b30 <prvInsertTimerInActiveList+0x4c>)
   81b12:	6818      	ldr	r0, [r3, #0]
   81b14:	1d21      	adds	r1, r4, #4
   81b16:	4b05      	ldr	r3, [pc, #20]	; (81b2c <prvInsertTimerInActiveList+0x48>)
   81b18:	4798      	blx	r3
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
portBASE_TYPE xProcessTimerNow = pdFALSE;
   81b1a:	2000      	movs	r0, #0
   81b1c:	bd10      	pop	{r4, pc}
		timer was issued, and the time the command was processed? */
		if( ( ( portTickType ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
   81b1e:	2001      	movs	r0, #1
   81b20:	bd10      	pop	{r4, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
   81b22:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
   81b24:	bd10      	pop	{r4, pc}
   81b26:	bf00      	nop
   81b28:	20078b6c 	.word	0x20078b6c
   81b2c:	00080861 	.word	0x00080861
   81b30:	20078b38 	.word	0x20078b38

00081b34 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
   81b34:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
   81b36:	4b0d      	ldr	r3, [pc, #52]	; (81b6c <prvCheckForValidListAndQueue+0x38>)
   81b38:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
   81b3a:	4b0d      	ldr	r3, [pc, #52]	; (81b70 <prvCheckForValidListAndQueue+0x3c>)
   81b3c:	681b      	ldr	r3, [r3, #0]
   81b3e:	b98b      	cbnz	r3, 81b64 <prvCheckForValidListAndQueue+0x30>
		{
			vListInitialise( &xActiveTimerList1 );
   81b40:	4d0c      	ldr	r5, [pc, #48]	; (81b74 <prvCheckForValidListAndQueue+0x40>)
   81b42:	4628      	mov	r0, r5
   81b44:	4e0c      	ldr	r6, [pc, #48]	; (81b78 <prvCheckForValidListAndQueue+0x44>)
   81b46:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
   81b48:	4c0c      	ldr	r4, [pc, #48]	; (81b7c <prvCheckForValidListAndQueue+0x48>)
   81b4a:	4620      	mov	r0, r4
   81b4c:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
   81b4e:	4b0c      	ldr	r3, [pc, #48]	; (81b80 <prvCheckForValidListAndQueue+0x4c>)
   81b50:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
   81b52:	4b0c      	ldr	r3, [pc, #48]	; (81b84 <prvCheckForValidListAndQueue+0x50>)
   81b54:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( unsigned portBASE_TYPE ) configTIMER_QUEUE_LENGTH, sizeof( xTIMER_MESSAGE ) );
   81b56:	2005      	movs	r0, #5
   81b58:	210c      	movs	r1, #12
   81b5a:	2200      	movs	r2, #0
   81b5c:	4b0a      	ldr	r3, [pc, #40]	; (81b88 <prvCheckForValidListAndQueue+0x54>)
   81b5e:	4798      	blx	r3
   81b60:	4b03      	ldr	r3, [pc, #12]	; (81b70 <prvCheckForValidListAndQueue+0x3c>)
   81b62:	6018      	str	r0, [r3, #0]
		}
	}
	taskEXIT_CRITICAL();
   81b64:	4b09      	ldr	r3, [pc, #36]	; (81b8c <prvCheckForValidListAndQueue+0x58>)
   81b66:	4798      	blx	r3
   81b68:	bd70      	pop	{r4, r5, r6, pc}
   81b6a:	bf00      	nop
   81b6c:	0008093d 	.word	0x0008093d
   81b70:	20078b68 	.word	0x20078b68
   81b74:	20078b3c 	.word	0x20078b3c
   81b78:	00080825 	.word	0x00080825
   81b7c:	20078b50 	.word	0x20078b50
   81b80:	20078b38 	.word	0x20078b38
   81b84:	20078b6c 	.word	0x20078b6c
   81b88:	00080d15 	.word	0x00080d15
   81b8c:	0008095d 	.word	0x0008095d

00081b90 <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

portBASE_TYPE xTimerCreateTimerTask( void )
{
   81b90:	b510      	push	{r4, lr}
   81b92:	b084      	sub	sp, #16

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
   81b94:	4b0b      	ldr	r3, [pc, #44]	; (81bc4 <xTimerCreateTimerTask+0x34>)
   81b96:	4798      	blx	r3

	if( xTimerQueue != NULL )
   81b98:	4b0b      	ldr	r3, [pc, #44]	; (81bc8 <xTimerCreateTimerTask+0x38>)
   81b9a:	681b      	ldr	r3, [r3, #0]
   81b9c:	b163      	cbz	r3, 81bb8 <xTimerCreateTimerTask+0x28>
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
   81b9e:	2309      	movs	r3, #9
   81ba0:	9300      	str	r3, [sp, #0]
   81ba2:	2300      	movs	r3, #0
   81ba4:	9301      	str	r3, [sp, #4]
   81ba6:	9302      	str	r3, [sp, #8]
   81ba8:	9303      	str	r3, [sp, #12]
   81baa:	4808      	ldr	r0, [pc, #32]	; (81bcc <xTimerCreateTimerTask+0x3c>)
   81bac:	4908      	ldr	r1, [pc, #32]	; (81bd0 <xTimerCreateTimerTask+0x40>)
   81bae:	f44f 7200 	mov.w	r2, #512	; 0x200
   81bb2:	4c08      	ldr	r4, [pc, #32]	; (81bd4 <xTimerCreateTimerTask+0x44>)
   81bb4:	47a0      	blx	r4
		}
		#endif
	}

	configASSERT( xReturn );
   81bb6:	b918      	cbnz	r0, 81bc0 <xTimerCreateTimerTask+0x30>
   81bb8:	4b07      	ldr	r3, [pc, #28]	; (81bd8 <xTimerCreateTimerTask+0x48>)
   81bba:	4798      	blx	r3
   81bbc:	bf00      	nop
   81bbe:	e7fd      	b.n	81bbc <xTimerCreateTimerTask+0x2c>
	return xReturn;
}
   81bc0:	b004      	add	sp, #16
   81bc2:	bd10      	pop	{r4, pc}
   81bc4:	00081b35 	.word	0x00081b35
   81bc8:	20078b68 	.word	0x20078b68
   81bcc:	00081cf1 	.word	0x00081cf1
   81bd0:	00085938 	.word	0x00085938
   81bd4:	0008112d 	.word	0x0008112d
   81bd8:	0008092d 	.word	0x0008092d

00081bdc <xTimerGenericCommand>:
	return ( xTimerHandle ) pxNewTimer;
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerGenericCommand( xTimerHandle xTimer, portBASE_TYPE xCommandID, portTickType xOptionalValue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portTickType xBlockTime )
{
   81bdc:	b510      	push	{r4, lr}
   81bde:	b084      	sub	sp, #16
portBASE_TYPE xReturn = pdFAIL;
xTIMER_MESSAGE xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
   81be0:	4c10      	ldr	r4, [pc, #64]	; (81c24 <xTimerGenericCommand+0x48>)
   81be2:	6824      	ldr	r4, [r4, #0]
   81be4:	b1d4      	cbz	r4, 81c1c <xTimerGenericCommand+0x40>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
   81be6:	9101      	str	r1, [sp, #4]
		xMessage.xMessageValue = xOptionalValue;
   81be8:	f8ad 2008 	strh.w	r2, [sp, #8]
		xMessage.pxTimer = ( xTIMER * ) xTimer;
   81bec:	9003      	str	r0, [sp, #12]

		if( pxHigherPriorityTaskWoken == NULL )
   81bee:	b973      	cbnz	r3, 81c0e <xTimerGenericCommand+0x32>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
   81bf0:	4b0d      	ldr	r3, [pc, #52]	; (81c28 <xTimerGenericCommand+0x4c>)
   81bf2:	4798      	blx	r3
   81bf4:	2801      	cmp	r0, #1
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xBlockTime );
   81bf6:	4b0b      	ldr	r3, [pc, #44]	; (81c24 <xTimerGenericCommand+0x48>)
   81bf8:	6818      	ldr	r0, [r3, #0]
   81bfa:	a901      	add	r1, sp, #4
   81bfc:	bf07      	ittee	eq
   81bfe:	f8bd 2018 	ldrheq.w	r2, [sp, #24]
   81c02:	2300      	moveq	r3, #0
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
   81c04:	2200      	movne	r2, #0
   81c06:	4613      	movne	r3, r2
   81c08:	4c08      	ldr	r4, [pc, #32]	; (81c2c <xTimerGenericCommand+0x50>)
   81c0a:	47a0      	blx	r4
   81c0c:	e007      	b.n	81c1e <xTimerGenericCommand+0x42>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   81c0e:	4620      	mov	r0, r4
   81c10:	a901      	add	r1, sp, #4
   81c12:	461a      	mov	r2, r3
   81c14:	2300      	movs	r3, #0
   81c16:	4c06      	ldr	r4, [pc, #24]	; (81c30 <xTimerGenericCommand+0x54>)
   81c18:	47a0      	blx	r4
   81c1a:	e000      	b.n	81c1e <xTimerGenericCommand+0x42>
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerGenericCommand( xTimerHandle xTimer, portBASE_TYPE xCommandID, portTickType xOptionalValue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portTickType xBlockTime )
{
portBASE_TYPE xReturn = pdFAIL;
   81c1c:	2000      	movs	r0, #0

		traceTIMER_COMMAND_SEND( xTimer, xCommandID, xOptionalValue, xReturn );
	}

	return xReturn;
}
   81c1e:	b004      	add	sp, #16
   81c20:	bd10      	pop	{r4, pc}
   81c22:	bf00      	nop
   81c24:	20078b68 	.word	0x20078b68
   81c28:	000819f9 	.word	0x000819f9
   81c2c:	00080d6d 	.word	0x00080d6d
   81c30:	00080e91 	.word	0x00080e91

00081c34 <prvSampleTimeNow>:
	return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static portTickType prvSampleTimeNow( portBASE_TYPE *pxTimerListsWereSwitched )
{
   81c34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   81c38:	b082      	sub	sp, #8
   81c3a:	4681      	mov	r9, r0
portTickType xTimeNow;
PRIVILEGED_DATA static portTickType xLastTime = ( portTickType ) 0U;

	xTimeNow = xTaskGetTickCount();
   81c3c:	4b24      	ldr	r3, [pc, #144]	; (81cd0 <prvSampleTimeNow+0x9c>)
   81c3e:	4798      	blx	r3
   81c40:	4680      	mov	r8, r0

	if( xTimeNow < xLastTime )
   81c42:	4b24      	ldr	r3, [pc, #144]	; (81cd4 <prvSampleTimeNow+0xa0>)
   81c44:	881b      	ldrh	r3, [r3, #0]
   81c46:	4283      	cmp	r3, r0
   81c48:	d937      	bls.n	81cba <prvSampleTimeNow+0x86>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   81c4a:	4e23      	ldr	r6, [pc, #140]	; (81cd8 <prvSampleTimeNow+0xa4>)
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );

		/* Remove the timer from the list. */
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
		uxListRemove( &( pxTimer->xTimerListItem ) );
   81c4c:	4f23      	ldr	r7, [pc, #140]	; (81cdc <prvSampleTimeNow+0xa8>)
   81c4e:	e027      	b.n	81ca0 <prvSampleTimeNow+0x6c>
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   81c50:	68da      	ldr	r2, [r3, #12]
   81c52:	f8b2 a000 	ldrh.w	sl, [r2]
   81c56:	fa1f fa8a 	uxth.w	sl, sl

		/* Remove the timer from the list. */
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   81c5a:	68db      	ldr	r3, [r3, #12]
   81c5c:	68dc      	ldr	r4, [r3, #12]
		uxListRemove( &( pxTimer->xTimerListItem ) );
   81c5e:	1d25      	adds	r5, r4, #4
   81c60:	4628      	mov	r0, r5
   81c62:	47b8      	blx	r7

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
   81c64:	6a63      	ldr	r3, [r4, #36]	; 0x24
   81c66:	4620      	mov	r0, r4
   81c68:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
   81c6a:	69e3      	ldr	r3, [r4, #28]
   81c6c:	2b01      	cmp	r3, #1
   81c6e:	d117      	bne.n	81ca0 <prvSampleTimeNow+0x6c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
   81c70:	8b23      	ldrh	r3, [r4, #24]
   81c72:	4453      	add	r3, sl
   81c74:	b29b      	uxth	r3, r3
			if( xReloadTime > xNextExpireTime )
   81c76:	4553      	cmp	r3, sl
   81c78:	d906      	bls.n	81c88 <prvSampleTimeNow+0x54>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
   81c7a:	80a3      	strh	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   81c7c:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   81c7e:	6830      	ldr	r0, [r6, #0]
   81c80:	4629      	mov	r1, r5
   81c82:	4b17      	ldr	r3, [pc, #92]	; (81ce0 <prvSampleTimeNow+0xac>)
   81c84:	4798      	blx	r3
   81c86:	e00b      	b.n	81ca0 <prvSampleTimeNow+0x6c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
   81c88:	2300      	movs	r3, #0
   81c8a:	9300      	str	r3, [sp, #0]
   81c8c:	4620      	mov	r0, r4
   81c8e:	4619      	mov	r1, r3
   81c90:	4652      	mov	r2, sl
   81c92:	4c14      	ldr	r4, [pc, #80]	; (81ce4 <prvSampleTimeNow+0xb0>)
   81c94:	47a0      	blx	r4
				configASSERT( xResult );
   81c96:	b918      	cbnz	r0, 81ca0 <prvSampleTimeNow+0x6c>
   81c98:	4b13      	ldr	r3, [pc, #76]	; (81ce8 <prvSampleTimeNow+0xb4>)
   81c9a:	4798      	blx	r3
   81c9c:	bf00      	nop
   81c9e:	e7fd      	b.n	81c9c <prvSampleTimeNow+0x68>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   81ca0:	6833      	ldr	r3, [r6, #0]
   81ca2:	681a      	ldr	r2, [r3, #0]
   81ca4:	2a00      	cmp	r2, #0
   81ca6:	d1d3      	bne.n	81c50 <prvSampleTimeNow+0x1c>
			}
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
   81ca8:	4a10      	ldr	r2, [pc, #64]	; (81cec <prvSampleTimeNow+0xb8>)
   81caa:	6811      	ldr	r1, [r2, #0]
   81cac:	480a      	ldr	r0, [pc, #40]	; (81cd8 <prvSampleTimeNow+0xa4>)
   81cae:	6001      	str	r1, [r0, #0]
	pxOverflowTimerList = pxTemp;
   81cb0:	6013      	str	r3, [r2, #0]
	xTimeNow = xTaskGetTickCount();

	if( xTimeNow < xLastTime )
	{
		prvSwitchTimerLists( xLastTime );
		*pxTimerListsWereSwitched = pdTRUE;
   81cb2:	2301      	movs	r3, #1
   81cb4:	f8c9 3000 	str.w	r3, [r9]
   81cb8:	e002      	b.n	81cc0 <prvSampleTimeNow+0x8c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
   81cba:	2300      	movs	r3, #0
   81cbc:	f8c9 3000 	str.w	r3, [r9]
	}

	xLastTime = xTimeNow;
   81cc0:	4b04      	ldr	r3, [pc, #16]	; (81cd4 <prvSampleTimeNow+0xa0>)
   81cc2:	f8a3 8000 	strh.w	r8, [r3]

	return xTimeNow;
}
   81cc6:	4640      	mov	r0, r8
   81cc8:	b002      	add	sp, #8
   81cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   81cce:	bf00      	nop
   81cd0:	000813b1 	.word	0x000813b1
   81cd4:	20078b64 	.word	0x20078b64
   81cd8:	20078b38 	.word	0x20078b38
   81cdc:	000808a5 	.word	0x000808a5
   81ce0:	00080861 	.word	0x00080861
   81ce4:	00081bdd 	.word	0x00081bdd
   81ce8:	0008092d 	.word	0x0008092d
   81cec:	20078b6c 	.word	0x20078b6c

00081cf0 <prvTimerTask>:
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
}
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
   81cf0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   81cf4:	b087      	sub	sp, #28
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
   81cf6:	4d51      	ldr	r5, [pc, #324]	; (81e3c <prvTimerTask+0x14c>)
portBASE_TYPE xResult;

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
	uxListRemove( &( pxTimer->xTimerListItem ) );
   81cf8:	f8df 8170 	ldr.w	r8, [pc, #368]	; 81e6c <prvTimerTask+0x17c>
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
   81cfc:	4b50      	ldr	r3, [pc, #320]	; (81e40 <prvTimerTask+0x150>)
   81cfe:	681b      	ldr	r3, [r3, #0]
   81d00:	681a      	ldr	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
   81d02:	2a00      	cmp	r2, #0
   81d04:	f000 8090 	beq.w	81e28 <prvTimerTask+0x138>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   81d08:	68db      	ldr	r3, [r3, #12]
   81d0a:	881e      	ldrh	r6, [r3, #0]
   81d0c:	b2b6      	uxth	r6, r6
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
   81d0e:	4b4d      	ldr	r3, [pc, #308]	; (81e44 <prvTimerTask+0x154>)
   81d10:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   81d12:	a803      	add	r0, sp, #12
   81d14:	4b4c      	ldr	r3, [pc, #304]	; (81e48 <prvTimerTask+0x158>)
   81d16:	4798      	blx	r3
   81d18:	4607      	mov	r7, r0
		if( xTimerListsWereSwitched == pdFALSE )
   81d1a:	9b03      	ldr	r3, [sp, #12]
   81d1c:	2b00      	cmp	r3, #0
   81d1e:	d132      	bne.n	81d86 <prvTimerTask+0x96>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
   81d20:	4286      	cmp	r6, r0
   81d22:	d825      	bhi.n	81d70 <prvTimerTask+0x80>
			{
				xTaskResumeAll();
   81d24:	4b49      	ldr	r3, [pc, #292]	; (81e4c <prvTimerTask+0x15c>)
   81d26:	4798      	blx	r3
xTIMER *pxTimer;
portBASE_TYPE xResult;

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   81d28:	4b45      	ldr	r3, [pc, #276]	; (81e40 <prvTimerTask+0x150>)
   81d2a:	681b      	ldr	r3, [r3, #0]
   81d2c:	68db      	ldr	r3, [r3, #12]
   81d2e:	68dc      	ldr	r4, [r3, #12]
	uxListRemove( &( pxTimer->xTimerListItem ) );
   81d30:	1d20      	adds	r0, r4, #4
   81d32:	47c0      	blx	r8
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
   81d34:	69e3      	ldr	r3, [r4, #28]
   81d36:	2b01      	cmp	r3, #1
   81d38:	d115      	bne.n	81d66 <prvTimerTask+0x76>
		a time relative to anything other than the current time.  It
		will therefore be inserted into the correct list relative to
		the time this task thinks it is now, even if a command to
		switch lists due to a tick count overflow is already waiting in
		the timer queue. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
   81d3a:	8b21      	ldrh	r1, [r4, #24]
   81d3c:	4431      	add	r1, r6
   81d3e:	4620      	mov	r0, r4
   81d40:	b289      	uxth	r1, r1
   81d42:	463a      	mov	r2, r7
   81d44:	4633      	mov	r3, r6
   81d46:	4f42      	ldr	r7, [pc, #264]	; (81e50 <prvTimerTask+0x160>)
   81d48:	47b8      	blx	r7
   81d4a:	2801      	cmp	r0, #1
   81d4c:	d10b      	bne.n	81d66 <prvTimerTask+0x76>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
   81d4e:	2300      	movs	r3, #0
   81d50:	9300      	str	r3, [sp, #0]
   81d52:	4620      	mov	r0, r4
   81d54:	4619      	mov	r1, r3
   81d56:	4632      	mov	r2, r6
   81d58:	4e3e      	ldr	r6, [pc, #248]	; (81e54 <prvTimerTask+0x164>)
   81d5a:	47b0      	blx	r6
			configASSERT( xResult );
   81d5c:	b918      	cbnz	r0, 81d66 <prvTimerTask+0x76>
   81d5e:	4b3e      	ldr	r3, [pc, #248]	; (81e58 <prvTimerTask+0x168>)
   81d60:	4798      	blx	r3
   81d62:	bf00      	nop
   81d64:	e7fd      	b.n	81d62 <prvTimerTask+0x72>
			( void ) xResult;
		}
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
   81d66:	6a63      	ldr	r3, [r4, #36]	; 0x24
   81d68:	4620      	mov	r0, r4
   81d6a:	4798      	blx	r3
   81d6c:	e00d      	b.n	81d8a <prvTimerTask+0x9a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( portTickType ) 0U;
   81d6e:	2600      	movs	r6, #0
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
   81d70:	1bf1      	subs	r1, r6, r7
   81d72:	6828      	ldr	r0, [r5, #0]
   81d74:	b289      	uxth	r1, r1
   81d76:	4b39      	ldr	r3, [pc, #228]	; (81e5c <prvTimerTask+0x16c>)
   81d78:	4798      	blx	r3

				if( xTaskResumeAll() == pdFALSE )
   81d7a:	4b34      	ldr	r3, [pc, #208]	; (81e4c <prvTimerTask+0x15c>)
   81d7c:	4798      	blx	r3
   81d7e:	b920      	cbnz	r0, 81d8a <prvTimerTask+0x9a>
				{
					/* Yield to wait for either a command to arrive, or the block time
					to expire.  If a command arrived between the critical section being
					exited and this yield then the yield will not cause the task
					to block. */
					portYIELD_WITHIN_API();
   81d80:	4b37      	ldr	r3, [pc, #220]	; (81e60 <prvTimerTask+0x170>)
   81d82:	4798      	blx	r3
   81d84:	e001      	b.n	81d8a <prvTimerTask+0x9a>
				}
			}
		}
		else
		{
			xTaskResumeAll();
   81d86:	4b31      	ldr	r3, [pc, #196]	; (81e4c <prvTimerTask+0x15c>)
   81d88:	4798      	blx	r3
portBASE_TYPE xTimerListsWereSwitched, xResult;
portTickType xTimeNow;

	/* In this case the xTimerListsWereSwitched parameter is not used, but it
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   81d8a:	a802      	add	r0, sp, #8
   81d8c:	4b2e      	ldr	r3, [pc, #184]	; (81e48 <prvTimerTask+0x158>)
   81d8e:	4798      	blx	r3
   81d90:	4607      	mov	r7, r0

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
   81d92:	4e34      	ldr	r6, [pc, #208]	; (81e64 <prvTimerTask+0x174>)
				break;

			case tmrCOMMAND_CHANGE_PERIOD :
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
				prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   81d94:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 81e50 <prvTimerTask+0x160>
   81d98:	e03e      	b.n	81e18 <prvTimerTask+0x128>
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
	{
		pxTimer = xMessage.pxTimer;
   81d9a:	9c05      	ldr	r4, [sp, #20]

		/* Is the timer already in a list of active timers?  When the command
		is trmCOMMAND_PROCESS_TIMER_OVERFLOW, the timer will be NULL as the
		command is to the task rather than to an individual timer. */
		if( pxTimer != NULL )
   81d9c:	b11c      	cbz	r4, 81da6 <prvTimerTask+0xb6>
		{
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
   81d9e:	6961      	ldr	r1, [r4, #20]
   81da0:	b109      	cbz	r1, 81da6 <prvTimerTask+0xb6>
			{
				/* The timer is in a list, remove it. */
				uxListRemove( &( pxTimer->xTimerListItem ) );
   81da2:	1d20      	adds	r0, r4, #4
   81da4:	47c0      	blx	r8
			}
		}

		traceTIMER_COMMAND_RECEIVED( pxTimer, xMessage.xMessageID, xMessage.xMessageValue );

		switch( xMessage.xMessageID )
   81da6:	9903      	ldr	r1, [sp, #12]
   81da8:	2902      	cmp	r1, #2
   81daa:	d023      	beq.n	81df4 <prvTimerTask+0x104>
   81dac:	2903      	cmp	r1, #3
   81dae:	d030      	beq.n	81e12 <prvTimerTask+0x122>
   81db0:	2900      	cmp	r1, #0
   81db2:	d131      	bne.n	81e18 <prvTimerTask+0x128>
		{
			case tmrCOMMAND_START :
				/* Start or restart a timer. */
				if( prvInsertTimerInActiveList( pxTimer,  xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.xMessageValue ) == pdTRUE )
   81db4:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   81db8:	8b21      	ldrh	r1, [r4, #24]
   81dba:	4419      	add	r1, r3
   81dbc:	4620      	mov	r0, r4
   81dbe:	b289      	uxth	r1, r1
   81dc0:	463a      	mov	r2, r7
   81dc2:	47c8      	blx	r9
   81dc4:	2801      	cmp	r0, #1
   81dc6:	d127      	bne.n	81e18 <prvTimerTask+0x128>
				{
					/* The timer expired before it was added to the active timer
					list.  Process it now. */
					pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
   81dc8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   81dca:	4620      	mov	r0, r4
   81dcc:	4798      	blx	r3

					if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
   81dce:	69e3      	ldr	r3, [r4, #28]
   81dd0:	2b01      	cmp	r3, #1
   81dd2:	d121      	bne.n	81e18 <prvTimerTask+0x128>
					{
						xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
   81dd4:	8b22      	ldrh	r2, [r4, #24]
   81dd6:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   81dda:	441a      	add	r2, r3
   81ddc:	2300      	movs	r3, #0
   81dde:	9300      	str	r3, [sp, #0]
   81de0:	4620      	mov	r0, r4
   81de2:	4619      	mov	r1, r3
   81de4:	b292      	uxth	r2, r2
   81de6:	4c1b      	ldr	r4, [pc, #108]	; (81e54 <prvTimerTask+0x164>)
   81de8:	47a0      	blx	r4
						configASSERT( xResult );
   81dea:	b9a8      	cbnz	r0, 81e18 <prvTimerTask+0x128>
   81dec:	4b1a      	ldr	r3, [pc, #104]	; (81e58 <prvTimerTask+0x168>)
   81dee:	4798      	blx	r3
   81df0:	bf00      	nop
   81df2:	e7fd      	b.n	81df0 <prvTimerTask+0x100>
				/* The timer has already been removed from the active list.
				There is nothing to do here. */
				break;

			case tmrCOMMAND_CHANGE_PERIOD :
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
   81df4:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   81df8:	8323      	strh	r3, [r4, #24]
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   81dfa:	b91b      	cbnz	r3, 81e04 <prvTimerTask+0x114>
   81dfc:	4b16      	ldr	r3, [pc, #88]	; (81e58 <prvTimerTask+0x168>)
   81dfe:	4798      	blx	r3
   81e00:	bf00      	nop
   81e02:	e7fd      	b.n	81e00 <prvTimerTask+0x110>
				prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   81e04:	18f9      	adds	r1, r7, r3
   81e06:	4620      	mov	r0, r4
   81e08:	b289      	uxth	r1, r1
   81e0a:	463a      	mov	r2, r7
   81e0c:	463b      	mov	r3, r7
   81e0e:	47c8      	blx	r9
   81e10:	e002      	b.n	81e18 <prvTimerTask+0x128>
				break;

			case tmrCOMMAND_DELETE :
				/* The timer has already been removed from the active list,
				just free up the memory. */
				vPortFree( pxTimer );
   81e12:	4620      	mov	r0, r4
   81e14:	4b14      	ldr	r3, [pc, #80]	; (81e68 <prvTimerTask+0x178>)
   81e16:	4798      	blx	r3

	/* In this case the xTimerListsWereSwitched parameter is not used, but it
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
   81e18:	6828      	ldr	r0, [r5, #0]
   81e1a:	a903      	add	r1, sp, #12
   81e1c:	2200      	movs	r2, #0
   81e1e:	4613      	mov	r3, r2
   81e20:	47b0      	blx	r6
   81e22:	2800      	cmp	r0, #0
   81e24:	d1b9      	bne.n	81d9a <prvTimerTask+0xaa>
   81e26:	e769      	b.n	81cfc <prvTimerTask+0xc>
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
   81e28:	4b06      	ldr	r3, [pc, #24]	; (81e44 <prvTimerTask+0x154>)
   81e2a:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   81e2c:	a803      	add	r0, sp, #12
   81e2e:	4b06      	ldr	r3, [pc, #24]	; (81e48 <prvTimerTask+0x158>)
   81e30:	4798      	blx	r3
   81e32:	4607      	mov	r7, r0
		if( xTimerListsWereSwitched == pdFALSE )
   81e34:	9b03      	ldr	r3, [sp, #12]
   81e36:	2b00      	cmp	r3, #0
   81e38:	d099      	beq.n	81d6e <prvTimerTask+0x7e>
   81e3a:	e7a4      	b.n	81d86 <prvTimerTask+0x96>
   81e3c:	20078b68 	.word	0x20078b68
   81e40:	20078b38 	.word	0x20078b38
   81e44:	000813a1 	.word	0x000813a1
   81e48:	00081c35 	.word	0x00081c35
   81e4c:	000814fd 	.word	0x000814fd
   81e50:	00081ae5 	.word	0x00081ae5
   81e54:	00081bdd 	.word	0x00081bdd
   81e58:	0008092d 	.word	0x0008092d
   81e5c:	00081085 	.word	0x00081085
   81e60:	0008091d 	.word	0x0008091d
   81e64:	00080f21 	.word	0x00080f21
   81e68:	00080b4d 	.word	0x00080b4d
   81e6c:	000808a5 	.word	0x000808a5

00081e70 <USART0_Handler>:
#if SAMD || SAMR21 || SAML21
void USART_HOST_ISR_VECT(uint8_t instance)
#else
USART_HOST_ISR_VECT()
#endif
{
   81e70:	b500      	push	{lr}
   81e72:	b083      	sub	sp, #12
	uint8_t temp;
#if SAMD || SAMR21 || SAML21
	usart_serial_read_packet(&host_uart_module, &temp, 1);
#else
	usart_serial_read_packet(USART_HOST, &temp, 1);
   81e74:	4811      	ldr	r0, [pc, #68]	; (81ebc <USART0_Handler+0x4c>)
   81e76:	f10d 0107 	add.w	r1, sp, #7
   81e7a:	2201      	movs	r2, #1
   81e7c:	4b10      	ldr	r3, [pc, #64]	; (81ec0 <USART0_Handler+0x50>)
   81e7e:	4798      	blx	r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   81e80:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   81e82:	f3bf 8f5f 	dmb	sy
#endif

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
   81e86:	2200      	movs	r2, #0
   81e88:	4b0e      	ldr	r3, [pc, #56]	; (81ec4 <USART0_Handler+0x54>)
   81e8a:	701a      	strb	r2, [r3, #0]

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */

	serial_rx_buf[serial_rx_buf_tail] = temp;
   81e8c:	4b0e      	ldr	r3, [pc, #56]	; (81ec8 <USART0_Handler+0x58>)
   81e8e:	781b      	ldrb	r3, [r3, #0]
   81e90:	f89d 1007 	ldrb.w	r1, [sp, #7]
   81e94:	4a0d      	ldr	r2, [pc, #52]	; (81ecc <USART0_Handler+0x5c>)
   81e96:	54d1      	strb	r1, [r2, r3]

	if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_tail) {
   81e98:	2b9b      	cmp	r3, #155	; 0x9b
   81e9a:	d103      	bne.n	81ea4 <USART0_Handler+0x34>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		serial_rx_buf_tail = 0x00;
   81e9c:	2200      	movs	r2, #0
   81e9e:	4b0a      	ldr	r3, [pc, #40]	; (81ec8 <USART0_Handler+0x58>)
   81ea0:	701a      	strb	r2, [r3, #0]
   81ea2:	e002      	b.n	81eaa <USART0_Handler+0x3a>
	} else {
		serial_rx_buf_tail++;
   81ea4:	3301      	adds	r3, #1
   81ea6:	4a08      	ldr	r2, [pc, #32]	; (81ec8 <USART0_Handler+0x58>)
   81ea8:	7013      	strb	r3, [r2, #0]
	}

	cpu_irq_enable();
   81eaa:	2201      	movs	r2, #1
   81eac:	4b05      	ldr	r3, [pc, #20]	; (81ec4 <USART0_Handler+0x54>)
   81eae:	701a      	strb	r2, [r3, #0]
   81eb0:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
   81eb4:	b662      	cpsie	i
}
   81eb6:	b003      	add	sp, #12
   81eb8:	f85d fb04 	ldr.w	pc, [sp], #4
   81ebc:	40098000 	.word	0x40098000
   81ec0:	00080609 	.word	0x00080609
   81ec4:	20070136 	.word	0x20070136
   81ec8:	20078c0c 	.word	0x20078c0c
   81ecc:	20078b70 	.word	0x20078b70

00081ed0 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   81ed0:	b5f0      	push	{r4, r5, r6, r7, lr}
   81ed2:	b083      	sub	sp, #12
   81ed4:	4604      	mov	r4, r0
   81ed6:	460d      	mov	r5, r1
	uint32_t val = 0;
   81ed8:	2300      	movs	r3, #0
   81eda:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   81edc:	4b1f      	ldr	r3, [pc, #124]	; (81f5c <usart_serial_getchar+0x8c>)
   81ede:	4298      	cmp	r0, r3
   81ee0:	d107      	bne.n	81ef2 <usart_serial_getchar+0x22>
		while (uart_read((Uart*)p_usart, data));
   81ee2:	461f      	mov	r7, r3
   81ee4:	4e1e      	ldr	r6, [pc, #120]	; (81f60 <usart_serial_getchar+0x90>)
   81ee6:	4638      	mov	r0, r7
   81ee8:	4629      	mov	r1, r5
   81eea:	47b0      	blx	r6
   81eec:	2800      	cmp	r0, #0
   81eee:	d1fa      	bne.n	81ee6 <usart_serial_getchar+0x16>
   81ef0:	e019      	b.n	81f26 <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   81ef2:	4b1c      	ldr	r3, [pc, #112]	; (81f64 <usart_serial_getchar+0x94>)
   81ef4:	4298      	cmp	r0, r3
   81ef6:	d109      	bne.n	81f0c <usart_serial_getchar+0x3c>
		while (usart_read(p_usart, &val));
   81ef8:	461f      	mov	r7, r3
   81efa:	4e1b      	ldr	r6, [pc, #108]	; (81f68 <usart_serial_getchar+0x98>)
   81efc:	4638      	mov	r0, r7
   81efe:	a901      	add	r1, sp, #4
   81f00:	47b0      	blx	r6
   81f02:	2800      	cmp	r0, #0
   81f04:	d1fa      	bne.n	81efc <usart_serial_getchar+0x2c>
		*data = (uint8_t)(val & 0xFF);
   81f06:	9b01      	ldr	r3, [sp, #4]
   81f08:	702b      	strb	r3, [r5, #0]
   81f0a:	e019      	b.n	81f40 <usart_serial_getchar+0x70>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   81f0c:	4b17      	ldr	r3, [pc, #92]	; (81f6c <usart_serial_getchar+0x9c>)
   81f0e:	4298      	cmp	r0, r3
   81f10:	d109      	bne.n	81f26 <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
   81f12:	461e      	mov	r6, r3
   81f14:	4c14      	ldr	r4, [pc, #80]	; (81f68 <usart_serial_getchar+0x98>)
   81f16:	4630      	mov	r0, r6
   81f18:	a901      	add	r1, sp, #4
   81f1a:	47a0      	blx	r4
   81f1c:	2800      	cmp	r0, #0
   81f1e:	d1fa      	bne.n	81f16 <usart_serial_getchar+0x46>
		*data = (uint8_t)(val & 0xFF);
   81f20:	9b01      	ldr	r3, [sp, #4]
   81f22:	702b      	strb	r3, [r5, #0]
   81f24:	e018      	b.n	81f58 <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   81f26:	4b12      	ldr	r3, [pc, #72]	; (81f70 <usart_serial_getchar+0xa0>)
   81f28:	429c      	cmp	r4, r3
   81f2a:	d109      	bne.n	81f40 <usart_serial_getchar+0x70>
		while (usart_read(p_usart, &val));
   81f2c:	461e      	mov	r6, r3
   81f2e:	4c0e      	ldr	r4, [pc, #56]	; (81f68 <usart_serial_getchar+0x98>)
   81f30:	4630      	mov	r0, r6
   81f32:	a901      	add	r1, sp, #4
   81f34:	47a0      	blx	r4
   81f36:	2800      	cmp	r0, #0
   81f38:	d1fa      	bne.n	81f30 <usart_serial_getchar+0x60>
		*data = (uint8_t)(val & 0xFF);
   81f3a:	9b01      	ldr	r3, [sp, #4]
   81f3c:	702b      	strb	r3, [r5, #0]
   81f3e:	e00b      	b.n	81f58 <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   81f40:	4b0c      	ldr	r3, [pc, #48]	; (81f74 <usart_serial_getchar+0xa4>)
   81f42:	429c      	cmp	r4, r3
   81f44:	d108      	bne.n	81f58 <usart_serial_getchar+0x88>
		while (usart_read(p_usart, &val));
   81f46:	461e      	mov	r6, r3
   81f48:	4c07      	ldr	r4, [pc, #28]	; (81f68 <usart_serial_getchar+0x98>)
   81f4a:	4630      	mov	r0, r6
   81f4c:	a901      	add	r1, sp, #4
   81f4e:	47a0      	blx	r4
   81f50:	2800      	cmp	r0, #0
   81f52:	d1fa      	bne.n	81f4a <usart_serial_getchar+0x7a>
		*data = (uint8_t)(val & 0xFF);
   81f54:	9b01      	ldr	r3, [sp, #4]
   81f56:	702b      	strb	r3, [r5, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   81f58:	b003      	add	sp, #12
   81f5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   81f5c:	400e0800 	.word	0x400e0800
   81f60:	000807e5 	.word	0x000807e5
   81f64:	40098000 	.word	0x40098000
   81f68:	0008080d 	.word	0x0008080d
   81f6c:	4009c000 	.word	0x4009c000
   81f70:	400a0000 	.word	0x400a0000
   81f74:	400a4000 	.word	0x400a4000

00081f78 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
   81f78:	b570      	push	{r4, r5, r6, lr}
   81f7a:	460c      	mov	r4, r1
#ifdef UART
	if (UART == (Uart*)p_usart) {
   81f7c:	4b21      	ldr	r3, [pc, #132]	; (82004 <usart_serial_putchar+0x8c>)
   81f7e:	4298      	cmp	r0, r3
   81f80:	d107      	bne.n	81f92 <usart_serial_putchar+0x1a>
		while (uart_write((Uart*)p_usart, c)!=0);
   81f82:	461e      	mov	r6, r3
   81f84:	4d20      	ldr	r5, [pc, #128]	; (82008 <usart_serial_putchar+0x90>)
   81f86:	4630      	mov	r0, r6
   81f88:	4621      	mov	r1, r4
   81f8a:	47a8      	blx	r5
   81f8c:	2800      	cmp	r0, #0
   81f8e:	d1fa      	bne.n	81f86 <usart_serial_putchar+0xe>
   81f90:	e02b      	b.n	81fea <usart_serial_putchar+0x72>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   81f92:	4b1e      	ldr	r3, [pc, #120]	; (8200c <usart_serial_putchar+0x94>)
   81f94:	4298      	cmp	r0, r3
   81f96:	d107      	bne.n	81fa8 <usart_serial_putchar+0x30>
		while (usart_write(p_usart, c)!=0);
   81f98:	461e      	mov	r6, r3
   81f9a:	4d1d      	ldr	r5, [pc, #116]	; (82010 <usart_serial_putchar+0x98>)
   81f9c:	4630      	mov	r0, r6
   81f9e:	4621      	mov	r1, r4
   81fa0:	47a8      	blx	r5
   81fa2:	2800      	cmp	r0, #0
   81fa4:	d1fa      	bne.n	81f9c <usart_serial_putchar+0x24>
   81fa6:	e022      	b.n	81fee <usart_serial_putchar+0x76>
		return 1;
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   81fa8:	4b1a      	ldr	r3, [pc, #104]	; (82014 <usart_serial_putchar+0x9c>)
   81faa:	4298      	cmp	r0, r3
   81fac:	d107      	bne.n	81fbe <usart_serial_putchar+0x46>
		while (usart_write(p_usart, c)!=0);
   81fae:	461e      	mov	r6, r3
   81fb0:	4d17      	ldr	r5, [pc, #92]	; (82010 <usart_serial_putchar+0x98>)
   81fb2:	4630      	mov	r0, r6
   81fb4:	4621      	mov	r1, r4
   81fb6:	47a8      	blx	r5
   81fb8:	2800      	cmp	r0, #0
   81fba:	d1fa      	bne.n	81fb2 <usart_serial_putchar+0x3a>
   81fbc:	e019      	b.n	81ff2 <usart_serial_putchar+0x7a>
		return 1;
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   81fbe:	4b16      	ldr	r3, [pc, #88]	; (82018 <usart_serial_putchar+0xa0>)
   81fc0:	4298      	cmp	r0, r3
   81fc2:	d107      	bne.n	81fd4 <usart_serial_putchar+0x5c>
		while (usart_write(p_usart, c)!=0);
   81fc4:	461e      	mov	r6, r3
   81fc6:	4d12      	ldr	r5, [pc, #72]	; (82010 <usart_serial_putchar+0x98>)
   81fc8:	4630      	mov	r0, r6
   81fca:	4621      	mov	r1, r4
   81fcc:	47a8      	blx	r5
   81fce:	2800      	cmp	r0, #0
   81fd0:	d1fa      	bne.n	81fc8 <usart_serial_putchar+0x50>
   81fd2:	e010      	b.n	81ff6 <usart_serial_putchar+0x7e>
		return 1;
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   81fd4:	4b11      	ldr	r3, [pc, #68]	; (8201c <usart_serial_putchar+0xa4>)
   81fd6:	4298      	cmp	r0, r3
   81fd8:	d10f      	bne.n	81ffa <usart_serial_putchar+0x82>
		while (usart_write(p_usart, c)!=0);
   81fda:	461e      	mov	r6, r3
   81fdc:	4d0c      	ldr	r5, [pc, #48]	; (82010 <usart_serial_putchar+0x98>)
   81fde:	4630      	mov	r0, r6
   81fe0:	4621      	mov	r1, r4
   81fe2:	47a8      	blx	r5
   81fe4:	2800      	cmp	r0, #0
   81fe6:	d1fa      	bne.n	81fde <usart_serial_putchar+0x66>
   81fe8:	e009      	b.n	81ffe <usart_serial_putchar+0x86>
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
#ifdef UART
	if (UART == (Uart*)p_usart) {
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
   81fea:	2001      	movs	r0, #1
   81fec:	bd70      	pop	{r4, r5, r6, pc}
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   81fee:	2001      	movs	r0, #1
   81ff0:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   81ff2:	2001      	movs	r0, #1
   81ff4:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   81ff6:	2001      	movs	r0, #1
   81ff8:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
   81ffa:	2000      	movs	r0, #0
   81ffc:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   81ffe:	2001      	movs	r0, #1
	}
# endif
#endif /* ifdef USART */

	return 0;
}
   82000:	bd70      	pop	{r4, r5, r6, pc}
   82002:	bf00      	nop
   82004:	400e0800 	.word	0x400e0800
   82008:	000807d5 	.word	0x000807d5
   8200c:	40098000 	.word	0x40098000
   82010:	000807f9 	.word	0x000807f9
   82014:	4009c000 	.word	0x4009c000
   82018:	400a0000 	.word	0x400a0000
   8201c:	400a4000 	.word	0x400a4000

00082020 <configureConsole>:
#include "conf_board.h"
#include "consoleFunctions.h"

int configureConsole(void)
/* Enables feedback through the USB-cable back to terminal within Atmel Studio */
{
   82020:	b530      	push	{r4, r5, lr}
   82022:	b085      	sub	sp, #20
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   82024:	2008      	movs	r0, #8
   82026:	4d13      	ldr	r5, [pc, #76]	; (82074 <configureConsole+0x54>)
   82028:	47a8      	blx	r5
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   8202a:	4c13      	ldr	r4, [pc, #76]	; (82078 <configureConsole+0x58>)
   8202c:	4b13      	ldr	r3, [pc, #76]	; (8207c <configureConsole+0x5c>)
   8202e:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   82030:	4a13      	ldr	r2, [pc, #76]	; (82080 <configureConsole+0x60>)
   82032:	4b14      	ldr	r3, [pc, #80]	; (82084 <configureConsole+0x64>)
   82034:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   82036:	4a14      	ldr	r2, [pc, #80]	; (82088 <configureConsole+0x68>)
   82038:	4b14      	ldr	r3, [pc, #80]	; (8208c <configureConsole+0x6c>)
   8203a:	601a      	str	r2, [r3, #0]
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   8203c:	4b14      	ldr	r3, [pc, #80]	; (82090 <configureConsole+0x70>)
   8203e:	9301      	str	r3, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
   82040:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   82044:	9302      	str	r3, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
   82046:	f44f 6300 	mov.w	r3, #2048	; 0x800
   8204a:	9303      	str	r3, [sp, #12]
   8204c:	2008      	movs	r0, #8
   8204e:	47a8      	blx	r5
	
#ifdef UART
	if (UART == (Uart*)p_usart) {
		sysclk_enable_peripheral_clock(ID_UART);
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
   82050:	4620      	mov	r0, r4
   82052:	a901      	add	r1, sp, #4
   82054:	4b0f      	ldr	r3, [pc, #60]	; (82094 <configureConsole+0x74>)
   82056:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   82058:	4d0f      	ldr	r5, [pc, #60]	; (82098 <configureConsole+0x78>)
   8205a:	682b      	ldr	r3, [r5, #0]
   8205c:	6898      	ldr	r0, [r3, #8]
   8205e:	2100      	movs	r1, #0
   82060:	4c0e      	ldr	r4, [pc, #56]	; (8209c <configureConsole+0x7c>)
   82062:	47a0      	blx	r4
	setbuf(stdin, NULL);
   82064:	682b      	ldr	r3, [r5, #0]
   82066:	6858      	ldr	r0, [r3, #4]
   82068:	2100      	movs	r1, #0
   8206a:	47a0      	blx	r4
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
	stdio_serial_init(CONF_UART, &uart_serial_options);
	
	/* printf("Console ready\n"); */
	return 0;
   8206c:	2000      	movs	r0, #0
   8206e:	b005      	add	sp, #20
   82070:	bd30      	pop	{r4, r5, pc}
   82072:	bf00      	nop
   82074:	000825c9 	.word	0x000825c9
   82078:	400e0800 	.word	0x400e0800
   8207c:	20078cc0 	.word	0x20078cc0
   82080:	00081f79 	.word	0x00081f79
   82084:	20078cbc 	.word	0x20078cbc
   82088:	00081ed1 	.word	0x00081ed1
   8208c:	20078cb8 	.word	0x20078cb8
   82090:	0501bd00 	.word	0x0501bd00
   82094:	0008079d 	.word	0x0008079d
   82098:	20070568 	.word	0x20070568
   8209c:	00082a39 	.word	0x00082a39

000820a0 <delayInit>:

#include "asf.h"
#include "delayFunctions.h"

int delayInit(void)		/* Initializes the timer used for delays */
{
   820a0:	b510      	push	{r4, lr}
	pmc_enable_periph_clk(ID_TC0);	/* power on the peripheral clock for timers */
   820a2:	201b      	movs	r0, #27
   820a4:	4b08      	ldr	r3, [pc, #32]	; (820c8 <delayInit+0x28>)
   820a6:	4798      	blx	r3
	tc_init(TC0,0,0);		 /* TC0, channel 0, TCLK1 och capturemode */
   820a8:	4c08      	ldr	r4, [pc, #32]	; (820cc <delayInit+0x2c>)
   820aa:	4620      	mov	r0, r4
   820ac:	2100      	movs	r1, #0
   820ae:	460a      	mov	r2, r1
   820b0:	4b07      	ldr	r3, [pc, #28]	; (820d0 <delayInit+0x30>)
   820b2:	4798      	blx	r3
	tc_set_block_mode(TC0,0);
   820b4:	4620      	mov	r0, r4
   820b6:	2100      	movs	r1, #0
   820b8:	4b06      	ldr	r3, [pc, #24]	; (820d4 <delayInit+0x34>)
   820ba:	4798      	blx	r3
	tc_stop(TC0,0);			/* making sure the timer does not run  */
   820bc:	4620      	mov	r0, r4
   820be:	2100      	movs	r1, #0
   820c0:	4b05      	ldr	r3, [pc, #20]	; (820d8 <delayInit+0x38>)
   820c2:	4798      	blx	r3
	return 0;	/* evertyhing is ok, typical response */
}
   820c4:	2000      	movs	r0, #0
   820c6:	bd10      	pop	{r4, pc}
   820c8:	000825c9 	.word	0x000825c9
   820cc:	40080000 	.word	0x40080000
   820d0:	00080761 	.word	0x00080761
   820d4:	0008077d 	.word	0x0008077d
   820d8:	0008078d 	.word	0x0008078d

000820dc <delayMicroseconds>:


void delayMicroseconds(uint32_t us)		/* A simple implementation for a delay in us (not calibrated) */
{
   820dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   820de:	4604      	mov	r4, r0
	tc_start(TC0,0);
   820e0:	4809      	ldr	r0, [pc, #36]	; (82108 <delayMicroseconds+0x2c>)
   820e2:	2100      	movs	r1, #0
   820e4:	4b09      	ldr	r3, [pc, #36]	; (8210c <delayMicroseconds+0x30>)
   820e6:	4798      	blx	r3
	while (tc_read_cv(TC0,0) < us*42)
   820e8:	272a      	movs	r7, #42	; 0x2a
   820ea:	fb07 f704 	mul.w	r7, r7, r4
   820ee:	4e06      	ldr	r6, [pc, #24]	; (82108 <delayMicroseconds+0x2c>)
   820f0:	2500      	movs	r5, #0
   820f2:	4c07      	ldr	r4, [pc, #28]	; (82110 <delayMicroseconds+0x34>)
   820f4:	4630      	mov	r0, r6
   820f6:	4629      	mov	r1, r5
   820f8:	47a0      	blx	r4
   820fa:	42b8      	cmp	r0, r7
   820fc:	d3fa      	bcc.n	820f4 <delayMicroseconds+0x18>
	{
		/* Do nothing until the timer has increased enough*/
	}
	tc_stop(TC0,0);
   820fe:	4802      	ldr	r0, [pc, #8]	; (82108 <delayMicroseconds+0x2c>)
   82100:	2100      	movs	r1, #0
   82102:	4b04      	ldr	r3, [pc, #16]	; (82114 <delayMicroseconds+0x38>)
   82104:	4798      	blx	r3
   82106:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82108:	40080000 	.word	0x40080000
   8210c:	00080785 	.word	0x00080785
   82110:	00080795 	.word	0x00080795
   82114:	0008078d 	.word	0x0008078d

00082118 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   82118:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   8211a:	480e      	ldr	r0, [pc, #56]	; (82154 <sysclk_init+0x3c>)
   8211c:	4b0e      	ldr	r3, [pc, #56]	; (82158 <sysclk_init+0x40>)
   8211e:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   82120:	2000      	movs	r0, #0
   82122:	213e      	movs	r1, #62	; 0x3e
   82124:	4b0d      	ldr	r3, [pc, #52]	; (8215c <sysclk_init+0x44>)
   82126:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   82128:	4c0d      	ldr	r4, [pc, #52]	; (82160 <sysclk_init+0x48>)
   8212a:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   8212c:	2800      	cmp	r0, #0
   8212e:	d0fc      	beq.n	8212a <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   82130:	4b0c      	ldr	r3, [pc, #48]	; (82164 <sysclk_init+0x4c>)
   82132:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   82134:	4a0c      	ldr	r2, [pc, #48]	; (82168 <sysclk_init+0x50>)
   82136:	4b0d      	ldr	r3, [pc, #52]	; (8216c <sysclk_init+0x54>)
   82138:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   8213a:	4c0d      	ldr	r4, [pc, #52]	; (82170 <sysclk_init+0x58>)
   8213c:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   8213e:	2800      	cmp	r0, #0
   82140:	d0fc      	beq.n	8213c <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   82142:	2010      	movs	r0, #16
   82144:	4b0b      	ldr	r3, [pc, #44]	; (82174 <sysclk_init+0x5c>)
   82146:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   82148:	4b0b      	ldr	r3, [pc, #44]	; (82178 <sysclk_init+0x60>)
   8214a:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   8214c:	4801      	ldr	r0, [pc, #4]	; (82154 <sysclk_init+0x3c>)
   8214e:	4b02      	ldr	r3, [pc, #8]	; (82158 <sysclk_init+0x40>)
   82150:	4798      	blx	r3
   82152:	bd10      	pop	{r4, pc}
   82154:	0501bd00 	.word	0x0501bd00
   82158:	200700a5 	.word	0x200700a5
   8215c:	00082545 	.word	0x00082545
   82160:	00082599 	.word	0x00082599
   82164:	000825a9 	.word	0x000825a9
   82168:	200d3f01 	.word	0x200d3f01
   8216c:	400e0600 	.word	0x400e0600
   82170:	000825b9 	.word	0x000825b9
   82174:	000824e1 	.word	0x000824e1
   82178:	000826d5 	.word	0x000826d5

0008217c <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   8217c:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   8217e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   82182:	4b16      	ldr	r3, [pc, #88]	; (821dc <board_init+0x60>)
   82184:	605a      	str	r2, [r3, #4]
   82186:	200b      	movs	r0, #11
   82188:	4c15      	ldr	r4, [pc, #84]	; (821e0 <board_init+0x64>)
   8218a:	47a0      	blx	r4
   8218c:	200c      	movs	r0, #12
   8218e:	47a0      	blx	r4
   82190:	200d      	movs	r0, #13
   82192:	47a0      	blx	r4
   82194:	200e      	movs	r0, #14
   82196:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   82198:	203b      	movs	r0, #59	; 0x3b
   8219a:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8219e:	4c11      	ldr	r4, [pc, #68]	; (821e4 <board_init+0x68>)
   821a0:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   821a2:	2055      	movs	r0, #85	; 0x55
   821a4:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   821a8:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   821aa:	2056      	movs	r0, #86	; 0x56
   821ac:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   821b0:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   821b2:	2068      	movs	r0, #104	; 0x68
   821b4:	490c      	ldr	r1, [pc, #48]	; (821e8 <board_init+0x6c>)
   821b6:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   821b8:	205c      	movs	r0, #92	; 0x5c
   821ba:	490c      	ldr	r1, [pc, #48]	; (821ec <board_init+0x70>)
   821bc:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   821be:	480c      	ldr	r0, [pc, #48]	; (821f0 <board_init+0x74>)
   821c0:	f44f 7140 	mov.w	r1, #768	; 0x300
   821c4:	4a0b      	ldr	r2, [pc, #44]	; (821f4 <board_init+0x78>)
   821c6:	4b0c      	ldr	r3, [pc, #48]	; (821f8 <board_init+0x7c>)
   821c8:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
#endif

#ifdef CONF_BOARD_USB_PORT
	/* Configure USB_ID (UOTGID) pin */
	gpio_configure_pin(USB_ID_GPIO, USB_ID_FLAGS);
   821ca:	202b      	movs	r0, #43	; 0x2b
   821cc:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   821d0:	47a0      	blx	r4
	/* Configure USB_VBOF (UOTGVBOF) pin */
	gpio_configure_pin(USB_VBOF_GPIO, USB_VBOF_FLAGS);
   821d2:	202a      	movs	r0, #42	; 0x2a
   821d4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   821d8:	47a0      	blx	r4
   821da:	bd10      	pop	{r4, pc}
   821dc:	400e1a50 	.word	0x400e1a50
   821e0:	000825c9 	.word	0x000825c9
   821e4:	000822c5 	.word	0x000822c5
   821e8:	28000079 	.word	0x28000079
   821ec:	28000001 	.word	0x28000001
   821f0:	400e0e00 	.word	0x400e0e00
   821f4:	08000001 	.word	0x08000001
   821f8:	00082399 	.word	0x00082399

000821fc <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   821fc:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   821fe:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   82202:	d016      	beq.n	82232 <pio_set_peripheral+0x36>
   82204:	d804      	bhi.n	82210 <pio_set_peripheral+0x14>
   82206:	b1c1      	cbz	r1, 8223a <pio_set_peripheral+0x3e>
   82208:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   8220c:	d00a      	beq.n	82224 <pio_set_peripheral+0x28>
   8220e:	e013      	b.n	82238 <pio_set_peripheral+0x3c>
   82210:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   82214:	d011      	beq.n	8223a <pio_set_peripheral+0x3e>
   82216:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   8221a:	d00e      	beq.n	8223a <pio_set_peripheral+0x3e>
   8221c:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   82220:	d10a      	bne.n	82238 <pio_set_peripheral+0x3c>
   82222:	4770      	bx	lr
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   82224:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   82226:	6f01      	ldr	r1, [r0, #112]	; 0x70
   82228:	400b      	ands	r3, r1
   8222a:	ea23 0302 	bic.w	r3, r3, r2
   8222e:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   82230:	e002      	b.n	82238 <pio_set_peripheral+0x3c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   82232:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   82234:	4313      	orrs	r3, r2
   82236:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   82238:	6042      	str	r2, [r0, #4]
   8223a:	4770      	bx	lr

0008223c <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   8223c:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   8223e:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   82242:	bf14      	ite	ne
   82244:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   82246:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   82248:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   8224c:	bf14      	ite	ne
   8224e:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
   82250:	6241      	streq	r1, [r0, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   82252:	f012 0f02 	tst.w	r2, #2
   82256:	d002      	beq.n	8225e <pio_set_input+0x22>
		p_pio->PIO_SCIFSR = ul_mask;
   82258:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   8225c:	e004      	b.n	82268 <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   8225e:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   82262:	bf18      	it	ne
   82264:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   82268:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   8226a:	6001      	str	r1, [r0, #0]
   8226c:	4770      	bx	lr
   8226e:	bf00      	nop

00082270 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   82270:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   82272:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   82274:	9c01      	ldr	r4, [sp, #4]
   82276:	b10c      	cbz	r4, 8227c <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
   82278:	6641      	str	r1, [r0, #100]	; 0x64
   8227a:	e000      	b.n	8227e <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
   8227c:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   8227e:	b10b      	cbz	r3, 82284 <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
   82280:	6501      	str	r1, [r0, #80]	; 0x50
   82282:	e000      	b.n	82286 <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   82284:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   82286:	b10a      	cbz	r2, 8228c <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
   82288:	6301      	str	r1, [r0, #48]	; 0x30
   8228a:	e000      	b.n	8228e <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
   8228c:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   8228e:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   82290:	6001      	str	r1, [r0, #0]
}
   82292:	f85d 4b04 	ldr.w	r4, [sp], #4
   82296:	4770      	bx	lr

00082298 <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   82298:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   8229a:	4770      	bx	lr

0008229c <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   8229c:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   8229e:	4770      	bx	lr

000822a0 <pio_toggle_pin>:
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   822a0:	0943      	lsrs	r3, r0, #5
   822a2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   822a6:	f203 7307 	addw	r3, r3, #1799	; 0x707
   822aa:	025b      	lsls	r3, r3, #9
 */
void pio_toggle_pin(uint32_t ul_pin)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	if (p_pio->PIO_ODSR & (1 << (ul_pin & 0x1F))) {
   822ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   822ae:	f000 001f 	and.w	r0, r0, #31
   822b2:	2101      	movs	r1, #1
   822b4:	fa01 f000 	lsl.w	r0, r1, r0
   822b8:	4210      	tst	r0, r2
		/* Value to be driven on the I/O line: 0. */
		p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
   822ba:	bf14      	ite	ne
   822bc:	6358      	strne	r0, [r3, #52]	; 0x34
	} else {
		/* Value to be driven on the I/O line: 1. */
		p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
   822be:	6318      	streq	r0, [r3, #48]	; 0x30
   822c0:	4770      	bx	lr
   822c2:	bf00      	nop

000822c4 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   822c4:	b570      	push	{r4, r5, r6, lr}
   822c6:	b082      	sub	sp, #8
   822c8:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   822ca:	0944      	lsrs	r4, r0, #5
   822cc:	f504 1400 	add.w	r4, r4, #2097152	; 0x200000
   822d0:	f204 7407 	addw	r4, r4, #1799	; 0x707
   822d4:	0266      	lsls	r6, r4, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   822d6:	f001 44f0 	and.w	r4, r1, #2013265920	; 0x78000000
   822da:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   822de:	d030      	beq.n	82342 <pio_configure_pin+0x7e>
   822e0:	d806      	bhi.n	822f0 <pio_configure_pin+0x2c>
   822e2:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   822e6:	d00a      	beq.n	822fe <pio_configure_pin+0x3a>
   822e8:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   822ec:	d018      	beq.n	82320 <pio_configure_pin+0x5c>
   822ee:	e049      	b.n	82384 <pio_configure_pin+0xc0>
   822f0:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   822f4:	d030      	beq.n	82358 <pio_configure_pin+0x94>
   822f6:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   822fa:	d02d      	beq.n	82358 <pio_configure_pin+0x94>
   822fc:	e042      	b.n	82384 <pio_configure_pin+0xc0>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   822fe:	f000 001f 	and.w	r0, r0, #31
   82302:	2401      	movs	r4, #1
   82304:	4084      	lsls	r4, r0
   82306:	4630      	mov	r0, r6
   82308:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8230c:	4622      	mov	r2, r4
   8230e:	4b1f      	ldr	r3, [pc, #124]	; (8238c <pio_configure_pin+0xc8>)
   82310:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   82312:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   82316:	bf14      	ite	ne
   82318:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   8231a:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   8231c:	2001      	movs	r0, #1
   8231e:	e032      	b.n	82386 <pio_configure_pin+0xc2>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   82320:	f000 001f 	and.w	r0, r0, #31
   82324:	2401      	movs	r4, #1
   82326:	4084      	lsls	r4, r0
   82328:	4630      	mov	r0, r6
   8232a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   8232e:	4622      	mov	r2, r4
   82330:	4b16      	ldr	r3, [pc, #88]	; (8238c <pio_configure_pin+0xc8>)
   82332:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   82334:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   82338:	bf14      	ite	ne
   8233a:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   8233c:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   8233e:	2001      	movs	r0, #1
   82340:	e021      	b.n	82386 <pio_configure_pin+0xc2>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   82342:	f000 011f 	and.w	r1, r0, #31
   82346:	2401      	movs	r4, #1
   82348:	4630      	mov	r0, r6
   8234a:	fa04 f101 	lsl.w	r1, r4, r1
   8234e:	462a      	mov	r2, r5
   82350:	4b0f      	ldr	r3, [pc, #60]	; (82390 <pio_configure_pin+0xcc>)
   82352:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   82354:	4620      	mov	r0, r4
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
   82356:	e016      	b.n	82386 <pio_configure_pin+0xc2>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   82358:	f000 011f 	and.w	r1, r0, #31
   8235c:	2401      	movs	r4, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   8235e:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   82362:	ea05 0304 	and.w	r3, r5, r4
   82366:	9300      	str	r3, [sp, #0]
   82368:	4630      	mov	r0, r6
   8236a:	fa04 f101 	lsl.w	r1, r4, r1
   8236e:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   82372:	bf14      	ite	ne
   82374:	2200      	movne	r2, #0
   82376:	2201      	moveq	r2, #1
   82378:	f3c5 0380 	ubfx	r3, r5, #2, #1
   8237c:	4d05      	ldr	r5, [pc, #20]	; (82394 <pio_configure_pin+0xd0>)
   8237e:	47a8      	blx	r5

	default:
		return 0;
	}

	return 1;
   82380:	4620      	mov	r0, r4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   82382:	e000      	b.n	82386 <pio_configure_pin+0xc2>

	default:
		return 0;
   82384:	2000      	movs	r0, #0
	}

	return 1;
}
   82386:	b002      	add	sp, #8
   82388:	bd70      	pop	{r4, r5, r6, pc}
   8238a:	bf00      	nop
   8238c:	000821fd 	.word	0x000821fd
   82390:	0008223d 	.word	0x0008223d
   82394:	00082271 	.word	0x00082271

00082398 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   82398:	b5f0      	push	{r4, r5, r6, r7, lr}
   8239a:	b083      	sub	sp, #12
   8239c:	4607      	mov	r7, r0
   8239e:	460e      	mov	r6, r1
   823a0:	4615      	mov	r5, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   823a2:	f002 44f0 	and.w	r4, r2, #2013265920	; 0x78000000
   823a6:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   823aa:	d026      	beq.n	823fa <pio_configure_pin_group+0x62>
   823ac:	d806      	bhi.n	823bc <pio_configure_pin_group+0x24>
   823ae:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   823b2:	d00a      	beq.n	823ca <pio_configure_pin_group+0x32>
   823b4:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   823b8:	d013      	beq.n	823e2 <pio_configure_pin_group+0x4a>
   823ba:	e034      	b.n	82426 <pio_configure_pin_group+0x8e>
   823bc:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   823c0:	d01f      	beq.n	82402 <pio_configure_pin_group+0x6a>
   823c2:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   823c6:	d01c      	beq.n	82402 <pio_configure_pin_group+0x6a>
   823c8:	e02d      	b.n	82426 <pio_configure_pin_group+0x8e>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   823ca:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   823ce:	4632      	mov	r2, r6
   823d0:	4b16      	ldr	r3, [pc, #88]	; (8242c <pio_configure_pin_group+0x94>)
   823d2:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   823d4:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   823d8:	bf14      	ite	ne
   823da:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   823dc:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   823de:	2001      	movs	r0, #1
   823e0:	e022      	b.n	82428 <pio_configure_pin_group+0x90>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   823e2:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   823e6:	4632      	mov	r2, r6
   823e8:	4b10      	ldr	r3, [pc, #64]	; (8242c <pio_configure_pin_group+0x94>)
   823ea:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   823ec:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   823f0:	bf14      	ite	ne
   823f2:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   823f4:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   823f6:	2001      	movs	r0, #1
   823f8:	e016      	b.n	82428 <pio_configure_pin_group+0x90>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   823fa:	4b0d      	ldr	r3, [pc, #52]	; (82430 <pio_configure_pin_group+0x98>)
   823fc:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   823fe:	2001      	movs	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
   82400:	e012      	b.n	82428 <pio_configure_pin_group+0x90>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   82402:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   82406:	f005 0301 	and.w	r3, r5, #1
   8240a:	9300      	str	r3, [sp, #0]
   8240c:	4638      	mov	r0, r7
   8240e:	4631      	mov	r1, r6
   82410:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   82414:	bf14      	ite	ne
   82416:	2200      	movne	r2, #0
   82418:	2201      	moveq	r2, #1
   8241a:	f3c5 0380 	ubfx	r3, r5, #2, #1
   8241e:	4c05      	ldr	r4, [pc, #20]	; (82434 <pio_configure_pin_group+0x9c>)
   82420:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
   82422:	2001      	movs	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   82424:	e000      	b.n	82428 <pio_configure_pin_group+0x90>

	default:
		return 0;
   82426:	2000      	movs	r0, #0
	}

	return 1;
}
   82428:	b003      	add	sp, #12
   8242a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8242c:	000821fd 	.word	0x000821fd
   82430:	0008223d 	.word	0x0008223d
   82434:	00082271 	.word	0x00082271

00082438 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   82438:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8243c:	4604      	mov	r4, r0
   8243e:	460e      	mov	r6, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   82440:	4b10      	ldr	r3, [pc, #64]	; (82484 <pio_handler_process+0x4c>)
   82442:	4798      	blx	r3
   82444:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   82446:	4620      	mov	r0, r4
   82448:	4b0f      	ldr	r3, [pc, #60]	; (82488 <pio_handler_process+0x50>)
   8244a:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   8244c:	4005      	ands	r5, r0
   8244e:	d017      	beq.n	82480 <pio_handler_process+0x48>
   82450:	4f0e      	ldr	r7, [pc, #56]	; (8248c <pio_handler_process+0x54>)
   82452:	f107 040c 	add.w	r4, r7, #12
   82456:	376c      	adds	r7, #108	; 0x6c
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   82458:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   8245c:	42b3      	cmp	r3, r6
   8245e:	d10a      	bne.n	82476 <pio_handler_process+0x3e>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   82460:	f854 1c08 	ldr.w	r1, [r4, #-8]
   82464:	4229      	tst	r1, r5
   82466:	d006      	beq.n	82476 <pio_handler_process+0x3e>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   82468:	6823      	ldr	r3, [r4, #0]
   8246a:	4630      	mov	r0, r6
   8246c:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   8246e:	f854 3c08 	ldr.w	r3, [r4, #-8]
   82472:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   82476:	42bc      	cmp	r4, r7
   82478:	d002      	beq.n	82480 <pio_handler_process+0x48>
   8247a:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   8247c:	2d00      	cmp	r5, #0
   8247e:	d1eb      	bne.n	82458 <pio_handler_process+0x20>
   82480:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82484:	00082299 	.word	0x00082299
   82488:	0008229d 	.word	0x0008229d
   8248c:	20078c10 	.word	0x20078c10

00082490 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   82490:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   82492:	4802      	ldr	r0, [pc, #8]	; (8249c <PIOA_Handler+0xc>)
   82494:	210b      	movs	r1, #11
   82496:	4b02      	ldr	r3, [pc, #8]	; (824a0 <PIOA_Handler+0x10>)
   82498:	4798      	blx	r3
   8249a:	bd08      	pop	{r3, pc}
   8249c:	400e0e00 	.word	0x400e0e00
   824a0:	00082439 	.word	0x00082439

000824a4 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   824a4:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   824a6:	4802      	ldr	r0, [pc, #8]	; (824b0 <PIOB_Handler+0xc>)
   824a8:	210c      	movs	r1, #12
   824aa:	4b02      	ldr	r3, [pc, #8]	; (824b4 <PIOB_Handler+0x10>)
   824ac:	4798      	blx	r3
   824ae:	bd08      	pop	{r3, pc}
   824b0:	400e1000 	.word	0x400e1000
   824b4:	00082439 	.word	0x00082439

000824b8 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   824b8:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   824ba:	4802      	ldr	r0, [pc, #8]	; (824c4 <PIOC_Handler+0xc>)
   824bc:	210d      	movs	r1, #13
   824be:	4b02      	ldr	r3, [pc, #8]	; (824c8 <PIOC_Handler+0x10>)
   824c0:	4798      	blx	r3
   824c2:	bd08      	pop	{r3, pc}
   824c4:	400e1200 	.word	0x400e1200
   824c8:	00082439 	.word	0x00082439

000824cc <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   824cc:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   824ce:	4802      	ldr	r0, [pc, #8]	; (824d8 <PIOD_Handler+0xc>)
   824d0:	210e      	movs	r1, #14
   824d2:	4b02      	ldr	r3, [pc, #8]	; (824dc <PIOD_Handler+0x10>)
   824d4:	4798      	blx	r3
   824d6:	bd08      	pop	{r3, pc}
   824d8:	400e1400 	.word	0x400e1400
   824dc:	00082439 	.word	0x00082439

000824e0 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   824e0:	4b17      	ldr	r3, [pc, #92]	; (82540 <pmc_switch_mck_to_pllack+0x60>)
   824e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   824e4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   824e8:	4310      	orrs	r0, r2
   824ea:	6318      	str	r0, [r3, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   824ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   824ee:	f013 0f08 	tst.w	r3, #8
   824f2:	d109      	bne.n	82508 <pmc_switch_mck_to_pllack+0x28>
   824f4:	f44f 6300 	mov.w	r3, #2048	; 0x800
   824f8:	4911      	ldr	r1, [pc, #68]	; (82540 <pmc_switch_mck_to_pllack+0x60>)
   824fa:	e001      	b.n	82500 <pmc_switch_mck_to_pllack+0x20>
			--ul_timeout) {
		if (ul_timeout == 0) {
   824fc:	3b01      	subs	r3, #1
   824fe:	d019      	beq.n	82534 <pmc_switch_mck_to_pllack+0x54>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   82500:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   82502:	f012 0f08 	tst.w	r2, #8
   82506:	d0f9      	beq.n	824fc <pmc_switch_mck_to_pllack+0x1c>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   82508:	4b0d      	ldr	r3, [pc, #52]	; (82540 <pmc_switch_mck_to_pllack+0x60>)
   8250a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   8250c:	f022 0203 	bic.w	r2, r2, #3
   82510:	f042 0202 	orr.w	r2, r2, #2
   82514:	631a      	str	r2, [r3, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   82516:	6e98      	ldr	r0, [r3, #104]	; 0x68
   82518:	f010 0008 	ands.w	r0, r0, #8
   8251c:	d10c      	bne.n	82538 <pmc_switch_mck_to_pllack+0x58>
   8251e:	f44f 6300 	mov.w	r3, #2048	; 0x800
   82522:	4907      	ldr	r1, [pc, #28]	; (82540 <pmc_switch_mck_to_pllack+0x60>)
   82524:	e001      	b.n	8252a <pmc_switch_mck_to_pllack+0x4a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   82526:	3b01      	subs	r3, #1
   82528:	d008      	beq.n	8253c <pmc_switch_mck_to_pllack+0x5c>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   8252a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   8252c:	f012 0f08 	tst.w	r2, #8
   82530:	d0f9      	beq.n	82526 <pmc_switch_mck_to_pllack+0x46>
   82532:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   82534:	2001      	movs	r0, #1
   82536:	4770      	bx	lr
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   82538:	2000      	movs	r0, #0
   8253a:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   8253c:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   8253e:	4770      	bx	lr
   82540:	400e0600 	.word	0x400e0600

00082544 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   82544:	b138      	cbz	r0, 82556 <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   82546:	4911      	ldr	r1, [pc, #68]	; (8258c <pmc_switch_mainck_to_xtal+0x48>)
   82548:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   8254a:	4a11      	ldr	r2, [pc, #68]	; (82590 <pmc_switch_mainck_to_xtal+0x4c>)
   8254c:	401a      	ands	r2, r3
   8254e:	4b11      	ldr	r3, [pc, #68]	; (82594 <pmc_switch_mainck_to_xtal+0x50>)
   82550:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   82552:	620b      	str	r3, [r1, #32]
   82554:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   82556:	4a0d      	ldr	r2, [pc, #52]	; (8258c <pmc_switch_mainck_to_xtal+0x48>)
   82558:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   8255a:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   8255e:	f023 0303 	bic.w	r3, r3, #3
   82562:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   82566:	f043 0301 	orr.w	r3, r3, #1
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   8256a:	0209      	lsls	r1, r1, #8
   8256c:	b289      	uxth	r1, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   8256e:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   82570:	6213      	str	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   82572:	6e93      	ldr	r3, [r2, #104]	; 0x68
   82574:	f013 0f01 	tst.w	r3, #1
   82578:	d0fb      	beq.n	82572 <pmc_switch_mainck_to_xtal+0x2e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   8257a:	4a04      	ldr	r2, [pc, #16]	; (8258c <pmc_switch_mainck_to_xtal+0x48>)
   8257c:	6a13      	ldr	r3, [r2, #32]
   8257e:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   82582:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   82586:	6213      	str	r3, [r2, #32]
   82588:	4770      	bx	lr
   8258a:	bf00      	nop
   8258c:	400e0600 	.word	0x400e0600
   82590:	fec8fffc 	.word	0xfec8fffc
   82594:	01370002 	.word	0x01370002

00082598 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   82598:	4b02      	ldr	r3, [pc, #8]	; (825a4 <pmc_osc_is_ready_mainck+0xc>)
   8259a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   8259c:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   825a0:	4770      	bx	lr
   825a2:	bf00      	nop
   825a4:	400e0600 	.word	0x400e0600

000825a8 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   825a8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   825ac:	4b01      	ldr	r3, [pc, #4]	; (825b4 <pmc_disable_pllack+0xc>)
   825ae:	629a      	str	r2, [r3, #40]	; 0x28
   825b0:	4770      	bx	lr
   825b2:	bf00      	nop
   825b4:	400e0600 	.word	0x400e0600

000825b8 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   825b8:	4b02      	ldr	r3, [pc, #8]	; (825c4 <pmc_is_locked_pllack+0xc>)
   825ba:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   825bc:	f000 0002 	and.w	r0, r0, #2
   825c0:	4770      	bx	lr
   825c2:	bf00      	nop
   825c4:	400e0600 	.word	0x400e0600

000825c8 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   825c8:	282c      	cmp	r0, #44	; 0x2c
   825ca:	d820      	bhi.n	8260e <pmc_enable_periph_clk+0x46>
		return 1;
	}

	if (ul_id < 32) {
   825cc:	281f      	cmp	r0, #31
   825ce:	d80d      	bhi.n	825ec <pmc_enable_periph_clk+0x24>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   825d0:	4b12      	ldr	r3, [pc, #72]	; (8261c <pmc_enable_periph_clk+0x54>)
   825d2:	699a      	ldr	r2, [r3, #24]
   825d4:	2301      	movs	r3, #1
   825d6:	4083      	lsls	r3, r0
   825d8:	401a      	ands	r2, r3
   825da:	4293      	cmp	r3, r2
   825dc:	d019      	beq.n	82612 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER0 = 1 << ul_id;
   825de:	2301      	movs	r3, #1
   825e0:	fa03 f000 	lsl.w	r0, r3, r0
   825e4:	4b0d      	ldr	r3, [pc, #52]	; (8261c <pmc_enable_periph_clk+0x54>)
   825e6:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   825e8:	2000      	movs	r0, #0
   825ea:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   825ec:	4b0b      	ldr	r3, [pc, #44]	; (8261c <pmc_enable_periph_clk+0x54>)
   825ee:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
   825f2:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   825f4:	2301      	movs	r3, #1
   825f6:	4083      	lsls	r3, r0
   825f8:	401a      	ands	r2, r3
   825fa:	4293      	cmp	r3, r2
   825fc:	d00b      	beq.n	82616 <pmc_enable_periph_clk+0x4e>
			PMC->PMC_PCER1 = 1 << ul_id;
   825fe:	2301      	movs	r3, #1
   82600:	fa03 f000 	lsl.w	r0, r3, r0
   82604:	4b05      	ldr	r3, [pc, #20]	; (8261c <pmc_enable_periph_clk+0x54>)
   82606:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
   8260a:	2000      	movs	r0, #0
   8260c:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
   8260e:	2001      	movs	r0, #1
   82610:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   82612:	2000      	movs	r0, #0
   82614:	4770      	bx	lr
   82616:	2000      	movs	r0, #0
}
   82618:	4770      	bx	lr
   8261a:	bf00      	nop
   8261c:	400e0600 	.word	0x400e0600

00082620 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   82620:	e7fe      	b.n	82620 <Dummy_Handler>
   82622:	bf00      	nop

00082624 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   82624:	b510      	push	{r4, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   82626:	4b1e      	ldr	r3, [pc, #120]	; (826a0 <Reset_Handler+0x7c>)
   82628:	4a1e      	ldr	r2, [pc, #120]	; (826a4 <Reset_Handler+0x80>)
   8262a:	429a      	cmp	r2, r3
   8262c:	d003      	beq.n	82636 <Reset_Handler+0x12>
		for (; pDest < &_erelocate;) {
   8262e:	4b1e      	ldr	r3, [pc, #120]	; (826a8 <Reset_Handler+0x84>)
   82630:	4a1b      	ldr	r2, [pc, #108]	; (826a0 <Reset_Handler+0x7c>)
   82632:	429a      	cmp	r2, r3
   82634:	d304      	bcc.n	82640 <Reset_Handler+0x1c>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   82636:	4b1d      	ldr	r3, [pc, #116]	; (826ac <Reset_Handler+0x88>)
   82638:	4a1d      	ldr	r2, [pc, #116]	; (826b0 <Reset_Handler+0x8c>)
   8263a:	429a      	cmp	r2, r3
   8263c:	d30f      	bcc.n	8265e <Reset_Handler+0x3a>
   8263e:	e01a      	b.n	82676 <Reset_Handler+0x52>
   82640:	4b1c      	ldr	r3, [pc, #112]	; (826b4 <Reset_Handler+0x90>)
   82642:	4c1d      	ldr	r4, [pc, #116]	; (826b8 <Reset_Handler+0x94>)
   82644:	1ae4      	subs	r4, r4, r3
   82646:	f024 0403 	bic.w	r4, r4, #3
   8264a:	3404      	adds	r4, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   8264c:	2300      	movs	r3, #0
			*pDest++ = *pSrc++;
   8264e:	4814      	ldr	r0, [pc, #80]	; (826a0 <Reset_Handler+0x7c>)
   82650:	4914      	ldr	r1, [pc, #80]	; (826a4 <Reset_Handler+0x80>)
   82652:	585a      	ldr	r2, [r3, r1]
   82654:	501a      	str	r2, [r3, r0]
   82656:	3304      	adds	r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   82658:	42a3      	cmp	r3, r4
   8265a:	d1fa      	bne.n	82652 <Reset_Handler+0x2e>
   8265c:	e7eb      	b.n	82636 <Reset_Handler+0x12>
   8265e:	4b17      	ldr	r3, [pc, #92]	; (826bc <Reset_Handler+0x98>)
   82660:	4917      	ldr	r1, [pc, #92]	; (826c0 <Reset_Handler+0x9c>)
   82662:	1ac9      	subs	r1, r1, r3
   82664:	f021 0103 	bic.w	r1, r1, #3
   82668:	1d1a      	adds	r2, r3, #4
   8266a:	4411      	add	r1, r2
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
   8266c:	2200      	movs	r2, #0
   8266e:	f843 2f04 	str.w	r2, [r3, #4]!
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   82672:	428b      	cmp	r3, r1
   82674:	d1fb      	bne.n	8266e <Reset_Handler+0x4a>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   82676:	4a13      	ldr	r2, [pc, #76]	; (826c4 <Reset_Handler+0xa0>)
   82678:	f022 4360 	bic.w	r3, r2, #3758096384	; 0xe0000000
   8267c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   82680:	4911      	ldr	r1, [pc, #68]	; (826c8 <Reset_Handler+0xa4>)
   82682:	608b      	str	r3, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   82684:	f102 4260 	add.w	r2, r2, #3758096384	; 0xe0000000
   82688:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
   8268c:	d203      	bcs.n	82696 <Reset_Handler+0x72>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   8268e:	688a      	ldr	r2, [r1, #8]
   82690:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   82694:	608a      	str	r2, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   82696:	4b0d      	ldr	r3, [pc, #52]	; (826cc <Reset_Handler+0xa8>)
   82698:	4798      	blx	r3

	/* Branch to main function */
	main();
   8269a:	4b0d      	ldr	r3, [pc, #52]	; (826d0 <Reset_Handler+0xac>)
   8269c:	4798      	blx	r3
   8269e:	e7fe      	b.n	8269e <Reset_Handler+0x7a>
   826a0:	20070000 	.word	0x20070000
   826a4:	000859c4 	.word	0x000859c4
   826a8:	200709a4 	.word	0x200709a4
   826ac:	20078cc8 	.word	0x20078cc8
   826b0:	200709a8 	.word	0x200709a8
   826b4:	20070004 	.word	0x20070004
   826b8:	200709a7 	.word	0x200709a7
   826bc:	200709a4 	.word	0x200709a4
   826c0:	20078cc3 	.word	0x20078cc3
   826c4:	00080000 	.word	0x00080000
   826c8:	e000ed00 	.word	0xe000ed00
   826cc:	00082841 	.word	0x00082841
   826d0:	00080149 	.word	0x00080149

000826d4 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   826d4:	4b3e      	ldr	r3, [pc, #248]	; (827d0 <SystemCoreClockUpdate+0xfc>)
   826d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   826d8:	f003 0303 	and.w	r3, r3, #3
   826dc:	2b03      	cmp	r3, #3
   826de:	d85f      	bhi.n	827a0 <SystemCoreClockUpdate+0xcc>
   826e0:	e8df f003 	tbb	[pc, r3]
   826e4:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   826e8:	4b3a      	ldr	r3, [pc, #232]	; (827d4 <SystemCoreClockUpdate+0x100>)
   826ea:	695b      	ldr	r3, [r3, #20]
   826ec:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   826f0:	bf14      	ite	ne
   826f2:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   826f6:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   826fa:	4b37      	ldr	r3, [pc, #220]	; (827d8 <SystemCoreClockUpdate+0x104>)
   826fc:	601a      	str	r2, [r3, #0]
   826fe:	e04f      	b.n	827a0 <SystemCoreClockUpdate+0xcc>
		}
		break;
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   82700:	4b33      	ldr	r3, [pc, #204]	; (827d0 <SystemCoreClockUpdate+0xfc>)
   82702:	6a1b      	ldr	r3, [r3, #32]
   82704:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   82708:	d003      	beq.n	82712 <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   8270a:	4a34      	ldr	r2, [pc, #208]	; (827dc <SystemCoreClockUpdate+0x108>)
   8270c:	4b32      	ldr	r3, [pc, #200]	; (827d8 <SystemCoreClockUpdate+0x104>)
   8270e:	601a      	str	r2, [r3, #0]
   82710:	e046      	b.n	827a0 <SystemCoreClockUpdate+0xcc>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   82712:	4a33      	ldr	r2, [pc, #204]	; (827e0 <SystemCoreClockUpdate+0x10c>)
   82714:	4b30      	ldr	r3, [pc, #192]	; (827d8 <SystemCoreClockUpdate+0x104>)
   82716:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   82718:	4b2d      	ldr	r3, [pc, #180]	; (827d0 <SystemCoreClockUpdate+0xfc>)
   8271a:	6a1b      	ldr	r3, [r3, #32]
   8271c:	f003 0370 	and.w	r3, r3, #112	; 0x70
   82720:	2b10      	cmp	r3, #16
   82722:	d002      	beq.n	8272a <SystemCoreClockUpdate+0x56>
   82724:	2b20      	cmp	r3, #32
   82726:	d004      	beq.n	82732 <SystemCoreClockUpdate+0x5e>
   82728:	e03a      	b.n	827a0 <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   8272a:	4a2e      	ldr	r2, [pc, #184]	; (827e4 <SystemCoreClockUpdate+0x110>)
   8272c:	4b2a      	ldr	r3, [pc, #168]	; (827d8 <SystemCoreClockUpdate+0x104>)
   8272e:	601a      	str	r2, [r3, #0]
				break;
   82730:	e036      	b.n	827a0 <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   82732:	4a2a      	ldr	r2, [pc, #168]	; (827dc <SystemCoreClockUpdate+0x108>)
   82734:	4b28      	ldr	r3, [pc, #160]	; (827d8 <SystemCoreClockUpdate+0x104>)
   82736:	601a      	str	r2, [r3, #0]
				break;
   82738:	e032      	b.n	827a0 <SystemCoreClockUpdate+0xcc>
			}
		}
		break;
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   8273a:	4b25      	ldr	r3, [pc, #148]	; (827d0 <SystemCoreClockUpdate+0xfc>)
   8273c:	6a1b      	ldr	r3, [r3, #32]
   8273e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   82742:	d003      	beq.n	8274c <SystemCoreClockUpdate+0x78>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   82744:	4a25      	ldr	r2, [pc, #148]	; (827dc <SystemCoreClockUpdate+0x108>)
   82746:	4b24      	ldr	r3, [pc, #144]	; (827d8 <SystemCoreClockUpdate+0x104>)
   82748:	601a      	str	r2, [r3, #0]
   8274a:	e012      	b.n	82772 <SystemCoreClockUpdate+0x9e>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   8274c:	4a24      	ldr	r2, [pc, #144]	; (827e0 <SystemCoreClockUpdate+0x10c>)
   8274e:	4b22      	ldr	r3, [pc, #136]	; (827d8 <SystemCoreClockUpdate+0x104>)
   82750:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   82752:	4b1f      	ldr	r3, [pc, #124]	; (827d0 <SystemCoreClockUpdate+0xfc>)
   82754:	6a1b      	ldr	r3, [r3, #32]
   82756:	f003 0370 	and.w	r3, r3, #112	; 0x70
   8275a:	2b10      	cmp	r3, #16
   8275c:	d002      	beq.n	82764 <SystemCoreClockUpdate+0x90>
   8275e:	2b20      	cmp	r3, #32
   82760:	d004      	beq.n	8276c <SystemCoreClockUpdate+0x98>
   82762:	e006      	b.n	82772 <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   82764:	4a1f      	ldr	r2, [pc, #124]	; (827e4 <SystemCoreClockUpdate+0x110>)
   82766:	4b1c      	ldr	r3, [pc, #112]	; (827d8 <SystemCoreClockUpdate+0x104>)
   82768:	601a      	str	r2, [r3, #0]
				break;
   8276a:	e002      	b.n	82772 <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   8276c:	4a1b      	ldr	r2, [pc, #108]	; (827dc <SystemCoreClockUpdate+0x108>)
   8276e:	4b1a      	ldr	r3, [pc, #104]	; (827d8 <SystemCoreClockUpdate+0x104>)
   82770:	601a      	str	r2, [r3, #0]
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   82772:	4b17      	ldr	r3, [pc, #92]	; (827d0 <SystemCoreClockUpdate+0xfc>)
   82774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82776:	f003 0303 	and.w	r3, r3, #3
   8277a:	2b02      	cmp	r3, #2
   8277c:	d10d      	bne.n	8279a <SystemCoreClockUpdate+0xc6>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   8277e:	4b14      	ldr	r3, [pc, #80]	; (827d0 <SystemCoreClockUpdate+0xfc>)
   82780:	6a98      	ldr	r0, [r3, #40]	; 0x28
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   82782:	6a99      	ldr	r1, [r3, #40]	; 0x28
   82784:	4b14      	ldr	r3, [pc, #80]	; (827d8 <SystemCoreClockUpdate+0x104>)
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   82786:	f3c0 400a 	ubfx	r0, r0, #16, #11
   8278a:	681a      	ldr	r2, [r3, #0]
   8278c:	fb00 2202 	mla	r2, r0, r2, r2
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   82790:	b2c9      	uxtb	r1, r1
   82792:	fbb2 f2f1 	udiv	r2, r2, r1
   82796:	601a      	str	r2, [r3, #0]
   82798:	e002      	b.n	827a0 <SystemCoreClockUpdate+0xcc>
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   8279a:	4a13      	ldr	r2, [pc, #76]	; (827e8 <SystemCoreClockUpdate+0x114>)
   8279c:	4b0e      	ldr	r3, [pc, #56]	; (827d8 <SystemCoreClockUpdate+0x104>)
   8279e:	601a      	str	r2, [r3, #0]
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   827a0:	4b0b      	ldr	r3, [pc, #44]	; (827d0 <SystemCoreClockUpdate+0xfc>)
   827a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   827a4:	f003 0370 	and.w	r3, r3, #112	; 0x70
   827a8:	2b70      	cmp	r3, #112	; 0x70
   827aa:	d107      	bne.n	827bc <SystemCoreClockUpdate+0xe8>
		SystemCoreClock /= 3U;
   827ac:	4b0a      	ldr	r3, [pc, #40]	; (827d8 <SystemCoreClockUpdate+0x104>)
   827ae:	681a      	ldr	r2, [r3, #0]
   827b0:	490e      	ldr	r1, [pc, #56]	; (827ec <SystemCoreClockUpdate+0x118>)
   827b2:	fba1 0202 	umull	r0, r2, r1, r2
   827b6:	0852      	lsrs	r2, r2, #1
   827b8:	601a      	str	r2, [r3, #0]
   827ba:	4770      	bx	lr
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   827bc:	4b04      	ldr	r3, [pc, #16]	; (827d0 <SystemCoreClockUpdate+0xfc>)
   827be:	6b19      	ldr	r1, [r3, #48]	; 0x30
   827c0:	4b05      	ldr	r3, [pc, #20]	; (827d8 <SystemCoreClockUpdate+0x104>)
   827c2:	f3c1 1102 	ubfx	r1, r1, #4, #3
   827c6:	681a      	ldr	r2, [r3, #0]
   827c8:	40ca      	lsrs	r2, r1
   827ca:	601a      	str	r2, [r3, #0]
   827cc:	4770      	bx	lr
   827ce:	bf00      	nop
   827d0:	400e0600 	.word	0x400e0600
   827d4:	400e1a10 	.word	0x400e1a10
   827d8:	20070138 	.word	0x20070138
   827dc:	00b71b00 	.word	0x00b71b00
   827e0:	003d0900 	.word	0x003d0900
   827e4:	007a1200 	.word	0x007a1200
   827e8:	0e4e1c00 	.word	0x0e4e1c00
   827ec:	aaaaaaab 	.word	0xaaaaaaab

000827f0 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   827f0:	4b09      	ldr	r3, [pc, #36]	; (82818 <_sbrk+0x28>)
   827f2:	681b      	ldr	r3, [r3, #0]
   827f4:	b913      	cbnz	r3, 827fc <_sbrk+0xc>
		heap = (unsigned char *)&_end;
   827f6:	4a09      	ldr	r2, [pc, #36]	; (8281c <_sbrk+0x2c>)
   827f8:	4b07      	ldr	r3, [pc, #28]	; (82818 <_sbrk+0x28>)
   827fa:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   827fc:	4b06      	ldr	r3, [pc, #24]	; (82818 <_sbrk+0x28>)
   827fe:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   82800:	181a      	adds	r2, r3, r0
   82802:	4907      	ldr	r1, [pc, #28]	; (82820 <_sbrk+0x30>)
   82804:	4291      	cmp	r1, r2
   82806:	db04      	blt.n	82812 <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
   82808:	4610      	mov	r0, r2
   8280a:	4a03      	ldr	r2, [pc, #12]	; (82818 <_sbrk+0x28>)
   8280c:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   8280e:	4618      	mov	r0, r3
   82810:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
   82812:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
   82816:	4770      	bx	lr
   82818:	20078c80 	.word	0x20078c80
   8281c:	2007acc8 	.word	0x2007acc8
   82820:	20087ffc 	.word	0x20087ffc

00082824 <_close>:
}

extern int _close(int file)
{
	return -1;
}
   82824:	f04f 30ff 	mov.w	r0, #4294967295
   82828:	4770      	bx	lr
   8282a:	bf00      	nop

0008282c <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   8282c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   82830:	604b      	str	r3, [r1, #4]

	return 0;
}
   82832:	2000      	movs	r0, #0
   82834:	4770      	bx	lr
   82836:	bf00      	nop

00082838 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   82838:	2001      	movs	r0, #1
   8283a:	4770      	bx	lr

0008283c <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   8283c:	2000      	movs	r0, #0
   8283e:	4770      	bx	lr

00082840 <__libc_init_array>:
   82840:	b570      	push	{r4, r5, r6, lr}
   82842:	4e0f      	ldr	r6, [pc, #60]	; (82880 <__libc_init_array+0x40>)
   82844:	4d0f      	ldr	r5, [pc, #60]	; (82884 <__libc_init_array+0x44>)
   82846:	1b76      	subs	r6, r6, r5
   82848:	10b6      	asrs	r6, r6, #2
   8284a:	d007      	beq.n	8285c <__libc_init_array+0x1c>
   8284c:	3d04      	subs	r5, #4
   8284e:	2400      	movs	r4, #0
   82850:	3401      	adds	r4, #1
   82852:	f855 3f04 	ldr.w	r3, [r5, #4]!
   82856:	4798      	blx	r3
   82858:	42a6      	cmp	r6, r4
   8285a:	d1f9      	bne.n	82850 <__libc_init_array+0x10>
   8285c:	4e0a      	ldr	r6, [pc, #40]	; (82888 <__libc_init_array+0x48>)
   8285e:	4d0b      	ldr	r5, [pc, #44]	; (8288c <__libc_init_array+0x4c>)
   82860:	f003 f89a 	bl	85998 <_init>
   82864:	1b76      	subs	r6, r6, r5
   82866:	10b6      	asrs	r6, r6, #2
   82868:	d008      	beq.n	8287c <__libc_init_array+0x3c>
   8286a:	3d04      	subs	r5, #4
   8286c:	2400      	movs	r4, #0
   8286e:	3401      	adds	r4, #1
   82870:	f855 3f04 	ldr.w	r3, [r5, #4]!
   82874:	4798      	blx	r3
   82876:	42a6      	cmp	r6, r4
   82878:	d1f9      	bne.n	8286e <__libc_init_array+0x2e>
   8287a:	bd70      	pop	{r4, r5, r6, pc}
   8287c:	bd70      	pop	{r4, r5, r6, pc}
   8287e:	bf00      	nop
   82880:	000859a4 	.word	0x000859a4
   82884:	000859a4 	.word	0x000859a4
   82888:	000859ac 	.word	0x000859ac
   8288c:	000859a4 	.word	0x000859a4

00082890 <iprintf>:
   82890:	b40f      	push	{r0, r1, r2, r3}
   82892:	b510      	push	{r4, lr}
   82894:	4b07      	ldr	r3, [pc, #28]	; (828b4 <iprintf+0x24>)
   82896:	b082      	sub	sp, #8
   82898:	ac04      	add	r4, sp, #16
   8289a:	f854 2b04 	ldr.w	r2, [r4], #4
   8289e:	6818      	ldr	r0, [r3, #0]
   828a0:	4623      	mov	r3, r4
   828a2:	6881      	ldr	r1, [r0, #8]
   828a4:	9401      	str	r4, [sp, #4]
   828a6:	f000 f9ed 	bl	82c84 <_vfiprintf_r>
   828aa:	b002      	add	sp, #8
   828ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   828b0:	b004      	add	sp, #16
   828b2:	4770      	bx	lr
   828b4:	20070568 	.word	0x20070568

000828b8 <memcpy>:
   828b8:	4684      	mov	ip, r0
   828ba:	ea41 0300 	orr.w	r3, r1, r0
   828be:	f013 0303 	ands.w	r3, r3, #3
   828c2:	d149      	bne.n	82958 <memcpy+0xa0>
   828c4:	3a40      	subs	r2, #64	; 0x40
   828c6:	d323      	bcc.n	82910 <memcpy+0x58>
   828c8:	680b      	ldr	r3, [r1, #0]
   828ca:	6003      	str	r3, [r0, #0]
   828cc:	684b      	ldr	r3, [r1, #4]
   828ce:	6043      	str	r3, [r0, #4]
   828d0:	688b      	ldr	r3, [r1, #8]
   828d2:	6083      	str	r3, [r0, #8]
   828d4:	68cb      	ldr	r3, [r1, #12]
   828d6:	60c3      	str	r3, [r0, #12]
   828d8:	690b      	ldr	r3, [r1, #16]
   828da:	6103      	str	r3, [r0, #16]
   828dc:	694b      	ldr	r3, [r1, #20]
   828de:	6143      	str	r3, [r0, #20]
   828e0:	698b      	ldr	r3, [r1, #24]
   828e2:	6183      	str	r3, [r0, #24]
   828e4:	69cb      	ldr	r3, [r1, #28]
   828e6:	61c3      	str	r3, [r0, #28]
   828e8:	6a0b      	ldr	r3, [r1, #32]
   828ea:	6203      	str	r3, [r0, #32]
   828ec:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   828ee:	6243      	str	r3, [r0, #36]	; 0x24
   828f0:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   828f2:	6283      	str	r3, [r0, #40]	; 0x28
   828f4:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   828f6:	62c3      	str	r3, [r0, #44]	; 0x2c
   828f8:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   828fa:	6303      	str	r3, [r0, #48]	; 0x30
   828fc:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   828fe:	6343      	str	r3, [r0, #52]	; 0x34
   82900:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   82902:	6383      	str	r3, [r0, #56]	; 0x38
   82904:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   82906:	63c3      	str	r3, [r0, #60]	; 0x3c
   82908:	3040      	adds	r0, #64	; 0x40
   8290a:	3140      	adds	r1, #64	; 0x40
   8290c:	3a40      	subs	r2, #64	; 0x40
   8290e:	d2db      	bcs.n	828c8 <memcpy+0x10>
   82910:	3230      	adds	r2, #48	; 0x30
   82912:	d30b      	bcc.n	8292c <memcpy+0x74>
   82914:	680b      	ldr	r3, [r1, #0]
   82916:	6003      	str	r3, [r0, #0]
   82918:	684b      	ldr	r3, [r1, #4]
   8291a:	6043      	str	r3, [r0, #4]
   8291c:	688b      	ldr	r3, [r1, #8]
   8291e:	6083      	str	r3, [r0, #8]
   82920:	68cb      	ldr	r3, [r1, #12]
   82922:	60c3      	str	r3, [r0, #12]
   82924:	3010      	adds	r0, #16
   82926:	3110      	adds	r1, #16
   82928:	3a10      	subs	r2, #16
   8292a:	d2f3      	bcs.n	82914 <memcpy+0x5c>
   8292c:	320c      	adds	r2, #12
   8292e:	d305      	bcc.n	8293c <memcpy+0x84>
   82930:	f851 3b04 	ldr.w	r3, [r1], #4
   82934:	f840 3b04 	str.w	r3, [r0], #4
   82938:	3a04      	subs	r2, #4
   8293a:	d2f9      	bcs.n	82930 <memcpy+0x78>
   8293c:	3204      	adds	r2, #4
   8293e:	d008      	beq.n	82952 <memcpy+0x9a>
   82940:	07d2      	lsls	r2, r2, #31
   82942:	bf1c      	itt	ne
   82944:	f811 3b01 	ldrbne.w	r3, [r1], #1
   82948:	f800 3b01 	strbne.w	r3, [r0], #1
   8294c:	d301      	bcc.n	82952 <memcpy+0x9a>
   8294e:	880b      	ldrh	r3, [r1, #0]
   82950:	8003      	strh	r3, [r0, #0]
   82952:	4660      	mov	r0, ip
   82954:	4770      	bx	lr
   82956:	bf00      	nop
   82958:	2a08      	cmp	r2, #8
   8295a:	d313      	bcc.n	82984 <memcpy+0xcc>
   8295c:	078b      	lsls	r3, r1, #30
   8295e:	d0b1      	beq.n	828c4 <memcpy+0xc>
   82960:	f010 0303 	ands.w	r3, r0, #3
   82964:	d0ae      	beq.n	828c4 <memcpy+0xc>
   82966:	f1c3 0304 	rsb	r3, r3, #4
   8296a:	1ad2      	subs	r2, r2, r3
   8296c:	07db      	lsls	r3, r3, #31
   8296e:	bf1c      	itt	ne
   82970:	f811 3b01 	ldrbne.w	r3, [r1], #1
   82974:	f800 3b01 	strbne.w	r3, [r0], #1
   82978:	d3a4      	bcc.n	828c4 <memcpy+0xc>
   8297a:	f831 3b02 	ldrh.w	r3, [r1], #2
   8297e:	f820 3b02 	strh.w	r3, [r0], #2
   82982:	e79f      	b.n	828c4 <memcpy+0xc>
   82984:	3a04      	subs	r2, #4
   82986:	d3d9      	bcc.n	8293c <memcpy+0x84>
   82988:	3a01      	subs	r2, #1
   8298a:	f811 3b01 	ldrb.w	r3, [r1], #1
   8298e:	f800 3b01 	strb.w	r3, [r0], #1
   82992:	d2f9      	bcs.n	82988 <memcpy+0xd0>
   82994:	780b      	ldrb	r3, [r1, #0]
   82996:	7003      	strb	r3, [r0, #0]
   82998:	784b      	ldrb	r3, [r1, #1]
   8299a:	7043      	strb	r3, [r0, #1]
   8299c:	788b      	ldrb	r3, [r1, #2]
   8299e:	7083      	strb	r3, [r0, #2]
   829a0:	4660      	mov	r0, ip
   829a2:	4770      	bx	lr

000829a4 <memset>:
   829a4:	b4f0      	push	{r4, r5, r6, r7}
   829a6:	0784      	lsls	r4, r0, #30
   829a8:	d043      	beq.n	82a32 <memset+0x8e>
   829aa:	1e54      	subs	r4, r2, #1
   829ac:	2a00      	cmp	r2, #0
   829ae:	d03e      	beq.n	82a2e <memset+0x8a>
   829b0:	b2cd      	uxtb	r5, r1
   829b2:	4603      	mov	r3, r0
   829b4:	e003      	b.n	829be <memset+0x1a>
   829b6:	1e62      	subs	r2, r4, #1
   829b8:	2c00      	cmp	r4, #0
   829ba:	d038      	beq.n	82a2e <memset+0x8a>
   829bc:	4614      	mov	r4, r2
   829be:	f803 5b01 	strb.w	r5, [r3], #1
   829c2:	079a      	lsls	r2, r3, #30
   829c4:	d1f7      	bne.n	829b6 <memset+0x12>
   829c6:	2c03      	cmp	r4, #3
   829c8:	d92a      	bls.n	82a20 <memset+0x7c>
   829ca:	b2cd      	uxtb	r5, r1
   829cc:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   829d0:	2c0f      	cmp	r4, #15
   829d2:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   829d6:	d915      	bls.n	82a04 <memset+0x60>
   829d8:	f1a4 0710 	sub.w	r7, r4, #16
   829dc:	093f      	lsrs	r7, r7, #4
   829de:	f103 0610 	add.w	r6, r3, #16
   829e2:	eb06 1607 	add.w	r6, r6, r7, lsl #4
   829e6:	461a      	mov	r2, r3
   829e8:	6015      	str	r5, [r2, #0]
   829ea:	6055      	str	r5, [r2, #4]
   829ec:	6095      	str	r5, [r2, #8]
   829ee:	60d5      	str	r5, [r2, #12]
   829f0:	3210      	adds	r2, #16
   829f2:	42b2      	cmp	r2, r6
   829f4:	d1f8      	bne.n	829e8 <memset+0x44>
   829f6:	f004 040f 	and.w	r4, r4, #15
   829fa:	3701      	adds	r7, #1
   829fc:	2c03      	cmp	r4, #3
   829fe:	eb03 1307 	add.w	r3, r3, r7, lsl #4
   82a02:	d90d      	bls.n	82a20 <memset+0x7c>
   82a04:	461e      	mov	r6, r3
   82a06:	4622      	mov	r2, r4
   82a08:	3a04      	subs	r2, #4
   82a0a:	2a03      	cmp	r2, #3
   82a0c:	f846 5b04 	str.w	r5, [r6], #4
   82a10:	d8fa      	bhi.n	82a08 <memset+0x64>
   82a12:	1f22      	subs	r2, r4, #4
   82a14:	f022 0203 	bic.w	r2, r2, #3
   82a18:	3204      	adds	r2, #4
   82a1a:	4413      	add	r3, r2
   82a1c:	f004 0403 	and.w	r4, r4, #3
   82a20:	b12c      	cbz	r4, 82a2e <memset+0x8a>
   82a22:	b2c9      	uxtb	r1, r1
   82a24:	441c      	add	r4, r3
   82a26:	f803 1b01 	strb.w	r1, [r3], #1
   82a2a:	42a3      	cmp	r3, r4
   82a2c:	d1fb      	bne.n	82a26 <memset+0x82>
   82a2e:	bcf0      	pop	{r4, r5, r6, r7}
   82a30:	4770      	bx	lr
   82a32:	4614      	mov	r4, r2
   82a34:	4603      	mov	r3, r0
   82a36:	e7c6      	b.n	829c6 <memset+0x22>

00082a38 <setbuf>:
   82a38:	2900      	cmp	r1, #0
   82a3a:	bf0c      	ite	eq
   82a3c:	2202      	moveq	r2, #2
   82a3e:	2200      	movne	r2, #0
   82a40:	f44f 6380 	mov.w	r3, #1024	; 0x400
   82a44:	f000 b800 	b.w	82a48 <setvbuf>

00082a48 <setvbuf>:
   82a48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82a4c:	4d3c      	ldr	r5, [pc, #240]	; (82b40 <setvbuf+0xf8>)
   82a4e:	4604      	mov	r4, r0
   82a50:	682d      	ldr	r5, [r5, #0]
   82a52:	4688      	mov	r8, r1
   82a54:	4616      	mov	r6, r2
   82a56:	461f      	mov	r7, r3
   82a58:	b115      	cbz	r5, 82a60 <setvbuf+0x18>
   82a5a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   82a5c:	2b00      	cmp	r3, #0
   82a5e:	d04f      	beq.n	82b00 <setvbuf+0xb8>
   82a60:	2e02      	cmp	r6, #2
   82a62:	d830      	bhi.n	82ac6 <setvbuf+0x7e>
   82a64:	2f00      	cmp	r7, #0
   82a66:	db2e      	blt.n	82ac6 <setvbuf+0x7e>
   82a68:	4628      	mov	r0, r5
   82a6a:	4621      	mov	r1, r4
   82a6c:	f001 f888 	bl	83b80 <_fflush_r>
   82a70:	89a3      	ldrh	r3, [r4, #12]
   82a72:	2200      	movs	r2, #0
   82a74:	6062      	str	r2, [r4, #4]
   82a76:	61a2      	str	r2, [r4, #24]
   82a78:	061a      	lsls	r2, r3, #24
   82a7a:	d428      	bmi.n	82ace <setvbuf+0x86>
   82a7c:	f023 0383 	bic.w	r3, r3, #131	; 0x83
   82a80:	b29b      	uxth	r3, r3
   82a82:	2e02      	cmp	r6, #2
   82a84:	81a3      	strh	r3, [r4, #12]
   82a86:	d02d      	beq.n	82ae4 <setvbuf+0x9c>
   82a88:	f1b8 0f00 	cmp.w	r8, #0
   82a8c:	d03c      	beq.n	82b08 <setvbuf+0xc0>
   82a8e:	2e01      	cmp	r6, #1
   82a90:	d013      	beq.n	82aba <setvbuf+0x72>
   82a92:	b29b      	uxth	r3, r3
   82a94:	f003 0008 	and.w	r0, r3, #8
   82a98:	4a2a      	ldr	r2, [pc, #168]	; (82b44 <setvbuf+0xfc>)
   82a9a:	b280      	uxth	r0, r0
   82a9c:	63ea      	str	r2, [r5, #60]	; 0x3c
   82a9e:	f8c4 8000 	str.w	r8, [r4]
   82aa2:	f8c4 8010 	str.w	r8, [r4, #16]
   82aa6:	6167      	str	r7, [r4, #20]
   82aa8:	b178      	cbz	r0, 82aca <setvbuf+0x82>
   82aaa:	f013 0f03 	tst.w	r3, #3
   82aae:	bf18      	it	ne
   82ab0:	2700      	movne	r7, #0
   82ab2:	60a7      	str	r7, [r4, #8]
   82ab4:	2000      	movs	r0, #0
   82ab6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82aba:	f043 0301 	orr.w	r3, r3, #1
   82abe:	427a      	negs	r2, r7
   82ac0:	81a3      	strh	r3, [r4, #12]
   82ac2:	61a2      	str	r2, [r4, #24]
   82ac4:	e7e5      	b.n	82a92 <setvbuf+0x4a>
   82ac6:	f04f 30ff 	mov.w	r0, #4294967295
   82aca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82ace:	4628      	mov	r0, r5
   82ad0:	6921      	ldr	r1, [r4, #16]
   82ad2:	f001 f9b5 	bl	83e40 <_free_r>
   82ad6:	89a3      	ldrh	r3, [r4, #12]
   82ad8:	2e02      	cmp	r6, #2
   82ada:	f023 0383 	bic.w	r3, r3, #131	; 0x83
   82ade:	b29b      	uxth	r3, r3
   82ae0:	81a3      	strh	r3, [r4, #12]
   82ae2:	d1d1      	bne.n	82a88 <setvbuf+0x40>
   82ae4:	2000      	movs	r0, #0
   82ae6:	f104 0243 	add.w	r2, r4, #67	; 0x43
   82aea:	f043 0302 	orr.w	r3, r3, #2
   82aee:	2500      	movs	r5, #0
   82af0:	2101      	movs	r1, #1
   82af2:	81a3      	strh	r3, [r4, #12]
   82af4:	60a5      	str	r5, [r4, #8]
   82af6:	6022      	str	r2, [r4, #0]
   82af8:	6122      	str	r2, [r4, #16]
   82afa:	6161      	str	r1, [r4, #20]
   82afc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82b00:	4628      	mov	r0, r5
   82b02:	f001 f859 	bl	83bb8 <__sinit>
   82b06:	e7ab      	b.n	82a60 <setvbuf+0x18>
   82b08:	2f00      	cmp	r7, #0
   82b0a:	bf08      	it	eq
   82b0c:	f44f 6780 	moveq.w	r7, #1024	; 0x400
   82b10:	4638      	mov	r0, r7
   82b12:	f001 fc8b 	bl	8442c <malloc>
   82b16:	4680      	mov	r8, r0
   82b18:	b128      	cbz	r0, 82b26 <setvbuf+0xde>
   82b1a:	89a3      	ldrh	r3, [r4, #12]
   82b1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   82b20:	b29b      	uxth	r3, r3
   82b22:	81a3      	strh	r3, [r4, #12]
   82b24:	e7b3      	b.n	82a8e <setvbuf+0x46>
   82b26:	f44f 6080 	mov.w	r0, #1024	; 0x400
   82b2a:	f001 fc7f 	bl	8442c <malloc>
   82b2e:	4680      	mov	r8, r0
   82b30:	b918      	cbnz	r0, 82b3a <setvbuf+0xf2>
   82b32:	89a3      	ldrh	r3, [r4, #12]
   82b34:	f04f 30ff 	mov.w	r0, #4294967295
   82b38:	e7d5      	b.n	82ae6 <setvbuf+0x9e>
   82b3a:	f44f 6780 	mov.w	r7, #1024	; 0x400
   82b3e:	e7ec      	b.n	82b1a <setvbuf+0xd2>
   82b40:	20070568 	.word	0x20070568
   82b44:	00083bad 	.word	0x00083bad

00082b48 <strlen>:
   82b48:	f020 0103 	bic.w	r1, r0, #3
   82b4c:	f010 0003 	ands.w	r0, r0, #3
   82b50:	f1c0 0000 	rsb	r0, r0, #0
   82b54:	f851 3b04 	ldr.w	r3, [r1], #4
   82b58:	f100 0c04 	add.w	ip, r0, #4
   82b5c:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   82b60:	f06f 0200 	mvn.w	r2, #0
   82b64:	bf1c      	itt	ne
   82b66:	fa22 f20c 	lsrne.w	r2, r2, ip
   82b6a:	4313      	orrne	r3, r2
   82b6c:	f04f 0c01 	mov.w	ip, #1
   82b70:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   82b74:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   82b78:	eba3 020c 	sub.w	r2, r3, ip
   82b7c:	ea22 0203 	bic.w	r2, r2, r3
   82b80:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   82b84:	bf04      	itt	eq
   82b86:	f851 3b04 	ldreq.w	r3, [r1], #4
   82b8a:	3004      	addeq	r0, #4
   82b8c:	d0f4      	beq.n	82b78 <strlen+0x30>
   82b8e:	f013 0fff 	tst.w	r3, #255	; 0xff
   82b92:	bf1f      	itttt	ne
   82b94:	3001      	addne	r0, #1
   82b96:	f413 4f7f 	tstne.w	r3, #65280	; 0xff00
   82b9a:	3001      	addne	r0, #1
   82b9c:	f413 0f7f 	tstne.w	r3, #16711680	; 0xff0000
   82ba0:	bf18      	it	ne
   82ba2:	3001      	addne	r0, #1
   82ba4:	4770      	bx	lr
   82ba6:	bf00      	nop

00082ba8 <strncpy>:
   82ba8:	ea40 0301 	orr.w	r3, r0, r1
   82bac:	079b      	lsls	r3, r3, #30
   82bae:	b470      	push	{r4, r5, r6}
   82bb0:	d12a      	bne.n	82c08 <strncpy+0x60>
   82bb2:	2a03      	cmp	r2, #3
   82bb4:	d928      	bls.n	82c08 <strncpy+0x60>
   82bb6:	460c      	mov	r4, r1
   82bb8:	4603      	mov	r3, r0
   82bba:	4621      	mov	r1, r4
   82bbc:	f854 5b04 	ldr.w	r5, [r4], #4
   82bc0:	f1a5 3601 	sub.w	r6, r5, #16843009	; 0x1010101
   82bc4:	ea26 0605 	bic.w	r6, r6, r5
   82bc8:	f016 3f80 	tst.w	r6, #2155905152	; 0x80808080
   82bcc:	d105      	bne.n	82bda <strncpy+0x32>
   82bce:	3a04      	subs	r2, #4
   82bd0:	2a03      	cmp	r2, #3
   82bd2:	f843 5b04 	str.w	r5, [r3], #4
   82bd6:	4621      	mov	r1, r4
   82bd8:	d8ef      	bhi.n	82bba <strncpy+0x12>
   82bda:	b19a      	cbz	r2, 82c04 <strncpy+0x5c>
   82bdc:	780c      	ldrb	r4, [r1, #0]
   82bde:	3a01      	subs	r2, #1
   82be0:	701c      	strb	r4, [r3, #0]
   82be2:	3301      	adds	r3, #1
   82be4:	b13c      	cbz	r4, 82bf6 <strncpy+0x4e>
   82be6:	b16a      	cbz	r2, 82c04 <strncpy+0x5c>
   82be8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   82bec:	3a01      	subs	r2, #1
   82bee:	f803 4b01 	strb.w	r4, [r3], #1
   82bf2:	2c00      	cmp	r4, #0
   82bf4:	d1f7      	bne.n	82be6 <strncpy+0x3e>
   82bf6:	b12a      	cbz	r2, 82c04 <strncpy+0x5c>
   82bf8:	441a      	add	r2, r3
   82bfa:	2100      	movs	r1, #0
   82bfc:	f803 1b01 	strb.w	r1, [r3], #1
   82c00:	4293      	cmp	r3, r2
   82c02:	d1fb      	bne.n	82bfc <strncpy+0x54>
   82c04:	bc70      	pop	{r4, r5, r6}
   82c06:	4770      	bx	lr
   82c08:	4603      	mov	r3, r0
   82c0a:	e7e6      	b.n	82bda <strncpy+0x32>

00082c0c <__sprint_r.part.0>:
   82c0c:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   82c0e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   82c12:	049c      	lsls	r4, r3, #18
   82c14:	460e      	mov	r6, r1
   82c16:	4680      	mov	r8, r0
   82c18:	4691      	mov	r9, r2
   82c1a:	d52a      	bpl.n	82c72 <__sprint_r.part.0+0x66>
   82c1c:	6893      	ldr	r3, [r2, #8]
   82c1e:	6812      	ldr	r2, [r2, #0]
   82c20:	f102 0a08 	add.w	sl, r2, #8
   82c24:	b31b      	cbz	r3, 82c6e <__sprint_r.part.0+0x62>
   82c26:	e91a 00a0 	ldmdb	sl, {r5, r7}
   82c2a:	08bf      	lsrs	r7, r7, #2
   82c2c:	d017      	beq.n	82c5e <__sprint_r.part.0+0x52>
   82c2e:	3d04      	subs	r5, #4
   82c30:	2400      	movs	r4, #0
   82c32:	e001      	b.n	82c38 <__sprint_r.part.0+0x2c>
   82c34:	42a7      	cmp	r7, r4
   82c36:	d010      	beq.n	82c5a <__sprint_r.part.0+0x4e>
   82c38:	4640      	mov	r0, r8
   82c3a:	f855 1f04 	ldr.w	r1, [r5, #4]!
   82c3e:	4632      	mov	r2, r6
   82c40:	f001 f850 	bl	83ce4 <_fputwc_r>
   82c44:	1c43      	adds	r3, r0, #1
   82c46:	f104 0401 	add.w	r4, r4, #1
   82c4a:	d1f3      	bne.n	82c34 <__sprint_r.part.0+0x28>
   82c4c:	2300      	movs	r3, #0
   82c4e:	f8c9 3008 	str.w	r3, [r9, #8]
   82c52:	f8c9 3004 	str.w	r3, [r9, #4]
   82c56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   82c5a:	f8d9 3008 	ldr.w	r3, [r9, #8]
   82c5e:	eba3 0387 	sub.w	r3, r3, r7, lsl #2
   82c62:	f8c9 3008 	str.w	r3, [r9, #8]
   82c66:	f10a 0a08 	add.w	sl, sl, #8
   82c6a:	2b00      	cmp	r3, #0
   82c6c:	d1db      	bne.n	82c26 <__sprint_r.part.0+0x1a>
   82c6e:	2000      	movs	r0, #0
   82c70:	e7ec      	b.n	82c4c <__sprint_r.part.0+0x40>
   82c72:	f001 f9b1 	bl	83fd8 <__sfvwrite_r>
   82c76:	2300      	movs	r3, #0
   82c78:	f8c9 3008 	str.w	r3, [r9, #8]
   82c7c:	f8c9 3004 	str.w	r3, [r9, #4]
   82c80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00082c84 <_vfiprintf_r>:
   82c84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82c88:	b0b1      	sub	sp, #196	; 0xc4
   82c8a:	461c      	mov	r4, r3
   82c8c:	9102      	str	r1, [sp, #8]
   82c8e:	4690      	mov	r8, r2
   82c90:	9308      	str	r3, [sp, #32]
   82c92:	9006      	str	r0, [sp, #24]
   82c94:	b118      	cbz	r0, 82c9e <_vfiprintf_r+0x1a>
   82c96:	6b83      	ldr	r3, [r0, #56]	; 0x38
   82c98:	2b00      	cmp	r3, #0
   82c9a:	f000 80e8 	beq.w	82e6e <_vfiprintf_r+0x1ea>
   82c9e:	9d02      	ldr	r5, [sp, #8]
   82ca0:	89ab      	ldrh	r3, [r5, #12]
   82ca2:	b29a      	uxth	r2, r3
   82ca4:	0490      	lsls	r0, r2, #18
   82ca6:	d407      	bmi.n	82cb8 <_vfiprintf_r+0x34>
   82ca8:	6e6a      	ldr	r2, [r5, #100]	; 0x64
   82caa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   82cae:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
   82cb2:	81ab      	strh	r3, [r5, #12]
   82cb4:	b29a      	uxth	r2, r3
   82cb6:	6669      	str	r1, [r5, #100]	; 0x64
   82cb8:	0711      	lsls	r1, r2, #28
   82cba:	f140 80b7 	bpl.w	82e2c <_vfiprintf_r+0x1a8>
   82cbe:	f8dd b008 	ldr.w	fp, [sp, #8]
   82cc2:	f8db 3010 	ldr.w	r3, [fp, #16]
   82cc6:	2b00      	cmp	r3, #0
   82cc8:	f000 80b0 	beq.w	82e2c <_vfiprintf_r+0x1a8>
   82ccc:	f002 021a 	and.w	r2, r2, #26
   82cd0:	2a0a      	cmp	r2, #10
   82cd2:	f000 80b7 	beq.w	82e44 <_vfiprintf_r+0x1c0>
   82cd6:	2300      	movs	r3, #0
   82cd8:	f10d 0980 	add.w	r9, sp, #128	; 0x80
   82cdc:	930a      	str	r3, [sp, #40]	; 0x28
   82cde:	9315      	str	r3, [sp, #84]	; 0x54
   82ce0:	9314      	str	r3, [sp, #80]	; 0x50
   82ce2:	9309      	str	r3, [sp, #36]	; 0x24
   82ce4:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
   82ce8:	464e      	mov	r6, r9
   82cea:	f898 3000 	ldrb.w	r3, [r8]
   82cee:	2b00      	cmp	r3, #0
   82cf0:	f000 84c8 	beq.w	83684 <_vfiprintf_r+0xa00>
   82cf4:	2b25      	cmp	r3, #37	; 0x25
   82cf6:	f000 84c5 	beq.w	83684 <_vfiprintf_r+0xa00>
   82cfa:	f108 0201 	add.w	r2, r8, #1
   82cfe:	e001      	b.n	82d04 <_vfiprintf_r+0x80>
   82d00:	2b25      	cmp	r3, #37	; 0x25
   82d02:	d004      	beq.n	82d0e <_vfiprintf_r+0x8a>
   82d04:	7813      	ldrb	r3, [r2, #0]
   82d06:	4614      	mov	r4, r2
   82d08:	3201      	adds	r2, #1
   82d0a:	2b00      	cmp	r3, #0
   82d0c:	d1f8      	bne.n	82d00 <_vfiprintf_r+0x7c>
   82d0e:	ebc8 0504 	rsb	r5, r8, r4
   82d12:	b195      	cbz	r5, 82d3a <_vfiprintf_r+0xb6>
   82d14:	9b14      	ldr	r3, [sp, #80]	; 0x50
   82d16:	9a15      	ldr	r2, [sp, #84]	; 0x54
   82d18:	3301      	adds	r3, #1
   82d1a:	442a      	add	r2, r5
   82d1c:	2b07      	cmp	r3, #7
   82d1e:	f8c6 8000 	str.w	r8, [r6]
   82d22:	6075      	str	r5, [r6, #4]
   82d24:	9215      	str	r2, [sp, #84]	; 0x54
   82d26:	9314      	str	r3, [sp, #80]	; 0x50
   82d28:	dd7b      	ble.n	82e22 <_vfiprintf_r+0x19e>
   82d2a:	2a00      	cmp	r2, #0
   82d2c:	f040 84d5 	bne.w	836da <_vfiprintf_r+0xa56>
   82d30:	9809      	ldr	r0, [sp, #36]	; 0x24
   82d32:	9214      	str	r2, [sp, #80]	; 0x50
   82d34:	4428      	add	r0, r5
   82d36:	464e      	mov	r6, r9
   82d38:	9009      	str	r0, [sp, #36]	; 0x24
   82d3a:	7823      	ldrb	r3, [r4, #0]
   82d3c:	2b00      	cmp	r3, #0
   82d3e:	f000 83ed 	beq.w	8351c <_vfiprintf_r+0x898>
   82d42:	2100      	movs	r1, #0
   82d44:	f04f 0200 	mov.w	r2, #0
   82d48:	f04f 3cff 	mov.w	ip, #4294967295
   82d4c:	7863      	ldrb	r3, [r4, #1]
   82d4e:	f88d 2047 	strb.w	r2, [sp, #71]	; 0x47
   82d52:	9104      	str	r1, [sp, #16]
   82d54:	468a      	mov	sl, r1
   82d56:	f104 0801 	add.w	r8, r4, #1
   82d5a:	4608      	mov	r0, r1
   82d5c:	4665      	mov	r5, ip
   82d5e:	f108 0801 	add.w	r8, r8, #1
   82d62:	f1a3 0220 	sub.w	r2, r3, #32
   82d66:	2a58      	cmp	r2, #88	; 0x58
   82d68:	f200 82d9 	bhi.w	8331e <_vfiprintf_r+0x69a>
   82d6c:	e8df f012 	tbh	[pc, r2, lsl #1]
   82d70:	02d702cb 	.word	0x02d702cb
   82d74:	02d202d7 	.word	0x02d202d7
   82d78:	02d702d7 	.word	0x02d702d7
   82d7c:	02d702d7 	.word	0x02d702d7
   82d80:	02d702d7 	.word	0x02d702d7
   82d84:	028f0282 	.word	0x028f0282
   82d88:	008402d7 	.word	0x008402d7
   82d8c:	02d70293 	.word	0x02d70293
   82d90:	0196012b 	.word	0x0196012b
   82d94:	01960196 	.word	0x01960196
   82d98:	01960196 	.word	0x01960196
   82d9c:	01960196 	.word	0x01960196
   82da0:	01960196 	.word	0x01960196
   82da4:	02d702d7 	.word	0x02d702d7
   82da8:	02d702d7 	.word	0x02d702d7
   82dac:	02d702d7 	.word	0x02d702d7
   82db0:	02d702d7 	.word	0x02d702d7
   82db4:	02d702d7 	.word	0x02d702d7
   82db8:	02d70130 	.word	0x02d70130
   82dbc:	02d702d7 	.word	0x02d702d7
   82dc0:	02d702d7 	.word	0x02d702d7
   82dc4:	02d702d7 	.word	0x02d702d7
   82dc8:	02d702d7 	.word	0x02d702d7
   82dcc:	017b02d7 	.word	0x017b02d7
   82dd0:	02d702d7 	.word	0x02d702d7
   82dd4:	02d702d7 	.word	0x02d702d7
   82dd8:	01a402d7 	.word	0x01a402d7
   82ddc:	02d702d7 	.word	0x02d702d7
   82de0:	02d701bf 	.word	0x02d701bf
   82de4:	02d702d7 	.word	0x02d702d7
   82de8:	02d702d7 	.word	0x02d702d7
   82dec:	02d702d7 	.word	0x02d702d7
   82df0:	02d702d7 	.word	0x02d702d7
   82df4:	01e402d7 	.word	0x01e402d7
   82df8:	02d701fa 	.word	0x02d701fa
   82dfc:	02d702d7 	.word	0x02d702d7
   82e00:	01fa0216 	.word	0x01fa0216
   82e04:	02d702d7 	.word	0x02d702d7
   82e08:	02d7021b 	.word	0x02d7021b
   82e0c:	00890228 	.word	0x00890228
   82e10:	027d0266 	.word	0x027d0266
   82e14:	023a02d7 	.word	0x023a02d7
   82e18:	011902d7 	.word	0x011902d7
   82e1c:	02d702d7 	.word	0x02d702d7
   82e20:	02af      	.short	0x02af
   82e22:	3608      	adds	r6, #8
   82e24:	9809      	ldr	r0, [sp, #36]	; 0x24
   82e26:	4428      	add	r0, r5
   82e28:	9009      	str	r0, [sp, #36]	; 0x24
   82e2a:	e786      	b.n	82d3a <_vfiprintf_r+0xb6>
   82e2c:	9806      	ldr	r0, [sp, #24]
   82e2e:	9902      	ldr	r1, [sp, #8]
   82e30:	f000 fd90 	bl	83954 <__swsetup_r>
   82e34:	b9b0      	cbnz	r0, 82e64 <_vfiprintf_r+0x1e0>
   82e36:	9d02      	ldr	r5, [sp, #8]
   82e38:	89aa      	ldrh	r2, [r5, #12]
   82e3a:	f002 021a 	and.w	r2, r2, #26
   82e3e:	2a0a      	cmp	r2, #10
   82e40:	f47f af49 	bne.w	82cd6 <_vfiprintf_r+0x52>
   82e44:	f8dd b008 	ldr.w	fp, [sp, #8]
   82e48:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
   82e4c:	2b00      	cmp	r3, #0
   82e4e:	f6ff af42 	blt.w	82cd6 <_vfiprintf_r+0x52>
   82e52:	9806      	ldr	r0, [sp, #24]
   82e54:	4659      	mov	r1, fp
   82e56:	4642      	mov	r2, r8
   82e58:	4623      	mov	r3, r4
   82e5a:	f000 fd3d 	bl	838d8 <__sbprintf>
   82e5e:	b031      	add	sp, #196	; 0xc4
   82e60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82e64:	f04f 30ff 	mov.w	r0, #4294967295
   82e68:	b031      	add	sp, #196	; 0xc4
   82e6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82e6e:	f000 fea3 	bl	83bb8 <__sinit>
   82e72:	e714      	b.n	82c9e <_vfiprintf_r+0x1a>
   82e74:	4240      	negs	r0, r0
   82e76:	9308      	str	r3, [sp, #32]
   82e78:	f04a 0a04 	orr.w	sl, sl, #4
   82e7c:	f898 3000 	ldrb.w	r3, [r8]
   82e80:	e76d      	b.n	82d5e <_vfiprintf_r+0xda>
   82e82:	f01a 0320 	ands.w	r3, sl, #32
   82e86:	9004      	str	r0, [sp, #16]
   82e88:	46ac      	mov	ip, r5
   82e8a:	f000 80f4 	beq.w	83076 <_vfiprintf_r+0x3f2>
   82e8e:	f8dd b020 	ldr.w	fp, [sp, #32]
   82e92:	f10b 0307 	add.w	r3, fp, #7
   82e96:	f023 0307 	bic.w	r3, r3, #7
   82e9a:	f103 0408 	add.w	r4, r3, #8
   82e9e:	9408      	str	r4, [sp, #32]
   82ea0:	e9d3 4500 	ldrd	r4, r5, [r3]
   82ea4:	2300      	movs	r3, #0
   82ea6:	f04f 0000 	mov.w	r0, #0
   82eaa:	2100      	movs	r1, #0
   82eac:	f88d 0047 	strb.w	r0, [sp, #71]	; 0x47
   82eb0:	f8cd c014 	str.w	ip, [sp, #20]
   82eb4:	9107      	str	r1, [sp, #28]
   82eb6:	f1bc 0f00 	cmp.w	ip, #0
   82eba:	bfa8      	it	ge
   82ebc:	f02a 0a80 	bicge.w	sl, sl, #128	; 0x80
   82ec0:	ea54 0205 	orrs.w	r2, r4, r5
   82ec4:	f040 80ad 	bne.w	83022 <_vfiprintf_r+0x39e>
   82ec8:	f1bc 0f00 	cmp.w	ip, #0
   82ecc:	f040 80a9 	bne.w	83022 <_vfiprintf_r+0x39e>
   82ed0:	2b00      	cmp	r3, #0
   82ed2:	f040 83c0 	bne.w	83656 <_vfiprintf_r+0x9d2>
   82ed6:	f01a 0f01 	tst.w	sl, #1
   82eda:	f000 83bc 	beq.w	83656 <_vfiprintf_r+0x9d2>
   82ede:	2330      	movs	r3, #48	; 0x30
   82ee0:	af30      	add	r7, sp, #192	; 0xc0
   82ee2:	f807 3d41 	strb.w	r3, [r7, #-65]!
   82ee6:	ebc7 0409 	rsb	r4, r7, r9
   82eea:	9405      	str	r4, [sp, #20]
   82eec:	f8dd b014 	ldr.w	fp, [sp, #20]
   82ef0:	9c07      	ldr	r4, [sp, #28]
   82ef2:	45e3      	cmp	fp, ip
   82ef4:	bfb8      	it	lt
   82ef6:	46e3      	movlt	fp, ip
   82ef8:	f8cd b00c 	str.w	fp, [sp, #12]
   82efc:	b11c      	cbz	r4, 82f06 <_vfiprintf_r+0x282>
   82efe:	f10b 0b01 	add.w	fp, fp, #1
   82f02:	f8cd b00c 	str.w	fp, [sp, #12]
   82f06:	f01a 0502 	ands.w	r5, sl, #2
   82f0a:	9507      	str	r5, [sp, #28]
   82f0c:	d005      	beq.n	82f1a <_vfiprintf_r+0x296>
   82f0e:	f8dd b00c 	ldr.w	fp, [sp, #12]
   82f12:	f10b 0b02 	add.w	fp, fp, #2
   82f16:	f8cd b00c 	str.w	fp, [sp, #12]
   82f1a:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
   82f1e:	930b      	str	r3, [sp, #44]	; 0x2c
   82f20:	f040 821b 	bne.w	8335a <_vfiprintf_r+0x6d6>
   82f24:	9d04      	ldr	r5, [sp, #16]
   82f26:	f8dd b00c 	ldr.w	fp, [sp, #12]
   82f2a:	ebcb 0405 	rsb	r4, fp, r5
   82f2e:	2c00      	cmp	r4, #0
   82f30:	f340 8213 	ble.w	8335a <_vfiprintf_r+0x6d6>
   82f34:	2c10      	cmp	r4, #16
   82f36:	f340 8489 	ble.w	8384c <_vfiprintf_r+0xbc8>
   82f3a:	4dbe      	ldr	r5, [pc, #760]	; (83234 <_vfiprintf_r+0x5b0>)
   82f3c:	9a15      	ldr	r2, [sp, #84]	; 0x54
   82f3e:	462b      	mov	r3, r5
   82f40:	9814      	ldr	r0, [sp, #80]	; 0x50
   82f42:	4625      	mov	r5, r4
   82f44:	f04f 0b10 	mov.w	fp, #16
   82f48:	4664      	mov	r4, ip
   82f4a:	46b4      	mov	ip, r6
   82f4c:	461e      	mov	r6, r3
   82f4e:	e006      	b.n	82f5e <_vfiprintf_r+0x2da>
   82f50:	1c83      	adds	r3, r0, #2
   82f52:	f10c 0c08 	add.w	ip, ip, #8
   82f56:	4608      	mov	r0, r1
   82f58:	3d10      	subs	r5, #16
   82f5a:	2d10      	cmp	r5, #16
   82f5c:	dd11      	ble.n	82f82 <_vfiprintf_r+0x2fe>
   82f5e:	1c41      	adds	r1, r0, #1
   82f60:	3210      	adds	r2, #16
   82f62:	2907      	cmp	r1, #7
   82f64:	9215      	str	r2, [sp, #84]	; 0x54
   82f66:	e88c 0840 	stmia.w	ip, {r6, fp}
   82f6a:	9114      	str	r1, [sp, #80]	; 0x50
   82f6c:	ddf0      	ble.n	82f50 <_vfiprintf_r+0x2cc>
   82f6e:	2a00      	cmp	r2, #0
   82f70:	f040 81e6 	bne.w	83340 <_vfiprintf_r+0x6bc>
   82f74:	3d10      	subs	r5, #16
   82f76:	2d10      	cmp	r5, #16
   82f78:	f04f 0301 	mov.w	r3, #1
   82f7c:	4610      	mov	r0, r2
   82f7e:	46cc      	mov	ip, r9
   82f80:	dced      	bgt.n	82f5e <_vfiprintf_r+0x2da>
   82f82:	4631      	mov	r1, r6
   82f84:	4666      	mov	r6, ip
   82f86:	46a4      	mov	ip, r4
   82f88:	462c      	mov	r4, r5
   82f8a:	460d      	mov	r5, r1
   82f8c:	4422      	add	r2, r4
   82f8e:	2b07      	cmp	r3, #7
   82f90:	9215      	str	r2, [sp, #84]	; 0x54
   82f92:	6035      	str	r5, [r6, #0]
   82f94:	6074      	str	r4, [r6, #4]
   82f96:	9314      	str	r3, [sp, #80]	; 0x50
   82f98:	f300 836d 	bgt.w	83676 <_vfiprintf_r+0x9f2>
   82f9c:	3608      	adds	r6, #8
   82f9e:	1c59      	adds	r1, r3, #1
   82fa0:	e1de      	b.n	83360 <_vfiprintf_r+0x6dc>
   82fa2:	f01a 0f20 	tst.w	sl, #32
   82fa6:	9004      	str	r0, [sp, #16]
   82fa8:	46ac      	mov	ip, r5
   82faa:	f000 808d 	beq.w	830c8 <_vfiprintf_r+0x444>
   82fae:	9d08      	ldr	r5, [sp, #32]
   82fb0:	1deb      	adds	r3, r5, #7
   82fb2:	f023 0307 	bic.w	r3, r3, #7
   82fb6:	f103 0b08 	add.w	fp, r3, #8
   82fba:	e9d3 4500 	ldrd	r4, r5, [r3]
   82fbe:	f8cd b020 	str.w	fp, [sp, #32]
   82fc2:	2301      	movs	r3, #1
   82fc4:	e76f      	b.n	82ea6 <_vfiprintf_r+0x222>
   82fc6:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
   82fca:	f898 3000 	ldrb.w	r3, [r8]
   82fce:	e6c6      	b.n	82d5e <_vfiprintf_r+0xda>
   82fd0:	f04a 0a10 	orr.w	sl, sl, #16
   82fd4:	f01a 0f20 	tst.w	sl, #32
   82fd8:	9004      	str	r0, [sp, #16]
   82fda:	46ac      	mov	ip, r5
   82fdc:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   82fe0:	f000 80c8 	beq.w	83174 <_vfiprintf_r+0x4f0>
   82fe4:	9c08      	ldr	r4, [sp, #32]
   82fe6:	1de1      	adds	r1, r4, #7
   82fe8:	f021 0107 	bic.w	r1, r1, #7
   82fec:	e9d1 2300 	ldrd	r2, r3, [r1]
   82ff0:	3108      	adds	r1, #8
   82ff2:	9108      	str	r1, [sp, #32]
   82ff4:	4614      	mov	r4, r2
   82ff6:	461d      	mov	r5, r3
   82ff8:	2a00      	cmp	r2, #0
   82ffa:	f173 0b00 	sbcs.w	fp, r3, #0
   82ffe:	f2c0 83ce 	blt.w	8379e <_vfiprintf_r+0xb1a>
   83002:	f1bc 0f00 	cmp.w	ip, #0
   83006:	f89d 0047 	ldrb.w	r0, [sp, #71]	; 0x47
   8300a:	bfa8      	it	ge
   8300c:	f02a 0a80 	bicge.w	sl, sl, #128	; 0x80
   83010:	ea54 0205 	orrs.w	r2, r4, r5
   83014:	9007      	str	r0, [sp, #28]
   83016:	f8cd c014 	str.w	ip, [sp, #20]
   8301a:	f04f 0301 	mov.w	r3, #1
   8301e:	f43f af53 	beq.w	82ec8 <_vfiprintf_r+0x244>
   83022:	2b01      	cmp	r3, #1
   83024:	f000 8319 	beq.w	8365a <_vfiprintf_r+0x9d6>
   83028:	2b02      	cmp	r3, #2
   8302a:	f10d 037f 	add.w	r3, sp, #127	; 0x7f
   8302e:	f040 824c 	bne.w	834ca <_vfiprintf_r+0x846>
   83032:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
   83036:	4619      	mov	r1, r3
   83038:	f004 000f 	and.w	r0, r4, #15
   8303c:	0922      	lsrs	r2, r4, #4
   8303e:	f81b 0000 	ldrb.w	r0, [fp, r0]
   83042:	ea42 7205 	orr.w	r2, r2, r5, lsl #28
   83046:	092b      	lsrs	r3, r5, #4
   83048:	7008      	strb	r0, [r1, #0]
   8304a:	ea52 0003 	orrs.w	r0, r2, r3
   8304e:	460f      	mov	r7, r1
   83050:	4614      	mov	r4, r2
   83052:	461d      	mov	r5, r3
   83054:	f101 31ff 	add.w	r1, r1, #4294967295
   83058:	d1ee      	bne.n	83038 <_vfiprintf_r+0x3b4>
   8305a:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
   8305e:	ebc7 0309 	rsb	r3, r7, r9
   83062:	9305      	str	r3, [sp, #20]
   83064:	e742      	b.n	82eec <_vfiprintf_r+0x268>
   83066:	f04a 0a10 	orr.w	sl, sl, #16
   8306a:	f01a 0320 	ands.w	r3, sl, #32
   8306e:	9004      	str	r0, [sp, #16]
   83070:	46ac      	mov	ip, r5
   83072:	f47f af0c 	bne.w	82e8e <_vfiprintf_r+0x20a>
   83076:	f01a 0210 	ands.w	r2, sl, #16
   8307a:	f040 8311 	bne.w	836a0 <_vfiprintf_r+0xa1c>
   8307e:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
   83082:	f000 830d 	beq.w	836a0 <_vfiprintf_r+0xa1c>
   83086:	f8dd b020 	ldr.w	fp, [sp, #32]
   8308a:	4613      	mov	r3, r2
   8308c:	f8bb 4000 	ldrh.w	r4, [fp]
   83090:	f10b 0b04 	add.w	fp, fp, #4
   83094:	2500      	movs	r5, #0
   83096:	f8cd b020 	str.w	fp, [sp, #32]
   8309a:	e704      	b.n	82ea6 <_vfiprintf_r+0x222>
   8309c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   830a0:	2000      	movs	r0, #0
   830a2:	f818 3b01 	ldrb.w	r3, [r8], #1
   830a6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   830aa:	eb02 0040 	add.w	r0, r2, r0, lsl #1
   830ae:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   830b2:	2a09      	cmp	r2, #9
   830b4:	d9f5      	bls.n	830a2 <_vfiprintf_r+0x41e>
   830b6:	e654      	b.n	82d62 <_vfiprintf_r+0xde>
   830b8:	f04a 0a10 	orr.w	sl, sl, #16
   830bc:	f01a 0f20 	tst.w	sl, #32
   830c0:	9004      	str	r0, [sp, #16]
   830c2:	46ac      	mov	ip, r5
   830c4:	f47f af73 	bne.w	82fae <_vfiprintf_r+0x32a>
   830c8:	f01a 0f10 	tst.w	sl, #16
   830cc:	f040 82ef 	bne.w	836ae <_vfiprintf_r+0xa2a>
   830d0:	f01a 0f40 	tst.w	sl, #64	; 0x40
   830d4:	f000 82eb 	beq.w	836ae <_vfiprintf_r+0xa2a>
   830d8:	f8dd b020 	ldr.w	fp, [sp, #32]
   830dc:	2500      	movs	r5, #0
   830de:	f8bb 4000 	ldrh.w	r4, [fp]
   830e2:	f10b 0b04 	add.w	fp, fp, #4
   830e6:	2301      	movs	r3, #1
   830e8:	f8cd b020 	str.w	fp, [sp, #32]
   830ec:	e6db      	b.n	82ea6 <_vfiprintf_r+0x222>
   830ee:	46ac      	mov	ip, r5
   830f0:	4d51      	ldr	r5, [pc, #324]	; (83238 <_vfiprintf_r+0x5b4>)
   830f2:	f01a 0f20 	tst.w	sl, #32
   830f6:	9004      	str	r0, [sp, #16]
   830f8:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   830fc:	950a      	str	r5, [sp, #40]	; 0x28
   830fe:	f000 80f0 	beq.w	832e2 <_vfiprintf_r+0x65e>
   83102:	9d08      	ldr	r5, [sp, #32]
   83104:	1dea      	adds	r2, r5, #7
   83106:	f022 0207 	bic.w	r2, r2, #7
   8310a:	f102 0b08 	add.w	fp, r2, #8
   8310e:	f8cd b020 	str.w	fp, [sp, #32]
   83112:	e9d2 4500 	ldrd	r4, r5, [r2]
   83116:	f01a 0f01 	tst.w	sl, #1
   8311a:	f000 82aa 	beq.w	83672 <_vfiprintf_r+0x9ee>
   8311e:	ea54 0b05 	orrs.w	fp, r4, r5
   83122:	f000 82a6 	beq.w	83672 <_vfiprintf_r+0x9ee>
   83126:	2230      	movs	r2, #48	; 0x30
   83128:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
   8312c:	f04a 0a02 	orr.w	sl, sl, #2
   83130:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   83134:	2302      	movs	r3, #2
   83136:	e6b6      	b.n	82ea6 <_vfiprintf_r+0x222>
   83138:	9b08      	ldr	r3, [sp, #32]
   8313a:	f8dd b020 	ldr.w	fp, [sp, #32]
   8313e:	681b      	ldr	r3, [r3, #0]
   83140:	2401      	movs	r4, #1
   83142:	f04f 0500 	mov.w	r5, #0
   83146:	f10b 0b04 	add.w	fp, fp, #4
   8314a:	9004      	str	r0, [sp, #16]
   8314c:	9403      	str	r4, [sp, #12]
   8314e:	f88d 5047 	strb.w	r5, [sp, #71]	; 0x47
   83152:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
   83156:	f8cd b020 	str.w	fp, [sp, #32]
   8315a:	9405      	str	r4, [sp, #20]
   8315c:	af16      	add	r7, sp, #88	; 0x58
   8315e:	f04f 0c00 	mov.w	ip, #0
   83162:	e6d0      	b.n	82f06 <_vfiprintf_r+0x282>
   83164:	f01a 0f20 	tst.w	sl, #32
   83168:	9004      	str	r0, [sp, #16]
   8316a:	46ac      	mov	ip, r5
   8316c:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   83170:	f47f af38 	bne.w	82fe4 <_vfiprintf_r+0x360>
   83174:	f01a 0f10 	tst.w	sl, #16
   83178:	f040 82a7 	bne.w	836ca <_vfiprintf_r+0xa46>
   8317c:	f01a 0f40 	tst.w	sl, #64	; 0x40
   83180:	f000 82a3 	beq.w	836ca <_vfiprintf_r+0xa46>
   83184:	f8dd b020 	ldr.w	fp, [sp, #32]
   83188:	f9bb 4000 	ldrsh.w	r4, [fp]
   8318c:	f10b 0b04 	add.w	fp, fp, #4
   83190:	17e5      	asrs	r5, r4, #31
   83192:	4622      	mov	r2, r4
   83194:	462b      	mov	r3, r5
   83196:	f8cd b020 	str.w	fp, [sp, #32]
   8319a:	e72d      	b.n	82ff8 <_vfiprintf_r+0x374>
   8319c:	f04a 0a40 	orr.w	sl, sl, #64	; 0x40
   831a0:	f898 3000 	ldrb.w	r3, [r8]
   831a4:	e5db      	b.n	82d5e <_vfiprintf_r+0xda>
   831a6:	f898 3000 	ldrb.w	r3, [r8]
   831aa:	4642      	mov	r2, r8
   831ac:	2b6c      	cmp	r3, #108	; 0x6c
   831ae:	bf03      	ittte	eq
   831b0:	f108 0801 	addeq.w	r8, r8, #1
   831b4:	f04a 0a20 	orreq.w	sl, sl, #32
   831b8:	7853      	ldrbeq	r3, [r2, #1]
   831ba:	f04a 0a10 	orrne.w	sl, sl, #16
   831be:	e5ce      	b.n	82d5e <_vfiprintf_r+0xda>
   831c0:	f01a 0f20 	tst.w	sl, #32
   831c4:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   831c8:	f000 82f7 	beq.w	837ba <_vfiprintf_r+0xb36>
   831cc:	9c08      	ldr	r4, [sp, #32]
   831ce:	6821      	ldr	r1, [r4, #0]
   831d0:	9c09      	ldr	r4, [sp, #36]	; 0x24
   831d2:	17e5      	asrs	r5, r4, #31
   831d4:	462b      	mov	r3, r5
   831d6:	9d08      	ldr	r5, [sp, #32]
   831d8:	4622      	mov	r2, r4
   831da:	3504      	adds	r5, #4
   831dc:	9508      	str	r5, [sp, #32]
   831de:	e9c1 2300 	strd	r2, r3, [r1]
   831e2:	e582      	b.n	82cea <_vfiprintf_r+0x66>
   831e4:	9c08      	ldr	r4, [sp, #32]
   831e6:	46ac      	mov	ip, r5
   831e8:	6827      	ldr	r7, [r4, #0]
   831ea:	f04f 0500 	mov.w	r5, #0
   831ee:	9004      	str	r0, [sp, #16]
   831f0:	f88d 5047 	strb.w	r5, [sp, #71]	; 0x47
   831f4:	3404      	adds	r4, #4
   831f6:	2f00      	cmp	r7, #0
   831f8:	f000 8332 	beq.w	83860 <_vfiprintf_r+0xbdc>
   831fc:	f1bc 0f00 	cmp.w	ip, #0
   83200:	4638      	mov	r0, r7
   83202:	f2c0 8307 	blt.w	83814 <_vfiprintf_r+0xb90>
   83206:	4662      	mov	r2, ip
   83208:	2100      	movs	r1, #0
   8320a:	f8cd c004 	str.w	ip, [sp, #4]
   8320e:	f001 fbb1 	bl	84974 <memchr>
   83212:	f8dd c004 	ldr.w	ip, [sp, #4]
   83216:	2800      	cmp	r0, #0
   83218:	f000 833a 	beq.w	83890 <_vfiprintf_r+0xc0c>
   8321c:	1bc0      	subs	r0, r0, r7
   8321e:	f89d 5047 	ldrb.w	r5, [sp, #71]	; 0x47
   83222:	4560      	cmp	r0, ip
   83224:	bfa8      	it	ge
   83226:	4660      	movge	r0, ip
   83228:	9005      	str	r0, [sp, #20]
   8322a:	9408      	str	r4, [sp, #32]
   8322c:	9507      	str	r5, [sp, #28]
   8322e:	f04f 0c00 	mov.w	ip, #0
   83232:	e65b      	b.n	82eec <_vfiprintf_r+0x268>
   83234:	00085988 	.word	0x00085988
   83238:	00085948 	.word	0x00085948
   8323c:	9b08      	ldr	r3, [sp, #32]
   8323e:	f8dd b020 	ldr.w	fp, [sp, #32]
   83242:	9004      	str	r0, [sp, #16]
   83244:	48b2      	ldr	r0, [pc, #712]	; (83510 <_vfiprintf_r+0x88c>)
   83246:	681c      	ldr	r4, [r3, #0]
   83248:	2230      	movs	r2, #48	; 0x30
   8324a:	2378      	movs	r3, #120	; 0x78
   8324c:	f10b 0b04 	add.w	fp, fp, #4
   83250:	46ac      	mov	ip, r5
   83252:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
   83256:	f04a 0a02 	orr.w	sl, sl, #2
   8325a:	f8cd b020 	str.w	fp, [sp, #32]
   8325e:	2500      	movs	r5, #0
   83260:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   83264:	900a      	str	r0, [sp, #40]	; 0x28
   83266:	2302      	movs	r3, #2
   83268:	e61d      	b.n	82ea6 <_vfiprintf_r+0x222>
   8326a:	f04a 0a20 	orr.w	sl, sl, #32
   8326e:	f898 3000 	ldrb.w	r3, [r8]
   83272:	e574      	b.n	82d5e <_vfiprintf_r+0xda>
   83274:	f8dd b020 	ldr.w	fp, [sp, #32]
   83278:	f8db 0000 	ldr.w	r0, [fp]
   8327c:	f10b 0304 	add.w	r3, fp, #4
   83280:	2800      	cmp	r0, #0
   83282:	f6ff adf7 	blt.w	82e74 <_vfiprintf_r+0x1f0>
   83286:	9308      	str	r3, [sp, #32]
   83288:	f898 3000 	ldrb.w	r3, [r8]
   8328c:	e567      	b.n	82d5e <_vfiprintf_r+0xda>
   8328e:	f898 3000 	ldrb.w	r3, [r8]
   83292:	212b      	movs	r1, #43	; 0x2b
   83294:	e563      	b.n	82d5e <_vfiprintf_r+0xda>
   83296:	f898 3000 	ldrb.w	r3, [r8]
   8329a:	f108 0401 	add.w	r4, r8, #1
   8329e:	2b2a      	cmp	r3, #42	; 0x2a
   832a0:	f000 8305 	beq.w	838ae <_vfiprintf_r+0xc2a>
   832a4:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   832a8:	2a09      	cmp	r2, #9
   832aa:	bf98      	it	ls
   832ac:	2500      	movls	r5, #0
   832ae:	f200 82fa 	bhi.w	838a6 <_vfiprintf_r+0xc22>
   832b2:	f814 3b01 	ldrb.w	r3, [r4], #1
   832b6:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   832ba:	eb02 0545 	add.w	r5, r2, r5, lsl #1
   832be:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   832c2:	2a09      	cmp	r2, #9
   832c4:	d9f5      	bls.n	832b2 <_vfiprintf_r+0x62e>
   832c6:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
   832ca:	46a0      	mov	r8, r4
   832cc:	e549      	b.n	82d62 <_vfiprintf_r+0xde>
   832ce:	4c90      	ldr	r4, [pc, #576]	; (83510 <_vfiprintf_r+0x88c>)
   832d0:	f01a 0f20 	tst.w	sl, #32
   832d4:	9004      	str	r0, [sp, #16]
   832d6:	46ac      	mov	ip, r5
   832d8:	940a      	str	r4, [sp, #40]	; 0x28
   832da:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   832de:	f47f af10 	bne.w	83102 <_vfiprintf_r+0x47e>
   832e2:	f01a 0f10 	tst.w	sl, #16
   832e6:	f040 81ea 	bne.w	836be <_vfiprintf_r+0xa3a>
   832ea:	f01a 0f40 	tst.w	sl, #64	; 0x40
   832ee:	f000 81e6 	beq.w	836be <_vfiprintf_r+0xa3a>
   832f2:	f8dd b020 	ldr.w	fp, [sp, #32]
   832f6:	2500      	movs	r5, #0
   832f8:	f8bb 4000 	ldrh.w	r4, [fp]
   832fc:	f10b 0b04 	add.w	fp, fp, #4
   83300:	f8cd b020 	str.w	fp, [sp, #32]
   83304:	e707      	b.n	83116 <_vfiprintf_r+0x492>
   83306:	f898 3000 	ldrb.w	r3, [r8]
   8330a:	2900      	cmp	r1, #0
   8330c:	f47f ad27 	bne.w	82d5e <_vfiprintf_r+0xda>
   83310:	2120      	movs	r1, #32
   83312:	e524      	b.n	82d5e <_vfiprintf_r+0xda>
   83314:	f04a 0a01 	orr.w	sl, sl, #1
   83318:	f898 3000 	ldrb.w	r3, [r8]
   8331c:	e51f      	b.n	82d5e <_vfiprintf_r+0xda>
   8331e:	9004      	str	r0, [sp, #16]
   83320:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   83324:	2b00      	cmp	r3, #0
   83326:	f000 80f9 	beq.w	8351c <_vfiprintf_r+0x898>
   8332a:	2501      	movs	r5, #1
   8332c:	f04f 0b00 	mov.w	fp, #0
   83330:	9503      	str	r5, [sp, #12]
   83332:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
   83336:	f88d b047 	strb.w	fp, [sp, #71]	; 0x47
   8333a:	9505      	str	r5, [sp, #20]
   8333c:	af16      	add	r7, sp, #88	; 0x58
   8333e:	e70e      	b.n	8315e <_vfiprintf_r+0x4da>
   83340:	9806      	ldr	r0, [sp, #24]
   83342:	9902      	ldr	r1, [sp, #8]
   83344:	aa13      	add	r2, sp, #76	; 0x4c
   83346:	f7ff fc61 	bl	82c0c <__sprint_r.part.0>
   8334a:	2800      	cmp	r0, #0
   8334c:	f040 80ed 	bne.w	8352a <_vfiprintf_r+0x8a6>
   83350:	9814      	ldr	r0, [sp, #80]	; 0x50
   83352:	9a15      	ldr	r2, [sp, #84]	; 0x54
   83354:	1c43      	adds	r3, r0, #1
   83356:	46cc      	mov	ip, r9
   83358:	e5fe      	b.n	82f58 <_vfiprintf_r+0x2d4>
   8335a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   8335c:	9a15      	ldr	r2, [sp, #84]	; 0x54
   8335e:	1c59      	adds	r1, r3, #1
   83360:	f89d 0047 	ldrb.w	r0, [sp, #71]	; 0x47
   83364:	b168      	cbz	r0, 83382 <_vfiprintf_r+0x6fe>
   83366:	3201      	adds	r2, #1
   83368:	f10d 0047 	add.w	r0, sp, #71	; 0x47
   8336c:	2301      	movs	r3, #1
   8336e:	2907      	cmp	r1, #7
   83370:	9215      	str	r2, [sp, #84]	; 0x54
   83372:	9114      	str	r1, [sp, #80]	; 0x50
   83374:	e886 0009 	stmia.w	r6, {r0, r3}
   83378:	f300 8160 	bgt.w	8363c <_vfiprintf_r+0x9b8>
   8337c:	460b      	mov	r3, r1
   8337e:	3608      	adds	r6, #8
   83380:	3101      	adds	r1, #1
   83382:	9c07      	ldr	r4, [sp, #28]
   83384:	b164      	cbz	r4, 833a0 <_vfiprintf_r+0x71c>
   83386:	3202      	adds	r2, #2
   83388:	a812      	add	r0, sp, #72	; 0x48
   8338a:	2302      	movs	r3, #2
   8338c:	2907      	cmp	r1, #7
   8338e:	9215      	str	r2, [sp, #84]	; 0x54
   83390:	9114      	str	r1, [sp, #80]	; 0x50
   83392:	e886 0009 	stmia.w	r6, {r0, r3}
   83396:	f300 8157 	bgt.w	83648 <_vfiprintf_r+0x9c4>
   8339a:	460b      	mov	r3, r1
   8339c:	3608      	adds	r6, #8
   8339e:	3101      	adds	r1, #1
   833a0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   833a2:	2d80      	cmp	r5, #128	; 0x80
   833a4:	f000 8101 	beq.w	835aa <_vfiprintf_r+0x926>
   833a8:	9d05      	ldr	r5, [sp, #20]
   833aa:	ebc5 040c 	rsb	r4, r5, ip
   833ae:	2c00      	cmp	r4, #0
   833b0:	dd2f      	ble.n	83412 <_vfiprintf_r+0x78e>
   833b2:	2c10      	cmp	r4, #16
   833b4:	4d57      	ldr	r5, [pc, #348]	; (83514 <_vfiprintf_r+0x890>)
   833b6:	dd22      	ble.n	833fe <_vfiprintf_r+0x77a>
   833b8:	4630      	mov	r0, r6
   833ba:	f04f 0b10 	mov.w	fp, #16
   833be:	462e      	mov	r6, r5
   833c0:	4625      	mov	r5, r4
   833c2:	9c06      	ldr	r4, [sp, #24]
   833c4:	e006      	b.n	833d4 <_vfiprintf_r+0x750>
   833c6:	f103 0c02 	add.w	ip, r3, #2
   833ca:	3008      	adds	r0, #8
   833cc:	460b      	mov	r3, r1
   833ce:	3d10      	subs	r5, #16
   833d0:	2d10      	cmp	r5, #16
   833d2:	dd10      	ble.n	833f6 <_vfiprintf_r+0x772>
   833d4:	1c59      	adds	r1, r3, #1
   833d6:	3210      	adds	r2, #16
   833d8:	2907      	cmp	r1, #7
   833da:	9215      	str	r2, [sp, #84]	; 0x54
   833dc:	e880 0840 	stmia.w	r0, {r6, fp}
   833e0:	9114      	str	r1, [sp, #80]	; 0x50
   833e2:	ddf0      	ble.n	833c6 <_vfiprintf_r+0x742>
   833e4:	2a00      	cmp	r2, #0
   833e6:	d163      	bne.n	834b0 <_vfiprintf_r+0x82c>
   833e8:	3d10      	subs	r5, #16
   833ea:	2d10      	cmp	r5, #16
   833ec:	f04f 0c01 	mov.w	ip, #1
   833f0:	4613      	mov	r3, r2
   833f2:	4648      	mov	r0, r9
   833f4:	dcee      	bgt.n	833d4 <_vfiprintf_r+0x750>
   833f6:	462c      	mov	r4, r5
   833f8:	4661      	mov	r1, ip
   833fa:	4635      	mov	r5, r6
   833fc:	4606      	mov	r6, r0
   833fe:	4422      	add	r2, r4
   83400:	2907      	cmp	r1, #7
   83402:	9215      	str	r2, [sp, #84]	; 0x54
   83404:	6035      	str	r5, [r6, #0]
   83406:	6074      	str	r4, [r6, #4]
   83408:	9114      	str	r1, [sp, #80]	; 0x50
   8340a:	f300 80c1 	bgt.w	83590 <_vfiprintf_r+0x90c>
   8340e:	3608      	adds	r6, #8
   83410:	3101      	adds	r1, #1
   83412:	9d05      	ldr	r5, [sp, #20]
   83414:	2907      	cmp	r1, #7
   83416:	442a      	add	r2, r5
   83418:	9215      	str	r2, [sp, #84]	; 0x54
   8341a:	6037      	str	r7, [r6, #0]
   8341c:	6075      	str	r5, [r6, #4]
   8341e:	9114      	str	r1, [sp, #80]	; 0x50
   83420:	f340 80c1 	ble.w	835a6 <_vfiprintf_r+0x922>
   83424:	2a00      	cmp	r2, #0
   83426:	f040 8130 	bne.w	8368a <_vfiprintf_r+0xa06>
   8342a:	9214      	str	r2, [sp, #80]	; 0x50
   8342c:	464e      	mov	r6, r9
   8342e:	f01a 0f04 	tst.w	sl, #4
   83432:	f000 808b 	beq.w	8354c <_vfiprintf_r+0x8c8>
   83436:	9d04      	ldr	r5, [sp, #16]
   83438:	f8dd b00c 	ldr.w	fp, [sp, #12]
   8343c:	ebcb 0405 	rsb	r4, fp, r5
   83440:	2c00      	cmp	r4, #0
   83442:	f340 8083 	ble.w	8354c <_vfiprintf_r+0x8c8>
   83446:	2c10      	cmp	r4, #16
   83448:	f340 821e 	ble.w	83888 <_vfiprintf_r+0xc04>
   8344c:	9914      	ldr	r1, [sp, #80]	; 0x50
   8344e:	4d32      	ldr	r5, [pc, #200]	; (83518 <_vfiprintf_r+0x894>)
   83450:	2710      	movs	r7, #16
   83452:	f8dd a018 	ldr.w	sl, [sp, #24]
   83456:	f8dd b008 	ldr.w	fp, [sp, #8]
   8345a:	e005      	b.n	83468 <_vfiprintf_r+0x7e4>
   8345c:	1c88      	adds	r0, r1, #2
   8345e:	3608      	adds	r6, #8
   83460:	4619      	mov	r1, r3
   83462:	3c10      	subs	r4, #16
   83464:	2c10      	cmp	r4, #16
   83466:	dd10      	ble.n	8348a <_vfiprintf_r+0x806>
   83468:	1c4b      	adds	r3, r1, #1
   8346a:	3210      	adds	r2, #16
   8346c:	2b07      	cmp	r3, #7
   8346e:	9215      	str	r2, [sp, #84]	; 0x54
   83470:	e886 00a0 	stmia.w	r6, {r5, r7}
   83474:	9314      	str	r3, [sp, #80]	; 0x50
   83476:	ddf1      	ble.n	8345c <_vfiprintf_r+0x7d8>
   83478:	2a00      	cmp	r2, #0
   8347a:	d17d      	bne.n	83578 <_vfiprintf_r+0x8f4>
   8347c:	3c10      	subs	r4, #16
   8347e:	2c10      	cmp	r4, #16
   83480:	f04f 0001 	mov.w	r0, #1
   83484:	4611      	mov	r1, r2
   83486:	464e      	mov	r6, r9
   83488:	dcee      	bgt.n	83468 <_vfiprintf_r+0x7e4>
   8348a:	4422      	add	r2, r4
   8348c:	2807      	cmp	r0, #7
   8348e:	9215      	str	r2, [sp, #84]	; 0x54
   83490:	6035      	str	r5, [r6, #0]
   83492:	6074      	str	r4, [r6, #4]
   83494:	9014      	str	r0, [sp, #80]	; 0x50
   83496:	dd59      	ble.n	8354c <_vfiprintf_r+0x8c8>
   83498:	2a00      	cmp	r2, #0
   8349a:	d14f      	bne.n	8353c <_vfiprintf_r+0x8b8>
   8349c:	9c09      	ldr	r4, [sp, #36]	; 0x24
   8349e:	f8dd b00c 	ldr.w	fp, [sp, #12]
   834a2:	9d04      	ldr	r5, [sp, #16]
   834a4:	45ab      	cmp	fp, r5
   834a6:	bfac      	ite	ge
   834a8:	445c      	addge	r4, fp
   834aa:	1964      	addlt	r4, r4, r5
   834ac:	9409      	str	r4, [sp, #36]	; 0x24
   834ae:	e05e      	b.n	8356e <_vfiprintf_r+0x8ea>
   834b0:	4620      	mov	r0, r4
   834b2:	9902      	ldr	r1, [sp, #8]
   834b4:	aa13      	add	r2, sp, #76	; 0x4c
   834b6:	f7ff fba9 	bl	82c0c <__sprint_r.part.0>
   834ba:	2800      	cmp	r0, #0
   834bc:	d135      	bne.n	8352a <_vfiprintf_r+0x8a6>
   834be:	9b14      	ldr	r3, [sp, #80]	; 0x50
   834c0:	9a15      	ldr	r2, [sp, #84]	; 0x54
   834c2:	f103 0c01 	add.w	ip, r3, #1
   834c6:	4648      	mov	r0, r9
   834c8:	e781      	b.n	833ce <_vfiprintf_r+0x74a>
   834ca:	08e0      	lsrs	r0, r4, #3
   834cc:	ea40 7045 	orr.w	r0, r0, r5, lsl #29
   834d0:	f004 0207 	and.w	r2, r4, #7
   834d4:	08e9      	lsrs	r1, r5, #3
   834d6:	3230      	adds	r2, #48	; 0x30
   834d8:	ea50 0b01 	orrs.w	fp, r0, r1
   834dc:	461f      	mov	r7, r3
   834de:	701a      	strb	r2, [r3, #0]
   834e0:	4604      	mov	r4, r0
   834e2:	460d      	mov	r5, r1
   834e4:	f103 33ff 	add.w	r3, r3, #4294967295
   834e8:	d1ef      	bne.n	834ca <_vfiprintf_r+0x846>
   834ea:	f01a 0f01 	tst.w	sl, #1
   834ee:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   834f2:	4639      	mov	r1, r7
   834f4:	f000 80b9 	beq.w	8366a <_vfiprintf_r+0x9e6>
   834f8:	2a30      	cmp	r2, #48	; 0x30
   834fa:	f43f acf4 	beq.w	82ee6 <_vfiprintf_r+0x262>
   834fe:	461f      	mov	r7, r3
   83500:	ebc7 0509 	rsb	r5, r7, r9
   83504:	2330      	movs	r3, #48	; 0x30
   83506:	9505      	str	r5, [sp, #20]
   83508:	f801 3c01 	strb.w	r3, [r1, #-1]
   8350c:	e4ee      	b.n	82eec <_vfiprintf_r+0x268>
   8350e:	bf00      	nop
   83510:	0008595c 	.word	0x0008595c
   83514:	00085978 	.word	0x00085978
   83518:	00085988 	.word	0x00085988
   8351c:	9b15      	ldr	r3, [sp, #84]	; 0x54
   8351e:	b123      	cbz	r3, 8352a <_vfiprintf_r+0x8a6>
   83520:	9806      	ldr	r0, [sp, #24]
   83522:	9902      	ldr	r1, [sp, #8]
   83524:	aa13      	add	r2, sp, #76	; 0x4c
   83526:	f7ff fb71 	bl	82c0c <__sprint_r.part.0>
   8352a:	9c02      	ldr	r4, [sp, #8]
   8352c:	89a3      	ldrh	r3, [r4, #12]
   8352e:	065b      	lsls	r3, r3, #25
   83530:	f53f ac98 	bmi.w	82e64 <_vfiprintf_r+0x1e0>
   83534:	9809      	ldr	r0, [sp, #36]	; 0x24
   83536:	b031      	add	sp, #196	; 0xc4
   83538:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8353c:	9806      	ldr	r0, [sp, #24]
   8353e:	9902      	ldr	r1, [sp, #8]
   83540:	aa13      	add	r2, sp, #76	; 0x4c
   83542:	f7ff fb63 	bl	82c0c <__sprint_r.part.0>
   83546:	2800      	cmp	r0, #0
   83548:	d1ef      	bne.n	8352a <_vfiprintf_r+0x8a6>
   8354a:	9a15      	ldr	r2, [sp, #84]	; 0x54
   8354c:	9c09      	ldr	r4, [sp, #36]	; 0x24
   8354e:	f8dd b00c 	ldr.w	fp, [sp, #12]
   83552:	9d04      	ldr	r5, [sp, #16]
   83554:	45ab      	cmp	fp, r5
   83556:	bfac      	ite	ge
   83558:	445c      	addge	r4, fp
   8355a:	1964      	addlt	r4, r4, r5
   8355c:	9409      	str	r4, [sp, #36]	; 0x24
   8355e:	b132      	cbz	r2, 8356e <_vfiprintf_r+0x8ea>
   83560:	9806      	ldr	r0, [sp, #24]
   83562:	9902      	ldr	r1, [sp, #8]
   83564:	aa13      	add	r2, sp, #76	; 0x4c
   83566:	f7ff fb51 	bl	82c0c <__sprint_r.part.0>
   8356a:	2800      	cmp	r0, #0
   8356c:	d1dd      	bne.n	8352a <_vfiprintf_r+0x8a6>
   8356e:	2000      	movs	r0, #0
   83570:	9014      	str	r0, [sp, #80]	; 0x50
   83572:	464e      	mov	r6, r9
   83574:	f7ff bbb9 	b.w	82cea <_vfiprintf_r+0x66>
   83578:	4650      	mov	r0, sl
   8357a:	4659      	mov	r1, fp
   8357c:	aa13      	add	r2, sp, #76	; 0x4c
   8357e:	f7ff fb45 	bl	82c0c <__sprint_r.part.0>
   83582:	2800      	cmp	r0, #0
   83584:	d1d1      	bne.n	8352a <_vfiprintf_r+0x8a6>
   83586:	9914      	ldr	r1, [sp, #80]	; 0x50
   83588:	9a15      	ldr	r2, [sp, #84]	; 0x54
   8358a:	1c48      	adds	r0, r1, #1
   8358c:	464e      	mov	r6, r9
   8358e:	e768      	b.n	83462 <_vfiprintf_r+0x7de>
   83590:	2a00      	cmp	r2, #0
   83592:	f040 80f7 	bne.w	83784 <_vfiprintf_r+0xb00>
   83596:	9c05      	ldr	r4, [sp, #20]
   83598:	2301      	movs	r3, #1
   8359a:	9720      	str	r7, [sp, #128]	; 0x80
   8359c:	9421      	str	r4, [sp, #132]	; 0x84
   8359e:	9415      	str	r4, [sp, #84]	; 0x54
   835a0:	4622      	mov	r2, r4
   835a2:	9314      	str	r3, [sp, #80]	; 0x50
   835a4:	464e      	mov	r6, r9
   835a6:	3608      	adds	r6, #8
   835a8:	e741      	b.n	8342e <_vfiprintf_r+0x7aa>
   835aa:	9d04      	ldr	r5, [sp, #16]
   835ac:	f8dd b00c 	ldr.w	fp, [sp, #12]
   835b0:	ebcb 0405 	rsb	r4, fp, r5
   835b4:	2c00      	cmp	r4, #0
   835b6:	f77f aef7 	ble.w	833a8 <_vfiprintf_r+0x724>
   835ba:	2c10      	cmp	r4, #16
   835bc:	4da6      	ldr	r5, [pc, #664]	; (83858 <_vfiprintf_r+0xbd4>)
   835be:	f340 8170 	ble.w	838a2 <_vfiprintf_r+0xc1e>
   835c2:	4629      	mov	r1, r5
   835c4:	f04f 0b10 	mov.w	fp, #16
   835c8:	4625      	mov	r5, r4
   835ca:	4664      	mov	r4, ip
   835cc:	46b4      	mov	ip, r6
   835ce:	460e      	mov	r6, r1
   835d0:	e006      	b.n	835e0 <_vfiprintf_r+0x95c>
   835d2:	1c98      	adds	r0, r3, #2
   835d4:	f10c 0c08 	add.w	ip, ip, #8
   835d8:	460b      	mov	r3, r1
   835da:	3d10      	subs	r5, #16
   835dc:	2d10      	cmp	r5, #16
   835de:	dd0f      	ble.n	83600 <_vfiprintf_r+0x97c>
   835e0:	1c59      	adds	r1, r3, #1
   835e2:	3210      	adds	r2, #16
   835e4:	2907      	cmp	r1, #7
   835e6:	9215      	str	r2, [sp, #84]	; 0x54
   835e8:	e88c 0840 	stmia.w	ip, {r6, fp}
   835ec:	9114      	str	r1, [sp, #80]	; 0x50
   835ee:	ddf0      	ble.n	835d2 <_vfiprintf_r+0x94e>
   835f0:	b9ba      	cbnz	r2, 83622 <_vfiprintf_r+0x99e>
   835f2:	3d10      	subs	r5, #16
   835f4:	2d10      	cmp	r5, #16
   835f6:	f04f 0001 	mov.w	r0, #1
   835fa:	4613      	mov	r3, r2
   835fc:	46cc      	mov	ip, r9
   835fe:	dcef      	bgt.n	835e0 <_vfiprintf_r+0x95c>
   83600:	4633      	mov	r3, r6
   83602:	4666      	mov	r6, ip
   83604:	46a4      	mov	ip, r4
   83606:	462c      	mov	r4, r5
   83608:	461d      	mov	r5, r3
   8360a:	4422      	add	r2, r4
   8360c:	2807      	cmp	r0, #7
   8360e:	9215      	str	r2, [sp, #84]	; 0x54
   83610:	6035      	str	r5, [r6, #0]
   83612:	6074      	str	r4, [r6, #4]
   83614:	9014      	str	r0, [sp, #80]	; 0x50
   83616:	f300 80af 	bgt.w	83778 <_vfiprintf_r+0xaf4>
   8361a:	3608      	adds	r6, #8
   8361c:	1c41      	adds	r1, r0, #1
   8361e:	4603      	mov	r3, r0
   83620:	e6c2      	b.n	833a8 <_vfiprintf_r+0x724>
   83622:	9806      	ldr	r0, [sp, #24]
   83624:	9902      	ldr	r1, [sp, #8]
   83626:	aa13      	add	r2, sp, #76	; 0x4c
   83628:	f7ff faf0 	bl	82c0c <__sprint_r.part.0>
   8362c:	2800      	cmp	r0, #0
   8362e:	f47f af7c 	bne.w	8352a <_vfiprintf_r+0x8a6>
   83632:	9b14      	ldr	r3, [sp, #80]	; 0x50
   83634:	9a15      	ldr	r2, [sp, #84]	; 0x54
   83636:	1c58      	adds	r0, r3, #1
   83638:	46cc      	mov	ip, r9
   8363a:	e7ce      	b.n	835da <_vfiprintf_r+0x956>
   8363c:	2a00      	cmp	r2, #0
   8363e:	d179      	bne.n	83734 <_vfiprintf_r+0xab0>
   83640:	4619      	mov	r1, r3
   83642:	464e      	mov	r6, r9
   83644:	4613      	mov	r3, r2
   83646:	e69c      	b.n	83382 <_vfiprintf_r+0x6fe>
   83648:	2a00      	cmp	r2, #0
   8364a:	f040 8084 	bne.w	83756 <_vfiprintf_r+0xad2>
   8364e:	2101      	movs	r1, #1
   83650:	4613      	mov	r3, r2
   83652:	464e      	mov	r6, r9
   83654:	e6a4      	b.n	833a0 <_vfiprintf_r+0x71c>
   83656:	464f      	mov	r7, r9
   83658:	e448      	b.n	82eec <_vfiprintf_r+0x268>
   8365a:	2d00      	cmp	r5, #0
   8365c:	bf08      	it	eq
   8365e:	2c0a      	cmpeq	r4, #10
   83660:	d246      	bcs.n	836f0 <_vfiprintf_r+0xa6c>
   83662:	3430      	adds	r4, #48	; 0x30
   83664:	af30      	add	r7, sp, #192	; 0xc0
   83666:	f807 4d41 	strb.w	r4, [r7, #-65]!
   8366a:	ebc7 0309 	rsb	r3, r7, r9
   8366e:	9305      	str	r3, [sp, #20]
   83670:	e43c      	b.n	82eec <_vfiprintf_r+0x268>
   83672:	2302      	movs	r3, #2
   83674:	e417      	b.n	82ea6 <_vfiprintf_r+0x222>
   83676:	2a00      	cmp	r2, #0
   83678:	f040 80af 	bne.w	837da <_vfiprintf_r+0xb56>
   8367c:	4613      	mov	r3, r2
   8367e:	2101      	movs	r1, #1
   83680:	464e      	mov	r6, r9
   83682:	e66d      	b.n	83360 <_vfiprintf_r+0x6dc>
   83684:	4644      	mov	r4, r8
   83686:	f7ff bb58 	b.w	82d3a <_vfiprintf_r+0xb6>
   8368a:	9806      	ldr	r0, [sp, #24]
   8368c:	9902      	ldr	r1, [sp, #8]
   8368e:	aa13      	add	r2, sp, #76	; 0x4c
   83690:	f7ff fabc 	bl	82c0c <__sprint_r.part.0>
   83694:	2800      	cmp	r0, #0
   83696:	f47f af48 	bne.w	8352a <_vfiprintf_r+0x8a6>
   8369a:	9a15      	ldr	r2, [sp, #84]	; 0x54
   8369c:	464e      	mov	r6, r9
   8369e:	e6c6      	b.n	8342e <_vfiprintf_r+0x7aa>
   836a0:	9d08      	ldr	r5, [sp, #32]
   836a2:	682c      	ldr	r4, [r5, #0]
   836a4:	3504      	adds	r5, #4
   836a6:	9508      	str	r5, [sp, #32]
   836a8:	2500      	movs	r5, #0
   836aa:	f7ff bbfc 	b.w	82ea6 <_vfiprintf_r+0x222>
   836ae:	9d08      	ldr	r5, [sp, #32]
   836b0:	2301      	movs	r3, #1
   836b2:	682c      	ldr	r4, [r5, #0]
   836b4:	3504      	adds	r5, #4
   836b6:	9508      	str	r5, [sp, #32]
   836b8:	2500      	movs	r5, #0
   836ba:	f7ff bbf4 	b.w	82ea6 <_vfiprintf_r+0x222>
   836be:	9d08      	ldr	r5, [sp, #32]
   836c0:	682c      	ldr	r4, [r5, #0]
   836c2:	3504      	adds	r5, #4
   836c4:	9508      	str	r5, [sp, #32]
   836c6:	2500      	movs	r5, #0
   836c8:	e525      	b.n	83116 <_vfiprintf_r+0x492>
   836ca:	9d08      	ldr	r5, [sp, #32]
   836cc:	682c      	ldr	r4, [r5, #0]
   836ce:	3504      	adds	r5, #4
   836d0:	9508      	str	r5, [sp, #32]
   836d2:	17e5      	asrs	r5, r4, #31
   836d4:	4622      	mov	r2, r4
   836d6:	462b      	mov	r3, r5
   836d8:	e48e      	b.n	82ff8 <_vfiprintf_r+0x374>
   836da:	9806      	ldr	r0, [sp, #24]
   836dc:	9902      	ldr	r1, [sp, #8]
   836de:	aa13      	add	r2, sp, #76	; 0x4c
   836e0:	f7ff fa94 	bl	82c0c <__sprint_r.part.0>
   836e4:	2800      	cmp	r0, #0
   836e6:	f47f af20 	bne.w	8352a <_vfiprintf_r+0x8a6>
   836ea:	464e      	mov	r6, r9
   836ec:	f7ff bb9a 	b.w	82e24 <_vfiprintf_r+0x1a0>
   836f0:	f10d 0b7f 	add.w	fp, sp, #127	; 0x7f
   836f4:	9603      	str	r6, [sp, #12]
   836f6:	465e      	mov	r6, fp
   836f8:	46e3      	mov	fp, ip
   836fa:	4620      	mov	r0, r4
   836fc:	4629      	mov	r1, r5
   836fe:	220a      	movs	r2, #10
   83700:	2300      	movs	r3, #0
   83702:	f001 fdb9 	bl	85278 <__aeabi_uldivmod>
   83706:	3230      	adds	r2, #48	; 0x30
   83708:	7032      	strb	r2, [r6, #0]
   8370a:	4620      	mov	r0, r4
   8370c:	4629      	mov	r1, r5
   8370e:	220a      	movs	r2, #10
   83710:	2300      	movs	r3, #0
   83712:	f001 fdb1 	bl	85278 <__aeabi_uldivmod>
   83716:	4604      	mov	r4, r0
   83718:	460d      	mov	r5, r1
   8371a:	ea54 0005 	orrs.w	r0, r4, r5
   8371e:	4637      	mov	r7, r6
   83720:	f106 36ff 	add.w	r6, r6, #4294967295
   83724:	d1e9      	bne.n	836fa <_vfiprintf_r+0xa76>
   83726:	ebc7 0309 	rsb	r3, r7, r9
   8372a:	46dc      	mov	ip, fp
   8372c:	9e03      	ldr	r6, [sp, #12]
   8372e:	9305      	str	r3, [sp, #20]
   83730:	f7ff bbdc 	b.w	82eec <_vfiprintf_r+0x268>
   83734:	9806      	ldr	r0, [sp, #24]
   83736:	9902      	ldr	r1, [sp, #8]
   83738:	aa13      	add	r2, sp, #76	; 0x4c
   8373a:	f8cd c004 	str.w	ip, [sp, #4]
   8373e:	f7ff fa65 	bl	82c0c <__sprint_r.part.0>
   83742:	f8dd c004 	ldr.w	ip, [sp, #4]
   83746:	2800      	cmp	r0, #0
   83748:	f47f aeef 	bne.w	8352a <_vfiprintf_r+0x8a6>
   8374c:	9b14      	ldr	r3, [sp, #80]	; 0x50
   8374e:	9a15      	ldr	r2, [sp, #84]	; 0x54
   83750:	1c59      	adds	r1, r3, #1
   83752:	464e      	mov	r6, r9
   83754:	e615      	b.n	83382 <_vfiprintf_r+0x6fe>
   83756:	9806      	ldr	r0, [sp, #24]
   83758:	9902      	ldr	r1, [sp, #8]
   8375a:	aa13      	add	r2, sp, #76	; 0x4c
   8375c:	f8cd c004 	str.w	ip, [sp, #4]
   83760:	f7ff fa54 	bl	82c0c <__sprint_r.part.0>
   83764:	f8dd c004 	ldr.w	ip, [sp, #4]
   83768:	2800      	cmp	r0, #0
   8376a:	f47f aede 	bne.w	8352a <_vfiprintf_r+0x8a6>
   8376e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   83770:	9a15      	ldr	r2, [sp, #84]	; 0x54
   83772:	1c59      	adds	r1, r3, #1
   83774:	464e      	mov	r6, r9
   83776:	e613      	b.n	833a0 <_vfiprintf_r+0x71c>
   83778:	2a00      	cmp	r2, #0
   8377a:	d156      	bne.n	8382a <_vfiprintf_r+0xba6>
   8377c:	2101      	movs	r1, #1
   8377e:	4613      	mov	r3, r2
   83780:	464e      	mov	r6, r9
   83782:	e611      	b.n	833a8 <_vfiprintf_r+0x724>
   83784:	9806      	ldr	r0, [sp, #24]
   83786:	9902      	ldr	r1, [sp, #8]
   83788:	aa13      	add	r2, sp, #76	; 0x4c
   8378a:	f7ff fa3f 	bl	82c0c <__sprint_r.part.0>
   8378e:	2800      	cmp	r0, #0
   83790:	f47f aecb 	bne.w	8352a <_vfiprintf_r+0x8a6>
   83794:	9914      	ldr	r1, [sp, #80]	; 0x50
   83796:	9a15      	ldr	r2, [sp, #84]	; 0x54
   83798:	3101      	adds	r1, #1
   8379a:	464e      	mov	r6, r9
   8379c:	e639      	b.n	83412 <_vfiprintf_r+0x78e>
   8379e:	f04f 0b2d 	mov.w	fp, #45	; 0x2d
   837a2:	4264      	negs	r4, r4
   837a4:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   837a8:	f88d b047 	strb.w	fp, [sp, #71]	; 0x47
   837ac:	f8cd b01c 	str.w	fp, [sp, #28]
   837b0:	f8cd c014 	str.w	ip, [sp, #20]
   837b4:	2301      	movs	r3, #1
   837b6:	f7ff bb7e 	b.w	82eb6 <_vfiprintf_r+0x232>
   837ba:	f01a 0f10 	tst.w	sl, #16
   837be:	d11d      	bne.n	837fc <_vfiprintf_r+0xb78>
   837c0:	f01a 0f40 	tst.w	sl, #64	; 0x40
   837c4:	d058      	beq.n	83878 <_vfiprintf_r+0xbf4>
   837c6:	9d08      	ldr	r5, [sp, #32]
   837c8:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
   837cc:	682b      	ldr	r3, [r5, #0]
   837ce:	3504      	adds	r5, #4
   837d0:	9508      	str	r5, [sp, #32]
   837d2:	f8a3 b000 	strh.w	fp, [r3]
   837d6:	f7ff ba88 	b.w	82cea <_vfiprintf_r+0x66>
   837da:	9806      	ldr	r0, [sp, #24]
   837dc:	9902      	ldr	r1, [sp, #8]
   837de:	aa13      	add	r2, sp, #76	; 0x4c
   837e0:	f8cd c004 	str.w	ip, [sp, #4]
   837e4:	f7ff fa12 	bl	82c0c <__sprint_r.part.0>
   837e8:	f8dd c004 	ldr.w	ip, [sp, #4]
   837ec:	2800      	cmp	r0, #0
   837ee:	f47f ae9c 	bne.w	8352a <_vfiprintf_r+0x8a6>
   837f2:	9b14      	ldr	r3, [sp, #80]	; 0x50
   837f4:	9a15      	ldr	r2, [sp, #84]	; 0x54
   837f6:	1c59      	adds	r1, r3, #1
   837f8:	464e      	mov	r6, r9
   837fa:	e5b1      	b.n	83360 <_vfiprintf_r+0x6dc>
   837fc:	f8dd b020 	ldr.w	fp, [sp, #32]
   83800:	9c09      	ldr	r4, [sp, #36]	; 0x24
   83802:	f8db 3000 	ldr.w	r3, [fp]
   83806:	f10b 0b04 	add.w	fp, fp, #4
   8380a:	f8cd b020 	str.w	fp, [sp, #32]
   8380e:	601c      	str	r4, [r3, #0]
   83810:	f7ff ba6b 	b.w	82cea <_vfiprintf_r+0x66>
   83814:	9408      	str	r4, [sp, #32]
   83816:	f7ff f997 	bl	82b48 <strlen>
   8381a:	f89d 4047 	ldrb.w	r4, [sp, #71]	; 0x47
   8381e:	9005      	str	r0, [sp, #20]
   83820:	9407      	str	r4, [sp, #28]
   83822:	f04f 0c00 	mov.w	ip, #0
   83826:	f7ff bb61 	b.w	82eec <_vfiprintf_r+0x268>
   8382a:	9806      	ldr	r0, [sp, #24]
   8382c:	9902      	ldr	r1, [sp, #8]
   8382e:	aa13      	add	r2, sp, #76	; 0x4c
   83830:	f8cd c004 	str.w	ip, [sp, #4]
   83834:	f7ff f9ea 	bl	82c0c <__sprint_r.part.0>
   83838:	f8dd c004 	ldr.w	ip, [sp, #4]
   8383c:	2800      	cmp	r0, #0
   8383e:	f47f ae74 	bne.w	8352a <_vfiprintf_r+0x8a6>
   83842:	9b14      	ldr	r3, [sp, #80]	; 0x50
   83844:	9a15      	ldr	r2, [sp, #84]	; 0x54
   83846:	1c59      	adds	r1, r3, #1
   83848:	464e      	mov	r6, r9
   8384a:	e5ad      	b.n	833a8 <_vfiprintf_r+0x724>
   8384c:	9b14      	ldr	r3, [sp, #80]	; 0x50
   8384e:	9a15      	ldr	r2, [sp, #84]	; 0x54
   83850:	3301      	adds	r3, #1
   83852:	4d02      	ldr	r5, [pc, #8]	; (8385c <_vfiprintf_r+0xbd8>)
   83854:	f7ff bb9a 	b.w	82f8c <_vfiprintf_r+0x308>
   83858:	00085978 	.word	0x00085978
   8385c:	00085988 	.word	0x00085988
   83860:	f1bc 0f06 	cmp.w	ip, #6
   83864:	bf34      	ite	cc
   83866:	4663      	movcc	r3, ip
   83868:	2306      	movcs	r3, #6
   8386a:	9408      	str	r4, [sp, #32]
   8386c:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
   83870:	9305      	str	r3, [sp, #20]
   83872:	9403      	str	r4, [sp, #12]
   83874:	4f16      	ldr	r7, [pc, #88]	; (838d0 <_vfiprintf_r+0xc4c>)
   83876:	e472      	b.n	8315e <_vfiprintf_r+0x4da>
   83878:	9c08      	ldr	r4, [sp, #32]
   8387a:	9d09      	ldr	r5, [sp, #36]	; 0x24
   8387c:	6823      	ldr	r3, [r4, #0]
   8387e:	3404      	adds	r4, #4
   83880:	9408      	str	r4, [sp, #32]
   83882:	601d      	str	r5, [r3, #0]
   83884:	f7ff ba31 	b.w	82cea <_vfiprintf_r+0x66>
   83888:	9814      	ldr	r0, [sp, #80]	; 0x50
   8388a:	4d12      	ldr	r5, [pc, #72]	; (838d4 <_vfiprintf_r+0xc50>)
   8388c:	3001      	adds	r0, #1
   8388e:	e5fc      	b.n	8348a <_vfiprintf_r+0x806>
   83890:	f89d 5047 	ldrb.w	r5, [sp, #71]	; 0x47
   83894:	f8cd c014 	str.w	ip, [sp, #20]
   83898:	9507      	str	r5, [sp, #28]
   8389a:	9408      	str	r4, [sp, #32]
   8389c:	4684      	mov	ip, r0
   8389e:	f7ff bb25 	b.w	82eec <_vfiprintf_r+0x268>
   838a2:	4608      	mov	r0, r1
   838a4:	e6b1      	b.n	8360a <_vfiprintf_r+0x986>
   838a6:	46a0      	mov	r8, r4
   838a8:	2500      	movs	r5, #0
   838aa:	f7ff ba5a 	b.w	82d62 <_vfiprintf_r+0xde>
   838ae:	f8dd b020 	ldr.w	fp, [sp, #32]
   838b2:	f898 3001 	ldrb.w	r3, [r8, #1]
   838b6:	f8db 5000 	ldr.w	r5, [fp]
   838ba:	f10b 0204 	add.w	r2, fp, #4
   838be:	2d00      	cmp	r5, #0
   838c0:	9208      	str	r2, [sp, #32]
   838c2:	46a0      	mov	r8, r4
   838c4:	f6bf aa4b 	bge.w	82d5e <_vfiprintf_r+0xda>
   838c8:	f04f 35ff 	mov.w	r5, #4294967295
   838cc:	f7ff ba47 	b.w	82d5e <_vfiprintf_r+0xda>
   838d0:	00085970 	.word	0x00085970
   838d4:	00085988 	.word	0x00085988

000838d8 <__sbprintf>:
   838d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   838dc:	6e4f      	ldr	r7, [r1, #100]	; 0x64
   838de:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
   838e2:	4688      	mov	r8, r1
   838e4:	9719      	str	r7, [sp, #100]	; 0x64
   838e6:	f8d8 701c 	ldr.w	r7, [r8, #28]
   838ea:	f8b1 a00c 	ldrh.w	sl, [r1, #12]
   838ee:	f8b1 900e 	ldrh.w	r9, [r1, #14]
   838f2:	9707      	str	r7, [sp, #28]
   838f4:	f8d8 7024 	ldr.w	r7, [r8, #36]	; 0x24
   838f8:	ac1a      	add	r4, sp, #104	; 0x68
   838fa:	f44f 6580 	mov.w	r5, #1024	; 0x400
   838fe:	f02a 0a02 	bic.w	sl, sl, #2
   83902:	2600      	movs	r6, #0
   83904:	4669      	mov	r1, sp
   83906:	9400      	str	r4, [sp, #0]
   83908:	9404      	str	r4, [sp, #16]
   8390a:	9502      	str	r5, [sp, #8]
   8390c:	9505      	str	r5, [sp, #20]
   8390e:	f8ad a00c 	strh.w	sl, [sp, #12]
   83912:	f8ad 900e 	strh.w	r9, [sp, #14]
   83916:	9709      	str	r7, [sp, #36]	; 0x24
   83918:	9606      	str	r6, [sp, #24]
   8391a:	4605      	mov	r5, r0
   8391c:	f7ff f9b2 	bl	82c84 <_vfiprintf_r>
   83920:	1e04      	subs	r4, r0, #0
   83922:	db07      	blt.n	83934 <__sbprintf+0x5c>
   83924:	4628      	mov	r0, r5
   83926:	4669      	mov	r1, sp
   83928:	f000 f92a 	bl	83b80 <_fflush_r>
   8392c:	42b0      	cmp	r0, r6
   8392e:	bf18      	it	ne
   83930:	f04f 34ff 	movne.w	r4, #4294967295
   83934:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   83938:	065b      	lsls	r3, r3, #25
   8393a:	d505      	bpl.n	83948 <__sbprintf+0x70>
   8393c:	f8b8 300c 	ldrh.w	r3, [r8, #12]
   83940:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   83944:	f8a8 300c 	strh.w	r3, [r8, #12]
   83948:	4620      	mov	r0, r4
   8394a:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
   8394e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   83952:	bf00      	nop

00083954 <__swsetup_r>:
   83954:	4b2f      	ldr	r3, [pc, #188]	; (83a14 <__swsetup_r+0xc0>)
   83956:	b570      	push	{r4, r5, r6, lr}
   83958:	4606      	mov	r6, r0
   8395a:	6818      	ldr	r0, [r3, #0]
   8395c:	460c      	mov	r4, r1
   8395e:	b110      	cbz	r0, 83966 <__swsetup_r+0x12>
   83960:	6b82      	ldr	r2, [r0, #56]	; 0x38
   83962:	2a00      	cmp	r2, #0
   83964:	d036      	beq.n	839d4 <__swsetup_r+0x80>
   83966:	89a5      	ldrh	r5, [r4, #12]
   83968:	b2ab      	uxth	r3, r5
   8396a:	0719      	lsls	r1, r3, #28
   8396c:	d50c      	bpl.n	83988 <__swsetup_r+0x34>
   8396e:	6922      	ldr	r2, [r4, #16]
   83970:	b1aa      	cbz	r2, 8399e <__swsetup_r+0x4a>
   83972:	f013 0101 	ands.w	r1, r3, #1
   83976:	d01e      	beq.n	839b6 <__swsetup_r+0x62>
   83978:	6963      	ldr	r3, [r4, #20]
   8397a:	2100      	movs	r1, #0
   8397c:	425b      	negs	r3, r3
   8397e:	61a3      	str	r3, [r4, #24]
   83980:	60a1      	str	r1, [r4, #8]
   83982:	b1f2      	cbz	r2, 839c2 <__swsetup_r+0x6e>
   83984:	2000      	movs	r0, #0
   83986:	bd70      	pop	{r4, r5, r6, pc}
   83988:	06da      	lsls	r2, r3, #27
   8398a:	d53a      	bpl.n	83a02 <__swsetup_r+0xae>
   8398c:	075b      	lsls	r3, r3, #29
   8398e:	d424      	bmi.n	839da <__swsetup_r+0x86>
   83990:	6922      	ldr	r2, [r4, #16]
   83992:	f045 0308 	orr.w	r3, r5, #8
   83996:	81a3      	strh	r3, [r4, #12]
   83998:	b29b      	uxth	r3, r3
   8399a:	2a00      	cmp	r2, #0
   8399c:	d1e9      	bne.n	83972 <__swsetup_r+0x1e>
   8399e:	f403 7120 	and.w	r1, r3, #640	; 0x280
   839a2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   839a6:	d0e4      	beq.n	83972 <__swsetup_r+0x1e>
   839a8:	4630      	mov	r0, r6
   839aa:	4621      	mov	r1, r4
   839ac:	f000 fcce 	bl	8434c <__smakebuf_r>
   839b0:	89a3      	ldrh	r3, [r4, #12]
   839b2:	6922      	ldr	r2, [r4, #16]
   839b4:	e7dd      	b.n	83972 <__swsetup_r+0x1e>
   839b6:	0798      	lsls	r0, r3, #30
   839b8:	bf58      	it	pl
   839ba:	6961      	ldrpl	r1, [r4, #20]
   839bc:	60a1      	str	r1, [r4, #8]
   839be:	2a00      	cmp	r2, #0
   839c0:	d1e0      	bne.n	83984 <__swsetup_r+0x30>
   839c2:	89a3      	ldrh	r3, [r4, #12]
   839c4:	061a      	lsls	r2, r3, #24
   839c6:	d5dd      	bpl.n	83984 <__swsetup_r+0x30>
   839c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   839cc:	81a3      	strh	r3, [r4, #12]
   839ce:	f04f 30ff 	mov.w	r0, #4294967295
   839d2:	bd70      	pop	{r4, r5, r6, pc}
   839d4:	f000 f8f0 	bl	83bb8 <__sinit>
   839d8:	e7c5      	b.n	83966 <__swsetup_r+0x12>
   839da:	6b21      	ldr	r1, [r4, #48]	; 0x30
   839dc:	b149      	cbz	r1, 839f2 <__swsetup_r+0x9e>
   839de:	f104 0340 	add.w	r3, r4, #64	; 0x40
   839e2:	4299      	cmp	r1, r3
   839e4:	d003      	beq.n	839ee <__swsetup_r+0x9a>
   839e6:	4630      	mov	r0, r6
   839e8:	f000 fa2a 	bl	83e40 <_free_r>
   839ec:	89a5      	ldrh	r5, [r4, #12]
   839ee:	2300      	movs	r3, #0
   839f0:	6323      	str	r3, [r4, #48]	; 0x30
   839f2:	6922      	ldr	r2, [r4, #16]
   839f4:	f025 0524 	bic.w	r5, r5, #36	; 0x24
   839f8:	2100      	movs	r1, #0
   839fa:	b2ad      	uxth	r5, r5
   839fc:	6022      	str	r2, [r4, #0]
   839fe:	6061      	str	r1, [r4, #4]
   83a00:	e7c7      	b.n	83992 <__swsetup_r+0x3e>
   83a02:	f045 0540 	orr.w	r5, r5, #64	; 0x40
   83a06:	2309      	movs	r3, #9
   83a08:	6033      	str	r3, [r6, #0]
   83a0a:	f04f 30ff 	mov.w	r0, #4294967295
   83a0e:	81a5      	strh	r5, [r4, #12]
   83a10:	bd70      	pop	{r4, r5, r6, pc}
   83a12:	bf00      	nop
   83a14:	20070568 	.word	0x20070568

00083a18 <register_fini>:
   83a18:	4b02      	ldr	r3, [pc, #8]	; (83a24 <register_fini+0xc>)
   83a1a:	b113      	cbz	r3, 83a22 <register_fini+0xa>
   83a1c:	4802      	ldr	r0, [pc, #8]	; (83a28 <register_fini+0x10>)
   83a1e:	f000 b805 	b.w	83a2c <atexit>
   83a22:	4770      	bx	lr
   83a24:	00000000 	.word	0x00000000
   83a28:	00083cb5 	.word	0x00083cb5

00083a2c <atexit>:
   83a2c:	4601      	mov	r1, r0
   83a2e:	2000      	movs	r0, #0
   83a30:	4602      	mov	r2, r0
   83a32:	4603      	mov	r3, r0
   83a34:	f001 bb24 	b.w	85080 <__register_exitproc>

00083a38 <__sflush_r>:
   83a38:	898b      	ldrh	r3, [r1, #12]
   83a3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83a3e:	b29a      	uxth	r2, r3
   83a40:	460d      	mov	r5, r1
   83a42:	0711      	lsls	r1, r2, #28
   83a44:	4680      	mov	r8, r0
   83a46:	d43c      	bmi.n	83ac2 <__sflush_r+0x8a>
   83a48:	686a      	ldr	r2, [r5, #4]
   83a4a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   83a4e:	2a00      	cmp	r2, #0
   83a50:	81ab      	strh	r3, [r5, #12]
   83a52:	dd59      	ble.n	83b08 <__sflush_r+0xd0>
   83a54:	6aac      	ldr	r4, [r5, #40]	; 0x28
   83a56:	2c00      	cmp	r4, #0
   83a58:	d04b      	beq.n	83af2 <__sflush_r+0xba>
   83a5a:	b29b      	uxth	r3, r3
   83a5c:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
   83a60:	2100      	movs	r1, #0
   83a62:	b292      	uxth	r2, r2
   83a64:	f8d8 6000 	ldr.w	r6, [r8]
   83a68:	f8c8 1000 	str.w	r1, [r8]
   83a6c:	2a00      	cmp	r2, #0
   83a6e:	d04f      	beq.n	83b10 <__sflush_r+0xd8>
   83a70:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   83a72:	075f      	lsls	r7, r3, #29
   83a74:	d505      	bpl.n	83a82 <__sflush_r+0x4a>
   83a76:	6869      	ldr	r1, [r5, #4]
   83a78:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   83a7a:	1a52      	subs	r2, r2, r1
   83a7c:	b10b      	cbz	r3, 83a82 <__sflush_r+0x4a>
   83a7e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   83a80:	1ad2      	subs	r2, r2, r3
   83a82:	4640      	mov	r0, r8
   83a84:	69e9      	ldr	r1, [r5, #28]
   83a86:	2300      	movs	r3, #0
   83a88:	47a0      	blx	r4
   83a8a:	1c44      	adds	r4, r0, #1
   83a8c:	d04a      	beq.n	83b24 <__sflush_r+0xec>
   83a8e:	89ab      	ldrh	r3, [r5, #12]
   83a90:	692a      	ldr	r2, [r5, #16]
   83a92:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   83a96:	b29b      	uxth	r3, r3
   83a98:	2100      	movs	r1, #0
   83a9a:	602a      	str	r2, [r5, #0]
   83a9c:	04da      	lsls	r2, r3, #19
   83a9e:	81ab      	strh	r3, [r5, #12]
   83aa0:	6069      	str	r1, [r5, #4]
   83aa2:	d44c      	bmi.n	83b3e <__sflush_r+0x106>
   83aa4:	6b29      	ldr	r1, [r5, #48]	; 0x30
   83aa6:	f8c8 6000 	str.w	r6, [r8]
   83aaa:	b311      	cbz	r1, 83af2 <__sflush_r+0xba>
   83aac:	f105 0340 	add.w	r3, r5, #64	; 0x40
   83ab0:	4299      	cmp	r1, r3
   83ab2:	d002      	beq.n	83aba <__sflush_r+0x82>
   83ab4:	4640      	mov	r0, r8
   83ab6:	f000 f9c3 	bl	83e40 <_free_r>
   83aba:	2000      	movs	r0, #0
   83abc:	6328      	str	r0, [r5, #48]	; 0x30
   83abe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83ac2:	692e      	ldr	r6, [r5, #16]
   83ac4:	b1ae      	cbz	r6, 83af2 <__sflush_r+0xba>
   83ac6:	0791      	lsls	r1, r2, #30
   83ac8:	682c      	ldr	r4, [r5, #0]
   83aca:	bf0c      	ite	eq
   83acc:	696b      	ldreq	r3, [r5, #20]
   83ace:	2300      	movne	r3, #0
   83ad0:	602e      	str	r6, [r5, #0]
   83ad2:	1ba4      	subs	r4, r4, r6
   83ad4:	60ab      	str	r3, [r5, #8]
   83ad6:	e00a      	b.n	83aee <__sflush_r+0xb6>
   83ad8:	4632      	mov	r2, r6
   83ada:	4623      	mov	r3, r4
   83adc:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   83ade:	4640      	mov	r0, r8
   83ae0:	69e9      	ldr	r1, [r5, #28]
   83ae2:	47b8      	blx	r7
   83ae4:	2800      	cmp	r0, #0
   83ae6:	ebc0 0404 	rsb	r4, r0, r4
   83aea:	4406      	add	r6, r0
   83aec:	dd04      	ble.n	83af8 <__sflush_r+0xc0>
   83aee:	2c00      	cmp	r4, #0
   83af0:	dcf2      	bgt.n	83ad8 <__sflush_r+0xa0>
   83af2:	2000      	movs	r0, #0
   83af4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83af8:	89ab      	ldrh	r3, [r5, #12]
   83afa:	f04f 30ff 	mov.w	r0, #4294967295
   83afe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   83b02:	81ab      	strh	r3, [r5, #12]
   83b04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83b08:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   83b0a:	2a00      	cmp	r2, #0
   83b0c:	dca2      	bgt.n	83a54 <__sflush_r+0x1c>
   83b0e:	e7f0      	b.n	83af2 <__sflush_r+0xba>
   83b10:	2301      	movs	r3, #1
   83b12:	4640      	mov	r0, r8
   83b14:	69e9      	ldr	r1, [r5, #28]
   83b16:	47a0      	blx	r4
   83b18:	1c43      	adds	r3, r0, #1
   83b1a:	4602      	mov	r2, r0
   83b1c:	d01e      	beq.n	83b5c <__sflush_r+0x124>
   83b1e:	89ab      	ldrh	r3, [r5, #12]
   83b20:	6aac      	ldr	r4, [r5, #40]	; 0x28
   83b22:	e7a6      	b.n	83a72 <__sflush_r+0x3a>
   83b24:	f8d8 3000 	ldr.w	r3, [r8]
   83b28:	b95b      	cbnz	r3, 83b42 <__sflush_r+0x10a>
   83b2a:	89aa      	ldrh	r2, [r5, #12]
   83b2c:	6929      	ldr	r1, [r5, #16]
   83b2e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   83b32:	b292      	uxth	r2, r2
   83b34:	606b      	str	r3, [r5, #4]
   83b36:	04d3      	lsls	r3, r2, #19
   83b38:	81aa      	strh	r2, [r5, #12]
   83b3a:	6029      	str	r1, [r5, #0]
   83b3c:	d5b2      	bpl.n	83aa4 <__sflush_r+0x6c>
   83b3e:	6528      	str	r0, [r5, #80]	; 0x50
   83b40:	e7b0      	b.n	83aa4 <__sflush_r+0x6c>
   83b42:	2b1d      	cmp	r3, #29
   83b44:	d001      	beq.n	83b4a <__sflush_r+0x112>
   83b46:	2b16      	cmp	r3, #22
   83b48:	d113      	bne.n	83b72 <__sflush_r+0x13a>
   83b4a:	89a9      	ldrh	r1, [r5, #12]
   83b4c:	692b      	ldr	r3, [r5, #16]
   83b4e:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
   83b52:	2200      	movs	r2, #0
   83b54:	81a9      	strh	r1, [r5, #12]
   83b56:	602b      	str	r3, [r5, #0]
   83b58:	606a      	str	r2, [r5, #4]
   83b5a:	e7a3      	b.n	83aa4 <__sflush_r+0x6c>
   83b5c:	f8d8 3000 	ldr.w	r3, [r8]
   83b60:	2b00      	cmp	r3, #0
   83b62:	d0dc      	beq.n	83b1e <__sflush_r+0xe6>
   83b64:	2b1d      	cmp	r3, #29
   83b66:	d001      	beq.n	83b6c <__sflush_r+0x134>
   83b68:	2b16      	cmp	r3, #22
   83b6a:	d1c5      	bne.n	83af8 <__sflush_r+0xc0>
   83b6c:	f8c8 6000 	str.w	r6, [r8]
   83b70:	e7bf      	b.n	83af2 <__sflush_r+0xba>
   83b72:	89ab      	ldrh	r3, [r5, #12]
   83b74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   83b78:	81ab      	strh	r3, [r5, #12]
   83b7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83b7e:	bf00      	nop

00083b80 <_fflush_r>:
   83b80:	b510      	push	{r4, lr}
   83b82:	4604      	mov	r4, r0
   83b84:	b082      	sub	sp, #8
   83b86:	b108      	cbz	r0, 83b8c <_fflush_r+0xc>
   83b88:	6b83      	ldr	r3, [r0, #56]	; 0x38
   83b8a:	b153      	cbz	r3, 83ba2 <_fflush_r+0x22>
   83b8c:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
   83b90:	b908      	cbnz	r0, 83b96 <_fflush_r+0x16>
   83b92:	b002      	add	sp, #8
   83b94:	bd10      	pop	{r4, pc}
   83b96:	4620      	mov	r0, r4
   83b98:	b002      	add	sp, #8
   83b9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   83b9e:	f7ff bf4b 	b.w	83a38 <__sflush_r>
   83ba2:	9101      	str	r1, [sp, #4]
   83ba4:	f000 f808 	bl	83bb8 <__sinit>
   83ba8:	9901      	ldr	r1, [sp, #4]
   83baa:	e7ef      	b.n	83b8c <_fflush_r+0xc>

00083bac <_cleanup_r>:
   83bac:	4901      	ldr	r1, [pc, #4]	; (83bb4 <_cleanup_r+0x8>)
   83bae:	f000 bb9f 	b.w	842f0 <_fwalk>
   83bb2:	bf00      	nop
   83bb4:	000851cd 	.word	0x000851cd

00083bb8 <__sinit>:
   83bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   83bbc:	6b84      	ldr	r4, [r0, #56]	; 0x38
   83bbe:	b083      	sub	sp, #12
   83bc0:	4607      	mov	r7, r0
   83bc2:	2c00      	cmp	r4, #0
   83bc4:	d165      	bne.n	83c92 <__sinit+0xda>
   83bc6:	687d      	ldr	r5, [r7, #4]
   83bc8:	4833      	ldr	r0, [pc, #204]	; (83c98 <__sinit+0xe0>)
   83bca:	2304      	movs	r3, #4
   83bcc:	2103      	movs	r1, #3
   83bce:	f507 723b 	add.w	r2, r7, #748	; 0x2ec
   83bd2:	63f8      	str	r0, [r7, #60]	; 0x3c
   83bd4:	f8c7 12e4 	str.w	r1, [r7, #740]	; 0x2e4
   83bd8:	f8c7 22e8 	str.w	r2, [r7, #744]	; 0x2e8
   83bdc:	f8c7 42e0 	str.w	r4, [r7, #736]	; 0x2e0
   83be0:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   83be4:	81ab      	strh	r3, [r5, #12]
   83be6:	602c      	str	r4, [r5, #0]
   83be8:	606c      	str	r4, [r5, #4]
   83bea:	60ac      	str	r4, [r5, #8]
   83bec:	666c      	str	r4, [r5, #100]	; 0x64
   83bee:	81ec      	strh	r4, [r5, #14]
   83bf0:	612c      	str	r4, [r5, #16]
   83bf2:	616c      	str	r4, [r5, #20]
   83bf4:	61ac      	str	r4, [r5, #24]
   83bf6:	4621      	mov	r1, r4
   83bf8:	2208      	movs	r2, #8
   83bfa:	f7fe fed3 	bl	829a4 <memset>
   83bfe:	f8df b09c 	ldr.w	fp, [pc, #156]	; 83c9c <__sinit+0xe4>
   83c02:	68be      	ldr	r6, [r7, #8]
   83c04:	f8df a098 	ldr.w	sl, [pc, #152]	; 83ca0 <__sinit+0xe8>
   83c08:	f8df 9098 	ldr.w	r9, [pc, #152]	; 83ca4 <__sinit+0xec>
   83c0c:	f8df 8098 	ldr.w	r8, [pc, #152]	; 83ca8 <__sinit+0xf0>
   83c10:	2301      	movs	r3, #1
   83c12:	2209      	movs	r2, #9
   83c14:	61ed      	str	r5, [r5, #28]
   83c16:	f8c5 b020 	str.w	fp, [r5, #32]
   83c1a:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   83c1e:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   83c22:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   83c26:	4621      	mov	r1, r4
   83c28:	81f3      	strh	r3, [r6, #14]
   83c2a:	81b2      	strh	r2, [r6, #12]
   83c2c:	6034      	str	r4, [r6, #0]
   83c2e:	6074      	str	r4, [r6, #4]
   83c30:	60b4      	str	r4, [r6, #8]
   83c32:	6674      	str	r4, [r6, #100]	; 0x64
   83c34:	6134      	str	r4, [r6, #16]
   83c36:	6174      	str	r4, [r6, #20]
   83c38:	61b4      	str	r4, [r6, #24]
   83c3a:	2208      	movs	r2, #8
   83c3c:	f106 005c 	add.w	r0, r6, #92	; 0x5c
   83c40:	9301      	str	r3, [sp, #4]
   83c42:	f7fe feaf 	bl	829a4 <memset>
   83c46:	68fd      	ldr	r5, [r7, #12]
   83c48:	2012      	movs	r0, #18
   83c4a:	2202      	movs	r2, #2
   83c4c:	61f6      	str	r6, [r6, #28]
   83c4e:	f8c6 b020 	str.w	fp, [r6, #32]
   83c52:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
   83c56:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
   83c5a:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
   83c5e:	4621      	mov	r1, r4
   83c60:	81a8      	strh	r0, [r5, #12]
   83c62:	81ea      	strh	r2, [r5, #14]
   83c64:	602c      	str	r4, [r5, #0]
   83c66:	606c      	str	r4, [r5, #4]
   83c68:	60ac      	str	r4, [r5, #8]
   83c6a:	666c      	str	r4, [r5, #100]	; 0x64
   83c6c:	612c      	str	r4, [r5, #16]
   83c6e:	616c      	str	r4, [r5, #20]
   83c70:	61ac      	str	r4, [r5, #24]
   83c72:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   83c76:	2208      	movs	r2, #8
   83c78:	f7fe fe94 	bl	829a4 <memset>
   83c7c:	9b01      	ldr	r3, [sp, #4]
   83c7e:	61ed      	str	r5, [r5, #28]
   83c80:	f8c5 b020 	str.w	fp, [r5, #32]
   83c84:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   83c88:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   83c8c:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   83c90:	63bb      	str	r3, [r7, #56]	; 0x38
   83c92:	b003      	add	sp, #12
   83c94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83c98:	00083bad 	.word	0x00083bad
   83c9c:	00084ec1 	.word	0x00084ec1
   83ca0:	00084ee5 	.word	0x00084ee5
   83ca4:	00084f1d 	.word	0x00084f1d
   83ca8:	00084f3d 	.word	0x00084f3d

00083cac <__sfp_lock_acquire>:
   83cac:	4770      	bx	lr
   83cae:	bf00      	nop

00083cb0 <__sfp_lock_release>:
   83cb0:	4770      	bx	lr
   83cb2:	bf00      	nop

00083cb4 <__libc_fini_array>:
   83cb4:	b538      	push	{r3, r4, r5, lr}
   83cb6:	4d09      	ldr	r5, [pc, #36]	; (83cdc <__libc_fini_array+0x28>)
   83cb8:	4c09      	ldr	r4, [pc, #36]	; (83ce0 <__libc_fini_array+0x2c>)
   83cba:	1b64      	subs	r4, r4, r5
   83cbc:	10a4      	asrs	r4, r4, #2
   83cbe:	bf18      	it	ne
   83cc0:	eb05 0584 	addne.w	r5, r5, r4, lsl #2
   83cc4:	d005      	beq.n	83cd2 <__libc_fini_array+0x1e>
   83cc6:	3c01      	subs	r4, #1
   83cc8:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   83ccc:	4798      	blx	r3
   83cce:	2c00      	cmp	r4, #0
   83cd0:	d1f9      	bne.n	83cc6 <__libc_fini_array+0x12>
   83cd2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   83cd6:	f001 be69 	b.w	859ac <_fini>
   83cda:	bf00      	nop
   83cdc:	000859b8 	.word	0x000859b8
   83ce0:	000859bc 	.word	0x000859bc

00083ce4 <_fputwc_r>:
   83ce4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83ce8:	8993      	ldrh	r3, [r2, #12]
   83cea:	460f      	mov	r7, r1
   83cec:	0499      	lsls	r1, r3, #18
   83cee:	b082      	sub	sp, #8
   83cf0:	4614      	mov	r4, r2
   83cf2:	4680      	mov	r8, r0
   83cf4:	d406      	bmi.n	83d04 <_fputwc_r+0x20>
   83cf6:	6e52      	ldr	r2, [r2, #100]	; 0x64
   83cf8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   83cfc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   83d00:	81a3      	strh	r3, [r4, #12]
   83d02:	6662      	str	r2, [r4, #100]	; 0x64
   83d04:	f000 fb1c 	bl	84340 <__locale_mb_cur_max>
   83d08:	2801      	cmp	r0, #1
   83d0a:	d03e      	beq.n	83d8a <_fputwc_r+0xa6>
   83d0c:	463a      	mov	r2, r7
   83d0e:	4640      	mov	r0, r8
   83d10:	a901      	add	r1, sp, #4
   83d12:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   83d16:	f001 f969 	bl	84fec <_wcrtomb_r>
   83d1a:	1c42      	adds	r2, r0, #1
   83d1c:	4606      	mov	r6, r0
   83d1e:	d02d      	beq.n	83d7c <_fputwc_r+0x98>
   83d20:	2800      	cmp	r0, #0
   83d22:	d03a      	beq.n	83d9a <_fputwc_r+0xb6>
   83d24:	f89d 1004 	ldrb.w	r1, [sp, #4]
   83d28:	2500      	movs	r5, #0
   83d2a:	e009      	b.n	83d40 <_fputwc_r+0x5c>
   83d2c:	6823      	ldr	r3, [r4, #0]
   83d2e:	7019      	strb	r1, [r3, #0]
   83d30:	6823      	ldr	r3, [r4, #0]
   83d32:	3301      	adds	r3, #1
   83d34:	6023      	str	r3, [r4, #0]
   83d36:	3501      	adds	r5, #1
   83d38:	42b5      	cmp	r5, r6
   83d3a:	d22e      	bcs.n	83d9a <_fputwc_r+0xb6>
   83d3c:	ab01      	add	r3, sp, #4
   83d3e:	5ce9      	ldrb	r1, [r5, r3]
   83d40:	68a3      	ldr	r3, [r4, #8]
   83d42:	3b01      	subs	r3, #1
   83d44:	2b00      	cmp	r3, #0
   83d46:	60a3      	str	r3, [r4, #8]
   83d48:	daf0      	bge.n	83d2c <_fputwc_r+0x48>
   83d4a:	69a2      	ldr	r2, [r4, #24]
   83d4c:	4293      	cmp	r3, r2
   83d4e:	db06      	blt.n	83d5e <_fputwc_r+0x7a>
   83d50:	6823      	ldr	r3, [r4, #0]
   83d52:	7019      	strb	r1, [r3, #0]
   83d54:	6823      	ldr	r3, [r4, #0]
   83d56:	7819      	ldrb	r1, [r3, #0]
   83d58:	3301      	adds	r3, #1
   83d5a:	290a      	cmp	r1, #10
   83d5c:	d1ea      	bne.n	83d34 <_fputwc_r+0x50>
   83d5e:	4640      	mov	r0, r8
   83d60:	4622      	mov	r2, r4
   83d62:	f001 f8ef 	bl	84f44 <__swbuf_r>
   83d66:	f1b0 33ff 	subs.w	r3, r0, #4294967295
   83d6a:	4258      	negs	r0, r3
   83d6c:	4158      	adcs	r0, r3
   83d6e:	2800      	cmp	r0, #0
   83d70:	d0e1      	beq.n	83d36 <_fputwc_r+0x52>
   83d72:	f04f 30ff 	mov.w	r0, #4294967295
   83d76:	b002      	add	sp, #8
   83d78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83d7c:	89a3      	ldrh	r3, [r4, #12]
   83d7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   83d82:	81a3      	strh	r3, [r4, #12]
   83d84:	b002      	add	sp, #8
   83d86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83d8a:	1e7b      	subs	r3, r7, #1
   83d8c:	2bfe      	cmp	r3, #254	; 0xfe
   83d8e:	d8bd      	bhi.n	83d0c <_fputwc_r+0x28>
   83d90:	b2f9      	uxtb	r1, r7
   83d92:	4606      	mov	r6, r0
   83d94:	f88d 1004 	strb.w	r1, [sp, #4]
   83d98:	e7c6      	b.n	83d28 <_fputwc_r+0x44>
   83d9a:	4638      	mov	r0, r7
   83d9c:	b002      	add	sp, #8
   83d9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83da2:	bf00      	nop

00083da4 <_malloc_trim_r>:
   83da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83da6:	4d23      	ldr	r5, [pc, #140]	; (83e34 <_malloc_trim_r+0x90>)
   83da8:	460f      	mov	r7, r1
   83daa:	4604      	mov	r4, r0
   83dac:	f000 fe92 	bl	84ad4 <__malloc_lock>
   83db0:	68ab      	ldr	r3, [r5, #8]
   83db2:	685e      	ldr	r6, [r3, #4]
   83db4:	f026 0603 	bic.w	r6, r6, #3
   83db8:	1bf1      	subs	r1, r6, r7
   83dba:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
   83dbe:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   83dc2:	f021 010f 	bic.w	r1, r1, #15
   83dc6:	f5a1 5780 	sub.w	r7, r1, #4096	; 0x1000
   83dca:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
   83dce:	db07      	blt.n	83de0 <_malloc_trim_r+0x3c>
   83dd0:	4620      	mov	r0, r4
   83dd2:	2100      	movs	r1, #0
   83dd4:	f001 f862 	bl	84e9c <_sbrk_r>
   83dd8:	68ab      	ldr	r3, [r5, #8]
   83dda:	4433      	add	r3, r6
   83ddc:	4298      	cmp	r0, r3
   83dde:	d004      	beq.n	83dea <_malloc_trim_r+0x46>
   83de0:	4620      	mov	r0, r4
   83de2:	f000 fe79 	bl	84ad8 <__malloc_unlock>
   83de6:	2000      	movs	r0, #0
   83de8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83dea:	4620      	mov	r0, r4
   83dec:	4279      	negs	r1, r7
   83dee:	f001 f855 	bl	84e9c <_sbrk_r>
   83df2:	3001      	adds	r0, #1
   83df4:	d00d      	beq.n	83e12 <_malloc_trim_r+0x6e>
   83df6:	4b10      	ldr	r3, [pc, #64]	; (83e38 <_malloc_trim_r+0x94>)
   83df8:	68aa      	ldr	r2, [r5, #8]
   83dfa:	6819      	ldr	r1, [r3, #0]
   83dfc:	1bf6      	subs	r6, r6, r7
   83dfe:	f046 0601 	orr.w	r6, r6, #1
   83e02:	4620      	mov	r0, r4
   83e04:	1bc9      	subs	r1, r1, r7
   83e06:	6056      	str	r6, [r2, #4]
   83e08:	6019      	str	r1, [r3, #0]
   83e0a:	f000 fe65 	bl	84ad8 <__malloc_unlock>
   83e0e:	2001      	movs	r0, #1
   83e10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83e12:	4620      	mov	r0, r4
   83e14:	2100      	movs	r1, #0
   83e16:	f001 f841 	bl	84e9c <_sbrk_r>
   83e1a:	68ab      	ldr	r3, [r5, #8]
   83e1c:	1ac2      	subs	r2, r0, r3
   83e1e:	2a0f      	cmp	r2, #15
   83e20:	ddde      	ble.n	83de0 <_malloc_trim_r+0x3c>
   83e22:	4d06      	ldr	r5, [pc, #24]	; (83e3c <_malloc_trim_r+0x98>)
   83e24:	4904      	ldr	r1, [pc, #16]	; (83e38 <_malloc_trim_r+0x94>)
   83e26:	682d      	ldr	r5, [r5, #0]
   83e28:	f042 0201 	orr.w	r2, r2, #1
   83e2c:	1b40      	subs	r0, r0, r5
   83e2e:	605a      	str	r2, [r3, #4]
   83e30:	6008      	str	r0, [r1, #0]
   83e32:	e7d5      	b.n	83de0 <_malloc_trim_r+0x3c>
   83e34:	20070590 	.word	0x20070590
   83e38:	20078c90 	.word	0x20078c90
   83e3c:	2007099c 	.word	0x2007099c

00083e40 <_free_r>:
   83e40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83e44:	460d      	mov	r5, r1
   83e46:	4606      	mov	r6, r0
   83e48:	2900      	cmp	r1, #0
   83e4a:	d055      	beq.n	83ef8 <_free_r+0xb8>
   83e4c:	f000 fe42 	bl	84ad4 <__malloc_lock>
   83e50:	f855 1c04 	ldr.w	r1, [r5, #-4]
   83e54:	f8df c170 	ldr.w	ip, [pc, #368]	; 83fc8 <_free_r+0x188>
   83e58:	f1a5 0408 	sub.w	r4, r5, #8
   83e5c:	f021 0301 	bic.w	r3, r1, #1
   83e60:	18e2      	adds	r2, r4, r3
   83e62:	f8dc 0008 	ldr.w	r0, [ip, #8]
   83e66:	6857      	ldr	r7, [r2, #4]
   83e68:	4290      	cmp	r0, r2
   83e6a:	f027 0703 	bic.w	r7, r7, #3
   83e6e:	d068      	beq.n	83f42 <_free_r+0x102>
   83e70:	f011 0101 	ands.w	r1, r1, #1
   83e74:	6057      	str	r7, [r2, #4]
   83e76:	d032      	beq.n	83ede <_free_r+0x9e>
   83e78:	2100      	movs	r1, #0
   83e7a:	19d0      	adds	r0, r2, r7
   83e7c:	6840      	ldr	r0, [r0, #4]
   83e7e:	07c0      	lsls	r0, r0, #31
   83e80:	d406      	bmi.n	83e90 <_free_r+0x50>
   83e82:	443b      	add	r3, r7
   83e84:	6890      	ldr	r0, [r2, #8]
   83e86:	2900      	cmp	r1, #0
   83e88:	d04d      	beq.n	83f26 <_free_r+0xe6>
   83e8a:	68d2      	ldr	r2, [r2, #12]
   83e8c:	60c2      	str	r2, [r0, #12]
   83e8e:	6090      	str	r0, [r2, #8]
   83e90:	f043 0201 	orr.w	r2, r3, #1
   83e94:	6062      	str	r2, [r4, #4]
   83e96:	50e3      	str	r3, [r4, r3]
   83e98:	b9e1      	cbnz	r1, 83ed4 <_free_r+0x94>
   83e9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   83e9e:	d32d      	bcc.n	83efc <_free_r+0xbc>
   83ea0:	0a5a      	lsrs	r2, r3, #9
   83ea2:	2a04      	cmp	r2, #4
   83ea4:	d869      	bhi.n	83f7a <_free_r+0x13a>
   83ea6:	0998      	lsrs	r0, r3, #6
   83ea8:	3038      	adds	r0, #56	; 0x38
   83eaa:	0041      	lsls	r1, r0, #1
   83eac:	eb0c 0c81 	add.w	ip, ip, r1, lsl #2
   83eb0:	f8dc 2008 	ldr.w	r2, [ip, #8]
   83eb4:	4944      	ldr	r1, [pc, #272]	; (83fc8 <_free_r+0x188>)
   83eb6:	4562      	cmp	r2, ip
   83eb8:	d065      	beq.n	83f86 <_free_r+0x146>
   83eba:	6851      	ldr	r1, [r2, #4]
   83ebc:	f021 0103 	bic.w	r1, r1, #3
   83ec0:	428b      	cmp	r3, r1
   83ec2:	d202      	bcs.n	83eca <_free_r+0x8a>
   83ec4:	6892      	ldr	r2, [r2, #8]
   83ec6:	4594      	cmp	ip, r2
   83ec8:	d1f7      	bne.n	83eba <_free_r+0x7a>
   83eca:	68d3      	ldr	r3, [r2, #12]
   83ecc:	60e3      	str	r3, [r4, #12]
   83ece:	60a2      	str	r2, [r4, #8]
   83ed0:	609c      	str	r4, [r3, #8]
   83ed2:	60d4      	str	r4, [r2, #12]
   83ed4:	4630      	mov	r0, r6
   83ed6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   83eda:	f000 bdfd 	b.w	84ad8 <__malloc_unlock>
   83ede:	f855 5c08 	ldr.w	r5, [r5, #-8]
   83ee2:	f10c 0808 	add.w	r8, ip, #8
   83ee6:	1b64      	subs	r4, r4, r5
   83ee8:	68a0      	ldr	r0, [r4, #8]
   83eea:	442b      	add	r3, r5
   83eec:	4540      	cmp	r0, r8
   83eee:	d042      	beq.n	83f76 <_free_r+0x136>
   83ef0:	68e5      	ldr	r5, [r4, #12]
   83ef2:	60c5      	str	r5, [r0, #12]
   83ef4:	60a8      	str	r0, [r5, #8]
   83ef6:	e7c0      	b.n	83e7a <_free_r+0x3a>
   83ef8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83efc:	08db      	lsrs	r3, r3, #3
   83efe:	109a      	asrs	r2, r3, #2
   83f00:	2001      	movs	r0, #1
   83f02:	4090      	lsls	r0, r2
   83f04:	f8dc 1004 	ldr.w	r1, [ip, #4]
   83f08:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
   83f0c:	689a      	ldr	r2, [r3, #8]
   83f0e:	4301      	orrs	r1, r0
   83f10:	60a2      	str	r2, [r4, #8]
   83f12:	60e3      	str	r3, [r4, #12]
   83f14:	f8cc 1004 	str.w	r1, [ip, #4]
   83f18:	4630      	mov	r0, r6
   83f1a:	609c      	str	r4, [r3, #8]
   83f1c:	60d4      	str	r4, [r2, #12]
   83f1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   83f22:	f000 bdd9 	b.w	84ad8 <__malloc_unlock>
   83f26:	4d29      	ldr	r5, [pc, #164]	; (83fcc <_free_r+0x18c>)
   83f28:	42a8      	cmp	r0, r5
   83f2a:	d1ae      	bne.n	83e8a <_free_r+0x4a>
   83f2c:	f043 0201 	orr.w	r2, r3, #1
   83f30:	f8cc 4014 	str.w	r4, [ip, #20]
   83f34:	f8cc 4010 	str.w	r4, [ip, #16]
   83f38:	60e0      	str	r0, [r4, #12]
   83f3a:	60a0      	str	r0, [r4, #8]
   83f3c:	6062      	str	r2, [r4, #4]
   83f3e:	50e3      	str	r3, [r4, r3]
   83f40:	e7c8      	b.n	83ed4 <_free_r+0x94>
   83f42:	441f      	add	r7, r3
   83f44:	07cb      	lsls	r3, r1, #31
   83f46:	d407      	bmi.n	83f58 <_free_r+0x118>
   83f48:	f855 1c08 	ldr.w	r1, [r5, #-8]
   83f4c:	1a64      	subs	r4, r4, r1
   83f4e:	68e3      	ldr	r3, [r4, #12]
   83f50:	68a2      	ldr	r2, [r4, #8]
   83f52:	440f      	add	r7, r1
   83f54:	60d3      	str	r3, [r2, #12]
   83f56:	609a      	str	r2, [r3, #8]
   83f58:	4b1d      	ldr	r3, [pc, #116]	; (83fd0 <_free_r+0x190>)
   83f5a:	f047 0201 	orr.w	r2, r7, #1
   83f5e:	681b      	ldr	r3, [r3, #0]
   83f60:	6062      	str	r2, [r4, #4]
   83f62:	429f      	cmp	r7, r3
   83f64:	f8cc 4008 	str.w	r4, [ip, #8]
   83f68:	d3b4      	bcc.n	83ed4 <_free_r+0x94>
   83f6a:	4b1a      	ldr	r3, [pc, #104]	; (83fd4 <_free_r+0x194>)
   83f6c:	4630      	mov	r0, r6
   83f6e:	6819      	ldr	r1, [r3, #0]
   83f70:	f7ff ff18 	bl	83da4 <_malloc_trim_r>
   83f74:	e7ae      	b.n	83ed4 <_free_r+0x94>
   83f76:	2101      	movs	r1, #1
   83f78:	e77f      	b.n	83e7a <_free_r+0x3a>
   83f7a:	2a14      	cmp	r2, #20
   83f7c:	d80b      	bhi.n	83f96 <_free_r+0x156>
   83f7e:	f102 005b 	add.w	r0, r2, #91	; 0x5b
   83f82:	0041      	lsls	r1, r0, #1
   83f84:	e792      	b.n	83eac <_free_r+0x6c>
   83f86:	1080      	asrs	r0, r0, #2
   83f88:	2501      	movs	r5, #1
   83f8a:	4085      	lsls	r5, r0
   83f8c:	6848      	ldr	r0, [r1, #4]
   83f8e:	4613      	mov	r3, r2
   83f90:	4328      	orrs	r0, r5
   83f92:	6048      	str	r0, [r1, #4]
   83f94:	e79a      	b.n	83ecc <_free_r+0x8c>
   83f96:	2a54      	cmp	r2, #84	; 0x54
   83f98:	d803      	bhi.n	83fa2 <_free_r+0x162>
   83f9a:	0b18      	lsrs	r0, r3, #12
   83f9c:	306e      	adds	r0, #110	; 0x6e
   83f9e:	0041      	lsls	r1, r0, #1
   83fa0:	e784      	b.n	83eac <_free_r+0x6c>
   83fa2:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   83fa6:	d803      	bhi.n	83fb0 <_free_r+0x170>
   83fa8:	0bd8      	lsrs	r0, r3, #15
   83faa:	3077      	adds	r0, #119	; 0x77
   83fac:	0041      	lsls	r1, r0, #1
   83fae:	e77d      	b.n	83eac <_free_r+0x6c>
   83fb0:	f240 5154 	movw	r1, #1364	; 0x554
   83fb4:	428a      	cmp	r2, r1
   83fb6:	d803      	bhi.n	83fc0 <_free_r+0x180>
   83fb8:	0c98      	lsrs	r0, r3, #18
   83fba:	307c      	adds	r0, #124	; 0x7c
   83fbc:	0041      	lsls	r1, r0, #1
   83fbe:	e775      	b.n	83eac <_free_r+0x6c>
   83fc0:	21fc      	movs	r1, #252	; 0xfc
   83fc2:	207e      	movs	r0, #126	; 0x7e
   83fc4:	e772      	b.n	83eac <_free_r+0x6c>
   83fc6:	bf00      	nop
   83fc8:	20070590 	.word	0x20070590
   83fcc:	20070598 	.word	0x20070598
   83fd0:	20070998 	.word	0x20070998
   83fd4:	20078c8c 	.word	0x20078c8c

00083fd8 <__sfvwrite_r>:
   83fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   83fdc:	6893      	ldr	r3, [r2, #8]
   83fde:	b083      	sub	sp, #12
   83fe0:	4616      	mov	r6, r2
   83fe2:	4681      	mov	r9, r0
   83fe4:	460c      	mov	r4, r1
   83fe6:	b32b      	cbz	r3, 84034 <__sfvwrite_r+0x5c>
   83fe8:	898b      	ldrh	r3, [r1, #12]
   83fea:	0719      	lsls	r1, r3, #28
   83fec:	d526      	bpl.n	8403c <__sfvwrite_r+0x64>
   83fee:	6922      	ldr	r2, [r4, #16]
   83ff0:	b322      	cbz	r2, 8403c <__sfvwrite_r+0x64>
   83ff2:	f003 0202 	and.w	r2, r3, #2
   83ff6:	b292      	uxth	r2, r2
   83ff8:	6835      	ldr	r5, [r6, #0]
   83ffa:	2a00      	cmp	r2, #0
   83ffc:	d02c      	beq.n	84058 <__sfvwrite_r+0x80>
   83ffe:	f04f 0a00 	mov.w	sl, #0
   84002:	f8df b2e8 	ldr.w	fp, [pc, #744]	; 842ec <__sfvwrite_r+0x314>
   84006:	46d0      	mov	r8, sl
   84008:	45d8      	cmp	r8, fp
   8400a:	bf34      	ite	cc
   8400c:	4643      	movcc	r3, r8
   8400e:	465b      	movcs	r3, fp
   84010:	4652      	mov	r2, sl
   84012:	4648      	mov	r0, r9
   84014:	f1b8 0f00 	cmp.w	r8, #0
   84018:	d04f      	beq.n	840ba <__sfvwrite_r+0xe2>
   8401a:	69e1      	ldr	r1, [r4, #28]
   8401c:	6a67      	ldr	r7, [r4, #36]	; 0x24
   8401e:	47b8      	blx	r7
   84020:	2800      	cmp	r0, #0
   84022:	dd56      	ble.n	840d2 <__sfvwrite_r+0xfa>
   84024:	68b3      	ldr	r3, [r6, #8]
   84026:	4482      	add	sl, r0
   84028:	1a1b      	subs	r3, r3, r0
   8402a:	ebc0 0808 	rsb	r8, r0, r8
   8402e:	60b3      	str	r3, [r6, #8]
   84030:	2b00      	cmp	r3, #0
   84032:	d1e9      	bne.n	84008 <__sfvwrite_r+0x30>
   84034:	2000      	movs	r0, #0
   84036:	b003      	add	sp, #12
   84038:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8403c:	4648      	mov	r0, r9
   8403e:	4621      	mov	r1, r4
   84040:	f7ff fc88 	bl	83954 <__swsetup_r>
   84044:	2800      	cmp	r0, #0
   84046:	f040 8148 	bne.w	842da <__sfvwrite_r+0x302>
   8404a:	89a3      	ldrh	r3, [r4, #12]
   8404c:	6835      	ldr	r5, [r6, #0]
   8404e:	f003 0202 	and.w	r2, r3, #2
   84052:	b292      	uxth	r2, r2
   84054:	2a00      	cmp	r2, #0
   84056:	d1d2      	bne.n	83ffe <__sfvwrite_r+0x26>
   84058:	f013 0a01 	ands.w	sl, r3, #1
   8405c:	d142      	bne.n	840e4 <__sfvwrite_r+0x10c>
   8405e:	46d0      	mov	r8, sl
   84060:	f1b8 0f00 	cmp.w	r8, #0
   84064:	d023      	beq.n	840ae <__sfvwrite_r+0xd6>
   84066:	059a      	lsls	r2, r3, #22
   84068:	68a7      	ldr	r7, [r4, #8]
   8406a:	d576      	bpl.n	8415a <__sfvwrite_r+0x182>
   8406c:	45b8      	cmp	r8, r7
   8406e:	f0c0 80a4 	bcc.w	841ba <__sfvwrite_r+0x1e2>
   84072:	f413 6f90 	tst.w	r3, #1152	; 0x480
   84076:	f040 80b2 	bne.w	841de <__sfvwrite_r+0x206>
   8407a:	6820      	ldr	r0, [r4, #0]
   8407c:	46bb      	mov	fp, r7
   8407e:	4651      	mov	r1, sl
   84080:	465a      	mov	r2, fp
   84082:	f000 fcc1 	bl	84a08 <memmove>
   84086:	68a2      	ldr	r2, [r4, #8]
   84088:	6821      	ldr	r1, [r4, #0]
   8408a:	1bd2      	subs	r2, r2, r7
   8408c:	eb01 030b 	add.w	r3, r1, fp
   84090:	60a2      	str	r2, [r4, #8]
   84092:	6023      	str	r3, [r4, #0]
   84094:	4642      	mov	r2, r8
   84096:	68b3      	ldr	r3, [r6, #8]
   84098:	4492      	add	sl, r2
   8409a:	1a9b      	subs	r3, r3, r2
   8409c:	ebc2 0808 	rsb	r8, r2, r8
   840a0:	60b3      	str	r3, [r6, #8]
   840a2:	2b00      	cmp	r3, #0
   840a4:	d0c6      	beq.n	84034 <__sfvwrite_r+0x5c>
   840a6:	89a3      	ldrh	r3, [r4, #12]
   840a8:	f1b8 0f00 	cmp.w	r8, #0
   840ac:	d1db      	bne.n	84066 <__sfvwrite_r+0x8e>
   840ae:	f8d5 a000 	ldr.w	sl, [r5]
   840b2:	f8d5 8004 	ldr.w	r8, [r5, #4]
   840b6:	3508      	adds	r5, #8
   840b8:	e7d2      	b.n	84060 <__sfvwrite_r+0x88>
   840ba:	f8d5 a000 	ldr.w	sl, [r5]
   840be:	f8d5 8004 	ldr.w	r8, [r5, #4]
   840c2:	3508      	adds	r5, #8
   840c4:	e7a0      	b.n	84008 <__sfvwrite_r+0x30>
   840c6:	4648      	mov	r0, r9
   840c8:	4621      	mov	r1, r4
   840ca:	f7ff fd59 	bl	83b80 <_fflush_r>
   840ce:	2800      	cmp	r0, #0
   840d0:	d059      	beq.n	84186 <__sfvwrite_r+0x1ae>
   840d2:	89a3      	ldrh	r3, [r4, #12]
   840d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   840d8:	f04f 30ff 	mov.w	r0, #4294967295
   840dc:	81a3      	strh	r3, [r4, #12]
   840de:	b003      	add	sp, #12
   840e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   840e4:	4692      	mov	sl, r2
   840e6:	9201      	str	r2, [sp, #4]
   840e8:	4693      	mov	fp, r2
   840ea:	4690      	mov	r8, r2
   840ec:	f1b8 0f00 	cmp.w	r8, #0
   840f0:	d02b      	beq.n	8414a <__sfvwrite_r+0x172>
   840f2:	9f01      	ldr	r7, [sp, #4]
   840f4:	2f00      	cmp	r7, #0
   840f6:	d064      	beq.n	841c2 <__sfvwrite_r+0x1ea>
   840f8:	6820      	ldr	r0, [r4, #0]
   840fa:	6921      	ldr	r1, [r4, #16]
   840fc:	45c2      	cmp	sl, r8
   840fe:	bf34      	ite	cc
   84100:	4653      	movcc	r3, sl
   84102:	4643      	movcs	r3, r8
   84104:	4288      	cmp	r0, r1
   84106:	461f      	mov	r7, r3
   84108:	f8d4 c008 	ldr.w	ip, [r4, #8]
   8410c:	6962      	ldr	r2, [r4, #20]
   8410e:	d903      	bls.n	84118 <__sfvwrite_r+0x140>
   84110:	4494      	add	ip, r2
   84112:	4563      	cmp	r3, ip
   84114:	f300 80ae 	bgt.w	84274 <__sfvwrite_r+0x29c>
   84118:	4293      	cmp	r3, r2
   8411a:	db36      	blt.n	8418a <__sfvwrite_r+0x1b2>
   8411c:	4613      	mov	r3, r2
   8411e:	6a67      	ldr	r7, [r4, #36]	; 0x24
   84120:	4648      	mov	r0, r9
   84122:	69e1      	ldr	r1, [r4, #28]
   84124:	465a      	mov	r2, fp
   84126:	47b8      	blx	r7
   84128:	1e07      	subs	r7, r0, #0
   8412a:	ddd2      	ble.n	840d2 <__sfvwrite_r+0xfa>
   8412c:	ebba 0a07 	subs.w	sl, sl, r7
   84130:	d03a      	beq.n	841a8 <__sfvwrite_r+0x1d0>
   84132:	68b3      	ldr	r3, [r6, #8]
   84134:	44bb      	add	fp, r7
   84136:	1bdb      	subs	r3, r3, r7
   84138:	ebc7 0808 	rsb	r8, r7, r8
   8413c:	60b3      	str	r3, [r6, #8]
   8413e:	2b00      	cmp	r3, #0
   84140:	f43f af78 	beq.w	84034 <__sfvwrite_r+0x5c>
   84144:	f1b8 0f00 	cmp.w	r8, #0
   84148:	d1d3      	bne.n	840f2 <__sfvwrite_r+0x11a>
   8414a:	2700      	movs	r7, #0
   8414c:	f8d5 b000 	ldr.w	fp, [r5]
   84150:	f8d5 8004 	ldr.w	r8, [r5, #4]
   84154:	9701      	str	r7, [sp, #4]
   84156:	3508      	adds	r5, #8
   84158:	e7c8      	b.n	840ec <__sfvwrite_r+0x114>
   8415a:	6820      	ldr	r0, [r4, #0]
   8415c:	6923      	ldr	r3, [r4, #16]
   8415e:	4298      	cmp	r0, r3
   84160:	d802      	bhi.n	84168 <__sfvwrite_r+0x190>
   84162:	6963      	ldr	r3, [r4, #20]
   84164:	4598      	cmp	r8, r3
   84166:	d272      	bcs.n	8424e <__sfvwrite_r+0x276>
   84168:	45b8      	cmp	r8, r7
   8416a:	bf38      	it	cc
   8416c:	4647      	movcc	r7, r8
   8416e:	463a      	mov	r2, r7
   84170:	4651      	mov	r1, sl
   84172:	f000 fc49 	bl	84a08 <memmove>
   84176:	68a3      	ldr	r3, [r4, #8]
   84178:	6822      	ldr	r2, [r4, #0]
   8417a:	1bdb      	subs	r3, r3, r7
   8417c:	443a      	add	r2, r7
   8417e:	60a3      	str	r3, [r4, #8]
   84180:	6022      	str	r2, [r4, #0]
   84182:	2b00      	cmp	r3, #0
   84184:	d09f      	beq.n	840c6 <__sfvwrite_r+0xee>
   84186:	463a      	mov	r2, r7
   84188:	e785      	b.n	84096 <__sfvwrite_r+0xbe>
   8418a:	461a      	mov	r2, r3
   8418c:	4659      	mov	r1, fp
   8418e:	9300      	str	r3, [sp, #0]
   84190:	f000 fc3a 	bl	84a08 <memmove>
   84194:	9b00      	ldr	r3, [sp, #0]
   84196:	68a1      	ldr	r1, [r4, #8]
   84198:	6822      	ldr	r2, [r4, #0]
   8419a:	1ac9      	subs	r1, r1, r3
   8419c:	ebba 0a07 	subs.w	sl, sl, r7
   841a0:	4413      	add	r3, r2
   841a2:	60a1      	str	r1, [r4, #8]
   841a4:	6023      	str	r3, [r4, #0]
   841a6:	d1c4      	bne.n	84132 <__sfvwrite_r+0x15a>
   841a8:	4648      	mov	r0, r9
   841aa:	4621      	mov	r1, r4
   841ac:	f7ff fce8 	bl	83b80 <_fflush_r>
   841b0:	2800      	cmp	r0, #0
   841b2:	d18e      	bne.n	840d2 <__sfvwrite_r+0xfa>
   841b4:	f8cd a004 	str.w	sl, [sp, #4]
   841b8:	e7bb      	b.n	84132 <__sfvwrite_r+0x15a>
   841ba:	6820      	ldr	r0, [r4, #0]
   841bc:	4647      	mov	r7, r8
   841be:	46c3      	mov	fp, r8
   841c0:	e75d      	b.n	8407e <__sfvwrite_r+0xa6>
   841c2:	4658      	mov	r0, fp
   841c4:	210a      	movs	r1, #10
   841c6:	4642      	mov	r2, r8
   841c8:	f000 fbd4 	bl	84974 <memchr>
   841cc:	2800      	cmp	r0, #0
   841ce:	d07f      	beq.n	842d0 <__sfvwrite_r+0x2f8>
   841d0:	f100 0a01 	add.w	sl, r0, #1
   841d4:	2701      	movs	r7, #1
   841d6:	ebcb 0a0a 	rsb	sl, fp, sl
   841da:	9701      	str	r7, [sp, #4]
   841dc:	e78c      	b.n	840f8 <__sfvwrite_r+0x120>
   841de:	6822      	ldr	r2, [r4, #0]
   841e0:	6921      	ldr	r1, [r4, #16]
   841e2:	6967      	ldr	r7, [r4, #20]
   841e4:	ebc1 0c02 	rsb	ip, r1, r2
   841e8:	eb07 0747 	add.w	r7, r7, r7, lsl #1
   841ec:	f10c 0201 	add.w	r2, ip, #1
   841f0:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
   841f4:	4442      	add	r2, r8
   841f6:	107f      	asrs	r7, r7, #1
   841f8:	4297      	cmp	r7, r2
   841fa:	bf34      	ite	cc
   841fc:	4617      	movcc	r7, r2
   841fe:	463a      	movcs	r2, r7
   84200:	055b      	lsls	r3, r3, #21
   84202:	d54f      	bpl.n	842a4 <__sfvwrite_r+0x2cc>
   84204:	4611      	mov	r1, r2
   84206:	4648      	mov	r0, r9
   84208:	f8cd c000 	str.w	ip, [sp]
   8420c:	f000 f916 	bl	8443c <_malloc_r>
   84210:	f8dd c000 	ldr.w	ip, [sp]
   84214:	4683      	mov	fp, r0
   84216:	2800      	cmp	r0, #0
   84218:	d062      	beq.n	842e0 <__sfvwrite_r+0x308>
   8421a:	4662      	mov	r2, ip
   8421c:	6921      	ldr	r1, [r4, #16]
   8421e:	f8cd c000 	str.w	ip, [sp]
   84222:	f7fe fb49 	bl	828b8 <memcpy>
   84226:	89a2      	ldrh	r2, [r4, #12]
   84228:	f8dd c000 	ldr.w	ip, [sp]
   8422c:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   84230:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   84234:	81a2      	strh	r2, [r4, #12]
   84236:	eb0b 000c 	add.w	r0, fp, ip
   8423a:	ebcc 0207 	rsb	r2, ip, r7
   8423e:	f8c4 b010 	str.w	fp, [r4, #16]
   84242:	6167      	str	r7, [r4, #20]
   84244:	6020      	str	r0, [r4, #0]
   84246:	60a2      	str	r2, [r4, #8]
   84248:	4647      	mov	r7, r8
   8424a:	46c3      	mov	fp, r8
   8424c:	e717      	b.n	8407e <__sfvwrite_r+0xa6>
   8424e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   84252:	4590      	cmp	r8, r2
   84254:	bf38      	it	cc
   84256:	4642      	movcc	r2, r8
   84258:	fb92 f2f3 	sdiv	r2, r2, r3
   8425c:	fb02 f303 	mul.w	r3, r2, r3
   84260:	6a67      	ldr	r7, [r4, #36]	; 0x24
   84262:	4648      	mov	r0, r9
   84264:	69e1      	ldr	r1, [r4, #28]
   84266:	4652      	mov	r2, sl
   84268:	47b8      	blx	r7
   8426a:	2800      	cmp	r0, #0
   8426c:	f77f af31 	ble.w	840d2 <__sfvwrite_r+0xfa>
   84270:	4602      	mov	r2, r0
   84272:	e710      	b.n	84096 <__sfvwrite_r+0xbe>
   84274:	4662      	mov	r2, ip
   84276:	4659      	mov	r1, fp
   84278:	f8cd c000 	str.w	ip, [sp]
   8427c:	f000 fbc4 	bl	84a08 <memmove>
   84280:	f8dd c000 	ldr.w	ip, [sp]
   84284:	6823      	ldr	r3, [r4, #0]
   84286:	4648      	mov	r0, r9
   84288:	4463      	add	r3, ip
   8428a:	6023      	str	r3, [r4, #0]
   8428c:	4621      	mov	r1, r4
   8428e:	f8cd c000 	str.w	ip, [sp]
   84292:	f7ff fc75 	bl	83b80 <_fflush_r>
   84296:	f8dd c000 	ldr.w	ip, [sp]
   8429a:	2800      	cmp	r0, #0
   8429c:	f47f af19 	bne.w	840d2 <__sfvwrite_r+0xfa>
   842a0:	4667      	mov	r7, ip
   842a2:	e743      	b.n	8412c <__sfvwrite_r+0x154>
   842a4:	4648      	mov	r0, r9
   842a6:	f8cd c000 	str.w	ip, [sp]
   842aa:	f000 fc17 	bl	84adc <_realloc_r>
   842ae:	f8dd c000 	ldr.w	ip, [sp]
   842b2:	4683      	mov	fp, r0
   842b4:	2800      	cmp	r0, #0
   842b6:	d1be      	bne.n	84236 <__sfvwrite_r+0x25e>
   842b8:	4648      	mov	r0, r9
   842ba:	6921      	ldr	r1, [r4, #16]
   842bc:	f7ff fdc0 	bl	83e40 <_free_r>
   842c0:	89a3      	ldrh	r3, [r4, #12]
   842c2:	220c      	movs	r2, #12
   842c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   842c8:	b29b      	uxth	r3, r3
   842ca:	f8c9 2000 	str.w	r2, [r9]
   842ce:	e701      	b.n	840d4 <__sfvwrite_r+0xfc>
   842d0:	2701      	movs	r7, #1
   842d2:	f108 0a01 	add.w	sl, r8, #1
   842d6:	9701      	str	r7, [sp, #4]
   842d8:	e70e      	b.n	840f8 <__sfvwrite_r+0x120>
   842da:	f04f 30ff 	mov.w	r0, #4294967295
   842de:	e6aa      	b.n	84036 <__sfvwrite_r+0x5e>
   842e0:	230c      	movs	r3, #12
   842e2:	f8c9 3000 	str.w	r3, [r9]
   842e6:	89a3      	ldrh	r3, [r4, #12]
   842e8:	e6f4      	b.n	840d4 <__sfvwrite_r+0xfc>
   842ea:	bf00      	nop
   842ec:	7ffffc00 	.word	0x7ffffc00

000842f0 <_fwalk>:
   842f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   842f4:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
   842f8:	4688      	mov	r8, r1
   842fa:	d019      	beq.n	84330 <_fwalk+0x40>
   842fc:	2600      	movs	r6, #0
   842fe:	687d      	ldr	r5, [r7, #4]
   84300:	68bc      	ldr	r4, [r7, #8]
   84302:	3d01      	subs	r5, #1
   84304:	d40e      	bmi.n	84324 <_fwalk+0x34>
   84306:	89a3      	ldrh	r3, [r4, #12]
   84308:	3d01      	subs	r5, #1
   8430a:	2b01      	cmp	r3, #1
   8430c:	d906      	bls.n	8431c <_fwalk+0x2c>
   8430e:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   84312:	4620      	mov	r0, r4
   84314:	3301      	adds	r3, #1
   84316:	d001      	beq.n	8431c <_fwalk+0x2c>
   84318:	47c0      	blx	r8
   8431a:	4306      	orrs	r6, r0
   8431c:	1c6b      	adds	r3, r5, #1
   8431e:	f104 0468 	add.w	r4, r4, #104	; 0x68
   84322:	d1f0      	bne.n	84306 <_fwalk+0x16>
   84324:	683f      	ldr	r7, [r7, #0]
   84326:	2f00      	cmp	r7, #0
   84328:	d1e9      	bne.n	842fe <_fwalk+0xe>
   8432a:	4630      	mov	r0, r6
   8432c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   84330:	463e      	mov	r6, r7
   84332:	4630      	mov	r0, r6
   84334:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00084338 <__locale_charset>:
   84338:	4800      	ldr	r0, [pc, #0]	; (8433c <__locale_charset+0x4>)
   8433a:	4770      	bx	lr
   8433c:	2007056c 	.word	0x2007056c

00084340 <__locale_mb_cur_max>:
   84340:	4b01      	ldr	r3, [pc, #4]	; (84348 <__locale_mb_cur_max+0x8>)
   84342:	6818      	ldr	r0, [r3, #0]
   84344:	4770      	bx	lr
   84346:	bf00      	nop
   84348:	2007058c 	.word	0x2007058c

0008434c <__smakebuf_r>:
   8434c:	b5f0      	push	{r4, r5, r6, r7, lr}
   8434e:	898b      	ldrh	r3, [r1, #12]
   84350:	b091      	sub	sp, #68	; 0x44
   84352:	b29a      	uxth	r2, r3
   84354:	0796      	lsls	r6, r2, #30
   84356:	460c      	mov	r4, r1
   84358:	4605      	mov	r5, r0
   8435a:	d437      	bmi.n	843cc <__smakebuf_r+0x80>
   8435c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   84360:	2900      	cmp	r1, #0
   84362:	db17      	blt.n	84394 <__smakebuf_r+0x48>
   84364:	aa01      	add	r2, sp, #4
   84366:	f000 ff39 	bl	851dc <_fstat_r>
   8436a:	2800      	cmp	r0, #0
   8436c:	db10      	blt.n	84390 <__smakebuf_r+0x44>
   8436e:	9b02      	ldr	r3, [sp, #8]
   84370:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
   84374:	f5b3 5100 	subs.w	r1, r3, #8192	; 0x2000
   84378:	424f      	negs	r7, r1
   8437a:	414f      	adcs	r7, r1
   8437c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   84380:	d02c      	beq.n	843dc <__smakebuf_r+0x90>
   84382:	89a3      	ldrh	r3, [r4, #12]
   84384:	f44f 6680 	mov.w	r6, #1024	; 0x400
   84388:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   8438c:	81a3      	strh	r3, [r4, #12]
   8438e:	e00b      	b.n	843a8 <__smakebuf_r+0x5c>
   84390:	89a3      	ldrh	r3, [r4, #12]
   84392:	b29a      	uxth	r2, r3
   84394:	f012 0f80 	tst.w	r2, #128	; 0x80
   84398:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   8439c:	81a3      	strh	r3, [r4, #12]
   8439e:	bf14      	ite	ne
   843a0:	2640      	movne	r6, #64	; 0x40
   843a2:	f44f 6680 	moveq.w	r6, #1024	; 0x400
   843a6:	2700      	movs	r7, #0
   843a8:	4628      	mov	r0, r5
   843aa:	4631      	mov	r1, r6
   843ac:	f000 f846 	bl	8443c <_malloc_r>
   843b0:	89a3      	ldrh	r3, [r4, #12]
   843b2:	2800      	cmp	r0, #0
   843b4:	d029      	beq.n	8440a <__smakebuf_r+0xbe>
   843b6:	4a1b      	ldr	r2, [pc, #108]	; (84424 <__smakebuf_r+0xd8>)
   843b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   843bc:	63ea      	str	r2, [r5, #60]	; 0x3c
   843be:	81a3      	strh	r3, [r4, #12]
   843c0:	6020      	str	r0, [r4, #0]
   843c2:	6120      	str	r0, [r4, #16]
   843c4:	6166      	str	r6, [r4, #20]
   843c6:	b9a7      	cbnz	r7, 843f2 <__smakebuf_r+0xa6>
   843c8:	b011      	add	sp, #68	; 0x44
   843ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
   843cc:	f101 0343 	add.w	r3, r1, #67	; 0x43
   843d0:	2201      	movs	r2, #1
   843d2:	600b      	str	r3, [r1, #0]
   843d4:	610b      	str	r3, [r1, #16]
   843d6:	614a      	str	r2, [r1, #20]
   843d8:	b011      	add	sp, #68	; 0x44
   843da:	bdf0      	pop	{r4, r5, r6, r7, pc}
   843dc:	4a12      	ldr	r2, [pc, #72]	; (84428 <__smakebuf_r+0xdc>)
   843de:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   843e0:	4293      	cmp	r3, r2
   843e2:	d1ce      	bne.n	84382 <__smakebuf_r+0x36>
   843e4:	89a3      	ldrh	r3, [r4, #12]
   843e6:	f44f 6680 	mov.w	r6, #1024	; 0x400
   843ea:	4333      	orrs	r3, r6
   843ec:	81a3      	strh	r3, [r4, #12]
   843ee:	64e6      	str	r6, [r4, #76]	; 0x4c
   843f0:	e7da      	b.n	843a8 <__smakebuf_r+0x5c>
   843f2:	4628      	mov	r0, r5
   843f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   843f8:	f000 ff04 	bl	85204 <_isatty_r>
   843fc:	2800      	cmp	r0, #0
   843fe:	d0e3      	beq.n	843c8 <__smakebuf_r+0x7c>
   84400:	89a3      	ldrh	r3, [r4, #12]
   84402:	f043 0301 	orr.w	r3, r3, #1
   84406:	81a3      	strh	r3, [r4, #12]
   84408:	e7de      	b.n	843c8 <__smakebuf_r+0x7c>
   8440a:	059a      	lsls	r2, r3, #22
   8440c:	d4dc      	bmi.n	843c8 <__smakebuf_r+0x7c>
   8440e:	f104 0243 	add.w	r2, r4, #67	; 0x43
   84412:	f043 0302 	orr.w	r3, r3, #2
   84416:	2101      	movs	r1, #1
   84418:	81a3      	strh	r3, [r4, #12]
   8441a:	6022      	str	r2, [r4, #0]
   8441c:	6122      	str	r2, [r4, #16]
   8441e:	6161      	str	r1, [r4, #20]
   84420:	e7d2      	b.n	843c8 <__smakebuf_r+0x7c>
   84422:	bf00      	nop
   84424:	00083bad 	.word	0x00083bad
   84428:	00084f1d 	.word	0x00084f1d

0008442c <malloc>:
   8442c:	4b02      	ldr	r3, [pc, #8]	; (84438 <malloc+0xc>)
   8442e:	4601      	mov	r1, r0
   84430:	6818      	ldr	r0, [r3, #0]
   84432:	f000 b803 	b.w	8443c <_malloc_r>
   84436:	bf00      	nop
   84438:	20070568 	.word	0x20070568

0008443c <_malloc_r>:
   8443c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   84440:	f101 050b 	add.w	r5, r1, #11
   84444:	2d16      	cmp	r5, #22
   84446:	b083      	sub	sp, #12
   84448:	4606      	mov	r6, r0
   8444a:	d927      	bls.n	8449c <_malloc_r+0x60>
   8444c:	f035 0507 	bics.w	r5, r5, #7
   84450:	d427      	bmi.n	844a2 <_malloc_r+0x66>
   84452:	42a9      	cmp	r1, r5
   84454:	d825      	bhi.n	844a2 <_malloc_r+0x66>
   84456:	4630      	mov	r0, r6
   84458:	f000 fb3c 	bl	84ad4 <__malloc_lock>
   8445c:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
   84460:	d226      	bcs.n	844b0 <_malloc_r+0x74>
   84462:	4fc1      	ldr	r7, [pc, #772]	; (84768 <_malloc_r+0x32c>)
   84464:	ea4f 0cd5 	mov.w	ip, r5, lsr #3
   84468:	eb07 03cc 	add.w	r3, r7, ip, lsl #3
   8446c:	68dc      	ldr	r4, [r3, #12]
   8446e:	429c      	cmp	r4, r3
   84470:	f000 81d2 	beq.w	84818 <_malloc_r+0x3dc>
   84474:	6863      	ldr	r3, [r4, #4]
   84476:	68e2      	ldr	r2, [r4, #12]
   84478:	f023 0303 	bic.w	r3, r3, #3
   8447c:	4423      	add	r3, r4
   8447e:	6858      	ldr	r0, [r3, #4]
   84480:	68a1      	ldr	r1, [r4, #8]
   84482:	f040 0501 	orr.w	r5, r0, #1
   84486:	60ca      	str	r2, [r1, #12]
   84488:	4630      	mov	r0, r6
   8448a:	6091      	str	r1, [r2, #8]
   8448c:	605d      	str	r5, [r3, #4]
   8448e:	f000 fb23 	bl	84ad8 <__malloc_unlock>
   84492:	3408      	adds	r4, #8
   84494:	4620      	mov	r0, r4
   84496:	b003      	add	sp, #12
   84498:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8449c:	2510      	movs	r5, #16
   8449e:	42a9      	cmp	r1, r5
   844a0:	d9d9      	bls.n	84456 <_malloc_r+0x1a>
   844a2:	2400      	movs	r4, #0
   844a4:	230c      	movs	r3, #12
   844a6:	4620      	mov	r0, r4
   844a8:	6033      	str	r3, [r6, #0]
   844aa:	b003      	add	sp, #12
   844ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   844b0:	ea5f 2c55 	movs.w	ip, r5, lsr #9
   844b4:	f000 8089 	beq.w	845ca <_malloc_r+0x18e>
   844b8:	f1bc 0f04 	cmp.w	ip, #4
   844bc:	f200 8160 	bhi.w	84780 <_malloc_r+0x344>
   844c0:	ea4f 1c95 	mov.w	ip, r5, lsr #6
   844c4:	f10c 0c38 	add.w	ip, ip, #56	; 0x38
   844c8:	ea4f 014c 	mov.w	r1, ip, lsl #1
   844cc:	4fa6      	ldr	r7, [pc, #664]	; (84768 <_malloc_r+0x32c>)
   844ce:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   844d2:	68cc      	ldr	r4, [r1, #12]
   844d4:	42a1      	cmp	r1, r4
   844d6:	d105      	bne.n	844e4 <_malloc_r+0xa8>
   844d8:	e00c      	b.n	844f4 <_malloc_r+0xb8>
   844da:	2b00      	cmp	r3, #0
   844dc:	da79      	bge.n	845d2 <_malloc_r+0x196>
   844de:	68e4      	ldr	r4, [r4, #12]
   844e0:	42a1      	cmp	r1, r4
   844e2:	d007      	beq.n	844f4 <_malloc_r+0xb8>
   844e4:	6862      	ldr	r2, [r4, #4]
   844e6:	f022 0203 	bic.w	r2, r2, #3
   844ea:	1b53      	subs	r3, r2, r5
   844ec:	2b0f      	cmp	r3, #15
   844ee:	ddf4      	ble.n	844da <_malloc_r+0x9e>
   844f0:	f10c 3cff 	add.w	ip, ip, #4294967295
   844f4:	f10c 0c01 	add.w	ip, ip, #1
   844f8:	4b9b      	ldr	r3, [pc, #620]	; (84768 <_malloc_r+0x32c>)
   844fa:	693c      	ldr	r4, [r7, #16]
   844fc:	f103 0e08 	add.w	lr, r3, #8
   84500:	4574      	cmp	r4, lr
   84502:	f000 817e 	beq.w	84802 <_malloc_r+0x3c6>
   84506:	6861      	ldr	r1, [r4, #4]
   84508:	f021 0103 	bic.w	r1, r1, #3
   8450c:	1b4a      	subs	r2, r1, r5
   8450e:	2a0f      	cmp	r2, #15
   84510:	f300 8164 	bgt.w	847dc <_malloc_r+0x3a0>
   84514:	2a00      	cmp	r2, #0
   84516:	f8c3 e014 	str.w	lr, [r3, #20]
   8451a:	f8c3 e010 	str.w	lr, [r3, #16]
   8451e:	da69      	bge.n	845f4 <_malloc_r+0x1b8>
   84520:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   84524:	f080 813a 	bcs.w	8479c <_malloc_r+0x360>
   84528:	08c9      	lsrs	r1, r1, #3
   8452a:	108a      	asrs	r2, r1, #2
   8452c:	f04f 0801 	mov.w	r8, #1
   84530:	fa08 f802 	lsl.w	r8, r8, r2
   84534:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   84538:	685a      	ldr	r2, [r3, #4]
   8453a:	6888      	ldr	r0, [r1, #8]
   8453c:	ea48 0202 	orr.w	r2, r8, r2
   84540:	60a0      	str	r0, [r4, #8]
   84542:	60e1      	str	r1, [r4, #12]
   84544:	605a      	str	r2, [r3, #4]
   84546:	608c      	str	r4, [r1, #8]
   84548:	60c4      	str	r4, [r0, #12]
   8454a:	ea4f 03ac 	mov.w	r3, ip, asr #2
   8454e:	2001      	movs	r0, #1
   84550:	4098      	lsls	r0, r3
   84552:	4290      	cmp	r0, r2
   84554:	d85b      	bhi.n	8460e <_malloc_r+0x1d2>
   84556:	4202      	tst	r2, r0
   84558:	d106      	bne.n	84568 <_malloc_r+0x12c>
   8455a:	f02c 0c03 	bic.w	ip, ip, #3
   8455e:	0040      	lsls	r0, r0, #1
   84560:	4202      	tst	r2, r0
   84562:	f10c 0c04 	add.w	ip, ip, #4
   84566:	d0fa      	beq.n	8455e <_malloc_r+0x122>
   84568:	eb07 08cc 	add.w	r8, r7, ip, lsl #3
   8456c:	4644      	mov	r4, r8
   8456e:	46e1      	mov	r9, ip
   84570:	68e3      	ldr	r3, [r4, #12]
   84572:	429c      	cmp	r4, r3
   84574:	d107      	bne.n	84586 <_malloc_r+0x14a>
   84576:	e146      	b.n	84806 <_malloc_r+0x3ca>
   84578:	2a00      	cmp	r2, #0
   8457a:	f280 8157 	bge.w	8482c <_malloc_r+0x3f0>
   8457e:	68db      	ldr	r3, [r3, #12]
   84580:	429c      	cmp	r4, r3
   84582:	f000 8140 	beq.w	84806 <_malloc_r+0x3ca>
   84586:	6859      	ldr	r1, [r3, #4]
   84588:	f021 0103 	bic.w	r1, r1, #3
   8458c:	1b4a      	subs	r2, r1, r5
   8458e:	2a0f      	cmp	r2, #15
   84590:	ddf2      	ble.n	84578 <_malloc_r+0x13c>
   84592:	461c      	mov	r4, r3
   84594:	f854 cf08 	ldr.w	ip, [r4, #8]!
   84598:	68d9      	ldr	r1, [r3, #12]
   8459a:	f045 0901 	orr.w	r9, r5, #1
   8459e:	f042 0801 	orr.w	r8, r2, #1
   845a2:	441d      	add	r5, r3
   845a4:	f8c3 9004 	str.w	r9, [r3, #4]
   845a8:	4630      	mov	r0, r6
   845aa:	f8cc 100c 	str.w	r1, [ip, #12]
   845ae:	f8c1 c008 	str.w	ip, [r1, #8]
   845b2:	617d      	str	r5, [r7, #20]
   845b4:	613d      	str	r5, [r7, #16]
   845b6:	f8c5 e00c 	str.w	lr, [r5, #12]
   845ba:	f8c5 e008 	str.w	lr, [r5, #8]
   845be:	f8c5 8004 	str.w	r8, [r5, #4]
   845c2:	50aa      	str	r2, [r5, r2]
   845c4:	f000 fa88 	bl	84ad8 <__malloc_unlock>
   845c8:	e764      	b.n	84494 <_malloc_r+0x58>
   845ca:	217e      	movs	r1, #126	; 0x7e
   845cc:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
   845d0:	e77c      	b.n	844cc <_malloc_r+0x90>
   845d2:	4422      	add	r2, r4
   845d4:	6850      	ldr	r0, [r2, #4]
   845d6:	68e3      	ldr	r3, [r4, #12]
   845d8:	68a1      	ldr	r1, [r4, #8]
   845da:	f040 0501 	orr.w	r5, r0, #1
   845de:	60cb      	str	r3, [r1, #12]
   845e0:	4630      	mov	r0, r6
   845e2:	6099      	str	r1, [r3, #8]
   845e4:	6055      	str	r5, [r2, #4]
   845e6:	f000 fa77 	bl	84ad8 <__malloc_unlock>
   845ea:	3408      	adds	r4, #8
   845ec:	4620      	mov	r0, r4
   845ee:	b003      	add	sp, #12
   845f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   845f4:	4421      	add	r1, r4
   845f6:	684b      	ldr	r3, [r1, #4]
   845f8:	4630      	mov	r0, r6
   845fa:	f043 0301 	orr.w	r3, r3, #1
   845fe:	604b      	str	r3, [r1, #4]
   84600:	f000 fa6a 	bl	84ad8 <__malloc_unlock>
   84604:	3408      	adds	r4, #8
   84606:	4620      	mov	r0, r4
   84608:	b003      	add	sp, #12
   8460a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8460e:	68bc      	ldr	r4, [r7, #8]
   84610:	6863      	ldr	r3, [r4, #4]
   84612:	f023 0903 	bic.w	r9, r3, #3
   84616:	45a9      	cmp	r9, r5
   84618:	d304      	bcc.n	84624 <_malloc_r+0x1e8>
   8461a:	ebc5 0309 	rsb	r3, r5, r9
   8461e:	2b0f      	cmp	r3, #15
   84620:	f300 8091 	bgt.w	84746 <_malloc_r+0x30a>
   84624:	4b51      	ldr	r3, [pc, #324]	; (8476c <_malloc_r+0x330>)
   84626:	4a52      	ldr	r2, [pc, #328]	; (84770 <_malloc_r+0x334>)
   84628:	6819      	ldr	r1, [r3, #0]
   8462a:	6813      	ldr	r3, [r2, #0]
   8462c:	eb05 0a01 	add.w	sl, r5, r1
   84630:	3301      	adds	r3, #1
   84632:	eb04 0b09 	add.w	fp, r4, r9
   84636:	f000 8161 	beq.w	848fc <_malloc_r+0x4c0>
   8463a:	f50a 5a80 	add.w	sl, sl, #4096	; 0x1000
   8463e:	f10a 0a0f 	add.w	sl, sl, #15
   84642:	f42a 6a7f 	bic.w	sl, sl, #4080	; 0xff0
   84646:	f02a 0a0f 	bic.w	sl, sl, #15
   8464a:	4630      	mov	r0, r6
   8464c:	4651      	mov	r1, sl
   8464e:	9201      	str	r2, [sp, #4]
   84650:	f000 fc24 	bl	84e9c <_sbrk_r>
   84654:	f1b0 3fff 	cmp.w	r0, #4294967295
   84658:	4680      	mov	r8, r0
   8465a:	9a01      	ldr	r2, [sp, #4]
   8465c:	f000 8101 	beq.w	84862 <_malloc_r+0x426>
   84660:	4583      	cmp	fp, r0
   84662:	f200 80fb 	bhi.w	8485c <_malloc_r+0x420>
   84666:	f8df c114 	ldr.w	ip, [pc, #276]	; 8477c <_malloc_r+0x340>
   8466a:	45c3      	cmp	fp, r8
   8466c:	f8dc 3000 	ldr.w	r3, [ip]
   84670:	4453      	add	r3, sl
   84672:	f8cc 3000 	str.w	r3, [ip]
   84676:	f000 814a 	beq.w	8490e <_malloc_r+0x4d2>
   8467a:	6812      	ldr	r2, [r2, #0]
   8467c:	493c      	ldr	r1, [pc, #240]	; (84770 <_malloc_r+0x334>)
   8467e:	3201      	adds	r2, #1
   84680:	bf1b      	ittet	ne
   84682:	ebcb 0b08 	rsbne	fp, fp, r8
   84686:	445b      	addne	r3, fp
   84688:	f8c1 8000 	streq.w	r8, [r1]
   8468c:	f8cc 3000 	strne.w	r3, [ip]
   84690:	f018 0307 	ands.w	r3, r8, #7
   84694:	f000 8114 	beq.w	848c0 <_malloc_r+0x484>
   84698:	f1c3 0208 	rsb	r2, r3, #8
   8469c:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
   846a0:	4490      	add	r8, r2
   846a2:	3308      	adds	r3, #8
   846a4:	44c2      	add	sl, r8
   846a6:	f3ca 0a0b 	ubfx	sl, sl, #0, #12
   846aa:	ebca 0a03 	rsb	sl, sl, r3
   846ae:	4651      	mov	r1, sl
   846b0:	4630      	mov	r0, r6
   846b2:	f8cd c004 	str.w	ip, [sp, #4]
   846b6:	f000 fbf1 	bl	84e9c <_sbrk_r>
   846ba:	1c43      	adds	r3, r0, #1
   846bc:	f8dd c004 	ldr.w	ip, [sp, #4]
   846c0:	f000 8135 	beq.w	8492e <_malloc_r+0x4f2>
   846c4:	ebc8 0200 	rsb	r2, r8, r0
   846c8:	4452      	add	r2, sl
   846ca:	f042 0201 	orr.w	r2, r2, #1
   846ce:	f8dc 3000 	ldr.w	r3, [ip]
   846d2:	42bc      	cmp	r4, r7
   846d4:	4453      	add	r3, sl
   846d6:	f8c7 8008 	str.w	r8, [r7, #8]
   846da:	f8cc 3000 	str.w	r3, [ip]
   846de:	f8c8 2004 	str.w	r2, [r8, #4]
   846e2:	f8df a098 	ldr.w	sl, [pc, #152]	; 8477c <_malloc_r+0x340>
   846e6:	d015      	beq.n	84714 <_malloc_r+0x2d8>
   846e8:	f1b9 0f0f 	cmp.w	r9, #15
   846ec:	f240 80eb 	bls.w	848c6 <_malloc_r+0x48a>
   846f0:	6861      	ldr	r1, [r4, #4]
   846f2:	f1a9 020c 	sub.w	r2, r9, #12
   846f6:	f022 0207 	bic.w	r2, r2, #7
   846fa:	f001 0101 	and.w	r1, r1, #1
   846fe:	ea42 0e01 	orr.w	lr, r2, r1
   84702:	2005      	movs	r0, #5
   84704:	18a1      	adds	r1, r4, r2
   84706:	2a0f      	cmp	r2, #15
   84708:	f8c4 e004 	str.w	lr, [r4, #4]
   8470c:	6048      	str	r0, [r1, #4]
   8470e:	6088      	str	r0, [r1, #8]
   84710:	f200 8111 	bhi.w	84936 <_malloc_r+0x4fa>
   84714:	4a17      	ldr	r2, [pc, #92]	; (84774 <_malloc_r+0x338>)
   84716:	68bc      	ldr	r4, [r7, #8]
   84718:	6811      	ldr	r1, [r2, #0]
   8471a:	428b      	cmp	r3, r1
   8471c:	bf88      	it	hi
   8471e:	6013      	strhi	r3, [r2, #0]
   84720:	4a15      	ldr	r2, [pc, #84]	; (84778 <_malloc_r+0x33c>)
   84722:	6811      	ldr	r1, [r2, #0]
   84724:	428b      	cmp	r3, r1
   84726:	bf88      	it	hi
   84728:	6013      	strhi	r3, [r2, #0]
   8472a:	6862      	ldr	r2, [r4, #4]
   8472c:	f022 0203 	bic.w	r2, r2, #3
   84730:	4295      	cmp	r5, r2
   84732:	ebc5 0302 	rsb	r3, r5, r2
   84736:	d801      	bhi.n	8473c <_malloc_r+0x300>
   84738:	2b0f      	cmp	r3, #15
   8473a:	dc04      	bgt.n	84746 <_malloc_r+0x30a>
   8473c:	4630      	mov	r0, r6
   8473e:	f000 f9cb 	bl	84ad8 <__malloc_unlock>
   84742:	2400      	movs	r4, #0
   84744:	e6a6      	b.n	84494 <_malloc_r+0x58>
   84746:	f045 0201 	orr.w	r2, r5, #1
   8474a:	f043 0301 	orr.w	r3, r3, #1
   8474e:	4425      	add	r5, r4
   84750:	6062      	str	r2, [r4, #4]
   84752:	4630      	mov	r0, r6
   84754:	60bd      	str	r5, [r7, #8]
   84756:	606b      	str	r3, [r5, #4]
   84758:	f000 f9be 	bl	84ad8 <__malloc_unlock>
   8475c:	3408      	adds	r4, #8
   8475e:	4620      	mov	r0, r4
   84760:	b003      	add	sp, #12
   84762:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84766:	bf00      	nop
   84768:	20070590 	.word	0x20070590
   8476c:	20078c8c 	.word	0x20078c8c
   84770:	2007099c 	.word	0x2007099c
   84774:	20078c88 	.word	0x20078c88
   84778:	20078c84 	.word	0x20078c84
   8477c:	20078c90 	.word	0x20078c90
   84780:	f1bc 0f14 	cmp.w	ip, #20
   84784:	d961      	bls.n	8484a <_malloc_r+0x40e>
   84786:	f1bc 0f54 	cmp.w	ip, #84	; 0x54
   8478a:	f200 808f 	bhi.w	848ac <_malloc_r+0x470>
   8478e:	ea4f 3c15 	mov.w	ip, r5, lsr #12
   84792:	f10c 0c6e 	add.w	ip, ip, #110	; 0x6e
   84796:	ea4f 014c 	mov.w	r1, ip, lsl #1
   8479a:	e697      	b.n	844cc <_malloc_r+0x90>
   8479c:	0a4b      	lsrs	r3, r1, #9
   8479e:	2b04      	cmp	r3, #4
   847a0:	d958      	bls.n	84854 <_malloc_r+0x418>
   847a2:	2b14      	cmp	r3, #20
   847a4:	f200 80ad 	bhi.w	84902 <_malloc_r+0x4c6>
   847a8:	f103 025b 	add.w	r2, r3, #91	; 0x5b
   847ac:	0050      	lsls	r0, r2, #1
   847ae:	eb07 0080 	add.w	r0, r7, r0, lsl #2
   847b2:	6883      	ldr	r3, [r0, #8]
   847b4:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 84970 <_malloc_r+0x534>
   847b8:	4283      	cmp	r3, r0
   847ba:	f000 808a 	beq.w	848d2 <_malloc_r+0x496>
   847be:	685a      	ldr	r2, [r3, #4]
   847c0:	f022 0203 	bic.w	r2, r2, #3
   847c4:	4291      	cmp	r1, r2
   847c6:	d202      	bcs.n	847ce <_malloc_r+0x392>
   847c8:	689b      	ldr	r3, [r3, #8]
   847ca:	4298      	cmp	r0, r3
   847cc:	d1f7      	bne.n	847be <_malloc_r+0x382>
   847ce:	68d9      	ldr	r1, [r3, #12]
   847d0:	687a      	ldr	r2, [r7, #4]
   847d2:	60e1      	str	r1, [r4, #12]
   847d4:	60a3      	str	r3, [r4, #8]
   847d6:	608c      	str	r4, [r1, #8]
   847d8:	60dc      	str	r4, [r3, #12]
   847da:	e6b6      	b.n	8454a <_malloc_r+0x10e>
   847dc:	f045 0701 	orr.w	r7, r5, #1
   847e0:	f042 0101 	orr.w	r1, r2, #1
   847e4:	4425      	add	r5, r4
   847e6:	6067      	str	r7, [r4, #4]
   847e8:	4630      	mov	r0, r6
   847ea:	615d      	str	r5, [r3, #20]
   847ec:	611d      	str	r5, [r3, #16]
   847ee:	f8c5 e00c 	str.w	lr, [r5, #12]
   847f2:	f8c5 e008 	str.w	lr, [r5, #8]
   847f6:	6069      	str	r1, [r5, #4]
   847f8:	50aa      	str	r2, [r5, r2]
   847fa:	3408      	adds	r4, #8
   847fc:	f000 f96c 	bl	84ad8 <__malloc_unlock>
   84800:	e648      	b.n	84494 <_malloc_r+0x58>
   84802:	685a      	ldr	r2, [r3, #4]
   84804:	e6a1      	b.n	8454a <_malloc_r+0x10e>
   84806:	f109 0901 	add.w	r9, r9, #1
   8480a:	f019 0f03 	tst.w	r9, #3
   8480e:	f104 0408 	add.w	r4, r4, #8
   84812:	f47f aead 	bne.w	84570 <_malloc_r+0x134>
   84816:	e02d      	b.n	84874 <_malloc_r+0x438>
   84818:	f104 0308 	add.w	r3, r4, #8
   8481c:	6964      	ldr	r4, [r4, #20]
   8481e:	42a3      	cmp	r3, r4
   84820:	bf08      	it	eq
   84822:	f10c 0c02 	addeq.w	ip, ip, #2
   84826:	f43f ae67 	beq.w	844f8 <_malloc_r+0xbc>
   8482a:	e623      	b.n	84474 <_malloc_r+0x38>
   8482c:	4419      	add	r1, r3
   8482e:	6848      	ldr	r0, [r1, #4]
   84830:	461c      	mov	r4, r3
   84832:	f854 2f08 	ldr.w	r2, [r4, #8]!
   84836:	68db      	ldr	r3, [r3, #12]
   84838:	f040 0501 	orr.w	r5, r0, #1
   8483c:	604d      	str	r5, [r1, #4]
   8483e:	4630      	mov	r0, r6
   84840:	60d3      	str	r3, [r2, #12]
   84842:	609a      	str	r2, [r3, #8]
   84844:	f000 f948 	bl	84ad8 <__malloc_unlock>
   84848:	e624      	b.n	84494 <_malloc_r+0x58>
   8484a:	f10c 0c5b 	add.w	ip, ip, #91	; 0x5b
   8484e:	ea4f 014c 	mov.w	r1, ip, lsl #1
   84852:	e63b      	b.n	844cc <_malloc_r+0x90>
   84854:	098a      	lsrs	r2, r1, #6
   84856:	3238      	adds	r2, #56	; 0x38
   84858:	0050      	lsls	r0, r2, #1
   8485a:	e7a8      	b.n	847ae <_malloc_r+0x372>
   8485c:	42bc      	cmp	r4, r7
   8485e:	f43f af02 	beq.w	84666 <_malloc_r+0x22a>
   84862:	68bc      	ldr	r4, [r7, #8]
   84864:	6862      	ldr	r2, [r4, #4]
   84866:	f022 0203 	bic.w	r2, r2, #3
   8486a:	e761      	b.n	84730 <_malloc_r+0x2f4>
   8486c:	f8d8 8000 	ldr.w	r8, [r8]
   84870:	4598      	cmp	r8, r3
   84872:	d17a      	bne.n	8496a <_malloc_r+0x52e>
   84874:	f01c 0f03 	tst.w	ip, #3
   84878:	f1a8 0308 	sub.w	r3, r8, #8
   8487c:	f10c 3cff 	add.w	ip, ip, #4294967295
   84880:	d1f4      	bne.n	8486c <_malloc_r+0x430>
   84882:	687b      	ldr	r3, [r7, #4]
   84884:	ea23 0300 	bic.w	r3, r3, r0
   84888:	607b      	str	r3, [r7, #4]
   8488a:	0040      	lsls	r0, r0, #1
   8488c:	4298      	cmp	r0, r3
   8488e:	f63f aebe 	bhi.w	8460e <_malloc_r+0x1d2>
   84892:	2800      	cmp	r0, #0
   84894:	f43f aebb 	beq.w	8460e <_malloc_r+0x1d2>
   84898:	4203      	tst	r3, r0
   8489a:	46cc      	mov	ip, r9
   8489c:	f47f ae64 	bne.w	84568 <_malloc_r+0x12c>
   848a0:	0040      	lsls	r0, r0, #1
   848a2:	4203      	tst	r3, r0
   848a4:	f10c 0c04 	add.w	ip, ip, #4
   848a8:	d0fa      	beq.n	848a0 <_malloc_r+0x464>
   848aa:	e65d      	b.n	84568 <_malloc_r+0x12c>
   848ac:	f5bc 7faa 	cmp.w	ip, #340	; 0x154
   848b0:	d819      	bhi.n	848e6 <_malloc_r+0x4aa>
   848b2:	ea4f 3cd5 	mov.w	ip, r5, lsr #15
   848b6:	f10c 0c77 	add.w	ip, ip, #119	; 0x77
   848ba:	ea4f 014c 	mov.w	r1, ip, lsl #1
   848be:	e605      	b.n	844cc <_malloc_r+0x90>
   848c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   848c4:	e6ee      	b.n	846a4 <_malloc_r+0x268>
   848c6:	2301      	movs	r3, #1
   848c8:	f8c8 3004 	str.w	r3, [r8, #4]
   848cc:	4644      	mov	r4, r8
   848ce:	2200      	movs	r2, #0
   848d0:	e72e      	b.n	84730 <_malloc_r+0x2f4>
   848d2:	1092      	asrs	r2, r2, #2
   848d4:	2001      	movs	r0, #1
   848d6:	4090      	lsls	r0, r2
   848d8:	f8d8 2004 	ldr.w	r2, [r8, #4]
   848dc:	4619      	mov	r1, r3
   848de:	4302      	orrs	r2, r0
   848e0:	f8c8 2004 	str.w	r2, [r8, #4]
   848e4:	e775      	b.n	847d2 <_malloc_r+0x396>
   848e6:	f240 5354 	movw	r3, #1364	; 0x554
   848ea:	459c      	cmp	ip, r3
   848ec:	d81b      	bhi.n	84926 <_malloc_r+0x4ea>
   848ee:	ea4f 4c95 	mov.w	ip, r5, lsr #18
   848f2:	f10c 0c7c 	add.w	ip, ip, #124	; 0x7c
   848f6:	ea4f 014c 	mov.w	r1, ip, lsl #1
   848fa:	e5e7      	b.n	844cc <_malloc_r+0x90>
   848fc:	f10a 0a10 	add.w	sl, sl, #16
   84900:	e6a3      	b.n	8464a <_malloc_r+0x20e>
   84902:	2b54      	cmp	r3, #84	; 0x54
   84904:	d81f      	bhi.n	84946 <_malloc_r+0x50a>
   84906:	0b0a      	lsrs	r2, r1, #12
   84908:	326e      	adds	r2, #110	; 0x6e
   8490a:	0050      	lsls	r0, r2, #1
   8490c:	e74f      	b.n	847ae <_malloc_r+0x372>
   8490e:	f3cb 010b 	ubfx	r1, fp, #0, #12
   84912:	2900      	cmp	r1, #0
   84914:	f47f aeb1 	bne.w	8467a <_malloc_r+0x23e>
   84918:	eb0a 0109 	add.w	r1, sl, r9
   8491c:	68ba      	ldr	r2, [r7, #8]
   8491e:	f041 0101 	orr.w	r1, r1, #1
   84922:	6051      	str	r1, [r2, #4]
   84924:	e6f6      	b.n	84714 <_malloc_r+0x2d8>
   84926:	21fc      	movs	r1, #252	; 0xfc
   84928:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
   8492c:	e5ce      	b.n	844cc <_malloc_r+0x90>
   8492e:	2201      	movs	r2, #1
   84930:	f04f 0a00 	mov.w	sl, #0
   84934:	e6cb      	b.n	846ce <_malloc_r+0x292>
   84936:	f104 0108 	add.w	r1, r4, #8
   8493a:	4630      	mov	r0, r6
   8493c:	f7ff fa80 	bl	83e40 <_free_r>
   84940:	f8da 3000 	ldr.w	r3, [sl]
   84944:	e6e6      	b.n	84714 <_malloc_r+0x2d8>
   84946:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   8494a:	d803      	bhi.n	84954 <_malloc_r+0x518>
   8494c:	0bca      	lsrs	r2, r1, #15
   8494e:	3277      	adds	r2, #119	; 0x77
   84950:	0050      	lsls	r0, r2, #1
   84952:	e72c      	b.n	847ae <_malloc_r+0x372>
   84954:	f240 5254 	movw	r2, #1364	; 0x554
   84958:	4293      	cmp	r3, r2
   8495a:	d803      	bhi.n	84964 <_malloc_r+0x528>
   8495c:	0c8a      	lsrs	r2, r1, #18
   8495e:	327c      	adds	r2, #124	; 0x7c
   84960:	0050      	lsls	r0, r2, #1
   84962:	e724      	b.n	847ae <_malloc_r+0x372>
   84964:	20fc      	movs	r0, #252	; 0xfc
   84966:	227e      	movs	r2, #126	; 0x7e
   84968:	e721      	b.n	847ae <_malloc_r+0x372>
   8496a:	687b      	ldr	r3, [r7, #4]
   8496c:	e78d      	b.n	8488a <_malloc_r+0x44e>
   8496e:	bf00      	nop
   84970:	20070590 	.word	0x20070590

00084974 <memchr>:
   84974:	0783      	lsls	r3, r0, #30
   84976:	b470      	push	{r4, r5, r6}
   84978:	b2c9      	uxtb	r1, r1
   8497a:	d040      	beq.n	849fe <memchr+0x8a>
   8497c:	1e54      	subs	r4, r2, #1
   8497e:	b32a      	cbz	r2, 849cc <memchr+0x58>
   84980:	7803      	ldrb	r3, [r0, #0]
   84982:	428b      	cmp	r3, r1
   84984:	d023      	beq.n	849ce <memchr+0x5a>
   84986:	1c43      	adds	r3, r0, #1
   84988:	e004      	b.n	84994 <memchr+0x20>
   8498a:	b1fc      	cbz	r4, 849cc <memchr+0x58>
   8498c:	7805      	ldrb	r5, [r0, #0]
   8498e:	4614      	mov	r4, r2
   84990:	428d      	cmp	r5, r1
   84992:	d01c      	beq.n	849ce <memchr+0x5a>
   84994:	f013 0f03 	tst.w	r3, #3
   84998:	4618      	mov	r0, r3
   8499a:	f104 32ff 	add.w	r2, r4, #4294967295
   8499e:	f103 0301 	add.w	r3, r3, #1
   849a2:	d1f2      	bne.n	8498a <memchr+0x16>
   849a4:	2c03      	cmp	r4, #3
   849a6:	d814      	bhi.n	849d2 <memchr+0x5e>
   849a8:	1e65      	subs	r5, r4, #1
   849aa:	b354      	cbz	r4, 84a02 <memchr+0x8e>
   849ac:	7803      	ldrb	r3, [r0, #0]
   849ae:	428b      	cmp	r3, r1
   849b0:	d00d      	beq.n	849ce <memchr+0x5a>
   849b2:	1c42      	adds	r2, r0, #1
   849b4:	2300      	movs	r3, #0
   849b6:	e002      	b.n	849be <memchr+0x4a>
   849b8:	7804      	ldrb	r4, [r0, #0]
   849ba:	428c      	cmp	r4, r1
   849bc:	d007      	beq.n	849ce <memchr+0x5a>
   849be:	42ab      	cmp	r3, r5
   849c0:	4610      	mov	r0, r2
   849c2:	f103 0301 	add.w	r3, r3, #1
   849c6:	f102 0201 	add.w	r2, r2, #1
   849ca:	d1f5      	bne.n	849b8 <memchr+0x44>
   849cc:	2000      	movs	r0, #0
   849ce:	bc70      	pop	{r4, r5, r6}
   849d0:	4770      	bx	lr
   849d2:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
   849d6:	4603      	mov	r3, r0
   849d8:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
   849dc:	681a      	ldr	r2, [r3, #0]
   849de:	4618      	mov	r0, r3
   849e0:	4072      	eors	r2, r6
   849e2:	f1a2 3501 	sub.w	r5, r2, #16843009	; 0x1010101
   849e6:	ea25 0202 	bic.w	r2, r5, r2
   849ea:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   849ee:	f103 0304 	add.w	r3, r3, #4
   849f2:	d1d9      	bne.n	849a8 <memchr+0x34>
   849f4:	3c04      	subs	r4, #4
   849f6:	2c03      	cmp	r4, #3
   849f8:	4618      	mov	r0, r3
   849fa:	d8ef      	bhi.n	849dc <memchr+0x68>
   849fc:	e7d4      	b.n	849a8 <memchr+0x34>
   849fe:	4614      	mov	r4, r2
   84a00:	e7d0      	b.n	849a4 <memchr+0x30>
   84a02:	4620      	mov	r0, r4
   84a04:	e7e3      	b.n	849ce <memchr+0x5a>
   84a06:	bf00      	nop

00084a08 <memmove>:
   84a08:	4288      	cmp	r0, r1
   84a0a:	b4f0      	push	{r4, r5, r6, r7}
   84a0c:	d910      	bls.n	84a30 <memmove+0x28>
   84a0e:	188c      	adds	r4, r1, r2
   84a10:	42a0      	cmp	r0, r4
   84a12:	d20d      	bcs.n	84a30 <memmove+0x28>
   84a14:	1885      	adds	r5, r0, r2
   84a16:	1e53      	subs	r3, r2, #1
   84a18:	b142      	cbz	r2, 84a2c <memmove+0x24>
   84a1a:	4621      	mov	r1, r4
   84a1c:	462a      	mov	r2, r5
   84a1e:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
   84a22:	3b01      	subs	r3, #1
   84a24:	f802 4d01 	strb.w	r4, [r2, #-1]!
   84a28:	1c5c      	adds	r4, r3, #1
   84a2a:	d1f8      	bne.n	84a1e <memmove+0x16>
   84a2c:	bcf0      	pop	{r4, r5, r6, r7}
   84a2e:	4770      	bx	lr
   84a30:	2a0f      	cmp	r2, #15
   84a32:	d944      	bls.n	84abe <memmove+0xb6>
   84a34:	ea40 0301 	orr.w	r3, r0, r1
   84a38:	079b      	lsls	r3, r3, #30
   84a3a:	d144      	bne.n	84ac6 <memmove+0xbe>
   84a3c:	f1a2 0710 	sub.w	r7, r2, #16
   84a40:	093f      	lsrs	r7, r7, #4
   84a42:	eb00 1607 	add.w	r6, r0, r7, lsl #4
   84a46:	3610      	adds	r6, #16
   84a48:	460c      	mov	r4, r1
   84a4a:	4603      	mov	r3, r0
   84a4c:	6825      	ldr	r5, [r4, #0]
   84a4e:	3310      	adds	r3, #16
   84a50:	f843 5c10 	str.w	r5, [r3, #-16]
   84a54:	6865      	ldr	r5, [r4, #4]
   84a56:	3410      	adds	r4, #16
   84a58:	f843 5c0c 	str.w	r5, [r3, #-12]
   84a5c:	f854 5c08 	ldr.w	r5, [r4, #-8]
   84a60:	f843 5c08 	str.w	r5, [r3, #-8]
   84a64:	f854 5c04 	ldr.w	r5, [r4, #-4]
   84a68:	f843 5c04 	str.w	r5, [r3, #-4]
   84a6c:	42b3      	cmp	r3, r6
   84a6e:	d1ed      	bne.n	84a4c <memmove+0x44>
   84a70:	1c7b      	adds	r3, r7, #1
   84a72:	f002 0c0f 	and.w	ip, r2, #15
   84a76:	011b      	lsls	r3, r3, #4
   84a78:	f1bc 0f03 	cmp.w	ip, #3
   84a7c:	4419      	add	r1, r3
   84a7e:	4403      	add	r3, r0
   84a80:	d923      	bls.n	84aca <memmove+0xc2>
   84a82:	460e      	mov	r6, r1
   84a84:	461d      	mov	r5, r3
   84a86:	4664      	mov	r4, ip
   84a88:	f856 7b04 	ldr.w	r7, [r6], #4
   84a8c:	3c04      	subs	r4, #4
   84a8e:	2c03      	cmp	r4, #3
   84a90:	f845 7b04 	str.w	r7, [r5], #4
   84a94:	d8f8      	bhi.n	84a88 <memmove+0x80>
   84a96:	f1ac 0404 	sub.w	r4, ip, #4
   84a9a:	f024 0403 	bic.w	r4, r4, #3
   84a9e:	3404      	adds	r4, #4
   84aa0:	f002 0203 	and.w	r2, r2, #3
   84aa4:	4423      	add	r3, r4
   84aa6:	4421      	add	r1, r4
   84aa8:	2a00      	cmp	r2, #0
   84aaa:	d0bf      	beq.n	84a2c <memmove+0x24>
   84aac:	441a      	add	r2, r3
   84aae:	f811 4b01 	ldrb.w	r4, [r1], #1
   84ab2:	f803 4b01 	strb.w	r4, [r3], #1
   84ab6:	4293      	cmp	r3, r2
   84ab8:	d1f9      	bne.n	84aae <memmove+0xa6>
   84aba:	bcf0      	pop	{r4, r5, r6, r7}
   84abc:	4770      	bx	lr
   84abe:	4603      	mov	r3, r0
   84ac0:	2a00      	cmp	r2, #0
   84ac2:	d1f3      	bne.n	84aac <memmove+0xa4>
   84ac4:	e7b2      	b.n	84a2c <memmove+0x24>
   84ac6:	4603      	mov	r3, r0
   84ac8:	e7f0      	b.n	84aac <memmove+0xa4>
   84aca:	4662      	mov	r2, ip
   84acc:	2a00      	cmp	r2, #0
   84ace:	d1ed      	bne.n	84aac <memmove+0xa4>
   84ad0:	e7ac      	b.n	84a2c <memmove+0x24>
   84ad2:	bf00      	nop

00084ad4 <__malloc_lock>:
   84ad4:	4770      	bx	lr
   84ad6:	bf00      	nop

00084ad8 <__malloc_unlock>:
   84ad8:	4770      	bx	lr
   84ada:	bf00      	nop

00084adc <_realloc_r>:
   84adc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   84ae0:	460c      	mov	r4, r1
   84ae2:	b083      	sub	sp, #12
   84ae4:	4690      	mov	r8, r2
   84ae6:	4681      	mov	r9, r0
   84ae8:	2900      	cmp	r1, #0
   84aea:	f000 80ba 	beq.w	84c62 <_realloc_r+0x186>
   84aee:	f7ff fff1 	bl	84ad4 <__malloc_lock>
   84af2:	f108 060b 	add.w	r6, r8, #11
   84af6:	f854 3c04 	ldr.w	r3, [r4, #-4]
   84afa:	2e16      	cmp	r6, #22
   84afc:	f023 0503 	bic.w	r5, r3, #3
   84b00:	f1a4 0708 	sub.w	r7, r4, #8
   84b04:	d84b      	bhi.n	84b9e <_realloc_r+0xc2>
   84b06:	2110      	movs	r1, #16
   84b08:	460e      	mov	r6, r1
   84b0a:	45b0      	cmp	r8, r6
   84b0c:	d84c      	bhi.n	84ba8 <_realloc_r+0xcc>
   84b0e:	428d      	cmp	r5, r1
   84b10:	da51      	bge.n	84bb6 <_realloc_r+0xda>
   84b12:	f8df b384 	ldr.w	fp, [pc, #900]	; 84e98 <_realloc_r+0x3bc>
   84b16:	1978      	adds	r0, r7, r5
   84b18:	f8db e008 	ldr.w	lr, [fp, #8]
   84b1c:	4586      	cmp	lr, r0
   84b1e:	f000 80a6 	beq.w	84c6e <_realloc_r+0x192>
   84b22:	6842      	ldr	r2, [r0, #4]
   84b24:	f022 0c01 	bic.w	ip, r2, #1
   84b28:	4484      	add	ip, r0
   84b2a:	f8dc c004 	ldr.w	ip, [ip, #4]
   84b2e:	f01c 0f01 	tst.w	ip, #1
   84b32:	d054      	beq.n	84bde <_realloc_r+0x102>
   84b34:	2200      	movs	r2, #0
   84b36:	4610      	mov	r0, r2
   84b38:	07db      	lsls	r3, r3, #31
   84b3a:	d46f      	bmi.n	84c1c <_realloc_r+0x140>
   84b3c:	f854 3c08 	ldr.w	r3, [r4, #-8]
   84b40:	ebc3 0a07 	rsb	sl, r3, r7
   84b44:	f8da 3004 	ldr.w	r3, [sl, #4]
   84b48:	f023 0303 	bic.w	r3, r3, #3
   84b4c:	442b      	add	r3, r5
   84b4e:	2800      	cmp	r0, #0
   84b50:	d062      	beq.n	84c18 <_realloc_r+0x13c>
   84b52:	4570      	cmp	r0, lr
   84b54:	f000 80e9 	beq.w	84d2a <_realloc_r+0x24e>
   84b58:	eb02 0e03 	add.w	lr, r2, r3
   84b5c:	458e      	cmp	lr, r1
   84b5e:	db5b      	blt.n	84c18 <_realloc_r+0x13c>
   84b60:	68c3      	ldr	r3, [r0, #12]
   84b62:	6882      	ldr	r2, [r0, #8]
   84b64:	46d0      	mov	r8, sl
   84b66:	60d3      	str	r3, [r2, #12]
   84b68:	609a      	str	r2, [r3, #8]
   84b6a:	f858 1f08 	ldr.w	r1, [r8, #8]!
   84b6e:	f8da 300c 	ldr.w	r3, [sl, #12]
   84b72:	1f2a      	subs	r2, r5, #4
   84b74:	2a24      	cmp	r2, #36	; 0x24
   84b76:	60cb      	str	r3, [r1, #12]
   84b78:	6099      	str	r1, [r3, #8]
   84b7a:	f200 8123 	bhi.w	84dc4 <_realloc_r+0x2e8>
   84b7e:	2a13      	cmp	r2, #19
   84b80:	f240 80b0 	bls.w	84ce4 <_realloc_r+0x208>
   84b84:	6823      	ldr	r3, [r4, #0]
   84b86:	2a1b      	cmp	r2, #27
   84b88:	f8ca 3008 	str.w	r3, [sl, #8]
   84b8c:	6863      	ldr	r3, [r4, #4]
   84b8e:	f8ca 300c 	str.w	r3, [sl, #12]
   84b92:	f200 812b 	bhi.w	84dec <_realloc_r+0x310>
   84b96:	3408      	adds	r4, #8
   84b98:	f10a 0310 	add.w	r3, sl, #16
   84b9c:	e0a3      	b.n	84ce6 <_realloc_r+0x20a>
   84b9e:	f026 0607 	bic.w	r6, r6, #7
   84ba2:	2e00      	cmp	r6, #0
   84ba4:	4631      	mov	r1, r6
   84ba6:	dab0      	bge.n	84b0a <_realloc_r+0x2e>
   84ba8:	230c      	movs	r3, #12
   84baa:	2000      	movs	r0, #0
   84bac:	f8c9 3000 	str.w	r3, [r9]
   84bb0:	b003      	add	sp, #12
   84bb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84bb6:	46a0      	mov	r8, r4
   84bb8:	1baa      	subs	r2, r5, r6
   84bba:	2a0f      	cmp	r2, #15
   84bbc:	f003 0301 	and.w	r3, r3, #1
   84bc0:	d81a      	bhi.n	84bf8 <_realloc_r+0x11c>
   84bc2:	432b      	orrs	r3, r5
   84bc4:	607b      	str	r3, [r7, #4]
   84bc6:	443d      	add	r5, r7
   84bc8:	686b      	ldr	r3, [r5, #4]
   84bca:	f043 0301 	orr.w	r3, r3, #1
   84bce:	606b      	str	r3, [r5, #4]
   84bd0:	4648      	mov	r0, r9
   84bd2:	f7ff ff81 	bl	84ad8 <__malloc_unlock>
   84bd6:	4640      	mov	r0, r8
   84bd8:	b003      	add	sp, #12
   84bda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84bde:	f022 0203 	bic.w	r2, r2, #3
   84be2:	eb02 0c05 	add.w	ip, r2, r5
   84be6:	458c      	cmp	ip, r1
   84be8:	dba6      	blt.n	84b38 <_realloc_r+0x5c>
   84bea:	68c2      	ldr	r2, [r0, #12]
   84bec:	6881      	ldr	r1, [r0, #8]
   84bee:	46a0      	mov	r8, r4
   84bf0:	60ca      	str	r2, [r1, #12]
   84bf2:	4665      	mov	r5, ip
   84bf4:	6091      	str	r1, [r2, #8]
   84bf6:	e7df      	b.n	84bb8 <_realloc_r+0xdc>
   84bf8:	19b9      	adds	r1, r7, r6
   84bfa:	4333      	orrs	r3, r6
   84bfc:	f042 0001 	orr.w	r0, r2, #1
   84c00:	607b      	str	r3, [r7, #4]
   84c02:	440a      	add	r2, r1
   84c04:	6048      	str	r0, [r1, #4]
   84c06:	6853      	ldr	r3, [r2, #4]
   84c08:	3108      	adds	r1, #8
   84c0a:	f043 0301 	orr.w	r3, r3, #1
   84c0e:	6053      	str	r3, [r2, #4]
   84c10:	4648      	mov	r0, r9
   84c12:	f7ff f915 	bl	83e40 <_free_r>
   84c16:	e7db      	b.n	84bd0 <_realloc_r+0xf4>
   84c18:	428b      	cmp	r3, r1
   84c1a:	da33      	bge.n	84c84 <_realloc_r+0x1a8>
   84c1c:	4641      	mov	r1, r8
   84c1e:	4648      	mov	r0, r9
   84c20:	f7ff fc0c 	bl	8443c <_malloc_r>
   84c24:	4680      	mov	r8, r0
   84c26:	2800      	cmp	r0, #0
   84c28:	d0d2      	beq.n	84bd0 <_realloc_r+0xf4>
   84c2a:	f854 3c04 	ldr.w	r3, [r4, #-4]
   84c2e:	f1a0 0108 	sub.w	r1, r0, #8
   84c32:	f023 0201 	bic.w	r2, r3, #1
   84c36:	443a      	add	r2, r7
   84c38:	4291      	cmp	r1, r2
   84c3a:	f000 80bc 	beq.w	84db6 <_realloc_r+0x2da>
   84c3e:	1f2a      	subs	r2, r5, #4
   84c40:	2a24      	cmp	r2, #36	; 0x24
   84c42:	d86e      	bhi.n	84d22 <_realloc_r+0x246>
   84c44:	2a13      	cmp	r2, #19
   84c46:	d842      	bhi.n	84cce <_realloc_r+0x1f2>
   84c48:	4603      	mov	r3, r0
   84c4a:	4622      	mov	r2, r4
   84c4c:	6811      	ldr	r1, [r2, #0]
   84c4e:	6019      	str	r1, [r3, #0]
   84c50:	6851      	ldr	r1, [r2, #4]
   84c52:	6059      	str	r1, [r3, #4]
   84c54:	6892      	ldr	r2, [r2, #8]
   84c56:	609a      	str	r2, [r3, #8]
   84c58:	4621      	mov	r1, r4
   84c5a:	4648      	mov	r0, r9
   84c5c:	f7ff f8f0 	bl	83e40 <_free_r>
   84c60:	e7b6      	b.n	84bd0 <_realloc_r+0xf4>
   84c62:	4611      	mov	r1, r2
   84c64:	b003      	add	sp, #12
   84c66:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   84c6a:	f7ff bbe7 	b.w	8443c <_malloc_r>
   84c6e:	f8de 2004 	ldr.w	r2, [lr, #4]
   84c72:	f106 0c10 	add.w	ip, r6, #16
   84c76:	f022 0203 	bic.w	r2, r2, #3
   84c7a:	1950      	adds	r0, r2, r5
   84c7c:	4560      	cmp	r0, ip
   84c7e:	da3d      	bge.n	84cfc <_realloc_r+0x220>
   84c80:	4670      	mov	r0, lr
   84c82:	e759      	b.n	84b38 <_realloc_r+0x5c>
   84c84:	46d0      	mov	r8, sl
   84c86:	f858 0f08 	ldr.w	r0, [r8, #8]!
   84c8a:	f8da 100c 	ldr.w	r1, [sl, #12]
   84c8e:	1f2a      	subs	r2, r5, #4
   84c90:	2a24      	cmp	r2, #36	; 0x24
   84c92:	60c1      	str	r1, [r0, #12]
   84c94:	6088      	str	r0, [r1, #8]
   84c96:	f200 80a0 	bhi.w	84dda <_realloc_r+0x2fe>
   84c9a:	2a13      	cmp	r2, #19
   84c9c:	f240 809b 	bls.w	84dd6 <_realloc_r+0x2fa>
   84ca0:	6821      	ldr	r1, [r4, #0]
   84ca2:	2a1b      	cmp	r2, #27
   84ca4:	f8ca 1008 	str.w	r1, [sl, #8]
   84ca8:	6861      	ldr	r1, [r4, #4]
   84caa:	f8ca 100c 	str.w	r1, [sl, #12]
   84cae:	f200 80b2 	bhi.w	84e16 <_realloc_r+0x33a>
   84cb2:	3408      	adds	r4, #8
   84cb4:	f10a 0210 	add.w	r2, sl, #16
   84cb8:	6821      	ldr	r1, [r4, #0]
   84cba:	461d      	mov	r5, r3
   84cbc:	6011      	str	r1, [r2, #0]
   84cbe:	6861      	ldr	r1, [r4, #4]
   84cc0:	4657      	mov	r7, sl
   84cc2:	6051      	str	r1, [r2, #4]
   84cc4:	68a3      	ldr	r3, [r4, #8]
   84cc6:	6093      	str	r3, [r2, #8]
   84cc8:	f8da 3004 	ldr.w	r3, [sl, #4]
   84ccc:	e774      	b.n	84bb8 <_realloc_r+0xdc>
   84cce:	6823      	ldr	r3, [r4, #0]
   84cd0:	2a1b      	cmp	r2, #27
   84cd2:	6003      	str	r3, [r0, #0]
   84cd4:	6863      	ldr	r3, [r4, #4]
   84cd6:	6043      	str	r3, [r0, #4]
   84cd8:	d862      	bhi.n	84da0 <_realloc_r+0x2c4>
   84cda:	f100 0308 	add.w	r3, r0, #8
   84cde:	f104 0208 	add.w	r2, r4, #8
   84ce2:	e7b3      	b.n	84c4c <_realloc_r+0x170>
   84ce4:	4643      	mov	r3, r8
   84ce6:	6822      	ldr	r2, [r4, #0]
   84ce8:	4675      	mov	r5, lr
   84cea:	601a      	str	r2, [r3, #0]
   84cec:	6862      	ldr	r2, [r4, #4]
   84cee:	4657      	mov	r7, sl
   84cf0:	605a      	str	r2, [r3, #4]
   84cf2:	68a2      	ldr	r2, [r4, #8]
   84cf4:	609a      	str	r2, [r3, #8]
   84cf6:	f8da 3004 	ldr.w	r3, [sl, #4]
   84cfa:	e75d      	b.n	84bb8 <_realloc_r+0xdc>
   84cfc:	1b83      	subs	r3, r0, r6
   84cfe:	4437      	add	r7, r6
   84d00:	f043 0301 	orr.w	r3, r3, #1
   84d04:	f8cb 7008 	str.w	r7, [fp, #8]
   84d08:	607b      	str	r3, [r7, #4]
   84d0a:	f854 3c04 	ldr.w	r3, [r4, #-4]
   84d0e:	4648      	mov	r0, r9
   84d10:	f003 0301 	and.w	r3, r3, #1
   84d14:	431e      	orrs	r6, r3
   84d16:	f844 6c04 	str.w	r6, [r4, #-4]
   84d1a:	f7ff fedd 	bl	84ad8 <__malloc_unlock>
   84d1e:	4620      	mov	r0, r4
   84d20:	e75a      	b.n	84bd8 <_realloc_r+0xfc>
   84d22:	4621      	mov	r1, r4
   84d24:	f7ff fe70 	bl	84a08 <memmove>
   84d28:	e796      	b.n	84c58 <_realloc_r+0x17c>
   84d2a:	eb02 0c03 	add.w	ip, r2, r3
   84d2e:	f106 0210 	add.w	r2, r6, #16
   84d32:	4594      	cmp	ip, r2
   84d34:	f6ff af70 	blt.w	84c18 <_realloc_r+0x13c>
   84d38:	4657      	mov	r7, sl
   84d3a:	f857 1f08 	ldr.w	r1, [r7, #8]!
   84d3e:	f8da 300c 	ldr.w	r3, [sl, #12]
   84d42:	1f2a      	subs	r2, r5, #4
   84d44:	2a24      	cmp	r2, #36	; 0x24
   84d46:	60cb      	str	r3, [r1, #12]
   84d48:	6099      	str	r1, [r3, #8]
   84d4a:	f200 8086 	bhi.w	84e5a <_realloc_r+0x37e>
   84d4e:	2a13      	cmp	r2, #19
   84d50:	d977      	bls.n	84e42 <_realloc_r+0x366>
   84d52:	6823      	ldr	r3, [r4, #0]
   84d54:	2a1b      	cmp	r2, #27
   84d56:	f8ca 3008 	str.w	r3, [sl, #8]
   84d5a:	6863      	ldr	r3, [r4, #4]
   84d5c:	f8ca 300c 	str.w	r3, [sl, #12]
   84d60:	f200 8084 	bhi.w	84e6c <_realloc_r+0x390>
   84d64:	3408      	adds	r4, #8
   84d66:	f10a 0310 	add.w	r3, sl, #16
   84d6a:	6822      	ldr	r2, [r4, #0]
   84d6c:	601a      	str	r2, [r3, #0]
   84d6e:	6862      	ldr	r2, [r4, #4]
   84d70:	605a      	str	r2, [r3, #4]
   84d72:	68a2      	ldr	r2, [r4, #8]
   84d74:	609a      	str	r2, [r3, #8]
   84d76:	ebc6 020c 	rsb	r2, r6, ip
   84d7a:	eb0a 0306 	add.w	r3, sl, r6
   84d7e:	f042 0201 	orr.w	r2, r2, #1
   84d82:	f8cb 3008 	str.w	r3, [fp, #8]
   84d86:	605a      	str	r2, [r3, #4]
   84d88:	f8da 3004 	ldr.w	r3, [sl, #4]
   84d8c:	4648      	mov	r0, r9
   84d8e:	f003 0301 	and.w	r3, r3, #1
   84d92:	431e      	orrs	r6, r3
   84d94:	f8ca 6004 	str.w	r6, [sl, #4]
   84d98:	f7ff fe9e 	bl	84ad8 <__malloc_unlock>
   84d9c:	4638      	mov	r0, r7
   84d9e:	e71b      	b.n	84bd8 <_realloc_r+0xfc>
   84da0:	68a3      	ldr	r3, [r4, #8]
   84da2:	2a24      	cmp	r2, #36	; 0x24
   84da4:	6083      	str	r3, [r0, #8]
   84da6:	68e3      	ldr	r3, [r4, #12]
   84da8:	60c3      	str	r3, [r0, #12]
   84daa:	d02b      	beq.n	84e04 <_realloc_r+0x328>
   84dac:	f100 0310 	add.w	r3, r0, #16
   84db0:	f104 0210 	add.w	r2, r4, #16
   84db4:	e74a      	b.n	84c4c <_realloc_r+0x170>
   84db6:	f850 2c04 	ldr.w	r2, [r0, #-4]
   84dba:	46a0      	mov	r8, r4
   84dbc:	f022 0203 	bic.w	r2, r2, #3
   84dc0:	4415      	add	r5, r2
   84dc2:	e6f9      	b.n	84bb8 <_realloc_r+0xdc>
   84dc4:	4621      	mov	r1, r4
   84dc6:	4640      	mov	r0, r8
   84dc8:	4675      	mov	r5, lr
   84dca:	4657      	mov	r7, sl
   84dcc:	f7ff fe1c 	bl	84a08 <memmove>
   84dd0:	f8da 3004 	ldr.w	r3, [sl, #4]
   84dd4:	e6f0      	b.n	84bb8 <_realloc_r+0xdc>
   84dd6:	4642      	mov	r2, r8
   84dd8:	e76e      	b.n	84cb8 <_realloc_r+0x1dc>
   84dda:	4621      	mov	r1, r4
   84ddc:	4640      	mov	r0, r8
   84dde:	461d      	mov	r5, r3
   84de0:	4657      	mov	r7, sl
   84de2:	f7ff fe11 	bl	84a08 <memmove>
   84de6:	f8da 3004 	ldr.w	r3, [sl, #4]
   84dea:	e6e5      	b.n	84bb8 <_realloc_r+0xdc>
   84dec:	68a3      	ldr	r3, [r4, #8]
   84dee:	2a24      	cmp	r2, #36	; 0x24
   84df0:	f8ca 3010 	str.w	r3, [sl, #16]
   84df4:	68e3      	ldr	r3, [r4, #12]
   84df6:	f8ca 3014 	str.w	r3, [sl, #20]
   84dfa:	d018      	beq.n	84e2e <_realloc_r+0x352>
   84dfc:	3410      	adds	r4, #16
   84dfe:	f10a 0318 	add.w	r3, sl, #24
   84e02:	e770      	b.n	84ce6 <_realloc_r+0x20a>
   84e04:	6922      	ldr	r2, [r4, #16]
   84e06:	f100 0318 	add.w	r3, r0, #24
   84e0a:	6102      	str	r2, [r0, #16]
   84e0c:	6961      	ldr	r1, [r4, #20]
   84e0e:	f104 0218 	add.w	r2, r4, #24
   84e12:	6141      	str	r1, [r0, #20]
   84e14:	e71a      	b.n	84c4c <_realloc_r+0x170>
   84e16:	68a1      	ldr	r1, [r4, #8]
   84e18:	2a24      	cmp	r2, #36	; 0x24
   84e1a:	f8ca 1010 	str.w	r1, [sl, #16]
   84e1e:	68e1      	ldr	r1, [r4, #12]
   84e20:	f8ca 1014 	str.w	r1, [sl, #20]
   84e24:	d00f      	beq.n	84e46 <_realloc_r+0x36a>
   84e26:	3410      	adds	r4, #16
   84e28:	f10a 0218 	add.w	r2, sl, #24
   84e2c:	e744      	b.n	84cb8 <_realloc_r+0x1dc>
   84e2e:	6922      	ldr	r2, [r4, #16]
   84e30:	f10a 0320 	add.w	r3, sl, #32
   84e34:	f8ca 2018 	str.w	r2, [sl, #24]
   84e38:	6962      	ldr	r2, [r4, #20]
   84e3a:	3418      	adds	r4, #24
   84e3c:	f8ca 201c 	str.w	r2, [sl, #28]
   84e40:	e751      	b.n	84ce6 <_realloc_r+0x20a>
   84e42:	463b      	mov	r3, r7
   84e44:	e791      	b.n	84d6a <_realloc_r+0x28e>
   84e46:	6921      	ldr	r1, [r4, #16]
   84e48:	f10a 0220 	add.w	r2, sl, #32
   84e4c:	f8ca 1018 	str.w	r1, [sl, #24]
   84e50:	6961      	ldr	r1, [r4, #20]
   84e52:	3418      	adds	r4, #24
   84e54:	f8ca 101c 	str.w	r1, [sl, #28]
   84e58:	e72e      	b.n	84cb8 <_realloc_r+0x1dc>
   84e5a:	4621      	mov	r1, r4
   84e5c:	4638      	mov	r0, r7
   84e5e:	f8cd c004 	str.w	ip, [sp, #4]
   84e62:	f7ff fdd1 	bl	84a08 <memmove>
   84e66:	f8dd c004 	ldr.w	ip, [sp, #4]
   84e6a:	e784      	b.n	84d76 <_realloc_r+0x29a>
   84e6c:	68a3      	ldr	r3, [r4, #8]
   84e6e:	2a24      	cmp	r2, #36	; 0x24
   84e70:	f8ca 3010 	str.w	r3, [sl, #16]
   84e74:	68e3      	ldr	r3, [r4, #12]
   84e76:	f8ca 3014 	str.w	r3, [sl, #20]
   84e7a:	d003      	beq.n	84e84 <_realloc_r+0x3a8>
   84e7c:	3410      	adds	r4, #16
   84e7e:	f10a 0318 	add.w	r3, sl, #24
   84e82:	e772      	b.n	84d6a <_realloc_r+0x28e>
   84e84:	6922      	ldr	r2, [r4, #16]
   84e86:	f10a 0320 	add.w	r3, sl, #32
   84e8a:	f8ca 2018 	str.w	r2, [sl, #24]
   84e8e:	6962      	ldr	r2, [r4, #20]
   84e90:	3418      	adds	r4, #24
   84e92:	f8ca 201c 	str.w	r2, [sl, #28]
   84e96:	e768      	b.n	84d6a <_realloc_r+0x28e>
   84e98:	20070590 	.word	0x20070590

00084e9c <_sbrk_r>:
   84e9c:	b538      	push	{r3, r4, r5, lr}
   84e9e:	4c07      	ldr	r4, [pc, #28]	; (84ebc <_sbrk_r+0x20>)
   84ea0:	2300      	movs	r3, #0
   84ea2:	4605      	mov	r5, r0
   84ea4:	4608      	mov	r0, r1
   84ea6:	6023      	str	r3, [r4, #0]
   84ea8:	f7fd fca2 	bl	827f0 <_sbrk>
   84eac:	1c43      	adds	r3, r0, #1
   84eae:	d000      	beq.n	84eb2 <_sbrk_r+0x16>
   84eb0:	bd38      	pop	{r3, r4, r5, pc}
   84eb2:	6823      	ldr	r3, [r4, #0]
   84eb4:	2b00      	cmp	r3, #0
   84eb6:	d0fb      	beq.n	84eb0 <_sbrk_r+0x14>
   84eb8:	602b      	str	r3, [r5, #0]
   84eba:	bd38      	pop	{r3, r4, r5, pc}
   84ebc:	20078cc4 	.word	0x20078cc4

00084ec0 <__sread>:
   84ec0:	b510      	push	{r4, lr}
   84ec2:	460c      	mov	r4, r1
   84ec4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   84ec8:	f000 f9c2 	bl	85250 <_read_r>
   84ecc:	2800      	cmp	r0, #0
   84ece:	db03      	blt.n	84ed8 <__sread+0x18>
   84ed0:	6d23      	ldr	r3, [r4, #80]	; 0x50
   84ed2:	4403      	add	r3, r0
   84ed4:	6523      	str	r3, [r4, #80]	; 0x50
   84ed6:	bd10      	pop	{r4, pc}
   84ed8:	89a3      	ldrh	r3, [r4, #12]
   84eda:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   84ede:	81a3      	strh	r3, [r4, #12]
   84ee0:	bd10      	pop	{r4, pc}
   84ee2:	bf00      	nop

00084ee4 <__swrite>:
   84ee4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   84ee8:	460c      	mov	r4, r1
   84eea:	8989      	ldrh	r1, [r1, #12]
   84eec:	461d      	mov	r5, r3
   84eee:	05cb      	lsls	r3, r1, #23
   84ef0:	4616      	mov	r6, r2
   84ef2:	4607      	mov	r7, r0
   84ef4:	d506      	bpl.n	84f04 <__swrite+0x20>
   84ef6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   84efa:	2200      	movs	r2, #0
   84efc:	2302      	movs	r3, #2
   84efe:	f000 f993 	bl	85228 <_lseek_r>
   84f02:	89a1      	ldrh	r1, [r4, #12]
   84f04:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   84f08:	81a1      	strh	r1, [r4, #12]
   84f0a:	4638      	mov	r0, r7
   84f0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   84f10:	4632      	mov	r2, r6
   84f12:	462b      	mov	r3, r5
   84f14:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   84f18:	f000 b89e 	b.w	85058 <_write_r>

00084f1c <__sseek>:
   84f1c:	b510      	push	{r4, lr}
   84f1e:	460c      	mov	r4, r1
   84f20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   84f24:	f000 f980 	bl	85228 <_lseek_r>
   84f28:	89a3      	ldrh	r3, [r4, #12]
   84f2a:	1c42      	adds	r2, r0, #1
   84f2c:	bf0e      	itee	eq
   84f2e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   84f32:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   84f36:	6520      	strne	r0, [r4, #80]	; 0x50
   84f38:	81a3      	strh	r3, [r4, #12]
   84f3a:	bd10      	pop	{r4, pc}

00084f3c <__sclose>:
   84f3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   84f40:	f000 b8f2 	b.w	85128 <_close_r>

00084f44 <__swbuf_r>:
   84f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   84f46:	460d      	mov	r5, r1
   84f48:	4614      	mov	r4, r2
   84f4a:	4607      	mov	r7, r0
   84f4c:	b110      	cbz	r0, 84f54 <__swbuf_r+0x10>
   84f4e:	6b83      	ldr	r3, [r0, #56]	; 0x38
   84f50:	2b00      	cmp	r3, #0
   84f52:	d048      	beq.n	84fe6 <__swbuf_r+0xa2>
   84f54:	89a2      	ldrh	r2, [r4, #12]
   84f56:	69a0      	ldr	r0, [r4, #24]
   84f58:	b293      	uxth	r3, r2
   84f5a:	60a0      	str	r0, [r4, #8]
   84f5c:	0718      	lsls	r0, r3, #28
   84f5e:	d538      	bpl.n	84fd2 <__swbuf_r+0x8e>
   84f60:	6926      	ldr	r6, [r4, #16]
   84f62:	2e00      	cmp	r6, #0
   84f64:	d035      	beq.n	84fd2 <__swbuf_r+0x8e>
   84f66:	0499      	lsls	r1, r3, #18
   84f68:	b2ed      	uxtb	r5, r5
   84f6a:	d515      	bpl.n	84f98 <__swbuf_r+0x54>
   84f6c:	6823      	ldr	r3, [r4, #0]
   84f6e:	6962      	ldr	r2, [r4, #20]
   84f70:	1b9e      	subs	r6, r3, r6
   84f72:	4296      	cmp	r6, r2
   84f74:	da1c      	bge.n	84fb0 <__swbuf_r+0x6c>
   84f76:	3601      	adds	r6, #1
   84f78:	68a2      	ldr	r2, [r4, #8]
   84f7a:	1c59      	adds	r1, r3, #1
   84f7c:	3a01      	subs	r2, #1
   84f7e:	60a2      	str	r2, [r4, #8]
   84f80:	6021      	str	r1, [r4, #0]
   84f82:	701d      	strb	r5, [r3, #0]
   84f84:	6963      	ldr	r3, [r4, #20]
   84f86:	42b3      	cmp	r3, r6
   84f88:	d01a      	beq.n	84fc0 <__swbuf_r+0x7c>
   84f8a:	89a3      	ldrh	r3, [r4, #12]
   84f8c:	07db      	lsls	r3, r3, #31
   84f8e:	d501      	bpl.n	84f94 <__swbuf_r+0x50>
   84f90:	2d0a      	cmp	r5, #10
   84f92:	d015      	beq.n	84fc0 <__swbuf_r+0x7c>
   84f94:	4628      	mov	r0, r5
   84f96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   84f98:	6e63      	ldr	r3, [r4, #100]	; 0x64
   84f9a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   84f9e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   84fa2:	6663      	str	r3, [r4, #100]	; 0x64
   84fa4:	6823      	ldr	r3, [r4, #0]
   84fa6:	81a2      	strh	r2, [r4, #12]
   84fa8:	6962      	ldr	r2, [r4, #20]
   84faa:	1b9e      	subs	r6, r3, r6
   84fac:	4296      	cmp	r6, r2
   84fae:	dbe2      	blt.n	84f76 <__swbuf_r+0x32>
   84fb0:	4638      	mov	r0, r7
   84fb2:	4621      	mov	r1, r4
   84fb4:	f7fe fde4 	bl	83b80 <_fflush_r>
   84fb8:	b940      	cbnz	r0, 84fcc <__swbuf_r+0x88>
   84fba:	6823      	ldr	r3, [r4, #0]
   84fbc:	2601      	movs	r6, #1
   84fbe:	e7db      	b.n	84f78 <__swbuf_r+0x34>
   84fc0:	4638      	mov	r0, r7
   84fc2:	4621      	mov	r1, r4
   84fc4:	f7fe fddc 	bl	83b80 <_fflush_r>
   84fc8:	2800      	cmp	r0, #0
   84fca:	d0e3      	beq.n	84f94 <__swbuf_r+0x50>
   84fcc:	f04f 30ff 	mov.w	r0, #4294967295
   84fd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   84fd2:	4638      	mov	r0, r7
   84fd4:	4621      	mov	r1, r4
   84fd6:	f7fe fcbd 	bl	83954 <__swsetup_r>
   84fda:	2800      	cmp	r0, #0
   84fdc:	d1f6      	bne.n	84fcc <__swbuf_r+0x88>
   84fde:	89a2      	ldrh	r2, [r4, #12]
   84fe0:	6926      	ldr	r6, [r4, #16]
   84fe2:	b293      	uxth	r3, r2
   84fe4:	e7bf      	b.n	84f66 <__swbuf_r+0x22>
   84fe6:	f7fe fde7 	bl	83bb8 <__sinit>
   84fea:	e7b3      	b.n	84f54 <__swbuf_r+0x10>

00084fec <_wcrtomb_r>:
   84fec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   84ff0:	461e      	mov	r6, r3
   84ff2:	b086      	sub	sp, #24
   84ff4:	460c      	mov	r4, r1
   84ff6:	4605      	mov	r5, r0
   84ff8:	4617      	mov	r7, r2
   84ffa:	4b0f      	ldr	r3, [pc, #60]	; (85038 <_wcrtomb_r+0x4c>)
   84ffc:	b191      	cbz	r1, 85024 <_wcrtomb_r+0x38>
   84ffe:	f8d3 8000 	ldr.w	r8, [r3]
   85002:	f7ff f999 	bl	84338 <__locale_charset>
   85006:	9600      	str	r6, [sp, #0]
   85008:	4603      	mov	r3, r0
   8500a:	4621      	mov	r1, r4
   8500c:	463a      	mov	r2, r7
   8500e:	4628      	mov	r0, r5
   85010:	47c0      	blx	r8
   85012:	1c43      	adds	r3, r0, #1
   85014:	d103      	bne.n	8501e <_wcrtomb_r+0x32>
   85016:	2200      	movs	r2, #0
   85018:	238a      	movs	r3, #138	; 0x8a
   8501a:	6032      	str	r2, [r6, #0]
   8501c:	602b      	str	r3, [r5, #0]
   8501e:	b006      	add	sp, #24
   85020:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   85024:	681f      	ldr	r7, [r3, #0]
   85026:	f7ff f987 	bl	84338 <__locale_charset>
   8502a:	9600      	str	r6, [sp, #0]
   8502c:	4603      	mov	r3, r0
   8502e:	4622      	mov	r2, r4
   85030:	4628      	mov	r0, r5
   85032:	a903      	add	r1, sp, #12
   85034:	47b8      	blx	r7
   85036:	e7ec      	b.n	85012 <_wcrtomb_r+0x26>
   85038:	200709a0 	.word	0x200709a0

0008503c <__ascii_wctomb>:
   8503c:	b121      	cbz	r1, 85048 <__ascii_wctomb+0xc>
   8503e:	2aff      	cmp	r2, #255	; 0xff
   85040:	d804      	bhi.n	8504c <__ascii_wctomb+0x10>
   85042:	700a      	strb	r2, [r1, #0]
   85044:	2001      	movs	r0, #1
   85046:	4770      	bx	lr
   85048:	4608      	mov	r0, r1
   8504a:	4770      	bx	lr
   8504c:	238a      	movs	r3, #138	; 0x8a
   8504e:	6003      	str	r3, [r0, #0]
   85050:	f04f 30ff 	mov.w	r0, #4294967295
   85054:	4770      	bx	lr
   85056:	bf00      	nop

00085058 <_write_r>:
   85058:	b570      	push	{r4, r5, r6, lr}
   8505a:	4c08      	ldr	r4, [pc, #32]	; (8507c <_write_r+0x24>)
   8505c:	4606      	mov	r6, r0
   8505e:	2500      	movs	r5, #0
   85060:	4608      	mov	r0, r1
   85062:	4611      	mov	r1, r2
   85064:	461a      	mov	r2, r3
   85066:	6025      	str	r5, [r4, #0]
   85068:	f7fb fb50 	bl	8070c <_write>
   8506c:	1c43      	adds	r3, r0, #1
   8506e:	d000      	beq.n	85072 <_write_r+0x1a>
   85070:	bd70      	pop	{r4, r5, r6, pc}
   85072:	6823      	ldr	r3, [r4, #0]
   85074:	2b00      	cmp	r3, #0
   85076:	d0fb      	beq.n	85070 <_write_r+0x18>
   85078:	6033      	str	r3, [r6, #0]
   8507a:	bd70      	pop	{r4, r5, r6, pc}
   8507c:	20078cc4 	.word	0x20078cc4

00085080 <__register_exitproc>:
   85080:	b5f0      	push	{r4, r5, r6, r7, lr}
   85082:	4c27      	ldr	r4, [pc, #156]	; (85120 <__register_exitproc+0xa0>)
   85084:	b085      	sub	sp, #20
   85086:	6826      	ldr	r6, [r4, #0]
   85088:	4607      	mov	r7, r0
   8508a:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
   8508e:	2c00      	cmp	r4, #0
   85090:	d040      	beq.n	85114 <__register_exitproc+0x94>
   85092:	6865      	ldr	r5, [r4, #4]
   85094:	2d1f      	cmp	r5, #31
   85096:	dd1e      	ble.n	850d6 <__register_exitproc+0x56>
   85098:	4822      	ldr	r0, [pc, #136]	; (85124 <__register_exitproc+0xa4>)
   8509a:	b918      	cbnz	r0, 850a4 <__register_exitproc+0x24>
   8509c:	f04f 30ff 	mov.w	r0, #4294967295
   850a0:	b005      	add	sp, #20
   850a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   850a4:	f44f 70c8 	mov.w	r0, #400	; 0x190
   850a8:	9103      	str	r1, [sp, #12]
   850aa:	9202      	str	r2, [sp, #8]
   850ac:	9301      	str	r3, [sp, #4]
   850ae:	f7ff f9bd 	bl	8442c <malloc>
   850b2:	9903      	ldr	r1, [sp, #12]
   850b4:	4604      	mov	r4, r0
   850b6:	9a02      	ldr	r2, [sp, #8]
   850b8:	9b01      	ldr	r3, [sp, #4]
   850ba:	2800      	cmp	r0, #0
   850bc:	d0ee      	beq.n	8509c <__register_exitproc+0x1c>
   850be:	f8d6 5148 	ldr.w	r5, [r6, #328]	; 0x148
   850c2:	2000      	movs	r0, #0
   850c4:	6025      	str	r5, [r4, #0]
   850c6:	6060      	str	r0, [r4, #4]
   850c8:	4605      	mov	r5, r0
   850ca:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   850ce:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
   850d2:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
   850d6:	b93f      	cbnz	r7, 850e8 <__register_exitproc+0x68>
   850d8:	1c6b      	adds	r3, r5, #1
   850da:	2000      	movs	r0, #0
   850dc:	3502      	adds	r5, #2
   850de:	6063      	str	r3, [r4, #4]
   850e0:	f844 1025 	str.w	r1, [r4, r5, lsl #2]
   850e4:	b005      	add	sp, #20
   850e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   850e8:	2601      	movs	r6, #1
   850ea:	40ae      	lsls	r6, r5
   850ec:	eb04 0085 	add.w	r0, r4, r5, lsl #2
   850f0:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
   850f4:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
   850f8:	2f02      	cmp	r7, #2
   850fa:	ea42 0206 	orr.w	r2, r2, r6
   850fe:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
   85102:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   85106:	d1e7      	bne.n	850d8 <__register_exitproc+0x58>
   85108:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   8510c:	431e      	orrs	r6, r3
   8510e:	f8c4 618c 	str.w	r6, [r4, #396]	; 0x18c
   85112:	e7e1      	b.n	850d8 <__register_exitproc+0x58>
   85114:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
   85118:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   8511c:	e7b9      	b.n	85092 <__register_exitproc+0x12>
   8511e:	bf00      	nop
   85120:	00085944 	.word	0x00085944
   85124:	0008442d 	.word	0x0008442d

00085128 <_close_r>:
   85128:	b538      	push	{r3, r4, r5, lr}
   8512a:	4c07      	ldr	r4, [pc, #28]	; (85148 <_close_r+0x20>)
   8512c:	2300      	movs	r3, #0
   8512e:	4605      	mov	r5, r0
   85130:	4608      	mov	r0, r1
   85132:	6023      	str	r3, [r4, #0]
   85134:	f7fd fb76 	bl	82824 <_close>
   85138:	1c43      	adds	r3, r0, #1
   8513a:	d000      	beq.n	8513e <_close_r+0x16>
   8513c:	bd38      	pop	{r3, r4, r5, pc}
   8513e:	6823      	ldr	r3, [r4, #0]
   85140:	2b00      	cmp	r3, #0
   85142:	d0fb      	beq.n	8513c <_close_r+0x14>
   85144:	602b      	str	r3, [r5, #0]
   85146:	bd38      	pop	{r3, r4, r5, pc}
   85148:	20078cc4 	.word	0x20078cc4

0008514c <_fclose_r>:
   8514c:	b570      	push	{r4, r5, r6, lr}
   8514e:	460c      	mov	r4, r1
   85150:	4605      	mov	r5, r0
   85152:	b131      	cbz	r1, 85162 <_fclose_r+0x16>
   85154:	b110      	cbz	r0, 8515c <_fclose_r+0x10>
   85156:	6b83      	ldr	r3, [r0, #56]	; 0x38
   85158:	2b00      	cmp	r3, #0
   8515a:	d02f      	beq.n	851bc <_fclose_r+0x70>
   8515c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   85160:	b90b      	cbnz	r3, 85166 <_fclose_r+0x1a>
   85162:	2000      	movs	r0, #0
   85164:	bd70      	pop	{r4, r5, r6, pc}
   85166:	4628      	mov	r0, r5
   85168:	4621      	mov	r1, r4
   8516a:	f7fe fd09 	bl	83b80 <_fflush_r>
   8516e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   85170:	4606      	mov	r6, r0
   85172:	b133      	cbz	r3, 85182 <_fclose_r+0x36>
   85174:	4628      	mov	r0, r5
   85176:	69e1      	ldr	r1, [r4, #28]
   85178:	4798      	blx	r3
   8517a:	2800      	cmp	r0, #0
   8517c:	bfb8      	it	lt
   8517e:	f04f 36ff 	movlt.w	r6, #4294967295
   85182:	89a3      	ldrh	r3, [r4, #12]
   85184:	061b      	lsls	r3, r3, #24
   85186:	d41c      	bmi.n	851c2 <_fclose_r+0x76>
   85188:	6b21      	ldr	r1, [r4, #48]	; 0x30
   8518a:	b141      	cbz	r1, 8519e <_fclose_r+0x52>
   8518c:	f104 0340 	add.w	r3, r4, #64	; 0x40
   85190:	4299      	cmp	r1, r3
   85192:	d002      	beq.n	8519a <_fclose_r+0x4e>
   85194:	4628      	mov	r0, r5
   85196:	f7fe fe53 	bl	83e40 <_free_r>
   8519a:	2300      	movs	r3, #0
   8519c:	6323      	str	r3, [r4, #48]	; 0x30
   8519e:	6c61      	ldr	r1, [r4, #68]	; 0x44
   851a0:	b121      	cbz	r1, 851ac <_fclose_r+0x60>
   851a2:	4628      	mov	r0, r5
   851a4:	f7fe fe4c 	bl	83e40 <_free_r>
   851a8:	2300      	movs	r3, #0
   851aa:	6463      	str	r3, [r4, #68]	; 0x44
   851ac:	f7fe fd7e 	bl	83cac <__sfp_lock_acquire>
   851b0:	2300      	movs	r3, #0
   851b2:	81a3      	strh	r3, [r4, #12]
   851b4:	f7fe fd7c 	bl	83cb0 <__sfp_lock_release>
   851b8:	4630      	mov	r0, r6
   851ba:	bd70      	pop	{r4, r5, r6, pc}
   851bc:	f7fe fcfc 	bl	83bb8 <__sinit>
   851c0:	e7cc      	b.n	8515c <_fclose_r+0x10>
   851c2:	4628      	mov	r0, r5
   851c4:	6921      	ldr	r1, [r4, #16]
   851c6:	f7fe fe3b 	bl	83e40 <_free_r>
   851ca:	e7dd      	b.n	85188 <_fclose_r+0x3c>

000851cc <fclose>:
   851cc:	4b02      	ldr	r3, [pc, #8]	; (851d8 <fclose+0xc>)
   851ce:	4601      	mov	r1, r0
   851d0:	6818      	ldr	r0, [r3, #0]
   851d2:	f7ff bfbb 	b.w	8514c <_fclose_r>
   851d6:	bf00      	nop
   851d8:	20070568 	.word	0x20070568

000851dc <_fstat_r>:
   851dc:	b538      	push	{r3, r4, r5, lr}
   851de:	4c08      	ldr	r4, [pc, #32]	; (85200 <_fstat_r+0x24>)
   851e0:	2300      	movs	r3, #0
   851e2:	4605      	mov	r5, r0
   851e4:	4608      	mov	r0, r1
   851e6:	4611      	mov	r1, r2
   851e8:	6023      	str	r3, [r4, #0]
   851ea:	f7fd fb1f 	bl	8282c <_fstat>
   851ee:	1c43      	adds	r3, r0, #1
   851f0:	d000      	beq.n	851f4 <_fstat_r+0x18>
   851f2:	bd38      	pop	{r3, r4, r5, pc}
   851f4:	6823      	ldr	r3, [r4, #0]
   851f6:	2b00      	cmp	r3, #0
   851f8:	d0fb      	beq.n	851f2 <_fstat_r+0x16>
   851fa:	602b      	str	r3, [r5, #0]
   851fc:	bd38      	pop	{r3, r4, r5, pc}
   851fe:	bf00      	nop
   85200:	20078cc4 	.word	0x20078cc4

00085204 <_isatty_r>:
   85204:	b538      	push	{r3, r4, r5, lr}
   85206:	4c07      	ldr	r4, [pc, #28]	; (85224 <_isatty_r+0x20>)
   85208:	2300      	movs	r3, #0
   8520a:	4605      	mov	r5, r0
   8520c:	4608      	mov	r0, r1
   8520e:	6023      	str	r3, [r4, #0]
   85210:	f7fd fb12 	bl	82838 <_isatty>
   85214:	1c43      	adds	r3, r0, #1
   85216:	d000      	beq.n	8521a <_isatty_r+0x16>
   85218:	bd38      	pop	{r3, r4, r5, pc}
   8521a:	6823      	ldr	r3, [r4, #0]
   8521c:	2b00      	cmp	r3, #0
   8521e:	d0fb      	beq.n	85218 <_isatty_r+0x14>
   85220:	602b      	str	r3, [r5, #0]
   85222:	bd38      	pop	{r3, r4, r5, pc}
   85224:	20078cc4 	.word	0x20078cc4

00085228 <_lseek_r>:
   85228:	b570      	push	{r4, r5, r6, lr}
   8522a:	4c08      	ldr	r4, [pc, #32]	; (8524c <_lseek_r+0x24>)
   8522c:	4606      	mov	r6, r0
   8522e:	2500      	movs	r5, #0
   85230:	4608      	mov	r0, r1
   85232:	4611      	mov	r1, r2
   85234:	461a      	mov	r2, r3
   85236:	6025      	str	r5, [r4, #0]
   85238:	f7fd fb00 	bl	8283c <_lseek>
   8523c:	1c43      	adds	r3, r0, #1
   8523e:	d000      	beq.n	85242 <_lseek_r+0x1a>
   85240:	bd70      	pop	{r4, r5, r6, pc}
   85242:	6823      	ldr	r3, [r4, #0]
   85244:	2b00      	cmp	r3, #0
   85246:	d0fb      	beq.n	85240 <_lseek_r+0x18>
   85248:	6033      	str	r3, [r6, #0]
   8524a:	bd70      	pop	{r4, r5, r6, pc}
   8524c:	20078cc4 	.word	0x20078cc4

00085250 <_read_r>:
   85250:	b570      	push	{r4, r5, r6, lr}
   85252:	4c08      	ldr	r4, [pc, #32]	; (85274 <_read_r+0x24>)
   85254:	4606      	mov	r6, r0
   85256:	2500      	movs	r5, #0
   85258:	4608      	mov	r0, r1
   8525a:	4611      	mov	r1, r2
   8525c:	461a      	mov	r2, r3
   8525e:	6025      	str	r5, [r4, #0]
   85260:	f7fb fa34 	bl	806cc <_read>
   85264:	1c43      	adds	r3, r0, #1
   85266:	d000      	beq.n	8526a <_read_r+0x1a>
   85268:	bd70      	pop	{r4, r5, r6, pc}
   8526a:	6823      	ldr	r3, [r4, #0]
   8526c:	2b00      	cmp	r3, #0
   8526e:	d0fb      	beq.n	85268 <_read_r+0x18>
   85270:	6033      	str	r3, [r6, #0]
   85272:	bd70      	pop	{r4, r5, r6, pc}
   85274:	20078cc4 	.word	0x20078cc4

00085278 <__aeabi_uldivmod>:
   85278:	b94b      	cbnz	r3, 8528e <__aeabi_uldivmod+0x16>
   8527a:	b942      	cbnz	r2, 8528e <__aeabi_uldivmod+0x16>
   8527c:	2900      	cmp	r1, #0
   8527e:	bf08      	it	eq
   85280:	2800      	cmpeq	r0, #0
   85282:	d002      	beq.n	8528a <__aeabi_uldivmod+0x12>
   85284:	f04f 31ff 	mov.w	r1, #4294967295
   85288:	4608      	mov	r0, r1
   8528a:	f000 b83b 	b.w	85304 <__aeabi_idiv0>
   8528e:	b082      	sub	sp, #8
   85290:	46ec      	mov	ip, sp
   85292:	e92d 5000 	stmdb	sp!, {ip, lr}
   85296:	f000 f81d 	bl	852d4 <__gnu_uldivmod_helper>
   8529a:	f8dd e004 	ldr.w	lr, [sp, #4]
   8529e:	b002      	add	sp, #8
   852a0:	bc0c      	pop	{r2, r3}
   852a2:	4770      	bx	lr

000852a4 <__gnu_ldivmod_helper>:
   852a4:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
   852a8:	9e08      	ldr	r6, [sp, #32]
   852aa:	4614      	mov	r4, r2
   852ac:	461d      	mov	r5, r3
   852ae:	4680      	mov	r8, r0
   852b0:	4689      	mov	r9, r1
   852b2:	f000 f829 	bl	85308 <__divdi3>
   852b6:	fb04 f301 	mul.w	r3, r4, r1
   852ba:	fba4 ab00 	umull	sl, fp, r4, r0
   852be:	fb00 3205 	mla	r2, r0, r5, r3
   852c2:	4493      	add	fp, r2
   852c4:	ebb8 080a 	subs.w	r8, r8, sl
   852c8:	eb69 090b 	sbc.w	r9, r9, fp
   852cc:	e9c6 8900 	strd	r8, r9, [r6]
   852d0:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

000852d4 <__gnu_uldivmod_helper>:
   852d4:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
   852d8:	9e08      	ldr	r6, [sp, #32]
   852da:	4614      	mov	r4, r2
   852dc:	461d      	mov	r5, r3
   852de:	4680      	mov	r8, r0
   852e0:	4689      	mov	r9, r1
   852e2:	f000 f961 	bl	855a8 <__udivdi3>
   852e6:	fb00 f505 	mul.w	r5, r0, r5
   852ea:	fba0 ab04 	umull	sl, fp, r0, r4
   852ee:	fb04 5401 	mla	r4, r4, r1, r5
   852f2:	44a3      	add	fp, r4
   852f4:	ebb8 080a 	subs.w	r8, r8, sl
   852f8:	eb69 090b 	sbc.w	r9, r9, fp
   852fc:	e9c6 8900 	strd	r8, r9, [r6]
   85300:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

00085304 <__aeabi_idiv0>:
   85304:	4770      	bx	lr
   85306:	bf00      	nop

00085308 <__divdi3>:
   85308:	2900      	cmp	r1, #0
   8530a:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   8530e:	f2c0 80a1 	blt.w	85454 <__divdi3+0x14c>
   85312:	2400      	movs	r4, #0
   85314:	2b00      	cmp	r3, #0
   85316:	f2c0 8098 	blt.w	8544a <__divdi3+0x142>
   8531a:	4615      	mov	r5, r2
   8531c:	4606      	mov	r6, r0
   8531e:	460f      	mov	r7, r1
   85320:	2b00      	cmp	r3, #0
   85322:	d13f      	bne.n	853a4 <__divdi3+0x9c>
   85324:	428a      	cmp	r2, r1
   85326:	d958      	bls.n	853da <__divdi3+0xd2>
   85328:	fab2 f382 	clz	r3, r2
   8532c:	b14b      	cbz	r3, 85342 <__divdi3+0x3a>
   8532e:	f1c3 0220 	rsb	r2, r3, #32
   85332:	fa01 f703 	lsl.w	r7, r1, r3
   85336:	fa20 f202 	lsr.w	r2, r0, r2
   8533a:	409d      	lsls	r5, r3
   8533c:	fa00 f603 	lsl.w	r6, r0, r3
   85340:	4317      	orrs	r7, r2
   85342:	0c29      	lsrs	r1, r5, #16
   85344:	fbb7 f2f1 	udiv	r2, r7, r1
   85348:	fb01 7712 	mls	r7, r1, r2, r7
   8534c:	b2a8      	uxth	r0, r5
   8534e:	fb00 f302 	mul.w	r3, r0, r2
   85352:	ea4f 4c16 	mov.w	ip, r6, lsr #16
   85356:	ea4c 4707 	orr.w	r7, ip, r7, lsl #16
   8535a:	42bb      	cmp	r3, r7
   8535c:	d909      	bls.n	85372 <__divdi3+0x6a>
   8535e:	197f      	adds	r7, r7, r5
   85360:	f102 3cff 	add.w	ip, r2, #4294967295
   85364:	f080 8105 	bcs.w	85572 <__divdi3+0x26a>
   85368:	42bb      	cmp	r3, r7
   8536a:	f240 8102 	bls.w	85572 <__divdi3+0x26a>
   8536e:	3a02      	subs	r2, #2
   85370:	442f      	add	r7, r5
   85372:	1aff      	subs	r7, r7, r3
   85374:	fbb7 f3f1 	udiv	r3, r7, r1
   85378:	fb01 7113 	mls	r1, r1, r3, r7
   8537c:	fb00 f003 	mul.w	r0, r0, r3
   85380:	b2b6      	uxth	r6, r6
   85382:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
   85386:	4288      	cmp	r0, r1
   85388:	d908      	bls.n	8539c <__divdi3+0x94>
   8538a:	1949      	adds	r1, r1, r5
   8538c:	f103 37ff 	add.w	r7, r3, #4294967295
   85390:	f080 80f1 	bcs.w	85576 <__divdi3+0x26e>
   85394:	4288      	cmp	r0, r1
   85396:	f240 80ee 	bls.w	85576 <__divdi3+0x26e>
   8539a:	3b02      	subs	r3, #2
   8539c:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   853a0:	2300      	movs	r3, #0
   853a2:	e003      	b.n	853ac <__divdi3+0xa4>
   853a4:	428b      	cmp	r3, r1
   853a6:	d90a      	bls.n	853be <__divdi3+0xb6>
   853a8:	2300      	movs	r3, #0
   853aa:	461a      	mov	r2, r3
   853ac:	4610      	mov	r0, r2
   853ae:	4619      	mov	r1, r3
   853b0:	b114      	cbz	r4, 853b8 <__divdi3+0xb0>
   853b2:	4240      	negs	r0, r0
   853b4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   853b8:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   853bc:	4770      	bx	lr
   853be:	fab3 f883 	clz	r8, r3
   853c2:	f1b8 0f00 	cmp.w	r8, #0
   853c6:	f040 8088 	bne.w	854da <__divdi3+0x1d2>
   853ca:	428b      	cmp	r3, r1
   853cc:	d302      	bcc.n	853d4 <__divdi3+0xcc>
   853ce:	4282      	cmp	r2, r0
   853d0:	f200 80e2 	bhi.w	85598 <__divdi3+0x290>
   853d4:	2300      	movs	r3, #0
   853d6:	2201      	movs	r2, #1
   853d8:	e7e8      	b.n	853ac <__divdi3+0xa4>
   853da:	b912      	cbnz	r2, 853e2 <__divdi3+0xda>
   853dc:	2301      	movs	r3, #1
   853de:	fbb3 f5f2 	udiv	r5, r3, r2
   853e2:	fab5 f285 	clz	r2, r5
   853e6:	2a00      	cmp	r2, #0
   853e8:	d13a      	bne.n	85460 <__divdi3+0x158>
   853ea:	1b7f      	subs	r7, r7, r5
   853ec:	0c28      	lsrs	r0, r5, #16
   853ee:	fa1f fc85 	uxth.w	ip, r5
   853f2:	2301      	movs	r3, #1
   853f4:	fbb7 f1f0 	udiv	r1, r7, r0
   853f8:	fb00 7711 	mls	r7, r0, r1, r7
   853fc:	fb0c f201 	mul.w	r2, ip, r1
   85400:	ea4f 4816 	mov.w	r8, r6, lsr #16
   85404:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
   85408:	42ba      	cmp	r2, r7
   8540a:	d907      	bls.n	8541c <__divdi3+0x114>
   8540c:	197f      	adds	r7, r7, r5
   8540e:	f101 38ff 	add.w	r8, r1, #4294967295
   85412:	d202      	bcs.n	8541a <__divdi3+0x112>
   85414:	42ba      	cmp	r2, r7
   85416:	f200 80c4 	bhi.w	855a2 <__divdi3+0x29a>
   8541a:	4641      	mov	r1, r8
   8541c:	1abf      	subs	r7, r7, r2
   8541e:	fbb7 f2f0 	udiv	r2, r7, r0
   85422:	fb00 7012 	mls	r0, r0, r2, r7
   85426:	fb0c fc02 	mul.w	ip, ip, r2
   8542a:	b2b6      	uxth	r6, r6
   8542c:	ea46 4000 	orr.w	r0, r6, r0, lsl #16
   85430:	4584      	cmp	ip, r0
   85432:	d907      	bls.n	85444 <__divdi3+0x13c>
   85434:	1940      	adds	r0, r0, r5
   85436:	f102 37ff 	add.w	r7, r2, #4294967295
   8543a:	d202      	bcs.n	85442 <__divdi3+0x13a>
   8543c:	4584      	cmp	ip, r0
   8543e:	f200 80ae 	bhi.w	8559e <__divdi3+0x296>
   85442:	463a      	mov	r2, r7
   85444:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   85448:	e7b0      	b.n	853ac <__divdi3+0xa4>
   8544a:	43e4      	mvns	r4, r4
   8544c:	4252      	negs	r2, r2
   8544e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   85452:	e762      	b.n	8531a <__divdi3+0x12>
   85454:	4240      	negs	r0, r0
   85456:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   8545a:	f04f 34ff 	mov.w	r4, #4294967295
   8545e:	e759      	b.n	85314 <__divdi3+0xc>
   85460:	4095      	lsls	r5, r2
   85462:	f1c2 0920 	rsb	r9, r2, #32
   85466:	fa27 f109 	lsr.w	r1, r7, r9
   8546a:	fa26 f909 	lsr.w	r9, r6, r9
   8546e:	4097      	lsls	r7, r2
   85470:	0c28      	lsrs	r0, r5, #16
   85472:	fbb1 f8f0 	udiv	r8, r1, r0
   85476:	fb00 1118 	mls	r1, r0, r8, r1
   8547a:	fa1f fc85 	uxth.w	ip, r5
   8547e:	fb0c f308 	mul.w	r3, ip, r8
   85482:	ea49 0907 	orr.w	r9, r9, r7
   85486:	ea4f 4719 	mov.w	r7, r9, lsr #16
   8548a:	ea47 4101 	orr.w	r1, r7, r1, lsl #16
   8548e:	428b      	cmp	r3, r1
   85490:	fa06 f602 	lsl.w	r6, r6, r2
   85494:	d908      	bls.n	854a8 <__divdi3+0x1a0>
   85496:	1949      	adds	r1, r1, r5
   85498:	f108 32ff 	add.w	r2, r8, #4294967295
   8549c:	d27a      	bcs.n	85594 <__divdi3+0x28c>
   8549e:	428b      	cmp	r3, r1
   854a0:	d978      	bls.n	85594 <__divdi3+0x28c>
   854a2:	f1a8 0802 	sub.w	r8, r8, #2
   854a6:	4429      	add	r1, r5
   854a8:	1ac9      	subs	r1, r1, r3
   854aa:	fbb1 f3f0 	udiv	r3, r1, r0
   854ae:	fb00 1713 	mls	r7, r0, r3, r1
   854b2:	fb0c f203 	mul.w	r2, ip, r3
   854b6:	fa1f f989 	uxth.w	r9, r9
   854ba:	ea49 4707 	orr.w	r7, r9, r7, lsl #16
   854be:	42ba      	cmp	r2, r7
   854c0:	d907      	bls.n	854d2 <__divdi3+0x1ca>
   854c2:	197f      	adds	r7, r7, r5
   854c4:	f103 31ff 	add.w	r1, r3, #4294967295
   854c8:	d260      	bcs.n	8558c <__divdi3+0x284>
   854ca:	42ba      	cmp	r2, r7
   854cc:	d95e      	bls.n	8558c <__divdi3+0x284>
   854ce:	3b02      	subs	r3, #2
   854d0:	442f      	add	r7, r5
   854d2:	1abf      	subs	r7, r7, r2
   854d4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   854d8:	e78c      	b.n	853f4 <__divdi3+0xec>
   854da:	f1c8 0220 	rsb	r2, r8, #32
   854de:	fa25 f102 	lsr.w	r1, r5, r2
   854e2:	fa03 fc08 	lsl.w	ip, r3, r8
   854e6:	fa27 f302 	lsr.w	r3, r7, r2
   854ea:	fa20 f202 	lsr.w	r2, r0, r2
   854ee:	fa07 f708 	lsl.w	r7, r7, r8
   854f2:	ea41 0c0c 	orr.w	ip, r1, ip
   854f6:	ea4f 491c 	mov.w	r9, ip, lsr #16
   854fa:	fbb3 f1f9 	udiv	r1, r3, r9
   854fe:	fb09 3311 	mls	r3, r9, r1, r3
   85502:	fa1f fa8c 	uxth.w	sl, ip
   85506:	fb0a fb01 	mul.w	fp, sl, r1
   8550a:	4317      	orrs	r7, r2
   8550c:	0c3a      	lsrs	r2, r7, #16
   8550e:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
   85512:	459b      	cmp	fp, r3
   85514:	fa05 f008 	lsl.w	r0, r5, r8
   85518:	d908      	bls.n	8552c <__divdi3+0x224>
   8551a:	eb13 030c 	adds.w	r3, r3, ip
   8551e:	f101 32ff 	add.w	r2, r1, #4294967295
   85522:	d235      	bcs.n	85590 <__divdi3+0x288>
   85524:	459b      	cmp	fp, r3
   85526:	d933      	bls.n	85590 <__divdi3+0x288>
   85528:	3902      	subs	r1, #2
   8552a:	4463      	add	r3, ip
   8552c:	ebcb 0303 	rsb	r3, fp, r3
   85530:	fbb3 f2f9 	udiv	r2, r3, r9
   85534:	fb09 3312 	mls	r3, r9, r2, r3
   85538:	fb0a fa02 	mul.w	sl, sl, r2
   8553c:	b2bf      	uxth	r7, r7
   8553e:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
   85542:	45ba      	cmp	sl, r7
   85544:	d908      	bls.n	85558 <__divdi3+0x250>
   85546:	eb17 070c 	adds.w	r7, r7, ip
   8554a:	f102 33ff 	add.w	r3, r2, #4294967295
   8554e:	d21b      	bcs.n	85588 <__divdi3+0x280>
   85550:	45ba      	cmp	sl, r7
   85552:	d919      	bls.n	85588 <__divdi3+0x280>
   85554:	3a02      	subs	r2, #2
   85556:	4467      	add	r7, ip
   85558:	ea42 4501 	orr.w	r5, r2, r1, lsl #16
   8555c:	fba5 0100 	umull	r0, r1, r5, r0
   85560:	ebca 0707 	rsb	r7, sl, r7
   85564:	428f      	cmp	r7, r1
   85566:	f04f 0300 	mov.w	r3, #0
   8556a:	d30a      	bcc.n	85582 <__divdi3+0x27a>
   8556c:	d005      	beq.n	8557a <__divdi3+0x272>
   8556e:	462a      	mov	r2, r5
   85570:	e71c      	b.n	853ac <__divdi3+0xa4>
   85572:	4662      	mov	r2, ip
   85574:	e6fd      	b.n	85372 <__divdi3+0x6a>
   85576:	463b      	mov	r3, r7
   85578:	e710      	b.n	8539c <__divdi3+0x94>
   8557a:	fa06 f608 	lsl.w	r6, r6, r8
   8557e:	4286      	cmp	r6, r0
   85580:	d2f5      	bcs.n	8556e <__divdi3+0x266>
   85582:	1e6a      	subs	r2, r5, #1
   85584:	2300      	movs	r3, #0
   85586:	e711      	b.n	853ac <__divdi3+0xa4>
   85588:	461a      	mov	r2, r3
   8558a:	e7e5      	b.n	85558 <__divdi3+0x250>
   8558c:	460b      	mov	r3, r1
   8558e:	e7a0      	b.n	854d2 <__divdi3+0x1ca>
   85590:	4611      	mov	r1, r2
   85592:	e7cb      	b.n	8552c <__divdi3+0x224>
   85594:	4690      	mov	r8, r2
   85596:	e787      	b.n	854a8 <__divdi3+0x1a0>
   85598:	4643      	mov	r3, r8
   8559a:	4642      	mov	r2, r8
   8559c:	e706      	b.n	853ac <__divdi3+0xa4>
   8559e:	3a02      	subs	r2, #2
   855a0:	e750      	b.n	85444 <__divdi3+0x13c>
   855a2:	3902      	subs	r1, #2
   855a4:	442f      	add	r7, r5
   855a6:	e739      	b.n	8541c <__divdi3+0x114>

000855a8 <__udivdi3>:
   855a8:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   855ac:	4614      	mov	r4, r2
   855ae:	4605      	mov	r5, r0
   855b0:	460e      	mov	r6, r1
   855b2:	2b00      	cmp	r3, #0
   855b4:	d143      	bne.n	8563e <__udivdi3+0x96>
   855b6:	428a      	cmp	r2, r1
   855b8:	d953      	bls.n	85662 <__udivdi3+0xba>
   855ba:	fab2 f782 	clz	r7, r2
   855be:	b157      	cbz	r7, 855d6 <__udivdi3+0x2e>
   855c0:	f1c7 0620 	rsb	r6, r7, #32
   855c4:	fa20 f606 	lsr.w	r6, r0, r6
   855c8:	fa01 f307 	lsl.w	r3, r1, r7
   855cc:	fa02 f407 	lsl.w	r4, r2, r7
   855d0:	fa00 f507 	lsl.w	r5, r0, r7
   855d4:	431e      	orrs	r6, r3
   855d6:	0c21      	lsrs	r1, r4, #16
   855d8:	fbb6 f2f1 	udiv	r2, r6, r1
   855dc:	fb01 6612 	mls	r6, r1, r2, r6
   855e0:	b2a0      	uxth	r0, r4
   855e2:	fb00 f302 	mul.w	r3, r0, r2
   855e6:	0c2f      	lsrs	r7, r5, #16
   855e8:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
   855ec:	42b3      	cmp	r3, r6
   855ee:	d909      	bls.n	85604 <__udivdi3+0x5c>
   855f0:	1936      	adds	r6, r6, r4
   855f2:	f102 37ff 	add.w	r7, r2, #4294967295
   855f6:	f080 80fd 	bcs.w	857f4 <__udivdi3+0x24c>
   855fa:	42b3      	cmp	r3, r6
   855fc:	f240 80fa 	bls.w	857f4 <__udivdi3+0x24c>
   85600:	3a02      	subs	r2, #2
   85602:	4426      	add	r6, r4
   85604:	1af6      	subs	r6, r6, r3
   85606:	fbb6 f3f1 	udiv	r3, r6, r1
   8560a:	fb01 6113 	mls	r1, r1, r3, r6
   8560e:	fb00 f003 	mul.w	r0, r0, r3
   85612:	b2ad      	uxth	r5, r5
   85614:	ea45 4101 	orr.w	r1, r5, r1, lsl #16
   85618:	4288      	cmp	r0, r1
   8561a:	d908      	bls.n	8562e <__udivdi3+0x86>
   8561c:	1909      	adds	r1, r1, r4
   8561e:	f103 36ff 	add.w	r6, r3, #4294967295
   85622:	f080 80e9 	bcs.w	857f8 <__udivdi3+0x250>
   85626:	4288      	cmp	r0, r1
   85628:	f240 80e6 	bls.w	857f8 <__udivdi3+0x250>
   8562c:	3b02      	subs	r3, #2
   8562e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   85632:	2300      	movs	r3, #0
   85634:	4610      	mov	r0, r2
   85636:	4619      	mov	r1, r3
   85638:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   8563c:	4770      	bx	lr
   8563e:	428b      	cmp	r3, r1
   85640:	d84c      	bhi.n	856dc <__udivdi3+0x134>
   85642:	fab3 f683 	clz	r6, r3
   85646:	2e00      	cmp	r6, #0
   85648:	d14f      	bne.n	856ea <__udivdi3+0x142>
   8564a:	428b      	cmp	r3, r1
   8564c:	d302      	bcc.n	85654 <__udivdi3+0xac>
   8564e:	4282      	cmp	r2, r0
   85650:	f200 80dd 	bhi.w	8580e <__udivdi3+0x266>
   85654:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   85658:	2300      	movs	r3, #0
   8565a:	2201      	movs	r2, #1
   8565c:	4610      	mov	r0, r2
   8565e:	4619      	mov	r1, r3
   85660:	4770      	bx	lr
   85662:	b912      	cbnz	r2, 8566a <__udivdi3+0xc2>
   85664:	2401      	movs	r4, #1
   85666:	fbb4 f4f2 	udiv	r4, r4, r2
   8566a:	fab4 f284 	clz	r2, r4
   8566e:	2a00      	cmp	r2, #0
   85670:	f040 8082 	bne.w	85778 <__udivdi3+0x1d0>
   85674:	1b09      	subs	r1, r1, r4
   85676:	0c26      	lsrs	r6, r4, #16
   85678:	b2a7      	uxth	r7, r4
   8567a:	2301      	movs	r3, #1
   8567c:	fbb1 f0f6 	udiv	r0, r1, r6
   85680:	fb06 1110 	mls	r1, r6, r0, r1
   85684:	fb07 f200 	mul.w	r2, r7, r0
   85688:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   8568c:	ea4c 4101 	orr.w	r1, ip, r1, lsl #16
   85690:	428a      	cmp	r2, r1
   85692:	d907      	bls.n	856a4 <__udivdi3+0xfc>
   85694:	1909      	adds	r1, r1, r4
   85696:	f100 3cff 	add.w	ip, r0, #4294967295
   8569a:	d202      	bcs.n	856a2 <__udivdi3+0xfa>
   8569c:	428a      	cmp	r2, r1
   8569e:	f200 80c8 	bhi.w	85832 <__udivdi3+0x28a>
   856a2:	4660      	mov	r0, ip
   856a4:	1a89      	subs	r1, r1, r2
   856a6:	fbb1 f2f6 	udiv	r2, r1, r6
   856aa:	fb06 1112 	mls	r1, r6, r2, r1
   856ae:	fb07 f702 	mul.w	r7, r7, r2
   856b2:	b2ad      	uxth	r5, r5
   856b4:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
   856b8:	42af      	cmp	r7, r5
   856ba:	d908      	bls.n	856ce <__udivdi3+0x126>
   856bc:	192c      	adds	r4, r5, r4
   856be:	f102 31ff 	add.w	r1, r2, #4294967295
   856c2:	f080 809b 	bcs.w	857fc <__udivdi3+0x254>
   856c6:	42a7      	cmp	r7, r4
   856c8:	f240 8098 	bls.w	857fc <__udivdi3+0x254>
   856cc:	3a02      	subs	r2, #2
   856ce:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
   856d2:	4610      	mov	r0, r2
   856d4:	4619      	mov	r1, r3
   856d6:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   856da:	4770      	bx	lr
   856dc:	2300      	movs	r3, #0
   856de:	461a      	mov	r2, r3
   856e0:	4610      	mov	r0, r2
   856e2:	4619      	mov	r1, r3
   856e4:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   856e8:	4770      	bx	lr
   856ea:	f1c6 0520 	rsb	r5, r6, #32
   856ee:	fa22 f705 	lsr.w	r7, r2, r5
   856f2:	fa03 f406 	lsl.w	r4, r3, r6
   856f6:	fa21 f305 	lsr.w	r3, r1, r5
   856fa:	fa01 fb06 	lsl.w	fp, r1, r6
   856fe:	fa20 f505 	lsr.w	r5, r0, r5
   85702:	433c      	orrs	r4, r7
   85704:	ea4f 4814 	mov.w	r8, r4, lsr #16
   85708:	fbb3 fcf8 	udiv	ip, r3, r8
   8570c:	fb08 331c 	mls	r3, r8, ip, r3
   85710:	fa1f f984 	uxth.w	r9, r4
   85714:	fb09 fa0c 	mul.w	sl, r9, ip
   85718:	ea45 0b0b 	orr.w	fp, r5, fp
   8571c:	ea4f 451b 	mov.w	r5, fp, lsr #16
   85720:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
   85724:	459a      	cmp	sl, r3
   85726:	fa02 f206 	lsl.w	r2, r2, r6
   8572a:	d904      	bls.n	85736 <__udivdi3+0x18e>
   8572c:	191b      	adds	r3, r3, r4
   8572e:	f10c 35ff 	add.w	r5, ip, #4294967295
   85732:	d36f      	bcc.n	85814 <__udivdi3+0x26c>
   85734:	46ac      	mov	ip, r5
   85736:	ebca 0303 	rsb	r3, sl, r3
   8573a:	fbb3 f5f8 	udiv	r5, r3, r8
   8573e:	fb08 3315 	mls	r3, r8, r5, r3
   85742:	fb09 f905 	mul.w	r9, r9, r5
   85746:	fa1f fb8b 	uxth.w	fp, fp
   8574a:	ea4b 4703 	orr.w	r7, fp, r3, lsl #16
   8574e:	45b9      	cmp	r9, r7
   85750:	d904      	bls.n	8575c <__udivdi3+0x1b4>
   85752:	193f      	adds	r7, r7, r4
   85754:	f105 33ff 	add.w	r3, r5, #4294967295
   85758:	d362      	bcc.n	85820 <__udivdi3+0x278>
   8575a:	461d      	mov	r5, r3
   8575c:	ea45 4c0c 	orr.w	ip, r5, ip, lsl #16
   85760:	fbac 2302 	umull	r2, r3, ip, r2
   85764:	ebc9 0707 	rsb	r7, r9, r7
   85768:	429f      	cmp	r7, r3
   8576a:	f04f 0500 	mov.w	r5, #0
   8576e:	d34a      	bcc.n	85806 <__udivdi3+0x25e>
   85770:	d046      	beq.n	85800 <__udivdi3+0x258>
   85772:	4662      	mov	r2, ip
   85774:	462b      	mov	r3, r5
   85776:	e75d      	b.n	85634 <__udivdi3+0x8c>
   85778:	4094      	lsls	r4, r2
   8577a:	f1c2 0920 	rsb	r9, r2, #32
   8577e:	fa21 fc09 	lsr.w	ip, r1, r9
   85782:	4091      	lsls	r1, r2
   85784:	fa20 f909 	lsr.w	r9, r0, r9
   85788:	0c26      	lsrs	r6, r4, #16
   8578a:	fbbc f8f6 	udiv	r8, ip, r6
   8578e:	fb06 cc18 	mls	ip, r6, r8, ip
   85792:	b2a7      	uxth	r7, r4
   85794:	fb07 f308 	mul.w	r3, r7, r8
   85798:	ea49 0901 	orr.w	r9, r9, r1
   8579c:	ea4f 4119 	mov.w	r1, r9, lsr #16
   857a0:	ea41 4c0c 	orr.w	ip, r1, ip, lsl #16
   857a4:	4563      	cmp	r3, ip
   857a6:	fa00 f502 	lsl.w	r5, r0, r2
   857aa:	d909      	bls.n	857c0 <__udivdi3+0x218>
   857ac:	eb1c 0c04 	adds.w	ip, ip, r4
   857b0:	f108 32ff 	add.w	r2, r8, #4294967295
   857b4:	d23b      	bcs.n	8582e <__udivdi3+0x286>
   857b6:	4563      	cmp	r3, ip
   857b8:	d939      	bls.n	8582e <__udivdi3+0x286>
   857ba:	f1a8 0802 	sub.w	r8, r8, #2
   857be:	44a4      	add	ip, r4
   857c0:	ebc3 0c0c 	rsb	ip, r3, ip
   857c4:	fbbc f3f6 	udiv	r3, ip, r6
   857c8:	fb06 c113 	mls	r1, r6, r3, ip
   857cc:	fb07 f203 	mul.w	r2, r7, r3
   857d0:	fa1f f989 	uxth.w	r9, r9
   857d4:	ea49 4101 	orr.w	r1, r9, r1, lsl #16
   857d8:	428a      	cmp	r2, r1
   857da:	d907      	bls.n	857ec <__udivdi3+0x244>
   857dc:	1909      	adds	r1, r1, r4
   857de:	f103 30ff 	add.w	r0, r3, #4294967295
   857e2:	d222      	bcs.n	8582a <__udivdi3+0x282>
   857e4:	428a      	cmp	r2, r1
   857e6:	d920      	bls.n	8582a <__udivdi3+0x282>
   857e8:	3b02      	subs	r3, #2
   857ea:	4421      	add	r1, r4
   857ec:	1a89      	subs	r1, r1, r2
   857ee:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   857f2:	e743      	b.n	8567c <__udivdi3+0xd4>
   857f4:	463a      	mov	r2, r7
   857f6:	e705      	b.n	85604 <__udivdi3+0x5c>
   857f8:	4633      	mov	r3, r6
   857fa:	e718      	b.n	8562e <__udivdi3+0x86>
   857fc:	460a      	mov	r2, r1
   857fe:	e766      	b.n	856ce <__udivdi3+0x126>
   85800:	40b0      	lsls	r0, r6
   85802:	4290      	cmp	r0, r2
   85804:	d2b5      	bcs.n	85772 <__udivdi3+0x1ca>
   85806:	f10c 32ff 	add.w	r2, ip, #4294967295
   8580a:	2300      	movs	r3, #0
   8580c:	e712      	b.n	85634 <__udivdi3+0x8c>
   8580e:	4633      	mov	r3, r6
   85810:	4632      	mov	r2, r6
   85812:	e70f      	b.n	85634 <__udivdi3+0x8c>
   85814:	459a      	cmp	sl, r3
   85816:	d98d      	bls.n	85734 <__udivdi3+0x18c>
   85818:	f1ac 0c02 	sub.w	ip, ip, #2
   8581c:	4423      	add	r3, r4
   8581e:	e78a      	b.n	85736 <__udivdi3+0x18e>
   85820:	45b9      	cmp	r9, r7
   85822:	d99a      	bls.n	8575a <__udivdi3+0x1b2>
   85824:	3d02      	subs	r5, #2
   85826:	4427      	add	r7, r4
   85828:	e798      	b.n	8575c <__udivdi3+0x1b4>
   8582a:	4603      	mov	r3, r0
   8582c:	e7de      	b.n	857ec <__udivdi3+0x244>
   8582e:	4690      	mov	r8, r2
   85830:	e7c6      	b.n	857c0 <__udivdi3+0x218>
   85832:	3802      	subs	r0, #2
   85834:	4421      	add	r1, r4
   85836:	e735      	b.n	856a4 <__udivdi3+0xfc>
   85838:	46202d2d 	.word	0x46202d2d
   8583c:	52656572 	.word	0x52656572
   85840:	20534f54 	.word	0x20534f54
   85844:	6d657845 	.word	0x6d657845
   85848:	20656c70 	.word	0x20656c70
   8584c:	61542096 	.word	0x61542096
   85850:	20736b73 	.word	0x20736b73
   85854:	0d0a2d2d 	.word	0x0d0a2d2d
   85858:	00000000 	.word	0x00000000
   8585c:	25202d2d 	.word	0x25202d2d
   85860:	000d0a73 	.word	0x000d0a73
   85864:	75647241 	.word	0x75647241
   85868:	206f6e69 	.word	0x206f6e69
   8586c:	2f657544 	.word	0x2f657544
   85870:	00000058 	.word	0x00000058
   85874:	43202d2d 	.word	0x43202d2d
   85878:	69706d6f 	.word	0x69706d6f
   8587c:	3a64656c 	.word	0x3a64656c
   85880:	20732520 	.word	0x20732520
   85884:	2d207325 	.word	0x2d207325
   85888:	000d0a2d 	.word	0x000d0a2d
   8588c:	20636544 	.word	0x20636544
   85890:	32203332 	.word	0x32203332
   85894:	00363130 	.word	0x00363130
   85898:	353a3331 	.word	0x353a3331
   8589c:	33303a39 	.word	0x33303a39
   858a0:	00000000 	.word	0x00000000
   858a4:	65646f63 	.word	0x65646f63
   858a8:	6b636f4c 	.word	0x6b636f4c
   858ac:	00000000 	.word	0x00000000
   858b0:	6c696146 	.word	0x6c696146
   858b4:	74206465 	.word	0x74206465
   858b8:	7263206f 	.word	0x7263206f
   858bc:	65746165 	.word	0x65746165
   858c0:	646f6320 	.word	0x646f6320
   858c4:	6f6c2065 	.word	0x6f6c2065
   858c8:	74206b63 	.word	0x74206b63
   858cc:	0d6b7361 	.word	0x0d6b7361
   858d0:	0000000a 	.word	0x0000000a
   858d4:	0064656c 	.word	0x0064656c
   858d8:	6c696146 	.word	0x6c696146
   858dc:	74206465 	.word	0x74206465
   858e0:	7263206f 	.word	0x7263206f
   858e4:	65746165 	.word	0x65746165
   858e8:	44454c20 	.word	0x44454c20
   858ec:	73617420 	.word	0x73617420
   858f0:	000a0d6b 	.word	0x000a0d6b

000858f4 <OurTransitionTable>:
   858f4:	00000001 02000001 02030000 04030000     ................
   85904:	04050000 06050000 06000700 08000700     ................
   85914:	08000000 09097325 25096325 75250975     ....%s..%c.%u.%u
   85924:	0d752509 0000000a 454c4449 00000000     .%u.....IDLE....
   85934:	00000a0d 20726d54 00637653 00000043     ....Tmr Svc.C...

00085944 <_global_impure_ptr>:
   85944:	20070140 33323130 37363534 42413938     @.. 0123456789AB
   85954:	46454443 00000000 33323130 37363534     CDEF....01234567
   85964:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
   85974:	0000296c                                l)..

00085978 <zeroes.6721>:
   85978:	30303030 30303030 30303030 30303030     0000000000000000

00085988 <blanks.6720>:
   85988:	20202020 20202020 20202020 20202020                     

00085998 <_init>:
   85998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8599a:	bf00      	nop
   8599c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8599e:	bc08      	pop	{r3}
   859a0:	469e      	mov	lr, r3
   859a2:	4770      	bx	lr

000859a4 <__init_array_start>:
   859a4:	00083a19 	.word	0x00083a19

000859a8 <__frame_dummy_init_array_entry>:
   859a8:	00080119                                ....

000859ac <_fini>:
   859ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   859ae:	bf00      	nop
   859b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
   859b2:	bc08      	pop	{r3}
   859b4:	469e      	mov	lr, r3
   859b6:	4770      	bx	lr

000859b8 <__fini_array_start>:
   859b8:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <SystemInit>:
__no_inline
RAMFUNC
void SystemInit(void)
{
	/* Set FWS according to SYS_BOARD_MCKR configuration */
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20070000:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070004:	4a20      	ldr	r2, [pc, #128]	; (20070088 <SystemInit+0x88>)
20070006:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070008:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007000c:	6013      	str	r3, [r2, #0]

	/* Initialize main oscillator */
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007000e:	4b1f      	ldr	r3, [pc, #124]	; (2007008c <SystemInit+0x8c>)
20070010:	6a1b      	ldr	r3, [r3, #32]
20070012:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20070016:	d107      	bne.n	20070028 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070018:	4a1d      	ldr	r2, [pc, #116]	; (20070090 <SystemInit+0x90>)
2007001a:	4b1c      	ldr	r3, [pc, #112]	; (2007008c <SystemInit+0x8c>)
2007001c:	621a      	str	r2, [r3, #32]
			                     CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2007001e:	461a      	mov	r2, r3
20070020:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070022:	f013 0f01 	tst.w	r3, #1
20070026:	d0fb      	beq.n	20070020 <SystemInit+0x20>
		}
	}

	/* Switch to 3-20MHz Xtal oscillator */
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070028:	4a1a      	ldr	r2, [pc, #104]	; (20070094 <SystemInit+0x94>)
2007002a:	4b18      	ldr	r3, [pc, #96]	; (2007008c <SystemInit+0x8c>)
2007002c:	621a      	str	r2, [r3, #32]
	                           CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;

	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007002e:	461a      	mov	r2, r3
20070030:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070032:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20070036:	d0fb      	beq.n	20070030 <SystemInit+0x30>
	}
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070038:	4b14      	ldr	r3, [pc, #80]	; (2007008c <SystemInit+0x8c>)
2007003a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
2007003c:	f022 0203 	bic.w	r2, r2, #3
20070040:	f042 0201 	orr.w	r2, r2, #1
20070044:	631a      	str	r2, [r3, #48]	; 0x30
		                     PMC_MCKR_CSS_MAIN_CLK;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070046:	461a      	mov	r2, r3
20070048:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007004a:	f013 0f08 	tst.w	r3, #8
2007004e:	d0fb      	beq.n	20070048 <SystemInit+0x48>
	}

	/* Initialize PLLA */
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
20070050:	4a11      	ldr	r2, [pc, #68]	; (20070098 <SystemInit+0x98>)
20070052:	4b0e      	ldr	r3, [pc, #56]	; (2007008c <SystemInit+0x8c>)
20070054:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070056:	461a      	mov	r2, r3
20070058:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007005a:	f013 0f02 	tst.w	r3, #2
2007005e:	d0fb      	beq.n	20070058 <SystemInit+0x58>
	}

	/* Switch to main clock */
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
20070060:	2211      	movs	r2, #17
20070062:	4b0a      	ldr	r3, [pc, #40]	; (2007008c <SystemInit+0x8c>)
20070064:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070066:	461a      	mov	r2, r3
20070068:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007006a:	f013 0f08 	tst.w	r3, #8
2007006e:	d0fb      	beq.n	20070068 <SystemInit+0x68>
	}

	/* Switch to PLLA */
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
20070070:	2212      	movs	r2, #18
20070072:	4b06      	ldr	r3, [pc, #24]	; (2007008c <SystemInit+0x8c>)
20070074:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070076:	461a      	mov	r2, r3
20070078:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007007a:	f013 0f08 	tst.w	r3, #8
2007007e:	d0fb      	beq.n	20070078 <SystemInit+0x78>
	}

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
20070080:	4a06      	ldr	r2, [pc, #24]	; (2007009c <SystemInit+0x9c>)
20070082:	4b07      	ldr	r3, [pc, #28]	; (200700a0 <SystemInit+0xa0>)
20070084:	601a      	str	r2, [r3, #0]
20070086:	4770      	bx	lr
20070088:	400e0a00 	.word	0x400e0a00
2007008c:	400e0600 	.word	0x400e0600
20070090:	00370809 	.word	0x00370809
20070094:	01370809 	.word	0x01370809
20070098:	200d3f01 	.word	0x200d3f01
2007009c:	0501bd00 	.word	0x0501bd00
200700a0:	20070138 	.word	0x20070138

200700a4 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700a4:	4b1b      	ldr	r3, [pc, #108]	; (20070114 <system_init_flash+0x70>)
200700a6:	4298      	cmp	r0, r3
200700a8:	d806      	bhi.n	200700b8 <system_init_flash+0x14>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700aa:	2300      	movs	r3, #0
200700ac:	4a1a      	ldr	r2, [pc, #104]	; (20070118 <system_init_flash+0x74>)
200700ae:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700b0:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700b4:	6013      	str	r3, [r2, #0]
200700b6:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700b8:	4b18      	ldr	r3, [pc, #96]	; (2007011c <system_init_flash+0x78>)
200700ba:	4298      	cmp	r0, r3
200700bc:	d807      	bhi.n	200700ce <system_init_flash+0x2a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700be:	f44f 7380 	mov.w	r3, #256	; 0x100
200700c2:	4a15      	ldr	r2, [pc, #84]	; (20070118 <system_init_flash+0x74>)
200700c4:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700c6:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700ca:	6013      	str	r3, [r2, #0]
200700cc:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700ce:	4b14      	ldr	r3, [pc, #80]	; (20070120 <system_init_flash+0x7c>)
200700d0:	4298      	cmp	r0, r3
200700d2:	d807      	bhi.n	200700e4 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200700d4:	f44f 7300 	mov.w	r3, #512	; 0x200
200700d8:	4a0f      	ldr	r2, [pc, #60]	; (20070118 <system_init_flash+0x74>)
200700da:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
200700dc:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700e0:	6013      	str	r3, [r2, #0]
200700e2:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700e4:	4b0f      	ldr	r3, [pc, #60]	; (20070124 <system_init_flash+0x80>)
200700e6:	4298      	cmp	r0, r3
200700e8:	d807      	bhi.n	200700fa <system_init_flash+0x56>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
200700ea:	f44f 7340 	mov.w	r3, #768	; 0x300
200700ee:	4a0a      	ldr	r2, [pc, #40]	; (20070118 <system_init_flash+0x74>)
200700f0:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
200700f2:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700f6:	6013      	str	r3, [r2, #0]
200700f8:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
200700fa:	4b0b      	ldr	r3, [pc, #44]	; (20070128 <system_init_flash+0x84>)
200700fc:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
200700fe:	bf94      	ite	ls
20070100:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
20070104:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
20070108:	4a03      	ldr	r2, [pc, #12]	; (20070118 <system_init_flash+0x74>)
2007010a:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
2007010c:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070110:	6013      	str	r3, [r2, #0]
20070112:	4770      	bx	lr
20070114:	0121eabf 	.word	0x0121eabf
20070118:	400e0a00 	.word	0x400e0a00
2007011c:	02faf07f 	.word	0x02faf07f
20070120:	03d08fff 	.word	0x03d08fff
20070124:	04c4b3ff 	.word	0x04c4b3ff
20070128:	055d4a7f 	.word	0x055d4a7f

2007012c <uxCriticalNesting>:
2007012c:	aaaaaaaa                                ....

20070130 <xFreeBytesRemaining>:
20070130:	00008000                                ....

20070134 <xNextTaskUnblockTime>:
20070134:	0001ffff                                         ..

20070136 <g_interrupt_enabled>:
20070136:	09000001                                         ..

20070138 <SystemCoreClock>:
20070138:	003d0900 00000000                       ..=.....

20070140 <impure_data>:
20070140:	00000000 2007042c 20070494 200704fc     ....,.. ... ... 
	...
20070174:	00085940 00000000 00000000 00000000     @Y..............
	...
200701e8:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
200701f8:	0005deec 0000000b 00000000 00000000     ................
	...

20070568 <_impure_ptr>:
20070568:	20070140                                @.. 

2007056c <lc_ctype_charset>:
2007056c:	49435341 00000049 00000000 00000000     ASCII...........
	...

2007058c <__mb_cur_max>:
2007058c:	00000001                                ....

20070590 <__malloc_av_>:
	...
20070598:	20070590 20070590 20070598 20070598     ... ... ... ... 
200705a8:	200705a0 200705a0 200705a8 200705a8     ... ... ... ... 
200705b8:	200705b0 200705b0 200705b8 200705b8     ... ... ... ... 
200705c8:	200705c0 200705c0 200705c8 200705c8     ... ... ... ... 
200705d8:	200705d0 200705d0 200705d8 200705d8     ... ... ... ... 
200705e8:	200705e0 200705e0 200705e8 200705e8     ... ... ... ... 
200705f8:	200705f0 200705f0 200705f8 200705f8     ... ... ... ... 
20070608:	20070600 20070600 20070608 20070608     ... ... ... ... 
20070618:	20070610 20070610 20070618 20070618     ... ... ... ... 
20070628:	20070620 20070620 20070628 20070628      ..  .. (.. (.. 
20070638:	20070630 20070630 20070638 20070638     0.. 0.. 8.. 8.. 
20070648:	20070640 20070640 20070648 20070648     @.. @.. H.. H.. 
20070658:	20070650 20070650 20070658 20070658     P.. P.. X.. X.. 
20070668:	20070660 20070660 20070668 20070668     `.. `.. h.. h.. 
20070678:	20070670 20070670 20070678 20070678     p.. p.. x.. x.. 
20070688:	20070680 20070680 20070688 20070688     ... ... ... ... 
20070698:	20070690 20070690 20070698 20070698     ... ... ... ... 
200706a8:	200706a0 200706a0 200706a8 200706a8     ... ... ... ... 
200706b8:	200706b0 200706b0 200706b8 200706b8     ... ... ... ... 
200706c8:	200706c0 200706c0 200706c8 200706c8     ... ... ... ... 
200706d8:	200706d0 200706d0 200706d8 200706d8     ... ... ... ... 
200706e8:	200706e0 200706e0 200706e8 200706e8     ... ... ... ... 
200706f8:	200706f0 200706f0 200706f8 200706f8     ... ... ... ... 
20070708:	20070700 20070700 20070708 20070708     ... ... ... ... 
20070718:	20070710 20070710 20070718 20070718     ... ... ... ... 
20070728:	20070720 20070720 20070728 20070728      ..  .. (.. (.. 
20070738:	20070730 20070730 20070738 20070738     0.. 0.. 8.. 8.. 
20070748:	20070740 20070740 20070748 20070748     @.. @.. H.. H.. 
20070758:	20070750 20070750 20070758 20070758     P.. P.. X.. X.. 
20070768:	20070760 20070760 20070768 20070768     `.. `.. h.. h.. 
20070778:	20070770 20070770 20070778 20070778     p.. p.. x.. x.. 
20070788:	20070780 20070780 20070788 20070788     ... ... ... ... 
20070798:	20070790 20070790 20070798 20070798     ... ... ... ... 
200707a8:	200707a0 200707a0 200707a8 200707a8     ... ... ... ... 
200707b8:	200707b0 200707b0 200707b8 200707b8     ... ... ... ... 
200707c8:	200707c0 200707c0 200707c8 200707c8     ... ... ... ... 
200707d8:	200707d0 200707d0 200707d8 200707d8     ... ... ... ... 
200707e8:	200707e0 200707e0 200707e8 200707e8     ... ... ... ... 
200707f8:	200707f0 200707f0 200707f8 200707f8     ... ... ... ... 
20070808:	20070800 20070800 20070808 20070808     ... ... ... ... 
20070818:	20070810 20070810 20070818 20070818     ... ... ... ... 
20070828:	20070820 20070820 20070828 20070828      ..  .. (.. (.. 
20070838:	20070830 20070830 20070838 20070838     0.. 0.. 8.. 8.. 
20070848:	20070840 20070840 20070848 20070848     @.. @.. H.. H.. 
20070858:	20070850 20070850 20070858 20070858     P.. P.. X.. X.. 
20070868:	20070860 20070860 20070868 20070868     `.. `.. h.. h.. 
20070878:	20070870 20070870 20070878 20070878     p.. p.. x.. x.. 
20070888:	20070880 20070880 20070888 20070888     ... ... ... ... 
20070898:	20070890 20070890 20070898 20070898     ... ... ... ... 
200708a8:	200708a0 200708a0 200708a8 200708a8     ... ... ... ... 
200708b8:	200708b0 200708b0 200708b8 200708b8     ... ... ... ... 
200708c8:	200708c0 200708c0 200708c8 200708c8     ... ... ... ... 
200708d8:	200708d0 200708d0 200708d8 200708d8     ... ... ... ... 
200708e8:	200708e0 200708e0 200708e8 200708e8     ... ... ... ... 
200708f8:	200708f0 200708f0 200708f8 200708f8     ... ... ... ... 
20070908:	20070900 20070900 20070908 20070908     ... ... ... ... 
20070918:	20070910 20070910 20070918 20070918     ... ... ... ... 
20070928:	20070920 20070920 20070928 20070928      ..  .. (.. (.. 
20070938:	20070930 20070930 20070938 20070938     0.. 0.. 8.. 8.. 
20070948:	20070940 20070940 20070948 20070948     @.. @.. H.. H.. 
20070958:	20070950 20070950 20070958 20070958     P.. P.. X.. X.. 
20070968:	20070960 20070960 20070968 20070968     `.. `.. h.. h.. 
20070978:	20070970 20070970 20070978 20070978     p.. p.. x.. x.. 
20070988:	20070980 20070980 20070988 20070988     ... ... ... ... 

20070998 <__malloc_trim_threshold>:
20070998:	00020000                                ....

2007099c <__malloc_sbrk_base>:
2007099c:	ffffffff                                ....

200709a0 <__wctomb>:
200709a0:	0008503d                                =P..
