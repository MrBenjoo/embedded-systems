
TestFSM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002f58  00080000  00080000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000974  20070000  00082f58  00010000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  2 .bss          00000208  20070974  000838cc  00010974  2**2
                  ALLOC
  3 .stack        00002004  20070b7c  00083ad4  00010974  2**0
                  ALLOC
  4 .ARM.attributes 00000029  00000000  00000000  00010974  2**0
                  CONTENTS, READONLY
  5 .comment      0000005b  00000000  00000000  0001099d  2**0
                  CONTENTS, READONLY
  6 .debug_info   0000f422  00000000  00000000  000109f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000027c1  00000000  00000000  0001fe1a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00006164  00000000  00000000  000225db  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000b68  00000000  00000000  0002873f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000a30  00000000  00000000  000292a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00019624  00000000  00000000  00029cd7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000fcb0  00000000  00000000  000432fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0006bc1d  00000000  00000000  00052fab  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001f94  00000000  00000000  000bebc8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	20072b80 	.word	0x20072b80
   80004:	000818b9 	.word	0x000818b9
   80008:	000818b5 	.word	0x000818b5
   8000c:	000818b5 	.word	0x000818b5
   80010:	000818b5 	.word	0x000818b5
   80014:	000818b5 	.word	0x000818b5
   80018:	000818b5 	.word	0x000818b5
	...
   8002c:	000818b5 	.word	0x000818b5
   80030:	000818b5 	.word	0x000818b5
   80034:	00000000 	.word	0x00000000
   80038:	000818b5 	.word	0x000818b5
   8003c:	000818b5 	.word	0x000818b5
   80040:	000818b5 	.word	0x000818b5
   80044:	000818b5 	.word	0x000818b5
   80048:	000818b5 	.word	0x000818b5
   8004c:	000818b5 	.word	0x000818b5
   80050:	000818b5 	.word	0x000818b5
   80054:	000818b5 	.word	0x000818b5
   80058:	000818b5 	.word	0x000818b5
   8005c:	000818b5 	.word	0x000818b5
   80060:	000818b5 	.word	0x000818b5
   80064:	000818b5 	.word	0x000818b5
   80068:	00000000 	.word	0x00000000
   8006c:	00081725 	.word	0x00081725
   80070:	00081739 	.word	0x00081739
   80074:	0008174d 	.word	0x0008174d
   80078:	00081761 	.word	0x00081761
	...
   80084:	000801b5 	.word	0x000801b5
   80088:	000818b5 	.word	0x000818b5
   8008c:	000818b5 	.word	0x000818b5
   80090:	000818b5 	.word	0x000818b5
   80094:	000818b5 	.word	0x000818b5
   80098:	000818b5 	.word	0x000818b5
   8009c:	000818b5 	.word	0x000818b5
   800a0:	000818b5 	.word	0x000818b5
   800a4:	00000000 	.word	0x00000000
   800a8:	000818b5 	.word	0x000818b5
   800ac:	000818b5 	.word	0x000818b5
   800b0:	000818b5 	.word	0x000818b5
   800b4:	000818b5 	.word	0x000818b5
   800b8:	000818b5 	.word	0x000818b5
   800bc:	000818b5 	.word	0x000818b5
   800c0:	000818b5 	.word	0x000818b5
   800c4:	000818b5 	.word	0x000818b5
   800c8:	000818b5 	.word	0x000818b5
   800cc:	000818b5 	.word	0x000818b5
   800d0:	000818b5 	.word	0x000818b5
   800d4:	000818b5 	.word	0x000818b5
   800d8:	000818b5 	.word	0x000818b5
   800dc:	000818b5 	.word	0x000818b5
   800e0:	000818b5 	.word	0x000818b5
   800e4:	000818b5 	.word	0x000818b5
   800e8:	000818b5 	.word	0x000818b5
   800ec:	000818b5 	.word	0x000818b5
   800f0:	000818b5 	.word	0x000818b5

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20070974 	.word	0x20070974
   80110:	00000000 	.word	0x00000000
   80114:	00082f58 	.word	0x00082f58

00080118 <frame_dummy>:
   80118:	b508      	push	{r3, lr}
   8011a:	4b06      	ldr	r3, [pc, #24]	; (80134 <frame_dummy+0x1c>)
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4806      	ldr	r0, [pc, #24]	; (80138 <frame_dummy+0x20>)
   80120:	4906      	ldr	r1, [pc, #24]	; (8013c <frame_dummy+0x24>)
   80122:	f3af 8000 	nop.w
   80126:	4806      	ldr	r0, [pc, #24]	; (80140 <frame_dummy+0x28>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b113      	cbz	r3, 80132 <frame_dummy+0x1a>
   8012c:	4b05      	ldr	r3, [pc, #20]	; (80144 <frame_dummy+0x2c>)
   8012e:	b103      	cbz	r3, 80132 <frame_dummy+0x1a>
   80130:	4798      	blx	r3
   80132:	bd08      	pop	{r3, pc}
   80134:	00000000 	.word	0x00000000
   80138:	00082f58 	.word	0x00082f58
   8013c:	20070978 	.word	0x20070978
   80140:	00082f58 	.word	0x00082f58
   80144:	00000000 	.word	0x00000000

00080148 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   80148:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8014c:	460c      	mov	r4, r1
   8014e:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
   80150:	b960      	cbnz	r0, 8016c <_read+0x24>
		return -1;
	}

	for (; len > 0; --len) {
   80152:	2a00      	cmp	r2, #0
   80154:	dd0e      	ble.n	80174 <_read+0x2c>
   80156:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   80158:	4e09      	ldr	r6, [pc, #36]	; (80180 <_read+0x38>)
   8015a:	4d0a      	ldr	r5, [pc, #40]	; (80184 <_read+0x3c>)
   8015c:	6830      	ldr	r0, [r6, #0]
   8015e:	4621      	mov	r1, r4
   80160:	682b      	ldr	r3, [r5, #0]
   80162:	4798      	blx	r3
		ptr++;
   80164:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   80166:	42bc      	cmp	r4, r7
   80168:	d1f8      	bne.n	8015c <_read+0x14>
   8016a:	e006      	b.n	8017a <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
   8016c:	f04f 30ff 	mov.w	r0, #4294967295
   80170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	for (; len > 0; --len) {
   80174:	2000      	movs	r0, #0
   80176:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
   8017a:	4640      	mov	r0, r8
	}
	return nChars;
}
   8017c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80180:	20070af8 	.word	0x20070af8
   80184:	20070ad8 	.word	0x20070ad8

00080188 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   80188:	6943      	ldr	r3, [r0, #20]
   8018a:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   8018e:	bf1d      	ittte	ne
   80190:	f3c1 0108 	ubfxne	r1, r1, #0, #9
   80194:	61c1      	strne	r1, [r0, #28]
	return 0;
   80196:	2000      	movne	r0, #0
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
   80198:	2001      	moveq	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
   8019a:	4770      	bx	lr

0008019c <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   8019c:	6943      	ldr	r3, [r0, #20]
   8019e:	f013 0f01 	tst.w	r3, #1
   801a2:	d005      	beq.n	801b0 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   801a4:	6983      	ldr	r3, [r0, #24]
   801a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
   801aa:	600b      	str	r3, [r1, #0]

	return 0;
   801ac:	2000      	movs	r0, #0
   801ae:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
   801b0:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
   801b2:	4770      	bx	lr

000801b4 <USART0_Handler>:
#if SAMD || SAMR21
void USART_HOST_ISR_VECT(uint8_t instance)
#else
USART_HOST_ISR_VECT()
#endif
{
   801b4:	b500      	push	{lr}
   801b6:	b083      	sub	sp, #12
	uint8_t temp;
#if SAMD || SAMR21
	usart_serial_read_packet(&host_uart_module, &temp, 1);
#else
	usart_serial_read_packet(USART_HOST, &temp, 1);
   801b8:	4811      	ldr	r0, [pc, #68]	; (80200 <USART0_Handler+0x4c>)
   801ba:	f10d 0107 	add.w	r1, sp, #7
   801be:	2201      	movs	r2, #1
   801c0:	4b10      	ldr	r3, [pc, #64]	; (80204 <USART0_Handler+0x50>)
   801c2:	4798      	blx	r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   801c4:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   801c6:	f3bf 8f5f 	dmb	sy
#endif

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
   801ca:	2200      	movs	r2, #0
   801cc:	4b0e      	ldr	r3, [pc, #56]	; (80208 <USART0_Handler+0x54>)
   801ce:	701a      	strb	r2, [r3, #0]

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */

	serial_rx_buf[serial_rx_buf_tail] = temp;
   801d0:	4b0e      	ldr	r3, [pc, #56]	; (8020c <USART0_Handler+0x58>)
   801d2:	781b      	ldrb	r3, [r3, #0]
   801d4:	f89d 1007 	ldrb.w	r1, [sp, #7]
   801d8:	4a0d      	ldr	r2, [pc, #52]	; (80210 <USART0_Handler+0x5c>)
   801da:	54d1      	strb	r1, [r2, r3]

	if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_tail) {
   801dc:	2b9b      	cmp	r3, #155	; 0x9b
   801de:	d103      	bne.n	801e8 <USART0_Handler+0x34>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		serial_rx_buf_tail = 0x00;
   801e0:	2200      	movs	r2, #0
   801e2:	4b0a      	ldr	r3, [pc, #40]	; (8020c <USART0_Handler+0x58>)
   801e4:	701a      	strb	r2, [r3, #0]
   801e6:	e002      	b.n	801ee <USART0_Handler+0x3a>
	} else {
		serial_rx_buf_tail++;
   801e8:	3301      	adds	r3, #1
   801ea:	4a08      	ldr	r2, [pc, #32]	; (8020c <USART0_Handler+0x58>)
   801ec:	7013      	strb	r3, [r2, #0]
	}

	cpu_irq_enable();
   801ee:	2201      	movs	r2, #1
   801f0:	4b05      	ldr	r3, [pc, #20]	; (80208 <USART0_Handler+0x54>)
   801f2:	701a      	strb	r2, [r3, #0]
   801f4:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
   801f8:	b662      	cpsie	i
}
   801fa:	b003      	add	sp, #12
   801fc:	f85d fb04 	ldr.w	pc, [sp], #4
   80200:	40098000 	.word	0x40098000
   80204:	0008072d 	.word	0x0008072d
   80208:	2007012c 	.word	0x2007012c
   8020c:	20070a2c 	.word	0x20070a2c
   80210:	20070990 	.word	0x20070990

00080214 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   80214:	b5f0      	push	{r4, r5, r6, r7, lr}
   80216:	b083      	sub	sp, #12
   80218:	4604      	mov	r4, r0
   8021a:	460d      	mov	r5, r1
	uint32_t val = 0;
   8021c:	2300      	movs	r3, #0
   8021e:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   80220:	4b1f      	ldr	r3, [pc, #124]	; (802a0 <usart_serial_getchar+0x8c>)
   80222:	4298      	cmp	r0, r3
   80224:	d107      	bne.n	80236 <usart_serial_getchar+0x22>
		while (uart_read((Uart*)p_usart, data));
   80226:	461f      	mov	r7, r3
   80228:	4e1e      	ldr	r6, [pc, #120]	; (802a4 <usart_serial_getchar+0x90>)
   8022a:	4638      	mov	r0, r7
   8022c:	4629      	mov	r1, r5
   8022e:	47b0      	blx	r6
   80230:	2800      	cmp	r0, #0
   80232:	d1fa      	bne.n	8022a <usart_serial_getchar+0x16>
   80234:	e019      	b.n	8026a <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   80236:	4b1c      	ldr	r3, [pc, #112]	; (802a8 <usart_serial_getchar+0x94>)
   80238:	4298      	cmp	r0, r3
   8023a:	d109      	bne.n	80250 <usart_serial_getchar+0x3c>
		while (usart_read(p_usart, &val));
   8023c:	461f      	mov	r7, r3
   8023e:	4e1b      	ldr	r6, [pc, #108]	; (802ac <usart_serial_getchar+0x98>)
   80240:	4638      	mov	r0, r7
   80242:	a901      	add	r1, sp, #4
   80244:	47b0      	blx	r6
   80246:	2800      	cmp	r0, #0
   80248:	d1fa      	bne.n	80240 <usart_serial_getchar+0x2c>
		*data = (uint8_t)(val & 0xFF);
   8024a:	9b01      	ldr	r3, [sp, #4]
   8024c:	702b      	strb	r3, [r5, #0]
   8024e:	e019      	b.n	80284 <usart_serial_getchar+0x70>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   80250:	4b17      	ldr	r3, [pc, #92]	; (802b0 <usart_serial_getchar+0x9c>)
   80252:	4298      	cmp	r0, r3
   80254:	d109      	bne.n	8026a <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
   80256:	461e      	mov	r6, r3
   80258:	4c14      	ldr	r4, [pc, #80]	; (802ac <usart_serial_getchar+0x98>)
   8025a:	4630      	mov	r0, r6
   8025c:	a901      	add	r1, sp, #4
   8025e:	47a0      	blx	r4
   80260:	2800      	cmp	r0, #0
   80262:	d1fa      	bne.n	8025a <usart_serial_getchar+0x46>
		*data = (uint8_t)(val & 0xFF);
   80264:	9b01      	ldr	r3, [sp, #4]
   80266:	702b      	strb	r3, [r5, #0]
   80268:	e018      	b.n	8029c <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   8026a:	4b12      	ldr	r3, [pc, #72]	; (802b4 <usart_serial_getchar+0xa0>)
   8026c:	429c      	cmp	r4, r3
   8026e:	d109      	bne.n	80284 <usart_serial_getchar+0x70>
		while (usart_read(p_usart, &val));
   80270:	461e      	mov	r6, r3
   80272:	4c0e      	ldr	r4, [pc, #56]	; (802ac <usart_serial_getchar+0x98>)
   80274:	4630      	mov	r0, r6
   80276:	a901      	add	r1, sp, #4
   80278:	47a0      	blx	r4
   8027a:	2800      	cmp	r0, #0
   8027c:	d1fa      	bne.n	80274 <usart_serial_getchar+0x60>
		*data = (uint8_t)(val & 0xFF);
   8027e:	9b01      	ldr	r3, [sp, #4]
   80280:	702b      	strb	r3, [r5, #0]
   80282:	e00b      	b.n	8029c <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   80284:	4b0c      	ldr	r3, [pc, #48]	; (802b8 <usart_serial_getchar+0xa4>)
   80286:	429c      	cmp	r4, r3
   80288:	d108      	bne.n	8029c <usart_serial_getchar+0x88>
		while (usart_read(p_usart, &val));
   8028a:	461e      	mov	r6, r3
   8028c:	4c07      	ldr	r4, [pc, #28]	; (802ac <usart_serial_getchar+0x98>)
   8028e:	4630      	mov	r0, r6
   80290:	a901      	add	r1, sp, #4
   80292:	47a0      	blx	r4
   80294:	2800      	cmp	r0, #0
   80296:	d1fa      	bne.n	8028e <usart_serial_getchar+0x7a>
		*data = (uint8_t)(val & 0xFF);
   80298:	9b01      	ldr	r3, [sp, #4]
   8029a:	702b      	strb	r3, [r5, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   8029c:	b003      	add	sp, #12
   8029e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   802a0:	400e0800 	.word	0x400e0800
   802a4:	00080839 	.word	0x00080839
   802a8:	40098000 	.word	0x40098000
   802ac:	0008019d 	.word	0x0008019d
   802b0:	4009c000 	.word	0x4009c000
   802b4:	400a0000 	.word	0x400a0000
   802b8:	400a4000 	.word	0x400a4000

000802bc <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
   802bc:	b570      	push	{r4, r5, r6, lr}
   802be:	460c      	mov	r4, r1
#ifdef UART
	if (UART == (Uart*)p_usart) {
   802c0:	4b21      	ldr	r3, [pc, #132]	; (80348 <usart_serial_putchar+0x8c>)
   802c2:	4298      	cmp	r0, r3
   802c4:	d107      	bne.n	802d6 <usart_serial_putchar+0x1a>
		while (uart_write((Uart*)p_usart, c)!=0);
   802c6:	461e      	mov	r6, r3
   802c8:	4d20      	ldr	r5, [pc, #128]	; (8034c <usart_serial_putchar+0x90>)
   802ca:	4630      	mov	r0, r6
   802cc:	4621      	mov	r1, r4
   802ce:	47a8      	blx	r5
   802d0:	2800      	cmp	r0, #0
   802d2:	d1fa      	bne.n	802ca <usart_serial_putchar+0xe>
   802d4:	e02b      	b.n	8032e <usart_serial_putchar+0x72>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   802d6:	4b1e      	ldr	r3, [pc, #120]	; (80350 <usart_serial_putchar+0x94>)
   802d8:	4298      	cmp	r0, r3
   802da:	d107      	bne.n	802ec <usart_serial_putchar+0x30>
		while (usart_write(p_usart, c)!=0);
   802dc:	461e      	mov	r6, r3
   802de:	4d1d      	ldr	r5, [pc, #116]	; (80354 <usart_serial_putchar+0x98>)
   802e0:	4630      	mov	r0, r6
   802e2:	4621      	mov	r1, r4
   802e4:	47a8      	blx	r5
   802e6:	2800      	cmp	r0, #0
   802e8:	d1fa      	bne.n	802e0 <usart_serial_putchar+0x24>
   802ea:	e022      	b.n	80332 <usart_serial_putchar+0x76>
		return 1;
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   802ec:	4b1a      	ldr	r3, [pc, #104]	; (80358 <usart_serial_putchar+0x9c>)
   802ee:	4298      	cmp	r0, r3
   802f0:	d107      	bne.n	80302 <usart_serial_putchar+0x46>
		while (usart_write(p_usart, c)!=0);
   802f2:	461e      	mov	r6, r3
   802f4:	4d17      	ldr	r5, [pc, #92]	; (80354 <usart_serial_putchar+0x98>)
   802f6:	4630      	mov	r0, r6
   802f8:	4621      	mov	r1, r4
   802fa:	47a8      	blx	r5
   802fc:	2800      	cmp	r0, #0
   802fe:	d1fa      	bne.n	802f6 <usart_serial_putchar+0x3a>
   80300:	e019      	b.n	80336 <usart_serial_putchar+0x7a>
		return 1;
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   80302:	4b16      	ldr	r3, [pc, #88]	; (8035c <usart_serial_putchar+0xa0>)
   80304:	4298      	cmp	r0, r3
   80306:	d107      	bne.n	80318 <usart_serial_putchar+0x5c>
		while (usart_write(p_usart, c)!=0);
   80308:	461e      	mov	r6, r3
   8030a:	4d12      	ldr	r5, [pc, #72]	; (80354 <usart_serial_putchar+0x98>)
   8030c:	4630      	mov	r0, r6
   8030e:	4621      	mov	r1, r4
   80310:	47a8      	blx	r5
   80312:	2800      	cmp	r0, #0
   80314:	d1fa      	bne.n	8030c <usart_serial_putchar+0x50>
   80316:	e010      	b.n	8033a <usart_serial_putchar+0x7e>
		return 1;
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   80318:	4b11      	ldr	r3, [pc, #68]	; (80360 <usart_serial_putchar+0xa4>)
   8031a:	4298      	cmp	r0, r3
   8031c:	d10f      	bne.n	8033e <usart_serial_putchar+0x82>
		while (usart_write(p_usart, c)!=0);
   8031e:	461e      	mov	r6, r3
   80320:	4d0c      	ldr	r5, [pc, #48]	; (80354 <usart_serial_putchar+0x98>)
   80322:	4630      	mov	r0, r6
   80324:	4621      	mov	r1, r4
   80326:	47a8      	blx	r5
   80328:	2800      	cmp	r0, #0
   8032a:	d1fa      	bne.n	80322 <usart_serial_putchar+0x66>
   8032c:	e009      	b.n	80342 <usart_serial_putchar+0x86>
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
#ifdef UART
	if (UART == (Uart*)p_usart) {
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
   8032e:	2001      	movs	r0, #1
   80330:	bd70      	pop	{r4, r5, r6, pc}
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   80332:	2001      	movs	r0, #1
   80334:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   80336:	2001      	movs	r0, #1
   80338:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   8033a:	2001      	movs	r0, #1
   8033c:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
   8033e:	2000      	movs	r0, #0
   80340:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   80342:	2001      	movs	r0, #1
	}
# endif
#endif /* ifdef USART */

	return 0;
}
   80344:	bd70      	pop	{r4, r5, r6, pc}
   80346:	bf00      	nop
   80348:	400e0800 	.word	0x400e0800
   8034c:	00080829 	.word	0x00080829
   80350:	40098000 	.word	0x40098000
   80354:	00080189 	.word	0x00080189
   80358:	4009c000 	.word	0x4009c000
   8035c:	400a0000 	.word	0x400a0000
   80360:	400a4000 	.word	0x400a4000

00080364 <configureConsole>:
#include "conf_board.h"
#include "consoleFunctions.h"

int configureConsole(void)
/* Enables feedback through the USB-cable back to terminal within Atmel Studio */
{
   80364:	b530      	push	{r4, r5, lr}
   80366:	b085      	sub	sp, #20
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   80368:	2008      	movs	r0, #8
   8036a:	4d13      	ldr	r5, [pc, #76]	; (803b8 <configureConsole+0x54>)
   8036c:	47a8      	blx	r5
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   8036e:	4c13      	ldr	r4, [pc, #76]	; (803bc <configureConsole+0x58>)
   80370:	4b13      	ldr	r3, [pc, #76]	; (803c0 <configureConsole+0x5c>)
   80372:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   80374:	4a13      	ldr	r2, [pc, #76]	; (803c4 <configureConsole+0x60>)
   80376:	4b14      	ldr	r3, [pc, #80]	; (803c8 <configureConsole+0x64>)
   80378:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   8037a:	4a14      	ldr	r2, [pc, #80]	; (803cc <configureConsole+0x68>)
   8037c:	4b14      	ldr	r3, [pc, #80]	; (803d0 <configureConsole+0x6c>)
   8037e:	601a      	str	r2, [r3, #0]
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   80380:	4b14      	ldr	r3, [pc, #80]	; (803d4 <configureConsole+0x70>)
   80382:	9301      	str	r3, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
   80384:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   80388:	9302      	str	r3, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
   8038a:	f44f 6300 	mov.w	r3, #2048	; 0x800
   8038e:	9303      	str	r3, [sp, #12]
   80390:	2008      	movs	r0, #8
   80392:	47a8      	blx	r5
	
#ifdef UART
	if (UART == (Uart*)p_usart) {
		sysclk_enable_peripheral_clock(ID_UART);
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
   80394:	4620      	mov	r0, r4
   80396:	a901      	add	r1, sp, #4
   80398:	4b0f      	ldr	r3, [pc, #60]	; (803d8 <configureConsole+0x74>)
   8039a:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   8039c:	4d0f      	ldr	r5, [pc, #60]	; (803dc <configureConsole+0x78>)
   8039e:	682b      	ldr	r3, [r5, #0]
   803a0:	6898      	ldr	r0, [r3, #8]
   803a2:	2100      	movs	r1, #0
   803a4:	4c0e      	ldr	r4, [pc, #56]	; (803e0 <configureConsole+0x7c>)
   803a6:	47a0      	blx	r4
	setbuf(stdin, NULL);
   803a8:	682b      	ldr	r3, [r5, #0]
   803aa:	6858      	ldr	r0, [r3, #4]
   803ac:	2100      	movs	r1, #0
   803ae:	47a0      	blx	r4
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
	stdio_serial_init(CONF_UART, &uart_serial_options);
	
	/* printf("Console ready\n"); */
	return 0;
   803b0:	2000      	movs	r0, #0
   803b2:	b005      	add	sp, #20
   803b4:	bd30      	pop	{r4, r5, pc}
   803b6:	bf00      	nop
   803b8:	0008185d 	.word	0x0008185d
   803bc:	400e0800 	.word	0x400e0800
   803c0:	20070af8 	.word	0x20070af8
   803c4:	000802bd 	.word	0x000802bd
   803c8:	20070af4 	.word	0x20070af4
   803cc:	00080215 	.word	0x00080215
   803d0:	20070ad8 	.word	0x20070ad8
   803d4:	0501bd00 	.word	0x0501bd00
   803d8:	000807f1 	.word	0x000807f1
   803dc:	20070560 	.word	0x20070560
   803e0:	00081bb9 	.word	0x00081bb9

000803e4 <startCodeLock>:
	{ Locked, Locked,  Locked, OPEN}
};

void startCodeLock(codeLockPtrType foo) /* Making sure the FSM starts in the right state */
{
	foo->state = Locked;
   803e4:	2300      	movs	r3, #0
   803e6:	7003      	strb	r3, [r0, #0]
   803e8:	4770      	bx	lr
   803ea:	bf00      	nop

000803ec <pushButton1>:
}

void pushButton1(codeLockPtrType foo)		/* Yellow button is pushed */
{
	const states currentState = foo->state;
	foo->state = OurTransitionTable[currentState][yellowButton];
   803ec:	7802      	ldrb	r2, [r0, #0]
   803ee:	4b02      	ldr	r3, [pc, #8]	; (803f8 <pushButton1+0xc>)
   803f0:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
   803f4:	7003      	strb	r3, [r0, #0]
   803f6:	4770      	bx	lr
   803f8:	00082c90 	.word	0x00082c90

000803fc <pushButton2>:
}

void pushButton2(codeLockPtrType foo)		/* Red button is pushed */
{
	const states currentState = foo->state;
	foo->state = OurTransitionTable[currentState][redButton];
   803fc:	7802      	ldrb	r2, [r0, #0]
   803fe:	4b03      	ldr	r3, [pc, #12]	; (8040c <pushButton2+0x10>)
   80400:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   80404:	785b      	ldrb	r3, [r3, #1]
   80406:	7003      	strb	r3, [r0, #0]
   80408:	4770      	bx	lr
   8040a:	bf00      	nop
   8040c:	00082c90 	.word	0x00082c90

00080410 <pushButton3>:
}

void pushButton3(codeLockPtrType foo)		/* Green button is pushed */
{
	const states currentState = foo->state;
	foo->state = OurTransitionTable[currentState][greenButton];
   80410:	7802      	ldrb	r2, [r0, #0]
   80412:	4b03      	ldr	r3, [pc, #12]	; (80420 <pushButton3+0x10>)
   80414:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   80418:	789b      	ldrb	r3, [r3, #2]
   8041a:	7003      	strb	r3, [r0, #0]
   8041c:	4770      	bx	lr
   8041e:	bf00      	nop
   80420:	00082c90 	.word	0x00082c90

00080424 <releaseButton>:


void releaseButton(codeLockPtrType foo)	/* No button is pushed */
{
	const states currentState = foo->state;
	foo->state = OurTransitionTable[currentState][releaseBtn];
   80424:	7802      	ldrb	r2, [r0, #0]
   80426:	4b03      	ldr	r3, [pc, #12]	; (80434 <releaseButton+0x10>)
   80428:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   8042c:	78db      	ldrb	r3, [r3, #3]
   8042e:	7003      	strb	r3, [r0, #0]
   80430:	4770      	bx	lr
   80432:	bf00      	nop
   80434:	00082c90 	.word	0x00082c90

00080438 <test_stateMachineStartsInLockedState>:

extern codeLockType SM;			/* The memory area for the state machine */
extern codeLockPtrType instance;	/* A pointer to a state machine of this type */

void test_stateMachineStartsInLockedState(void)
{
   80438:	b510      	push	{r4, lr}
	instance->state = OPEN;
   8043a:	4c07      	ldr	r4, [pc, #28]	; (80458 <test_stateMachineStartsInLockedState+0x20>)
   8043c:	6823      	ldr	r3, [r4, #0]
   8043e:	2208      	movs	r2, #8
   80440:	701a      	strb	r2, [r3, #0]
	startCodeLock(instance);
   80442:	6820      	ldr	r0, [r4, #0]
   80444:	4b05      	ldr	r3, [pc, #20]	; (8045c <test_stateMachineStartsInLockedState+0x24>)
   80446:	4798      	blx	r3
	TEST_ASSERT_TRUE(instance->state == Locked);
   80448:	6823      	ldr	r3, [r4, #0]
   8044a:	781b      	ldrb	r3, [r3, #0]
   8044c:	b11b      	cbz	r3, 80456 <test_stateMachineStartsInLockedState+0x1e>
   8044e:	4804      	ldr	r0, [pc, #16]	; (80460 <test_stateMachineStartsInLockedState+0x28>)
   80450:	2119      	movs	r1, #25
   80452:	4b04      	ldr	r3, [pc, #16]	; (80464 <test_stateMachineStartsInLockedState+0x2c>)
   80454:	4798      	blx	r3
   80456:	bd10      	pop	{r4, pc}
   80458:	20070af0 	.word	0x20070af0
   8045c:	000803e5 	.word	0x000803e5
   80460:	00082cb4 	.word	0x00082cb4
   80464:	00081089 	.word	0x00081089

00080468 <test_stateGoesToPushOneWhenFirstCorrectButtonIsPressed>:
}

void test_stateGoesToPushOneWhenFirstCorrectButtonIsPressed(void)
{
   80468:	b510      	push	{r4, lr}
	instance->state = Locked;
   8046a:	4c0e      	ldr	r4, [pc, #56]	; (804a4 <test_stateGoesToPushOneWhenFirstCorrectButtonIsPressed+0x3c>)
   8046c:	6823      	ldr	r3, [r4, #0]
   8046e:	2200      	movs	r2, #0
   80470:	701a      	strb	r2, [r3, #0]
	pushButton1(instance);
   80472:	6820      	ldr	r0, [r4, #0]
   80474:	4b0c      	ldr	r3, [pc, #48]	; (804a8 <test_stateGoesToPushOneWhenFirstCorrectButtonIsPressed+0x40>)
   80476:	4798      	blx	r3
	TEST_ASSERT_TRUE(instance->state == PushOne);
   80478:	6823      	ldr	r3, [r4, #0]
   8047a:	781b      	ldrb	r3, [r3, #0]
   8047c:	2b01      	cmp	r3, #1
   8047e:	d003      	beq.n	80488 <test_stateGoesToPushOneWhenFirstCorrectButtonIsPressed+0x20>
   80480:	480a      	ldr	r0, [pc, #40]	; (804ac <test_stateGoesToPushOneWhenFirstCorrectButtonIsPressed+0x44>)
   80482:	2120      	movs	r1, #32
   80484:	4b0a      	ldr	r3, [pc, #40]	; (804b0 <test_stateGoesToPushOneWhenFirstCorrectButtonIsPressed+0x48>)
   80486:	4798      	blx	r3
	releaseButton(instance);
   80488:	4c06      	ldr	r4, [pc, #24]	; (804a4 <test_stateGoesToPushOneWhenFirstCorrectButtonIsPressed+0x3c>)
   8048a:	6820      	ldr	r0, [r4, #0]
   8048c:	4b09      	ldr	r3, [pc, #36]	; (804b4 <test_stateGoesToPushOneWhenFirstCorrectButtonIsPressed+0x4c>)
   8048e:	4798      	blx	r3
	TEST_ASSERT_TRUE(instance->state == ReleaseOne);
   80490:	6823      	ldr	r3, [r4, #0]
   80492:	781b      	ldrb	r3, [r3, #0]
   80494:	2b02      	cmp	r3, #2
   80496:	d003      	beq.n	804a0 <test_stateGoesToPushOneWhenFirstCorrectButtonIsPressed+0x38>
   80498:	4804      	ldr	r0, [pc, #16]	; (804ac <test_stateGoesToPushOneWhenFirstCorrectButtonIsPressed+0x44>)
   8049a:	2122      	movs	r1, #34	; 0x22
   8049c:	4b04      	ldr	r3, [pc, #16]	; (804b0 <test_stateGoesToPushOneWhenFirstCorrectButtonIsPressed+0x48>)
   8049e:	4798      	blx	r3
   804a0:	bd10      	pop	{r4, pc}
   804a2:	bf00      	nop
   804a4:	20070af0 	.word	0x20070af0
   804a8:	000803ed 	.word	0x000803ed
   804ac:	00082cb4 	.word	0x00082cb4
   804b0:	00081089 	.word	0x00081089
   804b4:	00080425 	.word	0x00080425

000804b8 <test_stateGoesToLockedWhenFirstIncorrectButtonIsPressed>:
}

void test_stateGoesToLockedWhenFirstIncorrectButtonIsPressed(void)	/* This test will likely pass since it just requires the SM to stay in the same Locked state */
{
   804b8:	b510      	push	{r4, lr}
	instance->state = Locked;
   804ba:	4c0d      	ldr	r4, [pc, #52]	; (804f0 <test_stateGoesToLockedWhenFirstIncorrectButtonIsPressed+0x38>)
   804bc:	6823      	ldr	r3, [r4, #0]
   804be:	2200      	movs	r2, #0
   804c0:	701a      	strb	r2, [r3, #0]
	pushButton3(instance);
   804c2:	6820      	ldr	r0, [r4, #0]
   804c4:	4b0b      	ldr	r3, [pc, #44]	; (804f4 <test_stateGoesToLockedWhenFirstIncorrectButtonIsPressed+0x3c>)
   804c6:	4798      	blx	r3
	TEST_ASSERT_TRUE(instance->state == Locked);
   804c8:	6823      	ldr	r3, [r4, #0]
   804ca:	781b      	ldrb	r3, [r3, #0]
   804cc:	b11b      	cbz	r3, 804d6 <test_stateGoesToLockedWhenFirstIncorrectButtonIsPressed+0x1e>
   804ce:	480a      	ldr	r0, [pc, #40]	; (804f8 <test_stateGoesToLockedWhenFirstIncorrectButtonIsPressed+0x40>)
   804d0:	2129      	movs	r1, #41	; 0x29
   804d2:	4b0a      	ldr	r3, [pc, #40]	; (804fc <test_stateGoesToLockedWhenFirstIncorrectButtonIsPressed+0x44>)
   804d4:	4798      	blx	r3
	releaseButton(instance);
   804d6:	4c06      	ldr	r4, [pc, #24]	; (804f0 <test_stateGoesToLockedWhenFirstIncorrectButtonIsPressed+0x38>)
   804d8:	6820      	ldr	r0, [r4, #0]
   804da:	4b09      	ldr	r3, [pc, #36]	; (80500 <test_stateGoesToLockedWhenFirstIncorrectButtonIsPressed+0x48>)
   804dc:	4798      	blx	r3
	TEST_ASSERT_TRUE(instance->state == Locked);
   804de:	6823      	ldr	r3, [r4, #0]
   804e0:	781b      	ldrb	r3, [r3, #0]
   804e2:	b11b      	cbz	r3, 804ec <test_stateGoesToLockedWhenFirstIncorrectButtonIsPressed+0x34>
   804e4:	4804      	ldr	r0, [pc, #16]	; (804f8 <test_stateGoesToLockedWhenFirstIncorrectButtonIsPressed+0x40>)
   804e6:	212b      	movs	r1, #43	; 0x2b
   804e8:	4b04      	ldr	r3, [pc, #16]	; (804fc <test_stateGoesToLockedWhenFirstIncorrectButtonIsPressed+0x44>)
   804ea:	4798      	blx	r3
   804ec:	bd10      	pop	{r4, pc}
   804ee:	bf00      	nop
   804f0:	20070af0 	.word	0x20070af0
   804f4:	00080411 	.word	0x00080411
   804f8:	00082cb4 	.word	0x00082cb4
   804fc:	00081089 	.word	0x00081089
   80500:	00080425 	.word	0x00080425

00080504 <test_stateGoesToPushTwoWhenSecondCorrectButtonIsPressed>:
}

void test_stateGoesToPushTwoWhenSecondCorrectButtonIsPressed(void)
{
   80504:	b510      	push	{r4, lr}
	instance->state = ReleaseOne;
   80506:	4c0e      	ldr	r4, [pc, #56]	; (80540 <test_stateGoesToPushTwoWhenSecondCorrectButtonIsPressed+0x3c>)
   80508:	6823      	ldr	r3, [r4, #0]
   8050a:	2202      	movs	r2, #2
   8050c:	701a      	strb	r2, [r3, #0]
	pushButton3(instance);
   8050e:	6820      	ldr	r0, [r4, #0]
   80510:	4b0c      	ldr	r3, [pc, #48]	; (80544 <test_stateGoesToPushTwoWhenSecondCorrectButtonIsPressed+0x40>)
   80512:	4798      	blx	r3
	TEST_ASSERT_TRUE(instance->state == PushTwo);
   80514:	6823      	ldr	r3, [r4, #0]
   80516:	781b      	ldrb	r3, [r3, #0]
   80518:	2b03      	cmp	r3, #3
   8051a:	d003      	beq.n	80524 <test_stateGoesToPushTwoWhenSecondCorrectButtonIsPressed+0x20>
   8051c:	480a      	ldr	r0, [pc, #40]	; (80548 <test_stateGoesToPushTwoWhenSecondCorrectButtonIsPressed+0x44>)
   8051e:	2132      	movs	r1, #50	; 0x32
   80520:	4b0a      	ldr	r3, [pc, #40]	; (8054c <test_stateGoesToPushTwoWhenSecondCorrectButtonIsPressed+0x48>)
   80522:	4798      	blx	r3
	releaseButton(instance);
   80524:	4c06      	ldr	r4, [pc, #24]	; (80540 <test_stateGoesToPushTwoWhenSecondCorrectButtonIsPressed+0x3c>)
   80526:	6820      	ldr	r0, [r4, #0]
   80528:	4b09      	ldr	r3, [pc, #36]	; (80550 <test_stateGoesToPushTwoWhenSecondCorrectButtonIsPressed+0x4c>)
   8052a:	4798      	blx	r3
	TEST_ASSERT_TRUE(instance->state == ReleaseTwo);
   8052c:	6823      	ldr	r3, [r4, #0]
   8052e:	781b      	ldrb	r3, [r3, #0]
   80530:	2b04      	cmp	r3, #4
   80532:	d003      	beq.n	8053c <test_stateGoesToPushTwoWhenSecondCorrectButtonIsPressed+0x38>
   80534:	4804      	ldr	r0, [pc, #16]	; (80548 <test_stateGoesToPushTwoWhenSecondCorrectButtonIsPressed+0x44>)
   80536:	2134      	movs	r1, #52	; 0x34
   80538:	4b04      	ldr	r3, [pc, #16]	; (8054c <test_stateGoesToPushTwoWhenSecondCorrectButtonIsPressed+0x48>)
   8053a:	4798      	blx	r3
   8053c:	bd10      	pop	{r4, pc}
   8053e:	bf00      	nop
   80540:	20070af0 	.word	0x20070af0
   80544:	00080411 	.word	0x00080411
   80548:	00082cb4 	.word	0x00082cb4
   8054c:	00081089 	.word	0x00081089
   80550:	00080425 	.word	0x00080425

00080554 <test_stateGoesToLockedWhenSecondIncorrectButtonIsPressed>:
}

void test_stateGoesToLockedWhenSecondIncorrectButtonIsPressed(void)
{
   80554:	b510      	push	{r4, lr}
	instance->state = ReleaseOne;
   80556:	4c0d      	ldr	r4, [pc, #52]	; (8058c <test_stateGoesToLockedWhenSecondIncorrectButtonIsPressed+0x38>)
   80558:	6823      	ldr	r3, [r4, #0]
   8055a:	2202      	movs	r2, #2
   8055c:	701a      	strb	r2, [r3, #0]
	pushButton2(instance);
   8055e:	6820      	ldr	r0, [r4, #0]
   80560:	4b0b      	ldr	r3, [pc, #44]	; (80590 <test_stateGoesToLockedWhenSecondIncorrectButtonIsPressed+0x3c>)
   80562:	4798      	blx	r3
	TEST_ASSERT_TRUE(instance->state == Locked);
   80564:	6823      	ldr	r3, [r4, #0]
   80566:	781b      	ldrb	r3, [r3, #0]
   80568:	b11b      	cbz	r3, 80572 <test_stateGoesToLockedWhenSecondIncorrectButtonIsPressed+0x1e>
   8056a:	480a      	ldr	r0, [pc, #40]	; (80594 <test_stateGoesToLockedWhenSecondIncorrectButtonIsPressed+0x40>)
   8056c:	213b      	movs	r1, #59	; 0x3b
   8056e:	4b0a      	ldr	r3, [pc, #40]	; (80598 <test_stateGoesToLockedWhenSecondIncorrectButtonIsPressed+0x44>)
   80570:	4798      	blx	r3
	releaseButton(instance);
   80572:	4c06      	ldr	r4, [pc, #24]	; (8058c <test_stateGoesToLockedWhenSecondIncorrectButtonIsPressed+0x38>)
   80574:	6820      	ldr	r0, [r4, #0]
   80576:	4b09      	ldr	r3, [pc, #36]	; (8059c <test_stateGoesToLockedWhenSecondIncorrectButtonIsPressed+0x48>)
   80578:	4798      	blx	r3
	TEST_ASSERT_TRUE(instance->state == Locked);	
   8057a:	6823      	ldr	r3, [r4, #0]
   8057c:	781b      	ldrb	r3, [r3, #0]
   8057e:	b11b      	cbz	r3, 80588 <test_stateGoesToLockedWhenSecondIncorrectButtonIsPressed+0x34>
   80580:	4804      	ldr	r0, [pc, #16]	; (80594 <test_stateGoesToLockedWhenSecondIncorrectButtonIsPressed+0x40>)
   80582:	213d      	movs	r1, #61	; 0x3d
   80584:	4b04      	ldr	r3, [pc, #16]	; (80598 <test_stateGoesToLockedWhenSecondIncorrectButtonIsPressed+0x44>)
   80586:	4798      	blx	r3
   80588:	bd10      	pop	{r4, pc}
   8058a:	bf00      	nop
   8058c:	20070af0 	.word	0x20070af0
   80590:	000803fd 	.word	0x000803fd
   80594:	00082cb4 	.word	0x00082cb4
   80598:	00081089 	.word	0x00081089
   8059c:	00080425 	.word	0x00080425

000805a0 <test_stateGoesToPushThreeWhenThirdCorrectButtonIsPressed>:
}

void test_stateGoesToPushThreeWhenThirdCorrectButtonIsPressed(void)
{
   805a0:	b510      	push	{r4, lr}
	instance->state = ReleaseTwo;
   805a2:	4c0e      	ldr	r4, [pc, #56]	; (805dc <test_stateGoesToPushThreeWhenThirdCorrectButtonIsPressed+0x3c>)
   805a4:	6823      	ldr	r3, [r4, #0]
   805a6:	2204      	movs	r2, #4
   805a8:	701a      	strb	r2, [r3, #0]
	pushButton3(instance);
   805aa:	6820      	ldr	r0, [r4, #0]
   805ac:	4b0c      	ldr	r3, [pc, #48]	; (805e0 <test_stateGoesToPushThreeWhenThirdCorrectButtonIsPressed+0x40>)
   805ae:	4798      	blx	r3
	TEST_ASSERT_TRUE(instance->state == PushThree);
   805b0:	6823      	ldr	r3, [r4, #0]
   805b2:	781b      	ldrb	r3, [r3, #0]
   805b4:	2b05      	cmp	r3, #5
   805b6:	d003      	beq.n	805c0 <test_stateGoesToPushThreeWhenThirdCorrectButtonIsPressed+0x20>
   805b8:	480a      	ldr	r0, [pc, #40]	; (805e4 <test_stateGoesToPushThreeWhenThirdCorrectButtonIsPressed+0x44>)
   805ba:	2144      	movs	r1, #68	; 0x44
   805bc:	4b0a      	ldr	r3, [pc, #40]	; (805e8 <test_stateGoesToPushThreeWhenThirdCorrectButtonIsPressed+0x48>)
   805be:	4798      	blx	r3
	releaseButton(instance);
   805c0:	4c06      	ldr	r4, [pc, #24]	; (805dc <test_stateGoesToPushThreeWhenThirdCorrectButtonIsPressed+0x3c>)
   805c2:	6820      	ldr	r0, [r4, #0]
   805c4:	4b09      	ldr	r3, [pc, #36]	; (805ec <test_stateGoesToPushThreeWhenThirdCorrectButtonIsPressed+0x4c>)
   805c6:	4798      	blx	r3
	TEST_ASSERT_TRUE(instance->state == ReleaseThree);	
   805c8:	6823      	ldr	r3, [r4, #0]
   805ca:	781b      	ldrb	r3, [r3, #0]
   805cc:	2b06      	cmp	r3, #6
   805ce:	d003      	beq.n	805d8 <test_stateGoesToPushThreeWhenThirdCorrectButtonIsPressed+0x38>
   805d0:	4804      	ldr	r0, [pc, #16]	; (805e4 <test_stateGoesToPushThreeWhenThirdCorrectButtonIsPressed+0x44>)
   805d2:	2146      	movs	r1, #70	; 0x46
   805d4:	4b04      	ldr	r3, [pc, #16]	; (805e8 <test_stateGoesToPushThreeWhenThirdCorrectButtonIsPressed+0x48>)
   805d6:	4798      	blx	r3
   805d8:	bd10      	pop	{r4, pc}
   805da:	bf00      	nop
   805dc:	20070af0 	.word	0x20070af0
   805e0:	00080411 	.word	0x00080411
   805e4:	00082cb4 	.word	0x00082cb4
   805e8:	00081089 	.word	0x00081089
   805ec:	00080425 	.word	0x00080425

000805f0 <test_stateGoesToLockedWhenThirdIncorrectButtonIsPressed>:
}

void test_stateGoesToLockedWhenThirdIncorrectButtonIsPressed(void)
{
   805f0:	b510      	push	{r4, lr}
	instance->state = ReleaseTwo;
   805f2:	4c0d      	ldr	r4, [pc, #52]	; (80628 <test_stateGoesToLockedWhenThirdIncorrectButtonIsPressed+0x38>)
   805f4:	6823      	ldr	r3, [r4, #0]
   805f6:	2204      	movs	r2, #4
   805f8:	701a      	strb	r2, [r3, #0]
	pushButton1(instance);
   805fa:	6820      	ldr	r0, [r4, #0]
   805fc:	4b0b      	ldr	r3, [pc, #44]	; (8062c <test_stateGoesToLockedWhenThirdIncorrectButtonIsPressed+0x3c>)
   805fe:	4798      	blx	r3
	TEST_ASSERT_TRUE(instance->state == Locked);
   80600:	6823      	ldr	r3, [r4, #0]
   80602:	781b      	ldrb	r3, [r3, #0]
   80604:	b11b      	cbz	r3, 8060e <test_stateGoesToLockedWhenThirdIncorrectButtonIsPressed+0x1e>
   80606:	480a      	ldr	r0, [pc, #40]	; (80630 <test_stateGoesToLockedWhenThirdIncorrectButtonIsPressed+0x40>)
   80608:	214d      	movs	r1, #77	; 0x4d
   8060a:	4b0a      	ldr	r3, [pc, #40]	; (80634 <test_stateGoesToLockedWhenThirdIncorrectButtonIsPressed+0x44>)
   8060c:	4798      	blx	r3
	releaseButton(instance);
   8060e:	4c06      	ldr	r4, [pc, #24]	; (80628 <test_stateGoesToLockedWhenThirdIncorrectButtonIsPressed+0x38>)
   80610:	6820      	ldr	r0, [r4, #0]
   80612:	4b09      	ldr	r3, [pc, #36]	; (80638 <test_stateGoesToLockedWhenThirdIncorrectButtonIsPressed+0x48>)
   80614:	4798      	blx	r3
	TEST_ASSERT_TRUE(instance->state == Locked);
   80616:	6823      	ldr	r3, [r4, #0]
   80618:	781b      	ldrb	r3, [r3, #0]
   8061a:	b11b      	cbz	r3, 80624 <test_stateGoesToLockedWhenThirdIncorrectButtonIsPressed+0x34>
   8061c:	4804      	ldr	r0, [pc, #16]	; (80630 <test_stateGoesToLockedWhenThirdIncorrectButtonIsPressed+0x40>)
   8061e:	214f      	movs	r1, #79	; 0x4f
   80620:	4b04      	ldr	r3, [pc, #16]	; (80634 <test_stateGoesToLockedWhenThirdIncorrectButtonIsPressed+0x44>)
   80622:	4798      	blx	r3
   80624:	bd10      	pop	{r4, pc}
   80626:	bf00      	nop
   80628:	20070af0 	.word	0x20070af0
   8062c:	000803ed 	.word	0x000803ed
   80630:	00082cb4 	.word	0x00082cb4
   80634:	00081089 	.word	0x00081089
   80638:	00080425 	.word	0x00080425

0008063c <test_stateGoesToOpenWhenFourthCorrectButtonIsPressed>:
}

void test_stateGoesToOpenWhenFourthCorrectButtonIsPressed(void)
{
   8063c:	b510      	push	{r4, lr}
	instance->state = ReleaseThree;
   8063e:	4c0e      	ldr	r4, [pc, #56]	; (80678 <test_stateGoesToOpenWhenFourthCorrectButtonIsPressed+0x3c>)
   80640:	6823      	ldr	r3, [r4, #0]
   80642:	2206      	movs	r2, #6
   80644:	701a      	strb	r2, [r3, #0]
	pushButton2(instance);
   80646:	6820      	ldr	r0, [r4, #0]
   80648:	4b0c      	ldr	r3, [pc, #48]	; (8067c <test_stateGoesToOpenWhenFourthCorrectButtonIsPressed+0x40>)
   8064a:	4798      	blx	r3
	TEST_ASSERT_TRUE(instance->state == PushFour);
   8064c:	6823      	ldr	r3, [r4, #0]
   8064e:	781b      	ldrb	r3, [r3, #0]
   80650:	2b07      	cmp	r3, #7
   80652:	d003      	beq.n	8065c <test_stateGoesToOpenWhenFourthCorrectButtonIsPressed+0x20>
   80654:	480a      	ldr	r0, [pc, #40]	; (80680 <test_stateGoesToOpenWhenFourthCorrectButtonIsPressed+0x44>)
   80656:	2156      	movs	r1, #86	; 0x56
   80658:	4b0a      	ldr	r3, [pc, #40]	; (80684 <test_stateGoesToOpenWhenFourthCorrectButtonIsPressed+0x48>)
   8065a:	4798      	blx	r3
	releaseButton(instance);
   8065c:	4c06      	ldr	r4, [pc, #24]	; (80678 <test_stateGoesToOpenWhenFourthCorrectButtonIsPressed+0x3c>)
   8065e:	6820      	ldr	r0, [r4, #0]
   80660:	4b09      	ldr	r3, [pc, #36]	; (80688 <test_stateGoesToOpenWhenFourthCorrectButtonIsPressed+0x4c>)
   80662:	4798      	blx	r3
	TEST_ASSERT_TRUE(instance->state == OPEN);
   80664:	6823      	ldr	r3, [r4, #0]
   80666:	781b      	ldrb	r3, [r3, #0]
   80668:	2b08      	cmp	r3, #8
   8066a:	d003      	beq.n	80674 <test_stateGoesToOpenWhenFourthCorrectButtonIsPressed+0x38>
   8066c:	4804      	ldr	r0, [pc, #16]	; (80680 <test_stateGoesToOpenWhenFourthCorrectButtonIsPressed+0x44>)
   8066e:	2158      	movs	r1, #88	; 0x58
   80670:	4b04      	ldr	r3, [pc, #16]	; (80684 <test_stateGoesToOpenWhenFourthCorrectButtonIsPressed+0x48>)
   80672:	4798      	blx	r3
   80674:	bd10      	pop	{r4, pc}
   80676:	bf00      	nop
   80678:	20070af0 	.word	0x20070af0
   8067c:	000803fd 	.word	0x000803fd
   80680:	00082cb4 	.word	0x00082cb4
   80684:	00081089 	.word	0x00081089
   80688:	00080425 	.word	0x00080425

0008068c <test_stateGoesToLockedWhenFourthIncorrectButtonIsPressed>:
}

void test_stateGoesToLockedWhenFourthIncorrectButtonIsPressed(void)
{
   8068c:	b510      	push	{r4, lr}
	instance->state = ReleaseThree;
   8068e:	4c0d      	ldr	r4, [pc, #52]	; (806c4 <test_stateGoesToLockedWhenFourthIncorrectButtonIsPressed+0x38>)
   80690:	6823      	ldr	r3, [r4, #0]
   80692:	2206      	movs	r2, #6
   80694:	701a      	strb	r2, [r3, #0]
	pushButton3(instance);
   80696:	6820      	ldr	r0, [r4, #0]
   80698:	4b0b      	ldr	r3, [pc, #44]	; (806c8 <test_stateGoesToLockedWhenFourthIncorrectButtonIsPressed+0x3c>)
   8069a:	4798      	blx	r3
	TEST_ASSERT_TRUE(instance->state == Locked);
   8069c:	6823      	ldr	r3, [r4, #0]
   8069e:	781b      	ldrb	r3, [r3, #0]
   806a0:	b11b      	cbz	r3, 806aa <test_stateGoesToLockedWhenFourthIncorrectButtonIsPressed+0x1e>
   806a2:	480a      	ldr	r0, [pc, #40]	; (806cc <test_stateGoesToLockedWhenFourthIncorrectButtonIsPressed+0x40>)
   806a4:	215f      	movs	r1, #95	; 0x5f
   806a6:	4b0a      	ldr	r3, [pc, #40]	; (806d0 <test_stateGoesToLockedWhenFourthIncorrectButtonIsPressed+0x44>)
   806a8:	4798      	blx	r3
	releaseButton(instance);
   806aa:	4c06      	ldr	r4, [pc, #24]	; (806c4 <test_stateGoesToLockedWhenFourthIncorrectButtonIsPressed+0x38>)
   806ac:	6820      	ldr	r0, [r4, #0]
   806ae:	4b09      	ldr	r3, [pc, #36]	; (806d4 <test_stateGoesToLockedWhenFourthIncorrectButtonIsPressed+0x48>)
   806b0:	4798      	blx	r3
	TEST_ASSERT_TRUE(instance->state == Locked);
   806b2:	6823      	ldr	r3, [r4, #0]
   806b4:	781b      	ldrb	r3, [r3, #0]
   806b6:	b11b      	cbz	r3, 806c0 <test_stateGoesToLockedWhenFourthIncorrectButtonIsPressed+0x34>
   806b8:	4804      	ldr	r0, [pc, #16]	; (806cc <test_stateGoesToLockedWhenFourthIncorrectButtonIsPressed+0x40>)
   806ba:	2161      	movs	r1, #97	; 0x61
   806bc:	4b04      	ldr	r3, [pc, #16]	; (806d0 <test_stateGoesToLockedWhenFourthIncorrectButtonIsPressed+0x44>)
   806be:	4798      	blx	r3
   806c0:	bd10      	pop	{r4, pc}
   806c2:	bf00      	nop
   806c4:	20070af0 	.word	0x20070af0
   806c8:	00080411 	.word	0x00080411
   806cc:	00082cb4 	.word	0x00082cb4
   806d0:	00081089 	.word	0x00081089
   806d4:	00080425 	.word	0x00080425

000806d8 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
   806d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   806dc:	460e      	mov	r6, r1
   806de:	4615      	mov	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   806e0:	3801      	subs	r0, #1
   806e2:	2802      	cmp	r0, #2
   806e4:	d80f      	bhi.n	80706 <_write+0x2e>
		return -1;
	}

	for (; len != 0; --len) {
   806e6:	b192      	cbz	r2, 8070e <_write+0x36>
   806e8:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
   806ea:	f8df 803c 	ldr.w	r8, [pc, #60]	; 80728 <_write+0x50>
   806ee:	4f0d      	ldr	r7, [pc, #52]	; (80724 <_write+0x4c>)
   806f0:	f8d8 0000 	ldr.w	r0, [r8]
   806f4:	5d31      	ldrb	r1, [r6, r4]
   806f6:	683b      	ldr	r3, [r7, #0]
   806f8:	4798      	blx	r3
   806fa:	2800      	cmp	r0, #0
   806fc:	db0a      	blt.n	80714 <_write+0x3c>
			return -1;
		}
		++nChars;
   806fe:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   80700:	42a5      	cmp	r5, r4
   80702:	d1f5      	bne.n	806f0 <_write+0x18>
   80704:	e00a      	b.n	8071c <_write+0x44>
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
   80706:	f04f 30ff 	mov.w	r0, #4294967295
   8070a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	for (; len != 0; --len) {
   8070e:	2000      	movs	r0, #0
   80710:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
   80714:	f04f 30ff 	mov.w	r0, #4294967295
   80718:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}
		++nChars;
   8071c:	4620      	mov	r0, r4
	}
	return nChars;
}
   8071e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80722:	bf00      	nop
   80724:	20070af4 	.word	0x20070af4
   80728:	20070af8 	.word	0x20070af8

0008072c <usart_serial_read_packet>:
 * \param len    Length of data
 *
 */
status_code_t usart_serial_read_packet(usart_if usart, uint8_t *data,
		size_t len)
{
   8072c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80730:	b083      	sub	sp, #12
   80732:	4605      	mov	r5, r0
	while (len) {
   80734:	4690      	mov	r8, r2
   80736:	2a00      	cmp	r2, #0
   80738:	d047      	beq.n	807ca <usart_serial_read_packet+0x9e>
   8073a:	1c4e      	adds	r6, r1, #1
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   8073c:	4f25      	ldr	r7, [pc, #148]	; (807d4 <usart_serial_read_packet+0xa8>)
		while (usart_read(p_usart, &val));
   8073e:	4c26      	ldr	r4, [pc, #152]	; (807d8 <usart_serial_read_packet+0xac>)
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   80740:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 807ec <usart_serial_read_packet+0xc0>
	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
   80744:	f8df b094 	ldr.w	fp, [pc, #148]	; 807dc <usart_serial_read_packet+0xb0>
   80748:	f106 39ff 	add.w	r9, r6, #4294967295
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
	uint32_t val = 0;
   8074c:	2300      	movs	r3, #0
   8074e:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   80750:	4b22      	ldr	r3, [pc, #136]	; (807dc <usart_serial_read_packet+0xb0>)
   80752:	429d      	cmp	r5, r3
   80754:	d106      	bne.n	80764 <usart_serial_read_packet+0x38>
		while (uart_read((Uart*)p_usart, data));
   80756:	4658      	mov	r0, fp
   80758:	4649      	mov	r1, r9
   8075a:	4b21      	ldr	r3, [pc, #132]	; (807e0 <usart_serial_read_packet+0xb4>)
   8075c:	4798      	blx	r3
   8075e:	2800      	cmp	r0, #0
   80760:	d1f9      	bne.n	80756 <usart_serial_read_packet+0x2a>
   80762:	e019      	b.n	80798 <usart_serial_read_packet+0x6c>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   80764:	4b1f      	ldr	r3, [pc, #124]	; (807e4 <usart_serial_read_packet+0xb8>)
   80766:	429d      	cmp	r5, r3
   80768:	d109      	bne.n	8077e <usart_serial_read_packet+0x52>
		while (usart_read(p_usart, &val));
   8076a:	4699      	mov	r9, r3
   8076c:	4648      	mov	r0, r9
   8076e:	a901      	add	r1, sp, #4
   80770:	47a0      	blx	r4
   80772:	2800      	cmp	r0, #0
   80774:	d1fa      	bne.n	8076c <usart_serial_read_packet+0x40>
		*data = (uint8_t)(val & 0xFF);
   80776:	9b01      	ldr	r3, [sp, #4]
   80778:	f806 3c01 	strb.w	r3, [r6, #-1]
   8077c:	e017      	b.n	807ae <usart_serial_read_packet+0x82>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   8077e:	4b1a      	ldr	r3, [pc, #104]	; (807e8 <usart_serial_read_packet+0xbc>)
   80780:	429d      	cmp	r5, r3
   80782:	d109      	bne.n	80798 <usart_serial_read_packet+0x6c>
		while (usart_read(p_usart, &val));
   80784:	4699      	mov	r9, r3
   80786:	4648      	mov	r0, r9
   80788:	a901      	add	r1, sp, #4
   8078a:	47a0      	blx	r4
   8078c:	2800      	cmp	r0, #0
   8078e:	d1fa      	bne.n	80786 <usart_serial_read_packet+0x5a>
		*data = (uint8_t)(val & 0xFF);
   80790:	9b01      	ldr	r3, [sp, #4]
   80792:	f806 3c01 	strb.w	r3, [r6, #-1]
   80796:	e014      	b.n	807c2 <usart_serial_read_packet+0x96>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   80798:	4555      	cmp	r5, sl
   8079a:	d108      	bne.n	807ae <usart_serial_read_packet+0x82>
		while (usart_read(p_usart, &val));
   8079c:	4650      	mov	r0, sl
   8079e:	a901      	add	r1, sp, #4
   807a0:	47a0      	blx	r4
   807a2:	2800      	cmp	r0, #0
   807a4:	d1fa      	bne.n	8079c <usart_serial_read_packet+0x70>
		*data = (uint8_t)(val & 0xFF);
   807a6:	9b01      	ldr	r3, [sp, #4]
   807a8:	f806 3c01 	strb.w	r3, [r6, #-1]
   807ac:	e009      	b.n	807c2 <usart_serial_read_packet+0x96>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   807ae:	42bd      	cmp	r5, r7
   807b0:	d107      	bne.n	807c2 <usart_serial_read_packet+0x96>
		while (usart_read(p_usart, &val));
   807b2:	4638      	mov	r0, r7
   807b4:	a901      	add	r1, sp, #4
   807b6:	47a0      	blx	r4
   807b8:	2800      	cmp	r0, #0
   807ba:	d1fa      	bne.n	807b2 <usart_serial_read_packet+0x86>
		*data = (uint8_t)(val & 0xFF);
   807bc:	9b01      	ldr	r3, [sp, #4]
   807be:	f806 3c01 	strb.w	r3, [r6, #-1]
   807c2:	3601      	adds	r6, #1
   807c4:	f1b8 0801 	subs.w	r8, r8, #1
   807c8:	d1be      	bne.n	80748 <usart_serial_read_packet+0x1c>
		usart_serial_getchar(usart, data);
		len--;
		data++;
	}
	return STATUS_OK;
}
   807ca:	2000      	movs	r0, #0
   807cc:	b003      	add	sp, #12
   807ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   807d2:	bf00      	nop
   807d4:	400a4000 	.word	0x400a4000
   807d8:	0008019d 	.word	0x0008019d
   807dc:	400e0800 	.word	0x400e0800
   807e0:	00080839 	.word	0x00080839
   807e4:	40098000 	.word	0x40098000
   807e8:	4009c000 	.word	0x4009c000
   807ec:	400a0000 	.word	0x400a0000

000807f0 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   807f0:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   807f2:	23ac      	movs	r3, #172	; 0xac
   807f4:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   807f6:	680a      	ldr	r2, [r1, #0]
   807f8:	684b      	ldr	r3, [r1, #4]
   807fa:	fbb2 f3f3 	udiv	r3, r2, r3
   807fe:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   80800:	1e5c      	subs	r4, r3, #1
   80802:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   80806:	4294      	cmp	r4, r2
   80808:	d80a      	bhi.n	80820 <uart_init+0x30>
		return 1;

	p_uart->UART_BRGR = cd;
   8080a:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   8080c:	688b      	ldr	r3, [r1, #8]
   8080e:	6043      	str	r3, [r0, #4]

	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   80810:	f240 2302 	movw	r3, #514	; 0x202
   80814:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   80818:	2350      	movs	r3, #80	; 0x50
   8081a:	6003      	str	r3, [r0, #0]

	return 0;
   8081c:	2000      	movs	r0, #0
   8081e:	e000      	b.n	80822 <uart_init+0x32>

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
		return 1;
   80820:	2001      	movs	r0, #1

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;

	return 0;
}
   80822:	f85d 4b04 	ldr.w	r4, [sp], #4
   80826:	4770      	bx	lr

00080828 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   80828:	6943      	ldr	r3, [r0, #20]
   8082a:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
   8082e:	bf1a      	itte	ne
   80830:	61c1      	strne	r1, [r0, #28]
	return 0;
   80832:	2000      	movne	r0, #0
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
   80834:	2001      	moveq	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
   80836:	4770      	bx	lr

00080838 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   80838:	6943      	ldr	r3, [r0, #20]
   8083a:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   8083e:	bf1d      	ittte	ne
   80840:	6983      	ldrne	r3, [r0, #24]
   80842:	700b      	strbne	r3, [r1, #0]
	return 0;
   80844:	2000      	movne	r0, #0
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
   80846:	2001      	moveq	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
   80848:	4770      	bx	lr
   8084a:	bf00      	nop

0008084c <main>:

extern codeLockType SM;				/* The memory area for the state machine */
extern codeLockPtrType instance;	/* A pointer to a state machine of this type */

int main (void)
{
   8084c:	b510      	push	{r4, lr}
	sysclk_init();	/* Insert system clock initialization code here (sysclk_init()). */
   8084e:	4b1a      	ldr	r3, [pc, #104]	; (808b8 <main+0x6c>)
   80850:	4798      	blx	r3
	board_init();
   80852:	4b1a      	ldr	r3, [pc, #104]	; (808bc <main+0x70>)
   80854:	4798      	blx	r3

	configureConsole();	/* Initialize the console UART used from within Atmel Studio*/
   80856:	4b1a      	ldr	r3, [pc, #104]	; (808c0 <main+0x74>)
   80858:	4798      	blx	r3
	//UnityBegin("../test/test_delayFunctions.c");	/* Run the tests for the delay from the test-file */
	//RUN_TEST(test_delayTimerIsInitialisedProperly, 5);
	//RUN_TEST(test_delayCountsProperly, 8);
	//UnityEnd();
	
	instance = &SM;				/* Pointing to the state machine used */
   8085a:	4a1a      	ldr	r2, [pc, #104]	; (808c4 <main+0x78>)
   8085c:	4b1a      	ldr	r3, [pc, #104]	; (808c8 <main+0x7c>)
   8085e:	601a      	str	r2, [r3, #0]
	
	UnityBegin("../test/test_stateMachine.c");	/* Run the tests for the delay from the test-file */
   80860:	481a      	ldr	r0, [pc, #104]	; (808cc <main+0x80>)
   80862:	4b1b      	ldr	r3, [pc, #108]	; (808d0 <main+0x84>)
   80864:	4798      	blx	r3
	RUN_TEST(test_stateMachineStartsInLockedState, 10);
   80866:	481b      	ldr	r0, [pc, #108]	; (808d4 <main+0x88>)
   80868:	491b      	ldr	r1, [pc, #108]	; (808d8 <main+0x8c>)
   8086a:	220a      	movs	r2, #10
   8086c:	4c1b      	ldr	r4, [pc, #108]	; (808dc <main+0x90>)
   8086e:	47a0      	blx	r4

	RUN_TEST(test_stateGoesToPushOneWhenFirstCorrectButtonIsPressed, 20);
   80870:	481b      	ldr	r0, [pc, #108]	; (808e0 <main+0x94>)
   80872:	491c      	ldr	r1, [pc, #112]	; (808e4 <main+0x98>)
   80874:	2214      	movs	r2, #20
   80876:	47a0      	blx	r4
	RUN_TEST(test_stateGoesToLockedWhenFirstIncorrectButtonIsPressed, 22);
   80878:	481b      	ldr	r0, [pc, #108]	; (808e8 <main+0x9c>)
   8087a:	491c      	ldr	r1, [pc, #112]	; (808ec <main+0xa0>)
   8087c:	2216      	movs	r2, #22
   8087e:	47a0      	blx	r4

	RUN_TEST(test_stateGoesToPushTwoWhenSecondCorrectButtonIsPressed, 30);
   80880:	481b      	ldr	r0, [pc, #108]	; (808f0 <main+0xa4>)
   80882:	491c      	ldr	r1, [pc, #112]	; (808f4 <main+0xa8>)
   80884:	221e      	movs	r2, #30
   80886:	47a0      	blx	r4
	RUN_TEST(test_stateGoesToLockedWhenSecondIncorrectButtonIsPressed, 32);
   80888:	481b      	ldr	r0, [pc, #108]	; (808f8 <main+0xac>)
   8088a:	491c      	ldr	r1, [pc, #112]	; (808fc <main+0xb0>)
   8088c:	2220      	movs	r2, #32
   8088e:	47a0      	blx	r4

	RUN_TEST(test_stateGoesToPushThreeWhenThirdCorrectButtonIsPressed, 40);
   80890:	481b      	ldr	r0, [pc, #108]	; (80900 <main+0xb4>)
   80892:	491c      	ldr	r1, [pc, #112]	; (80904 <main+0xb8>)
   80894:	2228      	movs	r2, #40	; 0x28
   80896:	47a0      	blx	r4
	RUN_TEST(test_stateGoesToLockedWhenThirdIncorrectButtonIsPressed, 42);
   80898:	481b      	ldr	r0, [pc, #108]	; (80908 <main+0xbc>)
   8089a:	491c      	ldr	r1, [pc, #112]	; (8090c <main+0xc0>)
   8089c:	222a      	movs	r2, #42	; 0x2a
   8089e:	47a0      	blx	r4

	RUN_TEST(test_stateGoesToOpenWhenFourthCorrectButtonIsPressed, 50);
   808a0:	481b      	ldr	r0, [pc, #108]	; (80910 <main+0xc4>)
   808a2:	491c      	ldr	r1, [pc, #112]	; (80914 <main+0xc8>)
   808a4:	2232      	movs	r2, #50	; 0x32
   808a6:	47a0      	blx	r4
	RUN_TEST(test_stateGoesToLockedWhenFourthIncorrectButtonIsPressed, 52);
   808a8:	481b      	ldr	r0, [pc, #108]	; (80918 <main+0xcc>)
   808aa:	491c      	ldr	r1, [pc, #112]	; (8091c <main+0xd0>)
   808ac:	2234      	movs	r2, #52	; 0x34
   808ae:	47a0      	blx	r4
	UnityEnd();
   808b0:	4b1b      	ldr	r3, [pc, #108]	; (80920 <main+0xd4>)
   808b2:	4798      	blx	r3
		
	return 0;
}
   808b4:	2000      	movs	r0, #0
   808b6:	bd10      	pop	{r4, pc}
   808b8:	000813d1 	.word	0x000813d1
   808bc:	00081435 	.word	0x00081435
   808c0:	00080365 	.word	0x00080365
   808c4:	20070adc 	.word	0x20070adc
   808c8:	20070af0 	.word	0x20070af0
   808cc:	00082cd0 	.word	0x00082cd0
   808d0:	000811ed 	.word	0x000811ed
   808d4:	00080439 	.word	0x00080439
   808d8:	00082cec 	.word	0x00082cec
   808dc:	00081195 	.word	0x00081195
   808e0:	00080469 	.word	0x00080469
   808e4:	00082d14 	.word	0x00082d14
   808e8:	000804b9 	.word	0x000804b9
   808ec:	00082d4c 	.word	0x00082d4c
   808f0:	00080505 	.word	0x00080505
   808f4:	00082d84 	.word	0x00082d84
   808f8:	00080555 	.word	0x00080555
   808fc:	00082dbc 	.word	0x00082dbc
   80900:	000805a1 	.word	0x000805a1
   80904:	00082df8 	.word	0x00082df8
   80908:	000805f1 	.word	0x000805f1
   8090c:	00082e34 	.word	0x00082e34
   80910:	0008063d 	.word	0x0008063d
   80914:	00082e6c 	.word	0x00082e6c
   80918:	0008068d 	.word	0x0008068d
   8091c:	00082ea4 	.word	0x00082ea4
   80920:	00081209 	.word	0x00081209

00080924 <setUp>:

void setUp(void)
{
   80924:	4770      	bx	lr
   80926:	bf00      	nop

00080928 <tearDown>:
	/* Do nothing */
}

void tearDown(void)
{
   80928:	4770      	bx	lr
   8092a:	bf00      	nop

0008092c <UnityPrintNumber>:
}

//-----------------------------------------------
/// basically do an itoa using as little ram as possible
void UnityPrintNumber(const _U_SINT number_to_print)
{
   8092c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80930:	4605      	mov	r5, r0
    _U_SINT divisor = 1;
    _U_SINT next_divisor;
    _U_UINT number;

    if (number_to_print == (1l << (UNITY_LONG_WIDTH-1)))
   80932:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
   80936:	d132      	bne.n	8099e <UnityPrintNumber+0x72>
    {
        //The largest representable negative number
        UNITY_OUTPUT_CHAR('-');
   80938:	4b5f      	ldr	r3, [pc, #380]	; (80ab8 <UnityPrintNumber+0x18c>)
   8093a:	6818      	ldr	r0, [r3, #0]
   8093c:	6882      	ldr	r2, [r0, #8]
   8093e:	6893      	ldr	r3, [r2, #8]
   80940:	3b01      	subs	r3, #1
   80942:	6093      	str	r3, [r2, #8]
   80944:	2b00      	cmp	r3, #0
   80946:	da1d      	bge.n	80984 <UnityPrintNumber+0x58>
   80948:	6882      	ldr	r2, [r0, #8]
   8094a:	6891      	ldr	r1, [r2, #8]
   8094c:	6993      	ldr	r3, [r2, #24]
   8094e:	4299      	cmp	r1, r3
   80950:	db12      	blt.n	80978 <UnityPrintNumber+0x4c>
   80952:	6813      	ldr	r3, [r2, #0]
   80954:	222d      	movs	r2, #45	; 0x2d
   80956:	701a      	strb	r2, [r3, #0]
   80958:	4b57      	ldr	r3, [pc, #348]	; (80ab8 <UnityPrintNumber+0x18c>)
   8095a:	6818      	ldr	r0, [r3, #0]
   8095c:	6882      	ldr	r2, [r0, #8]
   8095e:	6813      	ldr	r3, [r2, #0]
   80960:	7819      	ldrb	r1, [r3, #0]
   80962:	290a      	cmp	r1, #10
   80964:	d002      	beq.n	8096c <UnityPrintNumber+0x40>
   80966:	3301      	adds	r3, #1
   80968:	6013      	str	r3, [r2, #0]
   8096a:	e04f      	b.n	80a0c <UnityPrintNumber+0xe0>
   8096c:	210a      	movs	r1, #10
   8096e:	4b53      	ldr	r3, [pc, #332]	; (80abc <UnityPrintNumber+0x190>)
   80970:	4798      	blx	r3
        number = (1ul << (UNITY_LONG_WIDTH-1));
   80972:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
   80976:	e049      	b.n	80a0c <UnityPrintNumber+0xe0>
    _U_UINT number;

    if (number_to_print == (1l << (UNITY_LONG_WIDTH-1)))
    {
        //The largest representable negative number
        UNITY_OUTPUT_CHAR('-');
   80978:	212d      	movs	r1, #45	; 0x2d
   8097a:	4b50      	ldr	r3, [pc, #320]	; (80abc <UnityPrintNumber+0x190>)
   8097c:	4798      	blx	r3
        number = (1ul << (UNITY_LONG_WIDTH-1));
   8097e:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
   80982:	e043      	b.n	80a0c <UnityPrintNumber+0xe0>
    _U_UINT number;

    if (number_to_print == (1l << (UNITY_LONG_WIDTH-1)))
    {
        //The largest representable negative number
        UNITY_OUTPUT_CHAR('-');
   80984:	6883      	ldr	r3, [r0, #8]
   80986:	681b      	ldr	r3, [r3, #0]
   80988:	222d      	movs	r2, #45	; 0x2d
   8098a:	701a      	strb	r2, [r3, #0]
   8098c:	4b4a      	ldr	r3, [pc, #296]	; (80ab8 <UnityPrintNumber+0x18c>)
   8098e:	681b      	ldr	r3, [r3, #0]
   80990:	689b      	ldr	r3, [r3, #8]
   80992:	681a      	ldr	r2, [r3, #0]
   80994:	3201      	adds	r2, #1
   80996:	601a      	str	r2, [r3, #0]
        number = (1ul << (UNITY_LONG_WIDTH-1));
   80998:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
   8099c:	e036      	b.n	80a0c <UnityPrintNumber+0xe0>
    }
    else if (number_to_print < 0)
   8099e:	2800      	cmp	r0, #0
   809a0:	da34      	bge.n	80a0c <UnityPrintNumber+0xe0>
    {
        //Some other negative number
        UNITY_OUTPUT_CHAR('-');
   809a2:	4b45      	ldr	r3, [pc, #276]	; (80ab8 <UnityPrintNumber+0x18c>)
   809a4:	6818      	ldr	r0, [r3, #0]
   809a6:	6882      	ldr	r2, [r0, #8]
   809a8:	6893      	ldr	r3, [r2, #8]
   809aa:	3b01      	subs	r3, #1
   809ac:	6093      	str	r3, [r2, #8]
   809ae:	2b00      	cmp	r3, #0
   809b0:	da19      	bge.n	809e6 <UnityPrintNumber+0xba>
   809b2:	6882      	ldr	r2, [r0, #8]
   809b4:	6891      	ldr	r1, [r2, #8]
   809b6:	6993      	ldr	r3, [r2, #24]
   809b8:	4299      	cmp	r1, r3
   809ba:	db10      	blt.n	809de <UnityPrintNumber+0xb2>
   809bc:	6813      	ldr	r3, [r2, #0]
   809be:	222d      	movs	r2, #45	; 0x2d
   809c0:	701a      	strb	r2, [r3, #0]
   809c2:	4b3d      	ldr	r3, [pc, #244]	; (80ab8 <UnityPrintNumber+0x18c>)
   809c4:	6818      	ldr	r0, [r3, #0]
   809c6:	6882      	ldr	r2, [r0, #8]
   809c8:	6813      	ldr	r3, [r2, #0]
   809ca:	7819      	ldrb	r1, [r3, #0]
   809cc:	290a      	cmp	r1, #10
   809ce:	d002      	beq.n	809d6 <UnityPrintNumber+0xaa>
   809d0:	3301      	adds	r3, #1
   809d2:	6013      	str	r3, [r2, #0]
   809d4:	e011      	b.n	809fa <UnityPrintNumber+0xce>
   809d6:	210a      	movs	r1, #10
   809d8:	4b38      	ldr	r3, [pc, #224]	; (80abc <UnityPrintNumber+0x190>)
   809da:	4798      	blx	r3
   809dc:	e00d      	b.n	809fa <UnityPrintNumber+0xce>
   809de:	212d      	movs	r1, #45	; 0x2d
   809e0:	4b36      	ldr	r3, [pc, #216]	; (80abc <UnityPrintNumber+0x190>)
   809e2:	4798      	blx	r3
   809e4:	e009      	b.n	809fa <UnityPrintNumber+0xce>
   809e6:	6883      	ldr	r3, [r0, #8]
   809e8:	681b      	ldr	r3, [r3, #0]
   809ea:	222d      	movs	r2, #45	; 0x2d
   809ec:	701a      	strb	r2, [r3, #0]
   809ee:	4b32      	ldr	r3, [pc, #200]	; (80ab8 <UnityPrintNumber+0x18c>)
   809f0:	681b      	ldr	r3, [r3, #0]
   809f2:	689b      	ldr	r3, [r3, #8]
   809f4:	681a      	ldr	r2, [r3, #0]
   809f6:	3201      	adds	r2, #1
   809f8:	601a      	str	r2, [r3, #0]
        number = (_U_UINT)(-number_to_print);
   809fa:	426d      	negs	r5, r5
   809fc:	e006      	b.n	80a0c <UnityPrintNumber+0xe0>
    }

    // figure out initial divisor
    while (number / divisor > 9)
    {
        next_divisor = divisor * 10;
   809fe:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   80a02:	005b      	lsls	r3, r3, #1
        if (next_divisor > divisor)
   80a04:	429c      	cmp	r4, r3
   80a06:	da06      	bge.n	80a16 <UnityPrintNumber+0xea>
            divisor = next_divisor;
   80a08:	461c      	mov	r4, r3
   80a0a:	e000      	b.n	80a0e <UnityPrintNumber+0xe2>

    if (number_to_print == (1l << (UNITY_LONG_WIDTH-1)))
    {
        //The largest representable negative number
        UNITY_OUTPUT_CHAR('-');
        number = (1ul << (UNITY_LONG_WIDTH-1));
   80a0c:	2401      	movs	r4, #1
        //Positive number
        number = (_U_UINT)number_to_print;
    }

    // figure out initial divisor
    while (number / divisor > 9)
   80a0e:	fbb5 f3f4 	udiv	r3, r5, r4
   80a12:	2b09      	cmp	r3, #9
   80a14:	d8f3      	bhi.n	809fe <UnityPrintNumber+0xd2>
    }

    // now mod and print, then divide divisor
    do
    {
        UNITY_OUTPUT_CHAR((char)('0' + (number / divisor % 10)));
   80a16:	4e28      	ldr	r6, [pc, #160]	; (80ab8 <UnityPrintNumber+0x18c>)
   80a18:	4f29      	ldr	r7, [pc, #164]	; (80ac0 <UnityPrintNumber+0x194>)
   80a1a:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 80abc <UnityPrintNumber+0x190>
   80a1e:	6830      	ldr	r0, [r6, #0]
   80a20:	6882      	ldr	r2, [r0, #8]
   80a22:	6893      	ldr	r3, [r2, #8]
   80a24:	3b01      	subs	r3, #1
   80a26:	6093      	str	r3, [r2, #8]
   80a28:	2b00      	cmp	r3, #0
   80a2a:	da29      	bge.n	80a80 <UnityPrintNumber+0x154>
   80a2c:	6882      	ldr	r2, [r0, #8]
   80a2e:	6891      	ldr	r1, [r2, #8]
   80a30:	6993      	ldr	r3, [r2, #24]
   80a32:	4299      	cmp	r1, r3
   80a34:	db17      	blt.n	80a66 <UnityPrintNumber+0x13a>
   80a36:	6811      	ldr	r1, [r2, #0]
   80a38:	fbb5 f3f4 	udiv	r3, r5, r4
   80a3c:	fba7 0203 	umull	r0, r2, r7, r3
   80a40:	08d2      	lsrs	r2, r2, #3
   80a42:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   80a46:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
   80a4a:	3330      	adds	r3, #48	; 0x30
   80a4c:	700b      	strb	r3, [r1, #0]
   80a4e:	6830      	ldr	r0, [r6, #0]
   80a50:	6882      	ldr	r2, [r0, #8]
   80a52:	6813      	ldr	r3, [r2, #0]
   80a54:	7819      	ldrb	r1, [r3, #0]
   80a56:	290a      	cmp	r1, #10
   80a58:	d002      	beq.n	80a60 <UnityPrintNumber+0x134>
   80a5a:	3301      	adds	r3, #1
   80a5c:	6013      	str	r3, [r2, #0]
   80a5e:	e021      	b.n	80aa4 <UnityPrintNumber+0x178>
   80a60:	210a      	movs	r1, #10
   80a62:	47c0      	blx	r8
   80a64:	e01e      	b.n	80aa4 <UnityPrintNumber+0x178>
   80a66:	fbb5 f3f4 	udiv	r3, r5, r4
   80a6a:	fba7 e103 	umull	lr, r1, r7, r3
   80a6e:	08c9      	lsrs	r1, r1, #3
   80a70:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   80a74:	eba3 0141 	sub.w	r1, r3, r1, lsl #1
   80a78:	3130      	adds	r1, #48	; 0x30
   80a7a:	b2c9      	uxtb	r1, r1
   80a7c:	47c0      	blx	r8
   80a7e:	e011      	b.n	80aa4 <UnityPrintNumber+0x178>
   80a80:	6883      	ldr	r3, [r0, #8]
   80a82:	6819      	ldr	r1, [r3, #0]
   80a84:	fbb5 f3f4 	udiv	r3, r5, r4
   80a88:	fba7 0203 	umull	r0, r2, r7, r3
   80a8c:	08d2      	lsrs	r2, r2, #3
   80a8e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   80a92:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
   80a96:	3330      	adds	r3, #48	; 0x30
   80a98:	700b      	strb	r3, [r1, #0]
   80a9a:	6833      	ldr	r3, [r6, #0]
   80a9c:	689b      	ldr	r3, [r3, #8]
   80a9e:	681a      	ldr	r2, [r3, #0]
   80aa0:	3201      	adds	r2, #1
   80aa2:	601a      	str	r2, [r3, #0]
        divisor /= 10;
   80aa4:	4b07      	ldr	r3, [pc, #28]	; (80ac4 <UnityPrintNumber+0x198>)
   80aa6:	fb83 2304 	smull	r2, r3, r3, r4
   80aaa:	17e4      	asrs	r4, r4, #31
   80aac:	ebc4 04a3 	rsb	r4, r4, r3, asr #2
    }
    while (divisor > 0);
   80ab0:	2c00      	cmp	r4, #0
   80ab2:	dcb4      	bgt.n	80a1e <UnityPrintNumber+0xf2>
}
   80ab4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80ab8:	20070560 	.word	0x20070560
   80abc:	00081ce5 	.word	0x00081ce5
   80ac0:	cccccccd 	.word	0xcccccccd
   80ac4:	66666667 	.word	0x66666667

00080ac8 <UnityPrintNumberHex>:
    while (divisor > 0);
}

//-----------------------------------------------
void UnityPrintNumberHex(const _U_UINT number, const char nibbles_to_print)
{
   80ac8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   80acc:	4606      	mov	r6, r0
   80ace:	460c      	mov	r4, r1
    _U_UINT nibble;
    char nibbles = nibbles_to_print;
    UNITY_OUTPUT_CHAR('0');
   80ad0:	4b5e      	ldr	r3, [pc, #376]	; (80c4c <UnityPrintNumberHex+0x184>)
   80ad2:	6818      	ldr	r0, [r3, #0]
   80ad4:	6882      	ldr	r2, [r0, #8]
   80ad6:	6893      	ldr	r3, [r2, #8]
   80ad8:	3b01      	subs	r3, #1
   80ada:	6093      	str	r3, [r2, #8]
   80adc:	2b00      	cmp	r3, #0
   80ade:	da19      	bge.n	80b14 <UnityPrintNumberHex+0x4c>
   80ae0:	6882      	ldr	r2, [r0, #8]
   80ae2:	6891      	ldr	r1, [r2, #8]
   80ae4:	6993      	ldr	r3, [r2, #24]
   80ae6:	4299      	cmp	r1, r3
   80ae8:	db10      	blt.n	80b0c <UnityPrintNumberHex+0x44>
   80aea:	6813      	ldr	r3, [r2, #0]
   80aec:	2230      	movs	r2, #48	; 0x30
   80aee:	701a      	strb	r2, [r3, #0]
   80af0:	4b56      	ldr	r3, [pc, #344]	; (80c4c <UnityPrintNumberHex+0x184>)
   80af2:	6818      	ldr	r0, [r3, #0]
   80af4:	6882      	ldr	r2, [r0, #8]
   80af6:	6813      	ldr	r3, [r2, #0]
   80af8:	7819      	ldrb	r1, [r3, #0]
   80afa:	290a      	cmp	r1, #10
   80afc:	d002      	beq.n	80b04 <UnityPrintNumberHex+0x3c>
   80afe:	3301      	adds	r3, #1
   80b00:	6013      	str	r3, [r2, #0]
   80b02:	e011      	b.n	80b28 <UnityPrintNumberHex+0x60>
   80b04:	210a      	movs	r1, #10
   80b06:	4b52      	ldr	r3, [pc, #328]	; (80c50 <UnityPrintNumberHex+0x188>)
   80b08:	4798      	blx	r3
   80b0a:	e00d      	b.n	80b28 <UnityPrintNumberHex+0x60>
   80b0c:	2130      	movs	r1, #48	; 0x30
   80b0e:	4b50      	ldr	r3, [pc, #320]	; (80c50 <UnityPrintNumberHex+0x188>)
   80b10:	4798      	blx	r3
   80b12:	e009      	b.n	80b28 <UnityPrintNumberHex+0x60>
   80b14:	6883      	ldr	r3, [r0, #8]
   80b16:	681b      	ldr	r3, [r3, #0]
   80b18:	2230      	movs	r2, #48	; 0x30
   80b1a:	701a      	strb	r2, [r3, #0]
   80b1c:	4b4b      	ldr	r3, [pc, #300]	; (80c4c <UnityPrintNumberHex+0x184>)
   80b1e:	681b      	ldr	r3, [r3, #0]
   80b20:	689b      	ldr	r3, [r3, #8]
   80b22:	681a      	ldr	r2, [r3, #0]
   80b24:	3201      	adds	r2, #1
   80b26:	601a      	str	r2, [r3, #0]
    UNITY_OUTPUT_CHAR('x');
   80b28:	4b48      	ldr	r3, [pc, #288]	; (80c4c <UnityPrintNumberHex+0x184>)
   80b2a:	6818      	ldr	r0, [r3, #0]
   80b2c:	6882      	ldr	r2, [r0, #8]
   80b2e:	6893      	ldr	r3, [r2, #8]
   80b30:	3b01      	subs	r3, #1
   80b32:	6093      	str	r3, [r2, #8]
   80b34:	2b00      	cmp	r3, #0
   80b36:	da1b      	bge.n	80b70 <UnityPrintNumberHex+0xa8>
   80b38:	6882      	ldr	r2, [r0, #8]
   80b3a:	6891      	ldr	r1, [r2, #8]
   80b3c:	6993      	ldr	r3, [r2, #24]
   80b3e:	4299      	cmp	r1, r3
   80b40:	db10      	blt.n	80b64 <UnityPrintNumberHex+0x9c>
   80b42:	6813      	ldr	r3, [r2, #0]
   80b44:	2278      	movs	r2, #120	; 0x78
   80b46:	701a      	strb	r2, [r3, #0]
   80b48:	4b40      	ldr	r3, [pc, #256]	; (80c4c <UnityPrintNumberHex+0x184>)
   80b4a:	6818      	ldr	r0, [r3, #0]
   80b4c:	6882      	ldr	r2, [r0, #8]
   80b4e:	6813      	ldr	r3, [r2, #0]
   80b50:	7819      	ldrb	r1, [r3, #0]
   80b52:	290a      	cmp	r1, #10
   80b54:	d002      	beq.n	80b5c <UnityPrintNumberHex+0x94>
   80b56:	3301      	adds	r3, #1
   80b58:	6013      	str	r3, [r2, #0]
   80b5a:	e006      	b.n	80b6a <UnityPrintNumberHex+0xa2>
   80b5c:	210a      	movs	r1, #10
   80b5e:	4b3c      	ldr	r3, [pc, #240]	; (80c50 <UnityPrintNumberHex+0x188>)
   80b60:	4798      	blx	r3
   80b62:	e002      	b.n	80b6a <UnityPrintNumberHex+0xa2>
   80b64:	2178      	movs	r1, #120	; 0x78
   80b66:	4b3a      	ldr	r3, [pc, #232]	; (80c50 <UnityPrintNumberHex+0x188>)
   80b68:	4798      	blx	r3

    while (nibbles > 0)
   80b6a:	b964      	cbnz	r4, 80b86 <UnityPrintNumberHex+0xbe>
   80b6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
void UnityPrintNumberHex(const _U_UINT number, const char nibbles_to_print)
{
    _U_UINT nibble;
    char nibbles = nibbles_to_print;
    UNITY_OUTPUT_CHAR('0');
    UNITY_OUTPUT_CHAR('x');
   80b70:	6883      	ldr	r3, [r0, #8]
   80b72:	681b      	ldr	r3, [r3, #0]
   80b74:	2278      	movs	r2, #120	; 0x78
   80b76:	701a      	strb	r2, [r3, #0]
   80b78:	4b34      	ldr	r3, [pc, #208]	; (80c4c <UnityPrintNumberHex+0x184>)
   80b7a:	681b      	ldr	r3, [r3, #0]
   80b7c:	689b      	ldr	r3, [r3, #8]
   80b7e:	681a      	ldr	r2, [r3, #0]
   80b80:	3201      	adds	r2, #1
   80b82:	601a      	str	r2, [r3, #0]
   80b84:	e7f1      	b.n	80b6a <UnityPrintNumberHex+0xa2>
        {
            UNITY_OUTPUT_CHAR((char)('0' + nibble));
        }
        else
        {
            UNITY_OUTPUT_CHAR((char)('A' - 10 + nibble));
   80b86:	4d31      	ldr	r5, [pc, #196]	; (80c4c <UnityPrintNumberHex+0x184>)
   80b88:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 80c50 <UnityPrintNumberHex+0x188>
   80b8c:	f04f 080a 	mov.w	r8, #10
    UNITY_OUTPUT_CHAR('0');
    UNITY_OUTPUT_CHAR('x');

    while (nibbles > 0)
    {
        nibble = (number >> (--nibbles << 2)) & 0x0000000F;
   80b90:	3c01      	subs	r4, #1
   80b92:	b2e4      	uxtb	r4, r4
   80b94:	00a3      	lsls	r3, r4, #2
   80b96:	fa26 f303 	lsr.w	r3, r6, r3
   80b9a:	f003 030f 	and.w	r3, r3, #15
        if (nibble <= 9)
   80b9e:	2b09      	cmp	r3, #9
   80ba0:	d828      	bhi.n	80bf4 <UnityPrintNumberHex+0x12c>
        {
            UNITY_OUTPUT_CHAR((char)('0' + nibble));
   80ba2:	6828      	ldr	r0, [r5, #0]
   80ba4:	6881      	ldr	r1, [r0, #8]
   80ba6:	688a      	ldr	r2, [r1, #8]
   80ba8:	3a01      	subs	r2, #1
   80baa:	608a      	str	r2, [r1, #8]
   80bac:	2a00      	cmp	r2, #0
   80bae:	da17      	bge.n	80be0 <UnityPrintNumberHex+0x118>
   80bb0:	6882      	ldr	r2, [r0, #8]
   80bb2:	6891      	ldr	r1, [r2, #8]
   80bb4:	6997      	ldr	r7, [r2, #24]
   80bb6:	42b9      	cmp	r1, r7
   80bb8:	db0e      	blt.n	80bd8 <UnityPrintNumberHex+0x110>
   80bba:	6812      	ldr	r2, [r2, #0]
   80bbc:	3330      	adds	r3, #48	; 0x30
   80bbe:	7013      	strb	r3, [r2, #0]
   80bc0:	6828      	ldr	r0, [r5, #0]
   80bc2:	6882      	ldr	r2, [r0, #8]
   80bc4:	6813      	ldr	r3, [r2, #0]
   80bc6:	7819      	ldrb	r1, [r3, #0]
   80bc8:	290a      	cmp	r1, #10
   80bca:	d002      	beq.n	80bd2 <UnityPrintNumberHex+0x10a>
   80bcc:	3301      	adds	r3, #1
   80bce:	6013      	str	r3, [r2, #0]
   80bd0:	e038      	b.n	80c44 <UnityPrintNumberHex+0x17c>
   80bd2:	4641      	mov	r1, r8
   80bd4:	47c8      	blx	r9
   80bd6:	e035      	b.n	80c44 <UnityPrintNumberHex+0x17c>
   80bd8:	f103 0130 	add.w	r1, r3, #48	; 0x30
   80bdc:	47c8      	blx	r9
   80bde:	e031      	b.n	80c44 <UnityPrintNumberHex+0x17c>
   80be0:	6882      	ldr	r2, [r0, #8]
   80be2:	6812      	ldr	r2, [r2, #0]
   80be4:	3330      	adds	r3, #48	; 0x30
   80be6:	7013      	strb	r3, [r2, #0]
   80be8:	682b      	ldr	r3, [r5, #0]
   80bea:	689b      	ldr	r3, [r3, #8]
   80bec:	681a      	ldr	r2, [r3, #0]
   80bee:	3201      	adds	r2, #1
   80bf0:	601a      	str	r2, [r3, #0]
   80bf2:	e027      	b.n	80c44 <UnityPrintNumberHex+0x17c>
        }
        else
        {
            UNITY_OUTPUT_CHAR((char)('A' - 10 + nibble));
   80bf4:	6828      	ldr	r0, [r5, #0]
   80bf6:	6881      	ldr	r1, [r0, #8]
   80bf8:	688a      	ldr	r2, [r1, #8]
   80bfa:	3a01      	subs	r2, #1
   80bfc:	608a      	str	r2, [r1, #8]
   80bfe:	2a00      	cmp	r2, #0
   80c00:	da17      	bge.n	80c32 <UnityPrintNumberHex+0x16a>
   80c02:	6882      	ldr	r2, [r0, #8]
   80c04:	6891      	ldr	r1, [r2, #8]
   80c06:	6997      	ldr	r7, [r2, #24]
   80c08:	42b9      	cmp	r1, r7
   80c0a:	db0e      	blt.n	80c2a <UnityPrintNumberHex+0x162>
   80c0c:	6812      	ldr	r2, [r2, #0]
   80c0e:	3337      	adds	r3, #55	; 0x37
   80c10:	7013      	strb	r3, [r2, #0]
   80c12:	6828      	ldr	r0, [r5, #0]
   80c14:	6882      	ldr	r2, [r0, #8]
   80c16:	6813      	ldr	r3, [r2, #0]
   80c18:	7819      	ldrb	r1, [r3, #0]
   80c1a:	290a      	cmp	r1, #10
   80c1c:	d002      	beq.n	80c24 <UnityPrintNumberHex+0x15c>
   80c1e:	3301      	adds	r3, #1
   80c20:	6013      	str	r3, [r2, #0]
   80c22:	e00f      	b.n	80c44 <UnityPrintNumberHex+0x17c>
   80c24:	4641      	mov	r1, r8
   80c26:	47c8      	blx	r9
   80c28:	e00c      	b.n	80c44 <UnityPrintNumberHex+0x17c>
   80c2a:	f103 0137 	add.w	r1, r3, #55	; 0x37
   80c2e:	47c8      	blx	r9
   80c30:	e008      	b.n	80c44 <UnityPrintNumberHex+0x17c>
   80c32:	6882      	ldr	r2, [r0, #8]
   80c34:	6812      	ldr	r2, [r2, #0]
   80c36:	3337      	adds	r3, #55	; 0x37
   80c38:	7013      	strb	r3, [r2, #0]
   80c3a:	682b      	ldr	r3, [r5, #0]
   80c3c:	689b      	ldr	r3, [r3, #8]
   80c3e:	681a      	ldr	r2, [r3, #0]
   80c40:	3201      	adds	r2, #1
   80c42:	601a      	str	r2, [r3, #0]
    _U_UINT nibble;
    char nibbles = nibbles_to_print;
    UNITY_OUTPUT_CHAR('0');
    UNITY_OUTPUT_CHAR('x');

    while (nibbles > 0)
   80c44:	2c00      	cmp	r4, #0
   80c46:	d1a3      	bne.n	80b90 <UnityPrintNumberHex+0xc8>
   80c48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   80c4c:	20070560 	.word	0x20070560
   80c50:	00081ce5 	.word	0x00081ce5

00080c54 <UnityPrint>:
//-----------------------------------------------
// Pretty Printers & Test Result Output Handlers
//-----------------------------------------------

void UnityPrint(const char* string)
{
   80c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    const char* pch = string;

    if (pch != NULL)
   80c56:	2800      	cmp	r0, #0
   80c58:	f000 810a 	beq.w	80e70 <UnityPrint+0x21c>
    {
        while (*pch)
   80c5c:	7803      	ldrb	r3, [r0, #0]
   80c5e:	2b00      	cmp	r3, #0
   80c60:	f000 8106 	beq.w	80e70 <UnityPrint+0x21c>
   80c64:	1c44      	adds	r4, r0, #1
                UNITY_OUTPUT_CHAR('n');
            }
            // unprintable characters are shown as codes
            else
            {
                UNITY_OUTPUT_CHAR('\\');
   80c66:	4d83      	ldr	r5, [pc, #524]	; (80e74 <UnityPrint+0x220>)
                UnityPrintNumberHex((_U_UINT)*pch, 2);
   80c68:	4e83      	ldr	r6, [pc, #524]	; (80e78 <UnityPrint+0x224>)
                UNITY_OUTPUT_CHAR('n');
            }
            // unprintable characters are shown as codes
            else
            {
                UNITY_OUTPUT_CHAR('\\');
   80c6a:	4f84      	ldr	r7, [pc, #528]	; (80e7c <UnityPrint+0x228>)
    if (pch != NULL)
    {
        while (*pch)
        {
            // printable characters plus CR & LF are printed
            if ((*pch <= 126) && (*pch >= 32))
   80c6c:	f1a3 0220 	sub.w	r2, r3, #32
   80c70:	b2d2      	uxtb	r2, r2
   80c72:	2a5e      	cmp	r2, #94	; 0x5e
   80c74:	d82a      	bhi.n	80ccc <UnityPrint+0x78>
            {
                UNITY_OUTPUT_CHAR(*pch);
   80c76:	6828      	ldr	r0, [r5, #0]
   80c78:	6882      	ldr	r2, [r0, #8]
   80c7a:	6893      	ldr	r3, [r2, #8]
   80c7c:	3b01      	subs	r3, #1
   80c7e:	6093      	str	r3, [r2, #8]
   80c80:	2b00      	cmp	r3, #0
   80c82:	da18      	bge.n	80cb6 <UnityPrint+0x62>
   80c84:	6882      	ldr	r2, [r0, #8]
   80c86:	6891      	ldr	r1, [r2, #8]
   80c88:	6993      	ldr	r3, [r2, #24]
   80c8a:	4299      	cmp	r1, r3
   80c8c:	db0f      	blt.n	80cae <UnityPrint+0x5a>
   80c8e:	6813      	ldr	r3, [r2, #0]
   80c90:	f814 2c01 	ldrb.w	r2, [r4, #-1]
   80c94:	701a      	strb	r2, [r3, #0]
   80c96:	6828      	ldr	r0, [r5, #0]
   80c98:	6882      	ldr	r2, [r0, #8]
   80c9a:	6813      	ldr	r3, [r2, #0]
   80c9c:	7819      	ldrb	r1, [r3, #0]
   80c9e:	290a      	cmp	r1, #10
   80ca0:	d002      	beq.n	80ca8 <UnityPrint+0x54>
   80ca2:	3301      	adds	r3, #1
   80ca4:	6013      	str	r3, [r2, #0]
   80ca6:	e0de      	b.n	80e66 <UnityPrint+0x212>
   80ca8:	210a      	movs	r1, #10
   80caa:	47b8      	blx	r7
   80cac:	e0db      	b.n	80e66 <UnityPrint+0x212>
   80cae:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   80cb2:	47b8      	blx	r7
   80cb4:	e0d7      	b.n	80e66 <UnityPrint+0x212>
   80cb6:	6883      	ldr	r3, [r0, #8]
   80cb8:	681b      	ldr	r3, [r3, #0]
   80cba:	f814 2c01 	ldrb.w	r2, [r4, #-1]
   80cbe:	701a      	strb	r2, [r3, #0]
   80cc0:	682b      	ldr	r3, [r5, #0]
   80cc2:	689b      	ldr	r3, [r3, #8]
   80cc4:	681a      	ldr	r2, [r3, #0]
   80cc6:	3201      	adds	r2, #1
   80cc8:	601a      	str	r2, [r3, #0]
   80cca:	e0cc      	b.n	80e66 <UnityPrint+0x212>
            }
            //write escaped carriage returns
            else if (*pch == 13)
   80ccc:	2b0d      	cmp	r3, #13
   80cce:	d14e      	bne.n	80d6e <UnityPrint+0x11a>
            {
                UNITY_OUTPUT_CHAR('\\');
   80cd0:	6828      	ldr	r0, [r5, #0]
   80cd2:	6882      	ldr	r2, [r0, #8]
   80cd4:	6893      	ldr	r3, [r2, #8]
   80cd6:	3b01      	subs	r3, #1
   80cd8:	6093      	str	r3, [r2, #8]
   80cda:	2b00      	cmp	r3, #0
   80cdc:	da16      	bge.n	80d0c <UnityPrint+0xb8>
   80cde:	6882      	ldr	r2, [r0, #8]
   80ce0:	6891      	ldr	r1, [r2, #8]
   80ce2:	6993      	ldr	r3, [r2, #24]
   80ce4:	4299      	cmp	r1, r3
   80ce6:	db0e      	blt.n	80d06 <UnityPrint+0xb2>
   80ce8:	6813      	ldr	r3, [r2, #0]
   80cea:	225c      	movs	r2, #92	; 0x5c
   80cec:	701a      	strb	r2, [r3, #0]
   80cee:	6828      	ldr	r0, [r5, #0]
   80cf0:	6882      	ldr	r2, [r0, #8]
   80cf2:	6813      	ldr	r3, [r2, #0]
   80cf4:	7819      	ldrb	r1, [r3, #0]
   80cf6:	290a      	cmp	r1, #10
   80cf8:	d002      	beq.n	80d00 <UnityPrint+0xac>
   80cfa:	3301      	adds	r3, #1
   80cfc:	6013      	str	r3, [r2, #0]
   80cfe:	e00e      	b.n	80d1e <UnityPrint+0xca>
   80d00:	210a      	movs	r1, #10
   80d02:	47b8      	blx	r7
   80d04:	e00b      	b.n	80d1e <UnityPrint+0xca>
   80d06:	215c      	movs	r1, #92	; 0x5c
   80d08:	47b8      	blx	r7
   80d0a:	e008      	b.n	80d1e <UnityPrint+0xca>
   80d0c:	6883      	ldr	r3, [r0, #8]
   80d0e:	681b      	ldr	r3, [r3, #0]
   80d10:	225c      	movs	r2, #92	; 0x5c
   80d12:	701a      	strb	r2, [r3, #0]
   80d14:	682b      	ldr	r3, [r5, #0]
   80d16:	689b      	ldr	r3, [r3, #8]
   80d18:	681a      	ldr	r2, [r3, #0]
   80d1a:	3201      	adds	r2, #1
   80d1c:	601a      	str	r2, [r3, #0]
                UNITY_OUTPUT_CHAR('r');
   80d1e:	6828      	ldr	r0, [r5, #0]
   80d20:	6882      	ldr	r2, [r0, #8]
   80d22:	6893      	ldr	r3, [r2, #8]
   80d24:	3b01      	subs	r3, #1
   80d26:	6093      	str	r3, [r2, #8]
   80d28:	2b00      	cmp	r3, #0
   80d2a:	da16      	bge.n	80d5a <UnityPrint+0x106>
   80d2c:	6882      	ldr	r2, [r0, #8]
   80d2e:	6891      	ldr	r1, [r2, #8]
   80d30:	6993      	ldr	r3, [r2, #24]
   80d32:	4299      	cmp	r1, r3
   80d34:	db0e      	blt.n	80d54 <UnityPrint+0x100>
   80d36:	6813      	ldr	r3, [r2, #0]
   80d38:	2272      	movs	r2, #114	; 0x72
   80d3a:	701a      	strb	r2, [r3, #0]
   80d3c:	6828      	ldr	r0, [r5, #0]
   80d3e:	6882      	ldr	r2, [r0, #8]
   80d40:	6813      	ldr	r3, [r2, #0]
   80d42:	7819      	ldrb	r1, [r3, #0]
   80d44:	290a      	cmp	r1, #10
   80d46:	d002      	beq.n	80d4e <UnityPrint+0xfa>
   80d48:	3301      	adds	r3, #1
   80d4a:	6013      	str	r3, [r2, #0]
   80d4c:	e08b      	b.n	80e66 <UnityPrint+0x212>
   80d4e:	210a      	movs	r1, #10
   80d50:	47b8      	blx	r7
   80d52:	e088      	b.n	80e66 <UnityPrint+0x212>
   80d54:	2172      	movs	r1, #114	; 0x72
   80d56:	47b8      	blx	r7
   80d58:	e085      	b.n	80e66 <UnityPrint+0x212>
   80d5a:	6883      	ldr	r3, [r0, #8]
   80d5c:	681b      	ldr	r3, [r3, #0]
   80d5e:	2272      	movs	r2, #114	; 0x72
   80d60:	701a      	strb	r2, [r3, #0]
   80d62:	682b      	ldr	r3, [r5, #0]
   80d64:	689b      	ldr	r3, [r3, #8]
   80d66:	681a      	ldr	r2, [r3, #0]
   80d68:	3201      	adds	r2, #1
   80d6a:	601a      	str	r2, [r3, #0]
   80d6c:	e07b      	b.n	80e66 <UnityPrint+0x212>
            }
            //write escaped line feeds
            else if (*pch == 10)
   80d6e:	2b0a      	cmp	r3, #10
   80d70:	d14e      	bne.n	80e10 <UnityPrint+0x1bc>
            {
                UNITY_OUTPUT_CHAR('\\');
   80d72:	6828      	ldr	r0, [r5, #0]
   80d74:	6882      	ldr	r2, [r0, #8]
   80d76:	6893      	ldr	r3, [r2, #8]
   80d78:	3b01      	subs	r3, #1
   80d7a:	6093      	str	r3, [r2, #8]
   80d7c:	2b00      	cmp	r3, #0
   80d7e:	da16      	bge.n	80dae <UnityPrint+0x15a>
   80d80:	6882      	ldr	r2, [r0, #8]
   80d82:	6891      	ldr	r1, [r2, #8]
   80d84:	6993      	ldr	r3, [r2, #24]
   80d86:	4299      	cmp	r1, r3
   80d88:	db0e      	blt.n	80da8 <UnityPrint+0x154>
   80d8a:	6813      	ldr	r3, [r2, #0]
   80d8c:	225c      	movs	r2, #92	; 0x5c
   80d8e:	701a      	strb	r2, [r3, #0]
   80d90:	6828      	ldr	r0, [r5, #0]
   80d92:	6882      	ldr	r2, [r0, #8]
   80d94:	6813      	ldr	r3, [r2, #0]
   80d96:	7819      	ldrb	r1, [r3, #0]
   80d98:	290a      	cmp	r1, #10
   80d9a:	d002      	beq.n	80da2 <UnityPrint+0x14e>
   80d9c:	3301      	adds	r3, #1
   80d9e:	6013      	str	r3, [r2, #0]
   80da0:	e00e      	b.n	80dc0 <UnityPrint+0x16c>
   80da2:	210a      	movs	r1, #10
   80da4:	47b8      	blx	r7
   80da6:	e00b      	b.n	80dc0 <UnityPrint+0x16c>
   80da8:	215c      	movs	r1, #92	; 0x5c
   80daa:	47b8      	blx	r7
   80dac:	e008      	b.n	80dc0 <UnityPrint+0x16c>
   80dae:	6883      	ldr	r3, [r0, #8]
   80db0:	681b      	ldr	r3, [r3, #0]
   80db2:	225c      	movs	r2, #92	; 0x5c
   80db4:	701a      	strb	r2, [r3, #0]
   80db6:	682b      	ldr	r3, [r5, #0]
   80db8:	689b      	ldr	r3, [r3, #8]
   80dba:	681a      	ldr	r2, [r3, #0]
   80dbc:	3201      	adds	r2, #1
   80dbe:	601a      	str	r2, [r3, #0]
                UNITY_OUTPUT_CHAR('n');
   80dc0:	6828      	ldr	r0, [r5, #0]
   80dc2:	6882      	ldr	r2, [r0, #8]
   80dc4:	6893      	ldr	r3, [r2, #8]
   80dc6:	3b01      	subs	r3, #1
   80dc8:	6093      	str	r3, [r2, #8]
   80dca:	2b00      	cmp	r3, #0
   80dcc:	da16      	bge.n	80dfc <UnityPrint+0x1a8>
   80dce:	6882      	ldr	r2, [r0, #8]
   80dd0:	6891      	ldr	r1, [r2, #8]
   80dd2:	6993      	ldr	r3, [r2, #24]
   80dd4:	4299      	cmp	r1, r3
   80dd6:	db0e      	blt.n	80df6 <UnityPrint+0x1a2>
   80dd8:	6813      	ldr	r3, [r2, #0]
   80dda:	226e      	movs	r2, #110	; 0x6e
   80ddc:	701a      	strb	r2, [r3, #0]
   80dde:	6828      	ldr	r0, [r5, #0]
   80de0:	6882      	ldr	r2, [r0, #8]
   80de2:	6813      	ldr	r3, [r2, #0]
   80de4:	7819      	ldrb	r1, [r3, #0]
   80de6:	290a      	cmp	r1, #10
   80de8:	d002      	beq.n	80df0 <UnityPrint+0x19c>
   80dea:	3301      	adds	r3, #1
   80dec:	6013      	str	r3, [r2, #0]
   80dee:	e03a      	b.n	80e66 <UnityPrint+0x212>
   80df0:	210a      	movs	r1, #10
   80df2:	47b8      	blx	r7
   80df4:	e037      	b.n	80e66 <UnityPrint+0x212>
   80df6:	216e      	movs	r1, #110	; 0x6e
   80df8:	47b8      	blx	r7
   80dfa:	e034      	b.n	80e66 <UnityPrint+0x212>
   80dfc:	6883      	ldr	r3, [r0, #8]
   80dfe:	681b      	ldr	r3, [r3, #0]
   80e00:	226e      	movs	r2, #110	; 0x6e
   80e02:	701a      	strb	r2, [r3, #0]
   80e04:	682b      	ldr	r3, [r5, #0]
   80e06:	689b      	ldr	r3, [r3, #8]
   80e08:	681a      	ldr	r2, [r3, #0]
   80e0a:	3201      	adds	r2, #1
   80e0c:	601a      	str	r2, [r3, #0]
   80e0e:	e02a      	b.n	80e66 <UnityPrint+0x212>
            }
            // unprintable characters are shown as codes
            else
            {
                UNITY_OUTPUT_CHAR('\\');
   80e10:	6828      	ldr	r0, [r5, #0]
   80e12:	6882      	ldr	r2, [r0, #8]
   80e14:	6893      	ldr	r3, [r2, #8]
   80e16:	3b01      	subs	r3, #1
   80e18:	6093      	str	r3, [r2, #8]
   80e1a:	2b00      	cmp	r3, #0
   80e1c:	da16      	bge.n	80e4c <UnityPrint+0x1f8>
   80e1e:	6882      	ldr	r2, [r0, #8]
   80e20:	6891      	ldr	r1, [r2, #8]
   80e22:	6993      	ldr	r3, [r2, #24]
   80e24:	4299      	cmp	r1, r3
   80e26:	db0e      	blt.n	80e46 <UnityPrint+0x1f2>
   80e28:	6813      	ldr	r3, [r2, #0]
   80e2a:	225c      	movs	r2, #92	; 0x5c
   80e2c:	701a      	strb	r2, [r3, #0]
   80e2e:	6828      	ldr	r0, [r5, #0]
   80e30:	6882      	ldr	r2, [r0, #8]
   80e32:	6813      	ldr	r3, [r2, #0]
   80e34:	7819      	ldrb	r1, [r3, #0]
   80e36:	290a      	cmp	r1, #10
   80e38:	d002      	beq.n	80e40 <UnityPrint+0x1ec>
   80e3a:	3301      	adds	r3, #1
   80e3c:	6013      	str	r3, [r2, #0]
   80e3e:	e00e      	b.n	80e5e <UnityPrint+0x20a>
   80e40:	210a      	movs	r1, #10
   80e42:	47b8      	blx	r7
   80e44:	e00b      	b.n	80e5e <UnityPrint+0x20a>
   80e46:	215c      	movs	r1, #92	; 0x5c
   80e48:	47b8      	blx	r7
   80e4a:	e008      	b.n	80e5e <UnityPrint+0x20a>
   80e4c:	6883      	ldr	r3, [r0, #8]
   80e4e:	681b      	ldr	r3, [r3, #0]
   80e50:	225c      	movs	r2, #92	; 0x5c
   80e52:	701a      	strb	r2, [r3, #0]
   80e54:	682b      	ldr	r3, [r5, #0]
   80e56:	689b      	ldr	r3, [r3, #8]
   80e58:	681a      	ldr	r2, [r3, #0]
   80e5a:	3201      	adds	r2, #1
   80e5c:	601a      	str	r2, [r3, #0]
                UnityPrintNumberHex((_U_UINT)*pch, 2);
   80e5e:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   80e62:	2102      	movs	r1, #2
   80e64:	47b0      	blx	r6
{
    const char* pch = string;

    if (pch != NULL)
    {
        while (*pch)
   80e66:	f814 3b01 	ldrb.w	r3, [r4], #1
   80e6a:	2b00      	cmp	r3, #0
   80e6c:	f47f aefe 	bne.w	80c6c <UnityPrint+0x18>
   80e70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   80e72:	bf00      	nop
   80e74:	20070560 	.word	0x20070560
   80e78:	00080ac9 	.word	0x00080ac9
   80e7c:	00081ce5 	.word	0x00081ce5

00080e80 <UnityTestResultsBegin>:
    UnityPrint(UnityStrOk);
}

//-----------------------------------------------
static void UnityTestResultsBegin(const char* file, const UNITY_LINE_TYPE line)
{
   80e80:	b538      	push	{r3, r4, r5, lr}
   80e82:	460d      	mov	r5, r1
    UnityPrint(file);
   80e84:	4b46      	ldr	r3, [pc, #280]	; (80fa0 <UnityTestResultsBegin+0x120>)
   80e86:	4798      	blx	r3
    UNITY_OUTPUT_CHAR(':');
   80e88:	4b46      	ldr	r3, [pc, #280]	; (80fa4 <UnityTestResultsBegin+0x124>)
   80e8a:	6818      	ldr	r0, [r3, #0]
   80e8c:	6884      	ldr	r4, [r0, #8]
   80e8e:	68a2      	ldr	r2, [r4, #8]
   80e90:	3a01      	subs	r2, #1
   80e92:	60a2      	str	r2, [r4, #8]
   80e94:	2a00      	cmp	r2, #0
   80e96:	da19      	bge.n	80ecc <UnityTestResultsBegin+0x4c>
   80e98:	6882      	ldr	r2, [r0, #8]
   80e9a:	6893      	ldr	r3, [r2, #8]
   80e9c:	6991      	ldr	r1, [r2, #24]
   80e9e:	428b      	cmp	r3, r1
   80ea0:	db10      	blt.n	80ec4 <UnityTestResultsBegin+0x44>
   80ea2:	6813      	ldr	r3, [r2, #0]
   80ea4:	223a      	movs	r2, #58	; 0x3a
   80ea6:	701a      	strb	r2, [r3, #0]
   80ea8:	4b3e      	ldr	r3, [pc, #248]	; (80fa4 <UnityTestResultsBegin+0x124>)
   80eaa:	6818      	ldr	r0, [r3, #0]
   80eac:	6882      	ldr	r2, [r0, #8]
   80eae:	6813      	ldr	r3, [r2, #0]
   80eb0:	7819      	ldrb	r1, [r3, #0]
   80eb2:	290a      	cmp	r1, #10
   80eb4:	d002      	beq.n	80ebc <UnityTestResultsBegin+0x3c>
   80eb6:	3301      	adds	r3, #1
   80eb8:	6013      	str	r3, [r2, #0]
   80eba:	e011      	b.n	80ee0 <UnityTestResultsBegin+0x60>
   80ebc:	210a      	movs	r1, #10
   80ebe:	4b3a      	ldr	r3, [pc, #232]	; (80fa8 <UnityTestResultsBegin+0x128>)
   80ec0:	4798      	blx	r3
   80ec2:	e00d      	b.n	80ee0 <UnityTestResultsBegin+0x60>
   80ec4:	213a      	movs	r1, #58	; 0x3a
   80ec6:	4b38      	ldr	r3, [pc, #224]	; (80fa8 <UnityTestResultsBegin+0x128>)
   80ec8:	4798      	blx	r3
   80eca:	e009      	b.n	80ee0 <UnityTestResultsBegin+0x60>
   80ecc:	6883      	ldr	r3, [r0, #8]
   80ece:	681b      	ldr	r3, [r3, #0]
   80ed0:	223a      	movs	r2, #58	; 0x3a
   80ed2:	701a      	strb	r2, [r3, #0]
   80ed4:	4b33      	ldr	r3, [pc, #204]	; (80fa4 <UnityTestResultsBegin+0x124>)
   80ed6:	681b      	ldr	r3, [r3, #0]
   80ed8:	689b      	ldr	r3, [r3, #8]
   80eda:	681a      	ldr	r2, [r3, #0]
   80edc:	3201      	adds	r2, #1
   80ede:	601a      	str	r2, [r3, #0]
    UnityPrintNumber((_U_SINT)line);
   80ee0:	4628      	mov	r0, r5
   80ee2:	4b32      	ldr	r3, [pc, #200]	; (80fac <UnityTestResultsBegin+0x12c>)
   80ee4:	4798      	blx	r3
    UNITY_OUTPUT_CHAR(':');
   80ee6:	4b2f      	ldr	r3, [pc, #188]	; (80fa4 <UnityTestResultsBegin+0x124>)
   80ee8:	6818      	ldr	r0, [r3, #0]
   80eea:	6882      	ldr	r2, [r0, #8]
   80eec:	6893      	ldr	r3, [r2, #8]
   80eee:	3b01      	subs	r3, #1
   80ef0:	6093      	str	r3, [r2, #8]
   80ef2:	2b00      	cmp	r3, #0
   80ef4:	da19      	bge.n	80f2a <UnityTestResultsBegin+0xaa>
   80ef6:	6882      	ldr	r2, [r0, #8]
   80ef8:	6891      	ldr	r1, [r2, #8]
   80efa:	6993      	ldr	r3, [r2, #24]
   80efc:	4299      	cmp	r1, r3
   80efe:	db10      	blt.n	80f22 <UnityTestResultsBegin+0xa2>
   80f00:	6813      	ldr	r3, [r2, #0]
   80f02:	223a      	movs	r2, #58	; 0x3a
   80f04:	701a      	strb	r2, [r3, #0]
   80f06:	4b27      	ldr	r3, [pc, #156]	; (80fa4 <UnityTestResultsBegin+0x124>)
   80f08:	6818      	ldr	r0, [r3, #0]
   80f0a:	6882      	ldr	r2, [r0, #8]
   80f0c:	6813      	ldr	r3, [r2, #0]
   80f0e:	7819      	ldrb	r1, [r3, #0]
   80f10:	290a      	cmp	r1, #10
   80f12:	d002      	beq.n	80f1a <UnityTestResultsBegin+0x9a>
   80f14:	3301      	adds	r3, #1
   80f16:	6013      	str	r3, [r2, #0]
   80f18:	e011      	b.n	80f3e <UnityTestResultsBegin+0xbe>
   80f1a:	210a      	movs	r1, #10
   80f1c:	4b22      	ldr	r3, [pc, #136]	; (80fa8 <UnityTestResultsBegin+0x128>)
   80f1e:	4798      	blx	r3
   80f20:	e00d      	b.n	80f3e <UnityTestResultsBegin+0xbe>
   80f22:	213a      	movs	r1, #58	; 0x3a
   80f24:	4b20      	ldr	r3, [pc, #128]	; (80fa8 <UnityTestResultsBegin+0x128>)
   80f26:	4798      	blx	r3
   80f28:	e009      	b.n	80f3e <UnityTestResultsBegin+0xbe>
   80f2a:	6883      	ldr	r3, [r0, #8]
   80f2c:	681b      	ldr	r3, [r3, #0]
   80f2e:	223a      	movs	r2, #58	; 0x3a
   80f30:	701a      	strb	r2, [r3, #0]
   80f32:	4b1c      	ldr	r3, [pc, #112]	; (80fa4 <UnityTestResultsBegin+0x124>)
   80f34:	681b      	ldr	r3, [r3, #0]
   80f36:	689b      	ldr	r3, [r3, #8]
   80f38:	681a      	ldr	r2, [r3, #0]
   80f3a:	3201      	adds	r2, #1
   80f3c:	601a      	str	r2, [r3, #0]
    UnityPrint(Unity.CurrentTestName);
   80f3e:	4b1c      	ldr	r3, [pc, #112]	; (80fb0 <UnityTestResultsBegin+0x130>)
   80f40:	6858      	ldr	r0, [r3, #4]
   80f42:	4b17      	ldr	r3, [pc, #92]	; (80fa0 <UnityTestResultsBegin+0x120>)
   80f44:	4798      	blx	r3
    UNITY_OUTPUT_CHAR(':');
   80f46:	4b17      	ldr	r3, [pc, #92]	; (80fa4 <UnityTestResultsBegin+0x124>)
   80f48:	6818      	ldr	r0, [r3, #0]
   80f4a:	6882      	ldr	r2, [r0, #8]
   80f4c:	6893      	ldr	r3, [r2, #8]
   80f4e:	3b01      	subs	r3, #1
   80f50:	6093      	str	r3, [r2, #8]
   80f52:	2b00      	cmp	r3, #0
   80f54:	da19      	bge.n	80f8a <UnityTestResultsBegin+0x10a>
   80f56:	6882      	ldr	r2, [r0, #8]
   80f58:	6891      	ldr	r1, [r2, #8]
   80f5a:	6993      	ldr	r3, [r2, #24]
   80f5c:	4299      	cmp	r1, r3
   80f5e:	db10      	blt.n	80f82 <UnityTestResultsBegin+0x102>
   80f60:	6813      	ldr	r3, [r2, #0]
   80f62:	223a      	movs	r2, #58	; 0x3a
   80f64:	701a      	strb	r2, [r3, #0]
   80f66:	4b0f      	ldr	r3, [pc, #60]	; (80fa4 <UnityTestResultsBegin+0x124>)
   80f68:	6818      	ldr	r0, [r3, #0]
   80f6a:	6882      	ldr	r2, [r0, #8]
   80f6c:	6813      	ldr	r3, [r2, #0]
   80f6e:	7819      	ldrb	r1, [r3, #0]
   80f70:	290a      	cmp	r1, #10
   80f72:	d002      	beq.n	80f7a <UnityTestResultsBegin+0xfa>
   80f74:	3301      	adds	r3, #1
   80f76:	6013      	str	r3, [r2, #0]
   80f78:	bd38      	pop	{r3, r4, r5, pc}
   80f7a:	210a      	movs	r1, #10
   80f7c:	4b0a      	ldr	r3, [pc, #40]	; (80fa8 <UnityTestResultsBegin+0x128>)
   80f7e:	4798      	blx	r3
   80f80:	bd38      	pop	{r3, r4, r5, pc}
   80f82:	213a      	movs	r1, #58	; 0x3a
   80f84:	4b08      	ldr	r3, [pc, #32]	; (80fa8 <UnityTestResultsBegin+0x128>)
   80f86:	4798      	blx	r3
   80f88:	bd38      	pop	{r3, r4, r5, pc}
   80f8a:	6883      	ldr	r3, [r0, #8]
   80f8c:	681b      	ldr	r3, [r3, #0]
   80f8e:	223a      	movs	r2, #58	; 0x3a
   80f90:	701a      	strb	r2, [r3, #0]
   80f92:	4b04      	ldr	r3, [pc, #16]	; (80fa4 <UnityTestResultsBegin+0x124>)
   80f94:	681b      	ldr	r3, [r3, #0]
   80f96:	689b      	ldr	r3, [r3, #8]
   80f98:	681a      	ldr	r2, [r3, #0]
   80f9a:	3201      	adds	r2, #1
   80f9c:	601a      	str	r2, [r3, #0]
   80f9e:	bd38      	pop	{r3, r4, r5, pc}
   80fa0:	00080c55 	.word	0x00080c55
   80fa4:	20070560 	.word	0x20070560
   80fa8:	00081ce5 	.word	0x00081ce5
   80fac:	0008092d 	.word	0x0008092d
   80fb0:	20070afc 	.word	0x20070afc

00080fb4 <UnityPrintFail>:
#endif

//-----------------------------------------------

void UnityPrintFail(void)
{
   80fb4:	b508      	push	{r3, lr}
    UnityPrint(UnityStrFail);
   80fb6:	4802      	ldr	r0, [pc, #8]	; (80fc0 <UnityPrintFail+0xc>)
   80fb8:	4b02      	ldr	r3, [pc, #8]	; (80fc4 <UnityPrintFail+0x10>)
   80fba:	4798      	blx	r3
   80fbc:	bd08      	pop	{r3, pc}
   80fbe:	bf00      	nop
   80fc0:	00082ee4 	.word	0x00082ee4
   80fc4:	00080c55 	.word	0x00080c55

00080fc8 <UnityPrintOk>:
}

void UnityPrintOk(void)
{
   80fc8:	b508      	push	{r3, lr}
    UnityPrint(UnityStrOk);
   80fca:	4802      	ldr	r0, [pc, #8]	; (80fd4 <UnityPrintOk+0xc>)
   80fcc:	4b02      	ldr	r3, [pc, #8]	; (80fd8 <UnityPrintOk+0x10>)
   80fce:	4798      	blx	r3
   80fd0:	bd08      	pop	{r3, pc}
   80fd2:	bf00      	nop
   80fd4:	00082ee0 	.word	0x00082ee0
   80fd8:	00080c55 	.word	0x00080c55

00080fdc <UnityConcludeTest>:
    UNITY_OUTPUT_CHAR(':');
}

//-----------------------------------------------
void UnityConcludeTest(void)
{
   80fdc:	b508      	push	{r3, lr}
    if (Unity.CurrentTestIgnored)
   80fde:	4b24      	ldr	r3, [pc, #144]	; (81070 <UnityConcludeTest+0x94>)
   80fe0:	69db      	ldr	r3, [r3, #28]
   80fe2:	b123      	cbz	r3, 80fee <UnityConcludeTest+0x12>
    {
        Unity.TestIgnores++;
   80fe4:	4b22      	ldr	r3, [pc, #136]	; (81070 <UnityConcludeTest+0x94>)
   80fe6:	695a      	ldr	r2, [r3, #20]
   80fe8:	3201      	adds	r2, #1
   80fea:	615a      	str	r2, [r3, #20]
   80fec:	e00f      	b.n	8100e <UnityConcludeTest+0x32>
    }
    else if (!Unity.CurrentTestFailed)
   80fee:	4b20      	ldr	r3, [pc, #128]	; (81070 <UnityConcludeTest+0x94>)
   80ff0:	699b      	ldr	r3, [r3, #24]
   80ff2:	b943      	cbnz	r3, 81006 <UnityConcludeTest+0x2a>
    {
        UnityTestResultsBegin(Unity.TestFile, Unity.CurrentTestLineNumber);
   80ff4:	4b1e      	ldr	r3, [pc, #120]	; (81070 <UnityConcludeTest+0x94>)
   80ff6:	6818      	ldr	r0, [r3, #0]
   80ff8:	6899      	ldr	r1, [r3, #8]
   80ffa:	4b1e      	ldr	r3, [pc, #120]	; (81074 <UnityConcludeTest+0x98>)
   80ffc:	4798      	blx	r3
        UnityPrint(UnityStrPass);
   80ffe:	481e      	ldr	r0, [pc, #120]	; (81078 <UnityConcludeTest+0x9c>)
   81000:	4b1e      	ldr	r3, [pc, #120]	; (8107c <UnityConcludeTest+0xa0>)
   81002:	4798      	blx	r3
   81004:	e003      	b.n	8100e <UnityConcludeTest+0x32>
    }
    else
    {
        Unity.TestFailures++;
   81006:	4b1a      	ldr	r3, [pc, #104]	; (81070 <UnityConcludeTest+0x94>)
   81008:	691a      	ldr	r2, [r3, #16]
   8100a:	3201      	adds	r2, #1
   8100c:	611a      	str	r2, [r3, #16]
    }

    Unity.CurrentTestFailed = 0;
   8100e:	4b18      	ldr	r3, [pc, #96]	; (81070 <UnityConcludeTest+0x94>)
   81010:	2200      	movs	r2, #0
   81012:	619a      	str	r2, [r3, #24]
    Unity.CurrentTestIgnored = 0;
   81014:	61da      	str	r2, [r3, #28]
    UNITY_PRINT_EOL;
   81016:	4b1a      	ldr	r3, [pc, #104]	; (81080 <UnityConcludeTest+0xa4>)
   81018:	6818      	ldr	r0, [r3, #0]
   8101a:	6882      	ldr	r2, [r0, #8]
   8101c:	6893      	ldr	r3, [r2, #8]
   8101e:	3b01      	subs	r3, #1
   81020:	6093      	str	r3, [r2, #8]
   81022:	2b00      	cmp	r3, #0
   81024:	da19      	bge.n	8105a <UnityConcludeTest+0x7e>
   81026:	6882      	ldr	r2, [r0, #8]
   81028:	6891      	ldr	r1, [r2, #8]
   8102a:	6993      	ldr	r3, [r2, #24]
   8102c:	4299      	cmp	r1, r3
   8102e:	db10      	blt.n	81052 <UnityConcludeTest+0x76>
   81030:	6813      	ldr	r3, [r2, #0]
   81032:	220a      	movs	r2, #10
   81034:	701a      	strb	r2, [r3, #0]
   81036:	4b12      	ldr	r3, [pc, #72]	; (81080 <UnityConcludeTest+0xa4>)
   81038:	6818      	ldr	r0, [r3, #0]
   8103a:	6882      	ldr	r2, [r0, #8]
   8103c:	6813      	ldr	r3, [r2, #0]
   8103e:	7819      	ldrb	r1, [r3, #0]
   81040:	290a      	cmp	r1, #10
   81042:	d002      	beq.n	8104a <UnityConcludeTest+0x6e>
   81044:	3301      	adds	r3, #1
   81046:	6013      	str	r3, [r2, #0]
   81048:	bd08      	pop	{r3, pc}
   8104a:	210a      	movs	r1, #10
   8104c:	4b0d      	ldr	r3, [pc, #52]	; (81084 <UnityConcludeTest+0xa8>)
   8104e:	4798      	blx	r3
   81050:	bd08      	pop	{r3, pc}
   81052:	210a      	movs	r1, #10
   81054:	4b0b      	ldr	r3, [pc, #44]	; (81084 <UnityConcludeTest+0xa8>)
   81056:	4798      	blx	r3
   81058:	bd08      	pop	{r3, pc}
   8105a:	6883      	ldr	r3, [r0, #8]
   8105c:	681b      	ldr	r3, [r3, #0]
   8105e:	220a      	movs	r2, #10
   81060:	701a      	strb	r2, [r3, #0]
   81062:	4b07      	ldr	r3, [pc, #28]	; (81080 <UnityConcludeTest+0xa4>)
   81064:	681b      	ldr	r3, [r3, #0]
   81066:	689b      	ldr	r3, [r3, #8]
   81068:	681a      	ldr	r2, [r3, #0]
   8106a:	3201      	adds	r2, #1
   8106c:	601a      	str	r2, [r3, #0]
   8106e:	bd08      	pop	{r3, pc}
   81070:	20070afc 	.word	0x20070afc
   81074:	00080e81 	.word	0x00080e81
   81078:	00082f24 	.word	0x00082f24
   8107c:	00080c55 	.word	0x00080c55
   81080:	20070560 	.word	0x20070560
   81084:	00081ce5 	.word	0x00081ce5

00081088 <UnityFail>:
//-----------------------------------------------
// Control Functions
//-----------------------------------------------

void UnityFail(const char* msg, const UNITY_LINE_TYPE line)
{
   81088:	b510      	push	{r4, lr}
   8108a:	4604      	mov	r4, r0
    UNITY_SKIP_EXECUTION;
   8108c:	4b3a      	ldr	r3, [pc, #232]	; (81178 <UnityFail+0xf0>)
   8108e:	699b      	ldr	r3, [r3, #24]
   81090:	2b00      	cmp	r3, #0
   81092:	d16f      	bne.n	81174 <UnityFail+0xec>
   81094:	4b38      	ldr	r3, [pc, #224]	; (81178 <UnityFail+0xf0>)
   81096:	69db      	ldr	r3, [r3, #28]
   81098:	2b00      	cmp	r3, #0
   8109a:	d16b      	bne.n	81174 <UnityFail+0xec>

    UnityTestResultsBegin(Unity.TestFile, line);
   8109c:	4b36      	ldr	r3, [pc, #216]	; (81178 <UnityFail+0xf0>)
   8109e:	6818      	ldr	r0, [r3, #0]
   810a0:	4b36      	ldr	r3, [pc, #216]	; (8117c <UnityFail+0xf4>)
   810a2:	4798      	blx	r3
    UnityPrintFail();
   810a4:	4b36      	ldr	r3, [pc, #216]	; (81180 <UnityFail+0xf8>)
   810a6:	4798      	blx	r3
    if (msg != NULL)
   810a8:	2c00      	cmp	r4, #0
   810aa:	d05d      	beq.n	81168 <UnityFail+0xe0>
    {
      UNITY_OUTPUT_CHAR(':');
   810ac:	4b35      	ldr	r3, [pc, #212]	; (81184 <UnityFail+0xfc>)
   810ae:	6818      	ldr	r0, [r3, #0]
   810b0:	6882      	ldr	r2, [r0, #8]
   810b2:	6893      	ldr	r3, [r2, #8]
   810b4:	3b01      	subs	r3, #1
   810b6:	6093      	str	r3, [r2, #8]
   810b8:	2b00      	cmp	r3, #0
   810ba:	da19      	bge.n	810f0 <UnityFail+0x68>
   810bc:	6882      	ldr	r2, [r0, #8]
   810be:	6891      	ldr	r1, [r2, #8]
   810c0:	6993      	ldr	r3, [r2, #24]
   810c2:	4299      	cmp	r1, r3
   810c4:	db10      	blt.n	810e8 <UnityFail+0x60>
   810c6:	6813      	ldr	r3, [r2, #0]
   810c8:	223a      	movs	r2, #58	; 0x3a
   810ca:	701a      	strb	r2, [r3, #0]
   810cc:	4b2d      	ldr	r3, [pc, #180]	; (81184 <UnityFail+0xfc>)
   810ce:	6818      	ldr	r0, [r3, #0]
   810d0:	6882      	ldr	r2, [r0, #8]
   810d2:	6813      	ldr	r3, [r2, #0]
   810d4:	7819      	ldrb	r1, [r3, #0]
   810d6:	290a      	cmp	r1, #10
   810d8:	d002      	beq.n	810e0 <UnityFail+0x58>
   810da:	3301      	adds	r3, #1
   810dc:	6013      	str	r3, [r2, #0]
   810de:	e011      	b.n	81104 <UnityFail+0x7c>
   810e0:	210a      	movs	r1, #10
   810e2:	4b29      	ldr	r3, [pc, #164]	; (81188 <UnityFail+0x100>)
   810e4:	4798      	blx	r3
   810e6:	e00d      	b.n	81104 <UnityFail+0x7c>
   810e8:	213a      	movs	r1, #58	; 0x3a
   810ea:	4b27      	ldr	r3, [pc, #156]	; (81188 <UnityFail+0x100>)
   810ec:	4798      	blx	r3
   810ee:	e009      	b.n	81104 <UnityFail+0x7c>
   810f0:	6883      	ldr	r3, [r0, #8]
   810f2:	681b      	ldr	r3, [r3, #0]
   810f4:	223a      	movs	r2, #58	; 0x3a
   810f6:	701a      	strb	r2, [r3, #0]
   810f8:	4b22      	ldr	r3, [pc, #136]	; (81184 <UnityFail+0xfc>)
   810fa:	681b      	ldr	r3, [r3, #0]
   810fc:	689b      	ldr	r3, [r3, #8]
   810fe:	681a      	ldr	r2, [r3, #0]
   81100:	3201      	adds	r2, #1
   81102:	601a      	str	r2, [r3, #0]
      if (msg[0] != ' ')
   81104:	7823      	ldrb	r3, [r4, #0]
   81106:	2b20      	cmp	r3, #32
   81108:	d02b      	beq.n	81162 <UnityFail+0xda>
      {
        UNITY_OUTPUT_CHAR(' ');
   8110a:	4b1e      	ldr	r3, [pc, #120]	; (81184 <UnityFail+0xfc>)
   8110c:	6818      	ldr	r0, [r3, #0]
   8110e:	6882      	ldr	r2, [r0, #8]
   81110:	6893      	ldr	r3, [r2, #8]
   81112:	3b01      	subs	r3, #1
   81114:	6093      	str	r3, [r2, #8]
   81116:	2b00      	cmp	r3, #0
   81118:	da19      	bge.n	8114e <UnityFail+0xc6>
   8111a:	6882      	ldr	r2, [r0, #8]
   8111c:	6891      	ldr	r1, [r2, #8]
   8111e:	6993      	ldr	r3, [r2, #24]
   81120:	4299      	cmp	r1, r3
   81122:	db10      	blt.n	81146 <UnityFail+0xbe>
   81124:	6813      	ldr	r3, [r2, #0]
   81126:	2220      	movs	r2, #32
   81128:	701a      	strb	r2, [r3, #0]
   8112a:	4b16      	ldr	r3, [pc, #88]	; (81184 <UnityFail+0xfc>)
   8112c:	6818      	ldr	r0, [r3, #0]
   8112e:	6882      	ldr	r2, [r0, #8]
   81130:	6813      	ldr	r3, [r2, #0]
   81132:	7819      	ldrb	r1, [r3, #0]
   81134:	290a      	cmp	r1, #10
   81136:	d002      	beq.n	8113e <UnityFail+0xb6>
   81138:	3301      	adds	r3, #1
   8113a:	6013      	str	r3, [r2, #0]
   8113c:	e011      	b.n	81162 <UnityFail+0xda>
   8113e:	210a      	movs	r1, #10
   81140:	4b11      	ldr	r3, [pc, #68]	; (81188 <UnityFail+0x100>)
   81142:	4798      	blx	r3
   81144:	e00d      	b.n	81162 <UnityFail+0xda>
   81146:	2120      	movs	r1, #32
   81148:	4b0f      	ldr	r3, [pc, #60]	; (81188 <UnityFail+0x100>)
   8114a:	4798      	blx	r3
   8114c:	e009      	b.n	81162 <UnityFail+0xda>
   8114e:	6883      	ldr	r3, [r0, #8]
   81150:	681b      	ldr	r3, [r3, #0]
   81152:	2220      	movs	r2, #32
   81154:	701a      	strb	r2, [r3, #0]
   81156:	4b0b      	ldr	r3, [pc, #44]	; (81184 <UnityFail+0xfc>)
   81158:	681b      	ldr	r3, [r3, #0]
   8115a:	689b      	ldr	r3, [r3, #8]
   8115c:	681a      	ldr	r2, [r3, #0]
   8115e:	3201      	adds	r2, #1
   81160:	601a      	str	r2, [r3, #0]
      }
      UnityPrint(msg);
   81162:	4620      	mov	r0, r4
   81164:	4b09      	ldr	r3, [pc, #36]	; (8118c <UnityFail+0x104>)
   81166:	4798      	blx	r3
    }
    UNITY_FAIL_AND_BAIL;
   81168:	4803      	ldr	r0, [pc, #12]	; (81178 <UnityFail+0xf0>)
   8116a:	2101      	movs	r1, #1
   8116c:	6181      	str	r1, [r0, #24]
   8116e:	3020      	adds	r0, #32
   81170:	4b07      	ldr	r3, [pc, #28]	; (81190 <UnityFail+0x108>)
   81172:	4798      	blx	r3
   81174:	bd10      	pop	{r4, pc}
   81176:	bf00      	nop
   81178:	20070afc 	.word	0x20070afc
   8117c:	00080e81 	.word	0x00080e81
   81180:	00080fb5 	.word	0x00080fb5
   81184:	20070560 	.word	0x20070560
   81188:	00081ce5 	.word	0x00081ce5
   8118c:	00080c55 	.word	0x00080c55
   81190:	00081bd5 	.word	0x00081bd5

00081194 <UnityDefaultTestRun>:
    void setUp(void);
    void tearDown(void);
#endif
//-----------------------------------------------
void UnityDefaultTestRun(UnityTestFunction Func, const char* FuncName, const int FuncLineNum)
{
   81194:	b500      	push	{lr}
   81196:	b083      	sub	sp, #12
   81198:	9001      	str	r0, [sp, #4]
    Unity.CurrentTestName = FuncName;
   8119a:	480e      	ldr	r0, [pc, #56]	; (811d4 <UnityDefaultTestRun+0x40>)
   8119c:	6041      	str	r1, [r0, #4]
    Unity.CurrentTestLineNumber = (UNITY_LINE_TYPE)FuncLineNum;
   8119e:	6082      	str	r2, [r0, #8]
    Unity.NumberOfTests++;
   811a0:	68c3      	ldr	r3, [r0, #12]
   811a2:	3301      	adds	r3, #1
   811a4:	60c3      	str	r3, [r0, #12]
    if (TEST_PROTECT())
   811a6:	3020      	adds	r0, #32
   811a8:	4b0b      	ldr	r3, [pc, #44]	; (811d8 <UnityDefaultTestRun+0x44>)
   811aa:	4798      	blx	r3
   811ac:	b918      	cbnz	r0, 811b6 <UnityDefaultTestRun+0x22>
    {
        setUp();
   811ae:	4b0b      	ldr	r3, [pc, #44]	; (811dc <UnityDefaultTestRun+0x48>)
   811b0:	4798      	blx	r3
        Func();
   811b2:	9b01      	ldr	r3, [sp, #4]
   811b4:	4798      	blx	r3
    }
    if (TEST_PROTECT() && !(Unity.CurrentTestIgnored))
   811b6:	480a      	ldr	r0, [pc, #40]	; (811e0 <UnityDefaultTestRun+0x4c>)
   811b8:	4b07      	ldr	r3, [pc, #28]	; (811d8 <UnityDefaultTestRun+0x44>)
   811ba:	4798      	blx	r3
   811bc:	b920      	cbnz	r0, 811c8 <UnityDefaultTestRun+0x34>
   811be:	4b05      	ldr	r3, [pc, #20]	; (811d4 <UnityDefaultTestRun+0x40>)
   811c0:	69db      	ldr	r3, [r3, #28]
   811c2:	b90b      	cbnz	r3, 811c8 <UnityDefaultTestRun+0x34>
    {
        tearDown();
   811c4:	4b07      	ldr	r3, [pc, #28]	; (811e4 <UnityDefaultTestRun+0x50>)
   811c6:	4798      	blx	r3
    }
    UnityConcludeTest();
   811c8:	4b07      	ldr	r3, [pc, #28]	; (811e8 <UnityDefaultTestRun+0x54>)
   811ca:	4798      	blx	r3
}
   811cc:	b003      	add	sp, #12
   811ce:	f85d fb04 	ldr.w	pc, [sp], #4
   811d2:	bf00      	nop
   811d4:	20070afc 	.word	0x20070afc
   811d8:	00081bc9 	.word	0x00081bc9
   811dc:	00080925 	.word	0x00080925
   811e0:	20070b1c 	.word	0x20070b1c
   811e4:	00080929 	.word	0x00080929
   811e8:	00080fdd 	.word	0x00080fdd

000811ec <UnityBegin>:

//-----------------------------------------------
void UnityBegin(const char* filename)
{
    Unity.TestFile = filename;
   811ec:	4b05      	ldr	r3, [pc, #20]	; (81204 <UnityBegin+0x18>)
   811ee:	6018      	str	r0, [r3, #0]
    Unity.CurrentTestName = NULL;
   811f0:	2200      	movs	r2, #0
   811f2:	605a      	str	r2, [r3, #4]
    Unity.CurrentTestLineNumber = 0;
   811f4:	609a      	str	r2, [r3, #8]
    Unity.NumberOfTests = 0;
   811f6:	60da      	str	r2, [r3, #12]
    Unity.TestFailures = 0;
   811f8:	611a      	str	r2, [r3, #16]
    Unity.TestIgnores = 0;
   811fa:	615a      	str	r2, [r3, #20]
    Unity.CurrentTestFailed = 0;
   811fc:	619a      	str	r2, [r3, #24]
    Unity.CurrentTestIgnored = 0;
   811fe:	61da      	str	r2, [r3, #28]
   81200:	4770      	bx	lr
   81202:	bf00      	nop
   81204:	20070afc 	.word	0x20070afc

00081208 <UnityEnd>:
    UNITY_OUTPUT_START();
}

//-----------------------------------------------
int UnityEnd(void)
{
   81208:	b570      	push	{r4, r5, r6, lr}
    UNITY_PRINT_EOL;
   8120a:	4b66      	ldr	r3, [pc, #408]	; (813a4 <UnityEnd+0x19c>)
   8120c:	6818      	ldr	r0, [r3, #0]
   8120e:	6882      	ldr	r2, [r0, #8]
   81210:	6893      	ldr	r3, [r2, #8]
   81212:	3b01      	subs	r3, #1
   81214:	6093      	str	r3, [r2, #8]
   81216:	2b00      	cmp	r3, #0
   81218:	da19      	bge.n	8124e <UnityEnd+0x46>
   8121a:	6882      	ldr	r2, [r0, #8]
   8121c:	6891      	ldr	r1, [r2, #8]
   8121e:	6993      	ldr	r3, [r2, #24]
   81220:	4299      	cmp	r1, r3
   81222:	db10      	blt.n	81246 <UnityEnd+0x3e>
   81224:	6813      	ldr	r3, [r2, #0]
   81226:	220a      	movs	r2, #10
   81228:	701a      	strb	r2, [r3, #0]
   8122a:	4b5e      	ldr	r3, [pc, #376]	; (813a4 <UnityEnd+0x19c>)
   8122c:	6818      	ldr	r0, [r3, #0]
   8122e:	6882      	ldr	r2, [r0, #8]
   81230:	6813      	ldr	r3, [r2, #0]
   81232:	7819      	ldrb	r1, [r3, #0]
   81234:	290a      	cmp	r1, #10
   81236:	d002      	beq.n	8123e <UnityEnd+0x36>
   81238:	3301      	adds	r3, #1
   8123a:	6013      	str	r3, [r2, #0]
   8123c:	e011      	b.n	81262 <UnityEnd+0x5a>
   8123e:	210a      	movs	r1, #10
   81240:	4b59      	ldr	r3, [pc, #356]	; (813a8 <UnityEnd+0x1a0>)
   81242:	4798      	blx	r3
   81244:	e00d      	b.n	81262 <UnityEnd+0x5a>
   81246:	210a      	movs	r1, #10
   81248:	4b57      	ldr	r3, [pc, #348]	; (813a8 <UnityEnd+0x1a0>)
   8124a:	4798      	blx	r3
   8124c:	e009      	b.n	81262 <UnityEnd+0x5a>
   8124e:	6883      	ldr	r3, [r0, #8]
   81250:	681b      	ldr	r3, [r3, #0]
   81252:	220a      	movs	r2, #10
   81254:	701a      	strb	r2, [r3, #0]
   81256:	4b53      	ldr	r3, [pc, #332]	; (813a4 <UnityEnd+0x19c>)
   81258:	681b      	ldr	r3, [r3, #0]
   8125a:	689b      	ldr	r3, [r3, #8]
   8125c:	681a      	ldr	r2, [r3, #0]
   8125e:	3201      	adds	r2, #1
   81260:	601a      	str	r2, [r3, #0]
    UnityPrint(UnityStrBreaker);
   81262:	4852      	ldr	r0, [pc, #328]	; (813ac <UnityEnd+0x1a4>)
   81264:	4b52      	ldr	r3, [pc, #328]	; (813b0 <UnityEnd+0x1a8>)
   81266:	4798      	blx	r3
    UNITY_PRINT_EOL;
   81268:	4b4e      	ldr	r3, [pc, #312]	; (813a4 <UnityEnd+0x19c>)
   8126a:	6818      	ldr	r0, [r3, #0]
   8126c:	6882      	ldr	r2, [r0, #8]
   8126e:	6893      	ldr	r3, [r2, #8]
   81270:	3b01      	subs	r3, #1
   81272:	6093      	str	r3, [r2, #8]
   81274:	2b00      	cmp	r3, #0
   81276:	da19      	bge.n	812ac <UnityEnd+0xa4>
   81278:	6882      	ldr	r2, [r0, #8]
   8127a:	6891      	ldr	r1, [r2, #8]
   8127c:	6993      	ldr	r3, [r2, #24]
   8127e:	4299      	cmp	r1, r3
   81280:	db10      	blt.n	812a4 <UnityEnd+0x9c>
   81282:	6813      	ldr	r3, [r2, #0]
   81284:	220a      	movs	r2, #10
   81286:	701a      	strb	r2, [r3, #0]
   81288:	4b46      	ldr	r3, [pc, #280]	; (813a4 <UnityEnd+0x19c>)
   8128a:	6818      	ldr	r0, [r3, #0]
   8128c:	6882      	ldr	r2, [r0, #8]
   8128e:	6813      	ldr	r3, [r2, #0]
   81290:	7819      	ldrb	r1, [r3, #0]
   81292:	290a      	cmp	r1, #10
   81294:	d002      	beq.n	8129c <UnityEnd+0x94>
   81296:	3301      	adds	r3, #1
   81298:	6013      	str	r3, [r2, #0]
   8129a:	e011      	b.n	812c0 <UnityEnd+0xb8>
   8129c:	210a      	movs	r1, #10
   8129e:	4b42      	ldr	r3, [pc, #264]	; (813a8 <UnityEnd+0x1a0>)
   812a0:	4798      	blx	r3
   812a2:	e00d      	b.n	812c0 <UnityEnd+0xb8>
   812a4:	210a      	movs	r1, #10
   812a6:	4b40      	ldr	r3, [pc, #256]	; (813a8 <UnityEnd+0x1a0>)
   812a8:	4798      	blx	r3
   812aa:	e009      	b.n	812c0 <UnityEnd+0xb8>
   812ac:	6883      	ldr	r3, [r0, #8]
   812ae:	681b      	ldr	r3, [r3, #0]
   812b0:	220a      	movs	r2, #10
   812b2:	701a      	strb	r2, [r3, #0]
   812b4:	4b3b      	ldr	r3, [pc, #236]	; (813a4 <UnityEnd+0x19c>)
   812b6:	681b      	ldr	r3, [r3, #0]
   812b8:	689b      	ldr	r3, [r3, #8]
   812ba:	681a      	ldr	r2, [r3, #0]
   812bc:	3201      	adds	r2, #1
   812be:	601a      	str	r2, [r3, #0]
    UnityPrintNumber((_U_SINT)(Unity.NumberOfTests));
   812c0:	4e3c      	ldr	r6, [pc, #240]	; (813b4 <UnityEnd+0x1ac>)
   812c2:	68f0      	ldr	r0, [r6, #12]
   812c4:	4d3c      	ldr	r5, [pc, #240]	; (813b8 <UnityEnd+0x1b0>)
   812c6:	47a8      	blx	r5
    UnityPrint(UnityStrResultsTests);
   812c8:	483c      	ldr	r0, [pc, #240]	; (813bc <UnityEnd+0x1b4>)
   812ca:	4c39      	ldr	r4, [pc, #228]	; (813b0 <UnityEnd+0x1a8>)
   812cc:	47a0      	blx	r4
    UnityPrintNumber((_U_SINT)(Unity.TestFailures));
   812ce:	6930      	ldr	r0, [r6, #16]
   812d0:	47a8      	blx	r5
    UnityPrint(UnityStrResultsFailures);
   812d2:	483b      	ldr	r0, [pc, #236]	; (813c0 <UnityEnd+0x1b8>)
   812d4:	47a0      	blx	r4
    UnityPrintNumber((_U_SINT)(Unity.TestIgnores));
   812d6:	6970      	ldr	r0, [r6, #20]
   812d8:	47a8      	blx	r5
    UnityPrint(UnityStrResultsIgnored);
   812da:	483a      	ldr	r0, [pc, #232]	; (813c4 <UnityEnd+0x1bc>)
   812dc:	47a0      	blx	r4
    UNITY_PRINT_EOL;
   812de:	4b31      	ldr	r3, [pc, #196]	; (813a4 <UnityEnd+0x19c>)
   812e0:	6818      	ldr	r0, [r3, #0]
   812e2:	6882      	ldr	r2, [r0, #8]
   812e4:	6893      	ldr	r3, [r2, #8]
   812e6:	3b01      	subs	r3, #1
   812e8:	6093      	str	r3, [r2, #8]
   812ea:	2b00      	cmp	r3, #0
   812ec:	da19      	bge.n	81322 <UnityEnd+0x11a>
   812ee:	6882      	ldr	r2, [r0, #8]
   812f0:	6891      	ldr	r1, [r2, #8]
   812f2:	6993      	ldr	r3, [r2, #24]
   812f4:	4299      	cmp	r1, r3
   812f6:	db10      	blt.n	8131a <UnityEnd+0x112>
   812f8:	6813      	ldr	r3, [r2, #0]
   812fa:	220a      	movs	r2, #10
   812fc:	701a      	strb	r2, [r3, #0]
   812fe:	4b29      	ldr	r3, [pc, #164]	; (813a4 <UnityEnd+0x19c>)
   81300:	6818      	ldr	r0, [r3, #0]
   81302:	6882      	ldr	r2, [r0, #8]
   81304:	6813      	ldr	r3, [r2, #0]
   81306:	7819      	ldrb	r1, [r3, #0]
   81308:	290a      	cmp	r1, #10
   8130a:	d002      	beq.n	81312 <UnityEnd+0x10a>
   8130c:	3301      	adds	r3, #1
   8130e:	6013      	str	r3, [r2, #0]
   81310:	e011      	b.n	81336 <UnityEnd+0x12e>
   81312:	210a      	movs	r1, #10
   81314:	4b24      	ldr	r3, [pc, #144]	; (813a8 <UnityEnd+0x1a0>)
   81316:	4798      	blx	r3
   81318:	e00d      	b.n	81336 <UnityEnd+0x12e>
   8131a:	210a      	movs	r1, #10
   8131c:	4b22      	ldr	r3, [pc, #136]	; (813a8 <UnityEnd+0x1a0>)
   8131e:	4798      	blx	r3
   81320:	e009      	b.n	81336 <UnityEnd+0x12e>
   81322:	6883      	ldr	r3, [r0, #8]
   81324:	681b      	ldr	r3, [r3, #0]
   81326:	220a      	movs	r2, #10
   81328:	701a      	strb	r2, [r3, #0]
   8132a:	4b1e      	ldr	r3, [pc, #120]	; (813a4 <UnityEnd+0x19c>)
   8132c:	681b      	ldr	r3, [r3, #0]
   8132e:	689b      	ldr	r3, [r3, #8]
   81330:	681a      	ldr	r2, [r3, #0]
   81332:	3201      	adds	r2, #1
   81334:	601a      	str	r2, [r3, #0]
    if (Unity.TestFailures == 0U)
   81336:	4b1f      	ldr	r3, [pc, #124]	; (813b4 <UnityEnd+0x1ac>)
   81338:	691b      	ldr	r3, [r3, #16]
   8133a:	b913      	cbnz	r3, 81342 <UnityEnd+0x13a>
    {
        UnityPrintOk();
   8133c:	4b22      	ldr	r3, [pc, #136]	; (813c8 <UnityEnd+0x1c0>)
   8133e:	4798      	blx	r3
   81340:	e001      	b.n	81346 <UnityEnd+0x13e>
    }
    else
    {
        UnityPrintFail();
   81342:	4b22      	ldr	r3, [pc, #136]	; (813cc <UnityEnd+0x1c4>)
   81344:	4798      	blx	r3
    }
    UNITY_PRINT_EOL;
   81346:	4b17      	ldr	r3, [pc, #92]	; (813a4 <UnityEnd+0x19c>)
   81348:	6818      	ldr	r0, [r3, #0]
   8134a:	6882      	ldr	r2, [r0, #8]
   8134c:	6893      	ldr	r3, [r2, #8]
   8134e:	3b01      	subs	r3, #1
   81350:	6093      	str	r3, [r2, #8]
   81352:	2b00      	cmp	r3, #0
   81354:	da19      	bge.n	8138a <UnityEnd+0x182>
   81356:	6882      	ldr	r2, [r0, #8]
   81358:	6891      	ldr	r1, [r2, #8]
   8135a:	6993      	ldr	r3, [r2, #24]
   8135c:	4299      	cmp	r1, r3
   8135e:	db10      	blt.n	81382 <UnityEnd+0x17a>
   81360:	6813      	ldr	r3, [r2, #0]
   81362:	220a      	movs	r2, #10
   81364:	701a      	strb	r2, [r3, #0]
   81366:	4b0f      	ldr	r3, [pc, #60]	; (813a4 <UnityEnd+0x19c>)
   81368:	6818      	ldr	r0, [r3, #0]
   8136a:	6882      	ldr	r2, [r0, #8]
   8136c:	6813      	ldr	r3, [r2, #0]
   8136e:	7819      	ldrb	r1, [r3, #0]
   81370:	290a      	cmp	r1, #10
   81372:	d002      	beq.n	8137a <UnityEnd+0x172>
   81374:	3301      	adds	r3, #1
   81376:	6013      	str	r3, [r2, #0]
   81378:	e011      	b.n	8139e <UnityEnd+0x196>
   8137a:	210a      	movs	r1, #10
   8137c:	4b0a      	ldr	r3, [pc, #40]	; (813a8 <UnityEnd+0x1a0>)
   8137e:	4798      	blx	r3
   81380:	e00d      	b.n	8139e <UnityEnd+0x196>
   81382:	210a      	movs	r1, #10
   81384:	4b08      	ldr	r3, [pc, #32]	; (813a8 <UnityEnd+0x1a0>)
   81386:	4798      	blx	r3
   81388:	e009      	b.n	8139e <UnityEnd+0x196>
   8138a:	6883      	ldr	r3, [r0, #8]
   8138c:	681b      	ldr	r3, [r3, #0]
   8138e:	220a      	movs	r2, #10
   81390:	701a      	strb	r2, [r3, #0]
   81392:	4b04      	ldr	r3, [pc, #16]	; (813a4 <UnityEnd+0x19c>)
   81394:	681b      	ldr	r3, [r3, #0]
   81396:	689b      	ldr	r3, [r3, #8]
   81398:	681a      	ldr	r2, [r3, #0]
   8139a:	3201      	adds	r2, #1
   8139c:	601a      	str	r2, [r3, #0]
    UNITY_OUTPUT_COMPLETE();
    return (int)(Unity.TestFailures);
}
   8139e:	4b05      	ldr	r3, [pc, #20]	; (813b4 <UnityEnd+0x1ac>)
   813a0:	6918      	ldr	r0, [r3, #16]
   813a2:	bd70      	pop	{r4, r5, r6, pc}
   813a4:	20070560 	.word	0x20070560
   813a8:	00081ce5 	.word	0x00081ce5
   813ac:	00082eec 	.word	0x00082eec
   813b0:	00080c55 	.word	0x00080c55
   813b4:	20070afc 	.word	0x20070afc
   813b8:	0008092d 	.word	0x0008092d
   813bc:	00082f1c 	.word	0x00082f1c
   813c0:	00082f04 	.word	0x00082f04
   813c4:	00082f10 	.word	0x00082f10
   813c8:	00080fc9 	.word	0x00080fc9
   813cc:	00080fb5 	.word	0x00080fb5

000813d0 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   813d0:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   813d2:	480e      	ldr	r0, [pc, #56]	; (8140c <sysclk_init+0x3c>)
   813d4:	4b0e      	ldr	r3, [pc, #56]	; (81410 <sysclk_init+0x40>)
   813d6:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   813d8:	2000      	movs	r0, #0
   813da:	213e      	movs	r1, #62	; 0x3e
   813dc:	4b0d      	ldr	r3, [pc, #52]	; (81414 <sysclk_init+0x44>)
   813de:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   813e0:	4c0d      	ldr	r4, [pc, #52]	; (81418 <sysclk_init+0x48>)
   813e2:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   813e4:	2800      	cmp	r0, #0
   813e6:	d0fc      	beq.n	813e2 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   813e8:	4b0c      	ldr	r3, [pc, #48]	; (8141c <sysclk_init+0x4c>)
   813ea:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   813ec:	4a0c      	ldr	r2, [pc, #48]	; (81420 <sysclk_init+0x50>)
   813ee:	4b0d      	ldr	r3, [pc, #52]	; (81424 <sysclk_init+0x54>)
   813f0:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   813f2:	4c0d      	ldr	r4, [pc, #52]	; (81428 <sysclk_init+0x58>)
   813f4:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   813f6:	2800      	cmp	r0, #0
   813f8:	d0fc      	beq.n	813f4 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   813fa:	2010      	movs	r0, #16
   813fc:	4b0b      	ldr	r3, [pc, #44]	; (8142c <sysclk_init+0x5c>)
   813fe:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   81400:	4b0b      	ldr	r3, [pc, #44]	; (81430 <sysclk_init+0x60>)
   81402:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   81404:	4801      	ldr	r0, [pc, #4]	; (8140c <sysclk_init+0x3c>)
   81406:	4b02      	ldr	r3, [pc, #8]	; (81410 <sysclk_init+0x40>)
   81408:	4798      	blx	r3
   8140a:	bd10      	pop	{r4, pc}
   8140c:	0501bd00 	.word	0x0501bd00
   81410:	200700a5 	.word	0x200700a5
   81414:	000817d9 	.word	0x000817d9
   81418:	0008182d 	.word	0x0008182d
   8141c:	0008183d 	.word	0x0008183d
   81420:	200d3f01 	.word	0x200d3f01
   81424:	400e0600 	.word	0x400e0600
   81428:	0008184d 	.word	0x0008184d
   8142c:	00081775 	.word	0x00081775
   81430:	00081969 	.word	0x00081969

00081434 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   81434:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   81436:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   8143a:	4b16      	ldr	r3, [pc, #88]	; (81494 <board_init+0x60>)
   8143c:	605a      	str	r2, [r3, #4]
   8143e:	200b      	movs	r0, #11
   81440:	4c15      	ldr	r4, [pc, #84]	; (81498 <board_init+0x64>)
   81442:	47a0      	blx	r4
   81444:	200c      	movs	r0, #12
   81446:	47a0      	blx	r4
   81448:	200d      	movs	r0, #13
   8144a:	47a0      	blx	r4
   8144c:	200e      	movs	r0, #14
   8144e:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   81450:	203b      	movs	r0, #59	; 0x3b
   81452:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   81456:	4c11      	ldr	r4, [pc, #68]	; (8149c <board_init+0x68>)
   81458:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   8145a:	2055      	movs	r0, #85	; 0x55
   8145c:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   81460:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   81462:	2056      	movs	r0, #86	; 0x56
   81464:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   81468:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   8146a:	2068      	movs	r0, #104	; 0x68
   8146c:	490c      	ldr	r1, [pc, #48]	; (814a0 <board_init+0x6c>)
   8146e:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   81470:	205c      	movs	r0, #92	; 0x5c
   81472:	490c      	ldr	r1, [pc, #48]	; (814a4 <board_init+0x70>)
   81474:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   81476:	480c      	ldr	r0, [pc, #48]	; (814a8 <board_init+0x74>)
   81478:	f44f 7140 	mov.w	r1, #768	; 0x300
   8147c:	4a0b      	ldr	r2, [pc, #44]	; (814ac <board_init+0x78>)
   8147e:	4b0c      	ldr	r3, [pc, #48]	; (814b0 <board_init+0x7c>)
   81480:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
#endif

#ifdef CONF_BOARD_USB_PORT
	/* Configure USB_ID (UOTGID) pin */
	gpio_configure_pin(USB_ID_GPIO, USB_ID_FLAGS);
   81482:	202b      	movs	r0, #43	; 0x2b
   81484:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81488:	47a0      	blx	r4
	/* Configure USB_VBOF (UOTGVBOF) pin */
	gpio_configure_pin(USB_VBOF_GPIO, USB_VBOF_FLAGS);
   8148a:	202a      	movs	r0, #42	; 0x2a
   8148c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81490:	47a0      	blx	r4
   81492:	bd10      	pop	{r4, pc}
   81494:	400e1a50 	.word	0x400e1a50
   81498:	0008185d 	.word	0x0008185d
   8149c:	00081559 	.word	0x00081559
   814a0:	28000079 	.word	0x28000079
   814a4:	28000001 	.word	0x28000001
   814a8:	400e0e00 	.word	0x400e0e00
   814ac:	08000001 	.word	0x08000001
   814b0:	0008162d 	.word	0x0008162d

000814b4 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   814b4:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   814b6:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   814ba:	d016      	beq.n	814ea <pio_set_peripheral+0x36>
   814bc:	d804      	bhi.n	814c8 <pio_set_peripheral+0x14>
   814be:	b1c1      	cbz	r1, 814f2 <pio_set_peripheral+0x3e>
   814c0:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   814c4:	d00a      	beq.n	814dc <pio_set_peripheral+0x28>
   814c6:	e013      	b.n	814f0 <pio_set_peripheral+0x3c>
   814c8:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   814cc:	d011      	beq.n	814f2 <pio_set_peripheral+0x3e>
   814ce:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   814d2:	d00e      	beq.n	814f2 <pio_set_peripheral+0x3e>
   814d4:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   814d8:	d10a      	bne.n	814f0 <pio_set_peripheral+0x3c>
   814da:	4770      	bx	lr
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   814dc:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   814de:	6f01      	ldr	r1, [r0, #112]	; 0x70
   814e0:	400b      	ands	r3, r1
   814e2:	ea23 0302 	bic.w	r3, r3, r2
   814e6:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   814e8:	e002      	b.n	814f0 <pio_set_peripheral+0x3c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   814ea:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   814ec:	4313      	orrs	r3, r2
   814ee:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   814f0:	6042      	str	r2, [r0, #4]
   814f2:	4770      	bx	lr

000814f4 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   814f4:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   814f6:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   814fa:	bf14      	ite	ne
   814fc:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   814fe:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   81500:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   81504:	bf14      	ite	ne
   81506:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
   81508:	6241      	streq	r1, [r0, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   8150a:	f012 0f02 	tst.w	r2, #2
   8150e:	d002      	beq.n	81516 <pio_set_input+0x22>
		p_pio->PIO_SCIFSR = ul_mask;
   81510:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   81514:	e004      	b.n	81520 <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   81516:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   8151a:	bf18      	it	ne
   8151c:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   81520:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   81522:	6001      	str	r1, [r0, #0]
   81524:	4770      	bx	lr
   81526:	bf00      	nop

00081528 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   81528:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   8152a:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   8152c:	9c01      	ldr	r4, [sp, #4]
   8152e:	b10c      	cbz	r4, 81534 <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
   81530:	6641      	str	r1, [r0, #100]	; 0x64
   81532:	e000      	b.n	81536 <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
   81534:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   81536:	b10b      	cbz	r3, 8153c <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
   81538:	6501      	str	r1, [r0, #80]	; 0x50
   8153a:	e000      	b.n	8153e <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   8153c:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   8153e:	b10a      	cbz	r2, 81544 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
   81540:	6301      	str	r1, [r0, #48]	; 0x30
   81542:	e000      	b.n	81546 <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
   81544:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   81546:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   81548:	6001      	str	r1, [r0, #0]
}
   8154a:	f85d 4b04 	ldr.w	r4, [sp], #4
   8154e:	4770      	bx	lr

00081550 <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   81550:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   81552:	4770      	bx	lr

00081554 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   81554:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   81556:	4770      	bx	lr

00081558 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   81558:	b570      	push	{r4, r5, r6, lr}
   8155a:	b082      	sub	sp, #8
   8155c:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   8155e:	0944      	lsrs	r4, r0, #5
   81560:	f504 1400 	add.w	r4, r4, #2097152	; 0x200000
   81564:	f204 7407 	addw	r4, r4, #1799	; 0x707
   81568:	0266      	lsls	r6, r4, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   8156a:	f001 44f0 	and.w	r4, r1, #2013265920	; 0x78000000
   8156e:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   81572:	d030      	beq.n	815d6 <pio_configure_pin+0x7e>
   81574:	d806      	bhi.n	81584 <pio_configure_pin+0x2c>
   81576:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   8157a:	d00a      	beq.n	81592 <pio_configure_pin+0x3a>
   8157c:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   81580:	d018      	beq.n	815b4 <pio_configure_pin+0x5c>
   81582:	e049      	b.n	81618 <pio_configure_pin+0xc0>
   81584:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   81588:	d030      	beq.n	815ec <pio_configure_pin+0x94>
   8158a:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   8158e:	d02d      	beq.n	815ec <pio_configure_pin+0x94>
   81590:	e042      	b.n	81618 <pio_configure_pin+0xc0>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   81592:	f000 001f 	and.w	r0, r0, #31
   81596:	2401      	movs	r4, #1
   81598:	4084      	lsls	r4, r0
   8159a:	4630      	mov	r0, r6
   8159c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   815a0:	4622      	mov	r2, r4
   815a2:	4b1f      	ldr	r3, [pc, #124]	; (81620 <pio_configure_pin+0xc8>)
   815a4:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   815a6:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   815aa:	bf14      	ite	ne
   815ac:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   815ae:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   815b0:	2001      	movs	r0, #1
   815b2:	e032      	b.n	8161a <pio_configure_pin+0xc2>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   815b4:	f000 001f 	and.w	r0, r0, #31
   815b8:	2401      	movs	r4, #1
   815ba:	4084      	lsls	r4, r0
   815bc:	4630      	mov	r0, r6
   815be:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   815c2:	4622      	mov	r2, r4
   815c4:	4b16      	ldr	r3, [pc, #88]	; (81620 <pio_configure_pin+0xc8>)
   815c6:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   815c8:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   815cc:	bf14      	ite	ne
   815ce:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   815d0:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   815d2:	2001      	movs	r0, #1
   815d4:	e021      	b.n	8161a <pio_configure_pin+0xc2>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   815d6:	f000 011f 	and.w	r1, r0, #31
   815da:	2401      	movs	r4, #1
   815dc:	4630      	mov	r0, r6
   815de:	fa04 f101 	lsl.w	r1, r4, r1
   815e2:	462a      	mov	r2, r5
   815e4:	4b0f      	ldr	r3, [pc, #60]	; (81624 <pio_configure_pin+0xcc>)
   815e6:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   815e8:	4620      	mov	r0, r4
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
   815ea:	e016      	b.n	8161a <pio_configure_pin+0xc2>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   815ec:	f000 011f 	and.w	r1, r0, #31
   815f0:	2401      	movs	r4, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   815f2:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   815f6:	ea05 0304 	and.w	r3, r5, r4
   815fa:	9300      	str	r3, [sp, #0]
   815fc:	4630      	mov	r0, r6
   815fe:	fa04 f101 	lsl.w	r1, r4, r1
   81602:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   81606:	bf14      	ite	ne
   81608:	2200      	movne	r2, #0
   8160a:	2201      	moveq	r2, #1
   8160c:	f3c5 0380 	ubfx	r3, r5, #2, #1
   81610:	4d05      	ldr	r5, [pc, #20]	; (81628 <pio_configure_pin+0xd0>)
   81612:	47a8      	blx	r5

	default:
		return 0;
	}

	return 1;
   81614:	4620      	mov	r0, r4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   81616:	e000      	b.n	8161a <pio_configure_pin+0xc2>

	default:
		return 0;
   81618:	2000      	movs	r0, #0
	}

	return 1;
}
   8161a:	b002      	add	sp, #8
   8161c:	bd70      	pop	{r4, r5, r6, pc}
   8161e:	bf00      	nop
   81620:	000814b5 	.word	0x000814b5
   81624:	000814f5 	.word	0x000814f5
   81628:	00081529 	.word	0x00081529

0008162c <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   8162c:	b5f0      	push	{r4, r5, r6, r7, lr}
   8162e:	b083      	sub	sp, #12
   81630:	4607      	mov	r7, r0
   81632:	460e      	mov	r6, r1
   81634:	4615      	mov	r5, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   81636:	f002 44f0 	and.w	r4, r2, #2013265920	; 0x78000000
   8163a:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   8163e:	d026      	beq.n	8168e <pio_configure_pin_group+0x62>
   81640:	d806      	bhi.n	81650 <pio_configure_pin_group+0x24>
   81642:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   81646:	d00a      	beq.n	8165e <pio_configure_pin_group+0x32>
   81648:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   8164c:	d013      	beq.n	81676 <pio_configure_pin_group+0x4a>
   8164e:	e034      	b.n	816ba <pio_configure_pin_group+0x8e>
   81650:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   81654:	d01f      	beq.n	81696 <pio_configure_pin_group+0x6a>
   81656:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   8165a:	d01c      	beq.n	81696 <pio_configure_pin_group+0x6a>
   8165c:	e02d      	b.n	816ba <pio_configure_pin_group+0x8e>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   8165e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81662:	4632      	mov	r2, r6
   81664:	4b16      	ldr	r3, [pc, #88]	; (816c0 <pio_configure_pin_group+0x94>)
   81666:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   81668:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   8166c:	bf14      	ite	ne
   8166e:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   81670:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   81672:	2001      	movs	r0, #1
   81674:	e022      	b.n	816bc <pio_configure_pin_group+0x90>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   81676:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   8167a:	4632      	mov	r2, r6
   8167c:	4b10      	ldr	r3, [pc, #64]	; (816c0 <pio_configure_pin_group+0x94>)
   8167e:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   81680:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   81684:	bf14      	ite	ne
   81686:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   81688:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   8168a:	2001      	movs	r0, #1
   8168c:	e016      	b.n	816bc <pio_configure_pin_group+0x90>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   8168e:	4b0d      	ldr	r3, [pc, #52]	; (816c4 <pio_configure_pin_group+0x98>)
   81690:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   81692:	2001      	movs	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
   81694:	e012      	b.n	816bc <pio_configure_pin_group+0x90>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   81696:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   8169a:	f005 0301 	and.w	r3, r5, #1
   8169e:	9300      	str	r3, [sp, #0]
   816a0:	4638      	mov	r0, r7
   816a2:	4631      	mov	r1, r6
   816a4:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   816a8:	bf14      	ite	ne
   816aa:	2200      	movne	r2, #0
   816ac:	2201      	moveq	r2, #1
   816ae:	f3c5 0380 	ubfx	r3, r5, #2, #1
   816b2:	4c05      	ldr	r4, [pc, #20]	; (816c8 <pio_configure_pin_group+0x9c>)
   816b4:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
   816b6:	2001      	movs	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   816b8:	e000      	b.n	816bc <pio_configure_pin_group+0x90>

	default:
		return 0;
   816ba:	2000      	movs	r0, #0
	}

	return 1;
}
   816bc:	b003      	add	sp, #12
   816be:	bdf0      	pop	{r4, r5, r6, r7, pc}
   816c0:	000814b5 	.word	0x000814b5
   816c4:	000814f5 	.word	0x000814f5
   816c8:	00081529 	.word	0x00081529

000816cc <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   816cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   816d0:	4604      	mov	r4, r0
   816d2:	460e      	mov	r6, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   816d4:	4b10      	ldr	r3, [pc, #64]	; (81718 <pio_handler_process+0x4c>)
   816d6:	4798      	blx	r3
   816d8:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   816da:	4620      	mov	r0, r4
   816dc:	4b0f      	ldr	r3, [pc, #60]	; (8171c <pio_handler_process+0x50>)
   816de:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   816e0:	4005      	ands	r5, r0
   816e2:	d017      	beq.n	81714 <pio_handler_process+0x48>
   816e4:	4f0e      	ldr	r7, [pc, #56]	; (81720 <pio_handler_process+0x54>)
   816e6:	f107 040c 	add.w	r4, r7, #12
   816ea:	376c      	adds	r7, #108	; 0x6c
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   816ec:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   816f0:	42b3      	cmp	r3, r6
   816f2:	d10a      	bne.n	8170a <pio_handler_process+0x3e>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   816f4:	f854 1c08 	ldr.w	r1, [r4, #-8]
   816f8:	4229      	tst	r1, r5
   816fa:	d006      	beq.n	8170a <pio_handler_process+0x3e>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   816fc:	6823      	ldr	r3, [r4, #0]
   816fe:	4630      	mov	r0, r6
   81700:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   81702:	f854 3c08 	ldr.w	r3, [r4, #-8]
   81706:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   8170a:	42bc      	cmp	r4, r7
   8170c:	d002      	beq.n	81714 <pio_handler_process+0x48>
   8170e:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   81710:	2d00      	cmp	r5, #0
   81712:	d1eb      	bne.n	816ec <pio_handler_process+0x20>
   81714:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81718:	00081551 	.word	0x00081551
   8171c:	00081555 	.word	0x00081555
   81720:	20070a30 	.word	0x20070a30

00081724 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   81724:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   81726:	4802      	ldr	r0, [pc, #8]	; (81730 <PIOA_Handler+0xc>)
   81728:	210b      	movs	r1, #11
   8172a:	4b02      	ldr	r3, [pc, #8]	; (81734 <PIOA_Handler+0x10>)
   8172c:	4798      	blx	r3
   8172e:	bd08      	pop	{r3, pc}
   81730:	400e0e00 	.word	0x400e0e00
   81734:	000816cd 	.word	0x000816cd

00081738 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   81738:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   8173a:	4802      	ldr	r0, [pc, #8]	; (81744 <PIOB_Handler+0xc>)
   8173c:	210c      	movs	r1, #12
   8173e:	4b02      	ldr	r3, [pc, #8]	; (81748 <PIOB_Handler+0x10>)
   81740:	4798      	blx	r3
   81742:	bd08      	pop	{r3, pc}
   81744:	400e1000 	.word	0x400e1000
   81748:	000816cd 	.word	0x000816cd

0008174c <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   8174c:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   8174e:	4802      	ldr	r0, [pc, #8]	; (81758 <PIOC_Handler+0xc>)
   81750:	210d      	movs	r1, #13
   81752:	4b02      	ldr	r3, [pc, #8]	; (8175c <PIOC_Handler+0x10>)
   81754:	4798      	blx	r3
   81756:	bd08      	pop	{r3, pc}
   81758:	400e1200 	.word	0x400e1200
   8175c:	000816cd 	.word	0x000816cd

00081760 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   81760:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   81762:	4802      	ldr	r0, [pc, #8]	; (8176c <PIOD_Handler+0xc>)
   81764:	210e      	movs	r1, #14
   81766:	4b02      	ldr	r3, [pc, #8]	; (81770 <PIOD_Handler+0x10>)
   81768:	4798      	blx	r3
   8176a:	bd08      	pop	{r3, pc}
   8176c:	400e1400 	.word	0x400e1400
   81770:	000816cd 	.word	0x000816cd

00081774 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   81774:	4b17      	ldr	r3, [pc, #92]	; (817d4 <pmc_switch_mck_to_pllack+0x60>)
   81776:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   81778:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   8177c:	4310      	orrs	r0, r2
   8177e:	6318      	str	r0, [r3, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   81780:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   81782:	f013 0f08 	tst.w	r3, #8
   81786:	d109      	bne.n	8179c <pmc_switch_mck_to_pllack+0x28>
   81788:	f44f 6300 	mov.w	r3, #2048	; 0x800
   8178c:	4911      	ldr	r1, [pc, #68]	; (817d4 <pmc_switch_mck_to_pllack+0x60>)
   8178e:	e001      	b.n	81794 <pmc_switch_mck_to_pllack+0x20>
			--ul_timeout) {
		if (ul_timeout == 0) {
   81790:	3b01      	subs	r3, #1
   81792:	d019      	beq.n	817c8 <pmc_switch_mck_to_pllack+0x54>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   81794:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   81796:	f012 0f08 	tst.w	r2, #8
   8179a:	d0f9      	beq.n	81790 <pmc_switch_mck_to_pllack+0x1c>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   8179c:	4b0d      	ldr	r3, [pc, #52]	; (817d4 <pmc_switch_mck_to_pllack+0x60>)
   8179e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   817a0:	f022 0203 	bic.w	r2, r2, #3
   817a4:	f042 0202 	orr.w	r2, r2, #2
   817a8:	631a      	str	r2, [r3, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   817aa:	6e98      	ldr	r0, [r3, #104]	; 0x68
   817ac:	f010 0008 	ands.w	r0, r0, #8
   817b0:	d10c      	bne.n	817cc <pmc_switch_mck_to_pllack+0x58>
   817b2:	f44f 6300 	mov.w	r3, #2048	; 0x800
   817b6:	4907      	ldr	r1, [pc, #28]	; (817d4 <pmc_switch_mck_to_pllack+0x60>)
   817b8:	e001      	b.n	817be <pmc_switch_mck_to_pllack+0x4a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   817ba:	3b01      	subs	r3, #1
   817bc:	d008      	beq.n	817d0 <pmc_switch_mck_to_pllack+0x5c>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   817be:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   817c0:	f012 0f08 	tst.w	r2, #8
   817c4:	d0f9      	beq.n	817ba <pmc_switch_mck_to_pllack+0x46>
   817c6:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   817c8:	2001      	movs	r0, #1
   817ca:	4770      	bx	lr
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   817cc:	2000      	movs	r0, #0
   817ce:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   817d0:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   817d2:	4770      	bx	lr
   817d4:	400e0600 	.word	0x400e0600

000817d8 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   817d8:	b138      	cbz	r0, 817ea <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   817da:	4911      	ldr	r1, [pc, #68]	; (81820 <pmc_switch_mainck_to_xtal+0x48>)
   817dc:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   817de:	4a11      	ldr	r2, [pc, #68]	; (81824 <pmc_switch_mainck_to_xtal+0x4c>)
   817e0:	401a      	ands	r2, r3
   817e2:	4b11      	ldr	r3, [pc, #68]	; (81828 <pmc_switch_mainck_to_xtal+0x50>)
   817e4:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   817e6:	620b      	str	r3, [r1, #32]
   817e8:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   817ea:	4a0d      	ldr	r2, [pc, #52]	; (81820 <pmc_switch_mainck_to_xtal+0x48>)
   817ec:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   817ee:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   817f2:	f023 0303 	bic.w	r3, r3, #3
   817f6:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   817fa:	f043 0301 	orr.w	r3, r3, #1
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   817fe:	0209      	lsls	r1, r1, #8
   81800:	b289      	uxth	r1, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   81802:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   81804:	6213      	str	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   81806:	6e93      	ldr	r3, [r2, #104]	; 0x68
   81808:	f013 0f01 	tst.w	r3, #1
   8180c:	d0fb      	beq.n	81806 <pmc_switch_mainck_to_xtal+0x2e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   8180e:	4a04      	ldr	r2, [pc, #16]	; (81820 <pmc_switch_mainck_to_xtal+0x48>)
   81810:	6a13      	ldr	r3, [r2, #32]
   81812:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   81816:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   8181a:	6213      	str	r3, [r2, #32]
   8181c:	4770      	bx	lr
   8181e:	bf00      	nop
   81820:	400e0600 	.word	0x400e0600
   81824:	fec8fffc 	.word	0xfec8fffc
   81828:	01370002 	.word	0x01370002

0008182c <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   8182c:	4b02      	ldr	r3, [pc, #8]	; (81838 <pmc_osc_is_ready_mainck+0xc>)
   8182e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   81830:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   81834:	4770      	bx	lr
   81836:	bf00      	nop
   81838:	400e0600 	.word	0x400e0600

0008183c <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   8183c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   81840:	4b01      	ldr	r3, [pc, #4]	; (81848 <pmc_disable_pllack+0xc>)
   81842:	629a      	str	r2, [r3, #40]	; 0x28
   81844:	4770      	bx	lr
   81846:	bf00      	nop
   81848:	400e0600 	.word	0x400e0600

0008184c <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   8184c:	4b02      	ldr	r3, [pc, #8]	; (81858 <pmc_is_locked_pllack+0xc>)
   8184e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   81850:	f000 0002 	and.w	r0, r0, #2
   81854:	4770      	bx	lr
   81856:	bf00      	nop
   81858:	400e0600 	.word	0x400e0600

0008185c <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   8185c:	282c      	cmp	r0, #44	; 0x2c
   8185e:	d820      	bhi.n	818a2 <pmc_enable_periph_clk+0x46>
		return 1;
	}

	if (ul_id < 32) {
   81860:	281f      	cmp	r0, #31
   81862:	d80d      	bhi.n	81880 <pmc_enable_periph_clk+0x24>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   81864:	4b12      	ldr	r3, [pc, #72]	; (818b0 <pmc_enable_periph_clk+0x54>)
   81866:	699a      	ldr	r2, [r3, #24]
   81868:	2301      	movs	r3, #1
   8186a:	4083      	lsls	r3, r0
   8186c:	401a      	ands	r2, r3
   8186e:	4293      	cmp	r3, r2
   81870:	d019      	beq.n	818a6 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER0 = 1 << ul_id;
   81872:	2301      	movs	r3, #1
   81874:	fa03 f000 	lsl.w	r0, r3, r0
   81878:	4b0d      	ldr	r3, [pc, #52]	; (818b0 <pmc_enable_periph_clk+0x54>)
   8187a:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   8187c:	2000      	movs	r0, #0
   8187e:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   81880:	4b0b      	ldr	r3, [pc, #44]	; (818b0 <pmc_enable_periph_clk+0x54>)
   81882:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55)
	} else {
		ul_id -= 32;
   81886:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   81888:	2301      	movs	r3, #1
   8188a:	4083      	lsls	r3, r0
   8188c:	401a      	ands	r2, r3
   8188e:	4293      	cmp	r3, r2
   81890:	d00b      	beq.n	818aa <pmc_enable_periph_clk+0x4e>
			PMC->PMC_PCER1 = 1 << ul_id;
   81892:	2301      	movs	r3, #1
   81894:	fa03 f000 	lsl.w	r0, r3, r0
   81898:	4b05      	ldr	r3, [pc, #20]	; (818b0 <pmc_enable_periph_clk+0x54>)
   8189a:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
   8189e:	2000      	movs	r0, #0
   818a0:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
   818a2:	2001      	movs	r0, #1
   818a4:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   818a6:	2000      	movs	r0, #0
   818a8:	4770      	bx	lr
   818aa:	2000      	movs	r0, #0
}
   818ac:	4770      	bx	lr
   818ae:	bf00      	nop
   818b0:	400e0600 	.word	0x400e0600

000818b4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   818b4:	e7fe      	b.n	818b4 <Dummy_Handler>
   818b6:	bf00      	nop

000818b8 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   818b8:	b510      	push	{r4, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   818ba:	4b1e      	ldr	r3, [pc, #120]	; (81934 <Reset_Handler+0x7c>)
   818bc:	4a1e      	ldr	r2, [pc, #120]	; (81938 <Reset_Handler+0x80>)
   818be:	429a      	cmp	r2, r3
   818c0:	d003      	beq.n	818ca <Reset_Handler+0x12>
		for (; pDest < &_erelocate;) {
   818c2:	4b1e      	ldr	r3, [pc, #120]	; (8193c <Reset_Handler+0x84>)
   818c4:	4a1b      	ldr	r2, [pc, #108]	; (81934 <Reset_Handler+0x7c>)
   818c6:	429a      	cmp	r2, r3
   818c8:	d304      	bcc.n	818d4 <Reset_Handler+0x1c>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   818ca:	4b1d      	ldr	r3, [pc, #116]	; (81940 <Reset_Handler+0x88>)
   818cc:	4a1d      	ldr	r2, [pc, #116]	; (81944 <Reset_Handler+0x8c>)
   818ce:	429a      	cmp	r2, r3
   818d0:	d30f      	bcc.n	818f2 <Reset_Handler+0x3a>
   818d2:	e01a      	b.n	8190a <Reset_Handler+0x52>
   818d4:	4b1c      	ldr	r3, [pc, #112]	; (81948 <Reset_Handler+0x90>)
   818d6:	4c1d      	ldr	r4, [pc, #116]	; (8194c <Reset_Handler+0x94>)
   818d8:	1ae4      	subs	r4, r4, r3
   818da:	f024 0403 	bic.w	r4, r4, #3
   818de:	3404      	adds	r4, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   818e0:	2300      	movs	r3, #0
			*pDest++ = *pSrc++;
   818e2:	4814      	ldr	r0, [pc, #80]	; (81934 <Reset_Handler+0x7c>)
   818e4:	4914      	ldr	r1, [pc, #80]	; (81938 <Reset_Handler+0x80>)
   818e6:	585a      	ldr	r2, [r3, r1]
   818e8:	501a      	str	r2, [r3, r0]
   818ea:	3304      	adds	r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   818ec:	42a3      	cmp	r3, r4
   818ee:	d1fa      	bne.n	818e6 <Reset_Handler+0x2e>
   818f0:	e7eb      	b.n	818ca <Reset_Handler+0x12>
   818f2:	4b17      	ldr	r3, [pc, #92]	; (81950 <Reset_Handler+0x98>)
   818f4:	4917      	ldr	r1, [pc, #92]	; (81954 <Reset_Handler+0x9c>)
   818f6:	1ac9      	subs	r1, r1, r3
   818f8:	f021 0103 	bic.w	r1, r1, #3
   818fc:	1d1a      	adds	r2, r3, #4
   818fe:	4411      	add	r1, r2
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
   81900:	2200      	movs	r2, #0
   81902:	f843 2f04 	str.w	r2, [r3, #4]!
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   81906:	428b      	cmp	r3, r1
   81908:	d1fb      	bne.n	81902 <Reset_Handler+0x4a>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   8190a:	4a13      	ldr	r2, [pc, #76]	; (81958 <Reset_Handler+0xa0>)
   8190c:	f022 4360 	bic.w	r3, r2, #3758096384	; 0xe0000000
   81910:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   81914:	4911      	ldr	r1, [pc, #68]	; (8195c <Reset_Handler+0xa4>)
   81916:	608b      	str	r3, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   81918:	f102 4260 	add.w	r2, r2, #3758096384	; 0xe0000000
   8191c:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
   81920:	d203      	bcs.n	8192a <Reset_Handler+0x72>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   81922:	688a      	ldr	r2, [r1, #8]
   81924:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   81928:	608a      	str	r2, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   8192a:	4b0d      	ldr	r3, [pc, #52]	; (81960 <Reset_Handler+0xa8>)
   8192c:	4798      	blx	r3

	/* Branch to main function */
	main();
   8192e:	4b0d      	ldr	r3, [pc, #52]	; (81964 <Reset_Handler+0xac>)
   81930:	4798      	blx	r3
   81932:	e7fe      	b.n	81932 <Reset_Handler+0x7a>
   81934:	20070000 	.word	0x20070000
   81938:	00082f58 	.word	0x00082f58
   8193c:	20070974 	.word	0x20070974
   81940:	20070b7c 	.word	0x20070b7c
   81944:	20070974 	.word	0x20070974
   81948:	20070004 	.word	0x20070004
   8194c:	20070977 	.word	0x20070977
   81950:	20070970 	.word	0x20070970
   81954:	20070b77 	.word	0x20070b77
   81958:	00080000 	.word	0x00080000
   8195c:	e000ed00 	.word	0xe000ed00
   81960:	00081ad5 	.word	0x00081ad5
   81964:	0008084d 	.word	0x0008084d

00081968 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   81968:	4b3e      	ldr	r3, [pc, #248]	; (81a64 <SystemCoreClockUpdate+0xfc>)
   8196a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   8196c:	f003 0303 	and.w	r3, r3, #3
   81970:	2b03      	cmp	r3, #3
   81972:	d85f      	bhi.n	81a34 <SystemCoreClockUpdate+0xcc>
   81974:	e8df f003 	tbb	[pc, r3]
   81978:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   8197c:	4b3a      	ldr	r3, [pc, #232]	; (81a68 <SystemCoreClockUpdate+0x100>)
   8197e:	695b      	ldr	r3, [r3, #20]
   81980:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   81984:	bf14      	ite	ne
   81986:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   8198a:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   8198e:	4b37      	ldr	r3, [pc, #220]	; (81a6c <SystemCoreClockUpdate+0x104>)
   81990:	601a      	str	r2, [r3, #0]
   81992:	e04f      	b.n	81a34 <SystemCoreClockUpdate+0xcc>
		}
		break;
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   81994:	4b33      	ldr	r3, [pc, #204]	; (81a64 <SystemCoreClockUpdate+0xfc>)
   81996:	6a1b      	ldr	r3, [r3, #32]
   81998:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   8199c:	d003      	beq.n	819a6 <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   8199e:	4a34      	ldr	r2, [pc, #208]	; (81a70 <SystemCoreClockUpdate+0x108>)
   819a0:	4b32      	ldr	r3, [pc, #200]	; (81a6c <SystemCoreClockUpdate+0x104>)
   819a2:	601a      	str	r2, [r3, #0]
   819a4:	e046      	b.n	81a34 <SystemCoreClockUpdate+0xcc>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   819a6:	4a33      	ldr	r2, [pc, #204]	; (81a74 <SystemCoreClockUpdate+0x10c>)
   819a8:	4b30      	ldr	r3, [pc, #192]	; (81a6c <SystemCoreClockUpdate+0x104>)
   819aa:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   819ac:	4b2d      	ldr	r3, [pc, #180]	; (81a64 <SystemCoreClockUpdate+0xfc>)
   819ae:	6a1b      	ldr	r3, [r3, #32]
   819b0:	f003 0370 	and.w	r3, r3, #112	; 0x70
   819b4:	2b10      	cmp	r3, #16
   819b6:	d002      	beq.n	819be <SystemCoreClockUpdate+0x56>
   819b8:	2b20      	cmp	r3, #32
   819ba:	d004      	beq.n	819c6 <SystemCoreClockUpdate+0x5e>
   819bc:	e03a      	b.n	81a34 <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   819be:	4a2e      	ldr	r2, [pc, #184]	; (81a78 <SystemCoreClockUpdate+0x110>)
   819c0:	4b2a      	ldr	r3, [pc, #168]	; (81a6c <SystemCoreClockUpdate+0x104>)
   819c2:	601a      	str	r2, [r3, #0]
				break;
   819c4:	e036      	b.n	81a34 <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   819c6:	4a2a      	ldr	r2, [pc, #168]	; (81a70 <SystemCoreClockUpdate+0x108>)
   819c8:	4b28      	ldr	r3, [pc, #160]	; (81a6c <SystemCoreClockUpdate+0x104>)
   819ca:	601a      	str	r2, [r3, #0]
				break;
   819cc:	e032      	b.n	81a34 <SystemCoreClockUpdate+0xcc>
			}
		}
		break;
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   819ce:	4b25      	ldr	r3, [pc, #148]	; (81a64 <SystemCoreClockUpdate+0xfc>)
   819d0:	6a1b      	ldr	r3, [r3, #32]
   819d2:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   819d6:	d003      	beq.n	819e0 <SystemCoreClockUpdate+0x78>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   819d8:	4a25      	ldr	r2, [pc, #148]	; (81a70 <SystemCoreClockUpdate+0x108>)
   819da:	4b24      	ldr	r3, [pc, #144]	; (81a6c <SystemCoreClockUpdate+0x104>)
   819dc:	601a      	str	r2, [r3, #0]
   819de:	e012      	b.n	81a06 <SystemCoreClockUpdate+0x9e>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   819e0:	4a24      	ldr	r2, [pc, #144]	; (81a74 <SystemCoreClockUpdate+0x10c>)
   819e2:	4b22      	ldr	r3, [pc, #136]	; (81a6c <SystemCoreClockUpdate+0x104>)
   819e4:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   819e6:	4b1f      	ldr	r3, [pc, #124]	; (81a64 <SystemCoreClockUpdate+0xfc>)
   819e8:	6a1b      	ldr	r3, [r3, #32]
   819ea:	f003 0370 	and.w	r3, r3, #112	; 0x70
   819ee:	2b10      	cmp	r3, #16
   819f0:	d002      	beq.n	819f8 <SystemCoreClockUpdate+0x90>
   819f2:	2b20      	cmp	r3, #32
   819f4:	d004      	beq.n	81a00 <SystemCoreClockUpdate+0x98>
   819f6:	e006      	b.n	81a06 <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   819f8:	4a1f      	ldr	r2, [pc, #124]	; (81a78 <SystemCoreClockUpdate+0x110>)
   819fa:	4b1c      	ldr	r3, [pc, #112]	; (81a6c <SystemCoreClockUpdate+0x104>)
   819fc:	601a      	str	r2, [r3, #0]
				break;
   819fe:	e002      	b.n	81a06 <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   81a00:	4a1b      	ldr	r2, [pc, #108]	; (81a70 <SystemCoreClockUpdate+0x108>)
   81a02:	4b1a      	ldr	r3, [pc, #104]	; (81a6c <SystemCoreClockUpdate+0x104>)
   81a04:	601a      	str	r2, [r3, #0]
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   81a06:	4b17      	ldr	r3, [pc, #92]	; (81a64 <SystemCoreClockUpdate+0xfc>)
   81a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   81a0a:	f003 0303 	and.w	r3, r3, #3
   81a0e:	2b02      	cmp	r3, #2
   81a10:	d10d      	bne.n	81a2e <SystemCoreClockUpdate+0xc6>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   81a12:	4b14      	ldr	r3, [pc, #80]	; (81a64 <SystemCoreClockUpdate+0xfc>)
   81a14:	6a98      	ldr	r0, [r3, #40]	; 0x28
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   81a16:	6a99      	ldr	r1, [r3, #40]	; 0x28
   81a18:	4b14      	ldr	r3, [pc, #80]	; (81a6c <SystemCoreClockUpdate+0x104>)
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   81a1a:	f3c0 400a 	ubfx	r0, r0, #16, #11
   81a1e:	681a      	ldr	r2, [r3, #0]
   81a20:	fb00 2202 	mla	r2, r0, r2, r2
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   81a24:	b2c9      	uxtb	r1, r1
   81a26:	fbb2 f2f1 	udiv	r2, r2, r1
   81a2a:	601a      	str	r2, [r3, #0]
   81a2c:	e002      	b.n	81a34 <SystemCoreClockUpdate+0xcc>
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   81a2e:	4a13      	ldr	r2, [pc, #76]	; (81a7c <SystemCoreClockUpdate+0x114>)
   81a30:	4b0e      	ldr	r3, [pc, #56]	; (81a6c <SystemCoreClockUpdate+0x104>)
   81a32:	601a      	str	r2, [r3, #0]
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   81a34:	4b0b      	ldr	r3, [pc, #44]	; (81a64 <SystemCoreClockUpdate+0xfc>)
   81a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   81a38:	f003 0370 	and.w	r3, r3, #112	; 0x70
   81a3c:	2b70      	cmp	r3, #112	; 0x70
   81a3e:	d107      	bne.n	81a50 <SystemCoreClockUpdate+0xe8>
		SystemCoreClock /= 3U;
   81a40:	4b0a      	ldr	r3, [pc, #40]	; (81a6c <SystemCoreClockUpdate+0x104>)
   81a42:	681a      	ldr	r2, [r3, #0]
   81a44:	490e      	ldr	r1, [pc, #56]	; (81a80 <SystemCoreClockUpdate+0x118>)
   81a46:	fba1 0202 	umull	r0, r2, r1, r2
   81a4a:	0852      	lsrs	r2, r2, #1
   81a4c:	601a      	str	r2, [r3, #0]
   81a4e:	4770      	bx	lr
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   81a50:	4b04      	ldr	r3, [pc, #16]	; (81a64 <SystemCoreClockUpdate+0xfc>)
   81a52:	6b19      	ldr	r1, [r3, #48]	; 0x30
   81a54:	4b05      	ldr	r3, [pc, #20]	; (81a6c <SystemCoreClockUpdate+0x104>)
   81a56:	f3c1 1102 	ubfx	r1, r1, #4, #3
   81a5a:	681a      	ldr	r2, [r3, #0]
   81a5c:	40ca      	lsrs	r2, r1
   81a5e:	601a      	str	r2, [r3, #0]
   81a60:	4770      	bx	lr
   81a62:	bf00      	nop
   81a64:	400e0600 	.word	0x400e0600
   81a68:	400e1a10 	.word	0x400e1a10
   81a6c:	20070130 	.word	0x20070130
   81a70:	00b71b00 	.word	0x00b71b00
   81a74:	003d0900 	.word	0x003d0900
   81a78:	007a1200 	.word	0x007a1200
   81a7c:	0e4e1c00 	.word	0x0e4e1c00
   81a80:	aaaaaaab 	.word	0xaaaaaaab

00081a84 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   81a84:	4b09      	ldr	r3, [pc, #36]	; (81aac <_sbrk+0x28>)
   81a86:	681b      	ldr	r3, [r3, #0]
   81a88:	b913      	cbnz	r3, 81a90 <_sbrk+0xc>
		heap = (unsigned char *)&_end;
   81a8a:	4a09      	ldr	r2, [pc, #36]	; (81ab0 <_sbrk+0x2c>)
   81a8c:	4b07      	ldr	r3, [pc, #28]	; (81aac <_sbrk+0x28>)
   81a8e:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   81a90:	4b06      	ldr	r3, [pc, #24]	; (81aac <_sbrk+0x28>)
   81a92:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   81a94:	181a      	adds	r2, r3, r0
   81a96:	4907      	ldr	r1, [pc, #28]	; (81ab4 <_sbrk+0x30>)
   81a98:	4291      	cmp	r1, r2
   81a9a:	db04      	blt.n	81aa6 <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
   81a9c:	4610      	mov	r0, r2
   81a9e:	4a03      	ldr	r2, [pc, #12]	; (81aac <_sbrk+0x28>)
   81aa0:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   81aa2:	4618      	mov	r0, r3
   81aa4:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
   81aa6:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
   81aaa:	4770      	bx	lr
   81aac:	20070aa0 	.word	0x20070aa0
   81ab0:	20072b80 	.word	0x20072b80
   81ab4:	20087ffc 	.word	0x20087ffc

00081ab8 <_close>:
}

extern int _close(int file)
{
	return -1;
}
   81ab8:	f04f 30ff 	mov.w	r0, #4294967295
   81abc:	4770      	bx	lr
   81abe:	bf00      	nop

00081ac0 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   81ac0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   81ac4:	604b      	str	r3, [r1, #4]

	return 0;
}
   81ac6:	2000      	movs	r0, #0
   81ac8:	4770      	bx	lr
   81aca:	bf00      	nop

00081acc <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   81acc:	2001      	movs	r0, #1
   81ace:	4770      	bx	lr

00081ad0 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   81ad0:	2000      	movs	r0, #0
   81ad2:	4770      	bx	lr

00081ad4 <__libc_init_array>:
   81ad4:	b570      	push	{r4, r5, r6, lr}
   81ad6:	4e0f      	ldr	r6, [pc, #60]	; (81b14 <__libc_init_array+0x40>)
   81ad8:	4d0f      	ldr	r5, [pc, #60]	; (81b18 <__libc_init_array+0x44>)
   81ada:	1b76      	subs	r6, r6, r5
   81adc:	10b6      	asrs	r6, r6, #2
   81ade:	d007      	beq.n	81af0 <__libc_init_array+0x1c>
   81ae0:	3d04      	subs	r5, #4
   81ae2:	2400      	movs	r4, #0
   81ae4:	3401      	adds	r4, #1
   81ae6:	f855 3f04 	ldr.w	r3, [r5, #4]!
   81aea:	4798      	blx	r3
   81aec:	42a6      	cmp	r6, r4
   81aee:	d1f9      	bne.n	81ae4 <__libc_init_array+0x10>
   81af0:	4e0a      	ldr	r6, [pc, #40]	; (81b1c <__libc_init_array+0x48>)
   81af2:	4d0b      	ldr	r5, [pc, #44]	; (81b20 <__libc_init_array+0x4c>)
   81af4:	f001 fa1e 	bl	82f34 <_init>
   81af8:	1b76      	subs	r6, r6, r5
   81afa:	10b6      	asrs	r6, r6, #2
   81afc:	d008      	beq.n	81b10 <__libc_init_array+0x3c>
   81afe:	3d04      	subs	r5, #4
   81b00:	2400      	movs	r4, #0
   81b02:	3401      	adds	r4, #1
   81b04:	f855 3f04 	ldr.w	r3, [r5, #4]!
   81b08:	4798      	blx	r3
   81b0a:	42a6      	cmp	r6, r4
   81b0c:	d1f9      	bne.n	81b02 <__libc_init_array+0x2e>
   81b0e:	bd70      	pop	{r4, r5, r6, pc}
   81b10:	bd70      	pop	{r4, r5, r6, pc}
   81b12:	bf00      	nop
   81b14:	00082f40 	.word	0x00082f40
   81b18:	00082f40 	.word	0x00082f40
   81b1c:	00082f48 	.word	0x00082f48
   81b20:	00082f40 	.word	0x00082f40

00081b24 <memset>:
   81b24:	b4f0      	push	{r4, r5, r6, r7}
   81b26:	0784      	lsls	r4, r0, #30
   81b28:	d043      	beq.n	81bb2 <memset+0x8e>
   81b2a:	1e54      	subs	r4, r2, #1
   81b2c:	2a00      	cmp	r2, #0
   81b2e:	d03e      	beq.n	81bae <memset+0x8a>
   81b30:	b2cd      	uxtb	r5, r1
   81b32:	4603      	mov	r3, r0
   81b34:	e003      	b.n	81b3e <memset+0x1a>
   81b36:	1e62      	subs	r2, r4, #1
   81b38:	2c00      	cmp	r4, #0
   81b3a:	d038      	beq.n	81bae <memset+0x8a>
   81b3c:	4614      	mov	r4, r2
   81b3e:	f803 5b01 	strb.w	r5, [r3], #1
   81b42:	079a      	lsls	r2, r3, #30
   81b44:	d1f7      	bne.n	81b36 <memset+0x12>
   81b46:	2c03      	cmp	r4, #3
   81b48:	d92a      	bls.n	81ba0 <memset+0x7c>
   81b4a:	b2cd      	uxtb	r5, r1
   81b4c:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   81b50:	2c0f      	cmp	r4, #15
   81b52:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   81b56:	d915      	bls.n	81b84 <memset+0x60>
   81b58:	f1a4 0710 	sub.w	r7, r4, #16
   81b5c:	093f      	lsrs	r7, r7, #4
   81b5e:	f103 0610 	add.w	r6, r3, #16
   81b62:	eb06 1607 	add.w	r6, r6, r7, lsl #4
   81b66:	461a      	mov	r2, r3
   81b68:	6015      	str	r5, [r2, #0]
   81b6a:	6055      	str	r5, [r2, #4]
   81b6c:	6095      	str	r5, [r2, #8]
   81b6e:	60d5      	str	r5, [r2, #12]
   81b70:	3210      	adds	r2, #16
   81b72:	42b2      	cmp	r2, r6
   81b74:	d1f8      	bne.n	81b68 <memset+0x44>
   81b76:	f004 040f 	and.w	r4, r4, #15
   81b7a:	3701      	adds	r7, #1
   81b7c:	2c03      	cmp	r4, #3
   81b7e:	eb03 1307 	add.w	r3, r3, r7, lsl #4
   81b82:	d90d      	bls.n	81ba0 <memset+0x7c>
   81b84:	461e      	mov	r6, r3
   81b86:	4622      	mov	r2, r4
   81b88:	3a04      	subs	r2, #4
   81b8a:	2a03      	cmp	r2, #3
   81b8c:	f846 5b04 	str.w	r5, [r6], #4
   81b90:	d8fa      	bhi.n	81b88 <memset+0x64>
   81b92:	1f22      	subs	r2, r4, #4
   81b94:	f022 0203 	bic.w	r2, r2, #3
   81b98:	3204      	adds	r2, #4
   81b9a:	4413      	add	r3, r2
   81b9c:	f004 0403 	and.w	r4, r4, #3
   81ba0:	b12c      	cbz	r4, 81bae <memset+0x8a>
   81ba2:	b2c9      	uxtb	r1, r1
   81ba4:	441c      	add	r4, r3
   81ba6:	f803 1b01 	strb.w	r1, [r3], #1
   81baa:	42a3      	cmp	r3, r4
   81bac:	d1fb      	bne.n	81ba6 <memset+0x82>
   81bae:	bcf0      	pop	{r4, r5, r6, r7}
   81bb0:	4770      	bx	lr
   81bb2:	4614      	mov	r4, r2
   81bb4:	4603      	mov	r3, r0
   81bb6:	e7c6      	b.n	81b46 <memset+0x22>

00081bb8 <setbuf>:
   81bb8:	2900      	cmp	r1, #0
   81bba:	bf0c      	ite	eq
   81bbc:	2202      	moveq	r2, #2
   81bbe:	2200      	movne	r2, #0
   81bc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
   81bc4:	f000 b80e 	b.w	81be4 <setvbuf>

00081bc8 <setjmp>:
   81bc8:	46ec      	mov	ip, sp
   81bca:	e8a0 5ff0 	stmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
   81bce:	f04f 0000 	mov.w	r0, #0
   81bd2:	4770      	bx	lr

00081bd4 <longjmp>:
   81bd4:	e8b0 5ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
   81bd8:	46e5      	mov	sp, ip
   81bda:	0008      	movs	r0, r1
   81bdc:	bf08      	it	eq
   81bde:	2001      	moveq	r0, #1
   81be0:	4770      	bx	lr
   81be2:	bf00      	nop

00081be4 <setvbuf>:
   81be4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   81be8:	4d3c      	ldr	r5, [pc, #240]	; (81cdc <setvbuf+0xf8>)
   81bea:	4604      	mov	r4, r0
   81bec:	682d      	ldr	r5, [r5, #0]
   81bee:	4688      	mov	r8, r1
   81bf0:	4616      	mov	r6, r2
   81bf2:	461f      	mov	r7, r3
   81bf4:	b115      	cbz	r5, 81bfc <setvbuf+0x18>
   81bf6:	6bab      	ldr	r3, [r5, #56]	; 0x38
   81bf8:	2b00      	cmp	r3, #0
   81bfa:	d04f      	beq.n	81c9c <setvbuf+0xb8>
   81bfc:	2e02      	cmp	r6, #2
   81bfe:	d830      	bhi.n	81c62 <setvbuf+0x7e>
   81c00:	2f00      	cmp	r7, #0
   81c02:	db2e      	blt.n	81c62 <setvbuf+0x7e>
   81c04:	4628      	mov	r0, r5
   81c06:	4621      	mov	r1, r4
   81c08:	f000 f9d6 	bl	81fb8 <_fflush_r>
   81c0c:	89a3      	ldrh	r3, [r4, #12]
   81c0e:	2200      	movs	r2, #0
   81c10:	6062      	str	r2, [r4, #4]
   81c12:	61a2      	str	r2, [r4, #24]
   81c14:	061a      	lsls	r2, r3, #24
   81c16:	d428      	bmi.n	81c6a <setvbuf+0x86>
   81c18:	f023 0383 	bic.w	r3, r3, #131	; 0x83
   81c1c:	b29b      	uxth	r3, r3
   81c1e:	2e02      	cmp	r6, #2
   81c20:	81a3      	strh	r3, [r4, #12]
   81c22:	d02d      	beq.n	81c80 <setvbuf+0x9c>
   81c24:	f1b8 0f00 	cmp.w	r8, #0
   81c28:	d03c      	beq.n	81ca4 <setvbuf+0xc0>
   81c2a:	2e01      	cmp	r6, #1
   81c2c:	d013      	beq.n	81c56 <setvbuf+0x72>
   81c2e:	b29b      	uxth	r3, r3
   81c30:	f003 0008 	and.w	r0, r3, #8
   81c34:	4a2a      	ldr	r2, [pc, #168]	; (81ce0 <setvbuf+0xfc>)
   81c36:	b280      	uxth	r0, r0
   81c38:	63ea      	str	r2, [r5, #60]	; 0x3c
   81c3a:	f8c4 8000 	str.w	r8, [r4]
   81c3e:	f8c4 8010 	str.w	r8, [r4, #16]
   81c42:	6167      	str	r7, [r4, #20]
   81c44:	b178      	cbz	r0, 81c66 <setvbuf+0x82>
   81c46:	f013 0f03 	tst.w	r3, #3
   81c4a:	bf18      	it	ne
   81c4c:	2700      	movne	r7, #0
   81c4e:	60a7      	str	r7, [r4, #8]
   81c50:	2000      	movs	r0, #0
   81c52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81c56:	f043 0301 	orr.w	r3, r3, #1
   81c5a:	427a      	negs	r2, r7
   81c5c:	81a3      	strh	r3, [r4, #12]
   81c5e:	61a2      	str	r2, [r4, #24]
   81c60:	e7e5      	b.n	81c2e <setvbuf+0x4a>
   81c62:	f04f 30ff 	mov.w	r0, #4294967295
   81c66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81c6a:	4628      	mov	r0, r5
   81c6c:	6921      	ldr	r1, [r4, #16]
   81c6e:	f000 faa3 	bl	821b8 <_free_r>
   81c72:	89a3      	ldrh	r3, [r4, #12]
   81c74:	2e02      	cmp	r6, #2
   81c76:	f023 0383 	bic.w	r3, r3, #131	; 0x83
   81c7a:	b29b      	uxth	r3, r3
   81c7c:	81a3      	strh	r3, [r4, #12]
   81c7e:	d1d1      	bne.n	81c24 <setvbuf+0x40>
   81c80:	2000      	movs	r0, #0
   81c82:	f104 0243 	add.w	r2, r4, #67	; 0x43
   81c86:	f043 0302 	orr.w	r3, r3, #2
   81c8a:	2500      	movs	r5, #0
   81c8c:	2101      	movs	r1, #1
   81c8e:	81a3      	strh	r3, [r4, #12]
   81c90:	60a5      	str	r5, [r4, #8]
   81c92:	6022      	str	r2, [r4, #0]
   81c94:	6122      	str	r2, [r4, #16]
   81c96:	6161      	str	r1, [r4, #20]
   81c98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81c9c:	4628      	mov	r0, r5
   81c9e:	f000 f9a7 	bl	81ff0 <__sinit>
   81ca2:	e7ab      	b.n	81bfc <setvbuf+0x18>
   81ca4:	2f00      	cmp	r7, #0
   81ca6:	bf08      	it	eq
   81ca8:	f44f 6780 	moveq.w	r7, #1024	; 0x400
   81cac:	4638      	mov	r0, r7
   81cae:	f000 fbe3 	bl	82478 <malloc>
   81cb2:	4680      	mov	r8, r0
   81cb4:	b128      	cbz	r0, 81cc2 <setvbuf+0xde>
   81cb6:	89a3      	ldrh	r3, [r4, #12]
   81cb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   81cbc:	b29b      	uxth	r3, r3
   81cbe:	81a3      	strh	r3, [r4, #12]
   81cc0:	e7b3      	b.n	81c2a <setvbuf+0x46>
   81cc2:	f44f 6080 	mov.w	r0, #1024	; 0x400
   81cc6:	f000 fbd7 	bl	82478 <malloc>
   81cca:	4680      	mov	r8, r0
   81ccc:	b918      	cbnz	r0, 81cd6 <setvbuf+0xf2>
   81cce:	89a3      	ldrh	r3, [r4, #12]
   81cd0:	f04f 30ff 	mov.w	r0, #4294967295
   81cd4:	e7d5      	b.n	81c82 <setvbuf+0x9e>
   81cd6:	f44f 6780 	mov.w	r7, #1024	; 0x400
   81cda:	e7ec      	b.n	81cb6 <setvbuf+0xd2>
   81cdc:	20070560 	.word	0x20070560
   81ce0:	00081fe5 	.word	0x00081fe5

00081ce4 <__swbuf_r>:
   81ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   81ce6:	460d      	mov	r5, r1
   81ce8:	4614      	mov	r4, r2
   81cea:	4607      	mov	r7, r0
   81cec:	b110      	cbz	r0, 81cf4 <__swbuf_r+0x10>
   81cee:	6b83      	ldr	r3, [r0, #56]	; 0x38
   81cf0:	2b00      	cmp	r3, #0
   81cf2:	d048      	beq.n	81d86 <__swbuf_r+0xa2>
   81cf4:	89a2      	ldrh	r2, [r4, #12]
   81cf6:	69a0      	ldr	r0, [r4, #24]
   81cf8:	b293      	uxth	r3, r2
   81cfa:	60a0      	str	r0, [r4, #8]
   81cfc:	0718      	lsls	r0, r3, #28
   81cfe:	d538      	bpl.n	81d72 <__swbuf_r+0x8e>
   81d00:	6926      	ldr	r6, [r4, #16]
   81d02:	2e00      	cmp	r6, #0
   81d04:	d035      	beq.n	81d72 <__swbuf_r+0x8e>
   81d06:	0499      	lsls	r1, r3, #18
   81d08:	b2ed      	uxtb	r5, r5
   81d0a:	d515      	bpl.n	81d38 <__swbuf_r+0x54>
   81d0c:	6823      	ldr	r3, [r4, #0]
   81d0e:	6962      	ldr	r2, [r4, #20]
   81d10:	1b9e      	subs	r6, r3, r6
   81d12:	4296      	cmp	r6, r2
   81d14:	da1c      	bge.n	81d50 <__swbuf_r+0x6c>
   81d16:	3601      	adds	r6, #1
   81d18:	68a2      	ldr	r2, [r4, #8]
   81d1a:	1c59      	adds	r1, r3, #1
   81d1c:	3a01      	subs	r2, #1
   81d1e:	60a2      	str	r2, [r4, #8]
   81d20:	6021      	str	r1, [r4, #0]
   81d22:	701d      	strb	r5, [r3, #0]
   81d24:	6963      	ldr	r3, [r4, #20]
   81d26:	42b3      	cmp	r3, r6
   81d28:	d01a      	beq.n	81d60 <__swbuf_r+0x7c>
   81d2a:	89a3      	ldrh	r3, [r4, #12]
   81d2c:	07db      	lsls	r3, r3, #31
   81d2e:	d501      	bpl.n	81d34 <__swbuf_r+0x50>
   81d30:	2d0a      	cmp	r5, #10
   81d32:	d015      	beq.n	81d60 <__swbuf_r+0x7c>
   81d34:	4628      	mov	r0, r5
   81d36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   81d38:	6e63      	ldr	r3, [r4, #100]	; 0x64
   81d3a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   81d3e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   81d42:	6663      	str	r3, [r4, #100]	; 0x64
   81d44:	6823      	ldr	r3, [r4, #0]
   81d46:	81a2      	strh	r2, [r4, #12]
   81d48:	6962      	ldr	r2, [r4, #20]
   81d4a:	1b9e      	subs	r6, r3, r6
   81d4c:	4296      	cmp	r6, r2
   81d4e:	dbe2      	blt.n	81d16 <__swbuf_r+0x32>
   81d50:	4638      	mov	r0, r7
   81d52:	4621      	mov	r1, r4
   81d54:	f000 f930 	bl	81fb8 <_fflush_r>
   81d58:	b940      	cbnz	r0, 81d6c <__swbuf_r+0x88>
   81d5a:	6823      	ldr	r3, [r4, #0]
   81d5c:	2601      	movs	r6, #1
   81d5e:	e7db      	b.n	81d18 <__swbuf_r+0x34>
   81d60:	4638      	mov	r0, r7
   81d62:	4621      	mov	r1, r4
   81d64:	f000 f928 	bl	81fb8 <_fflush_r>
   81d68:	2800      	cmp	r0, #0
   81d6a:	d0e3      	beq.n	81d34 <__swbuf_r+0x50>
   81d6c:	f04f 30ff 	mov.w	r0, #4294967295
   81d70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   81d72:	4638      	mov	r0, r7
   81d74:	4621      	mov	r1, r4
   81d76:	f000 f809 	bl	81d8c <__swsetup_r>
   81d7a:	2800      	cmp	r0, #0
   81d7c:	d1f6      	bne.n	81d6c <__swbuf_r+0x88>
   81d7e:	89a2      	ldrh	r2, [r4, #12]
   81d80:	6926      	ldr	r6, [r4, #16]
   81d82:	b293      	uxth	r3, r2
   81d84:	e7bf      	b.n	81d06 <__swbuf_r+0x22>
   81d86:	f000 f933 	bl	81ff0 <__sinit>
   81d8a:	e7b3      	b.n	81cf4 <__swbuf_r+0x10>

00081d8c <__swsetup_r>:
   81d8c:	4b2f      	ldr	r3, [pc, #188]	; (81e4c <__swsetup_r+0xc0>)
   81d8e:	b570      	push	{r4, r5, r6, lr}
   81d90:	4606      	mov	r6, r0
   81d92:	6818      	ldr	r0, [r3, #0]
   81d94:	460c      	mov	r4, r1
   81d96:	b110      	cbz	r0, 81d9e <__swsetup_r+0x12>
   81d98:	6b82      	ldr	r2, [r0, #56]	; 0x38
   81d9a:	2a00      	cmp	r2, #0
   81d9c:	d036      	beq.n	81e0c <__swsetup_r+0x80>
   81d9e:	89a5      	ldrh	r5, [r4, #12]
   81da0:	b2ab      	uxth	r3, r5
   81da2:	0719      	lsls	r1, r3, #28
   81da4:	d50c      	bpl.n	81dc0 <__swsetup_r+0x34>
   81da6:	6922      	ldr	r2, [r4, #16]
   81da8:	b1aa      	cbz	r2, 81dd6 <__swsetup_r+0x4a>
   81daa:	f013 0101 	ands.w	r1, r3, #1
   81dae:	d01e      	beq.n	81dee <__swsetup_r+0x62>
   81db0:	6963      	ldr	r3, [r4, #20]
   81db2:	2100      	movs	r1, #0
   81db4:	425b      	negs	r3, r3
   81db6:	61a3      	str	r3, [r4, #24]
   81db8:	60a1      	str	r1, [r4, #8]
   81dba:	b1f2      	cbz	r2, 81dfa <__swsetup_r+0x6e>
   81dbc:	2000      	movs	r0, #0
   81dbe:	bd70      	pop	{r4, r5, r6, pc}
   81dc0:	06da      	lsls	r2, r3, #27
   81dc2:	d53a      	bpl.n	81e3a <__swsetup_r+0xae>
   81dc4:	075b      	lsls	r3, r3, #29
   81dc6:	d424      	bmi.n	81e12 <__swsetup_r+0x86>
   81dc8:	6922      	ldr	r2, [r4, #16]
   81dca:	f045 0308 	orr.w	r3, r5, #8
   81dce:	81a3      	strh	r3, [r4, #12]
   81dd0:	b29b      	uxth	r3, r3
   81dd2:	2a00      	cmp	r2, #0
   81dd4:	d1e9      	bne.n	81daa <__swsetup_r+0x1e>
   81dd6:	f403 7120 	and.w	r1, r3, #640	; 0x280
   81dda:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   81dde:	d0e4      	beq.n	81daa <__swsetup_r+0x1e>
   81de0:	4630      	mov	r0, r6
   81de2:	4621      	mov	r1, r4
   81de4:	f000 fad8 	bl	82398 <__smakebuf_r>
   81de8:	89a3      	ldrh	r3, [r4, #12]
   81dea:	6922      	ldr	r2, [r4, #16]
   81dec:	e7dd      	b.n	81daa <__swsetup_r+0x1e>
   81dee:	0798      	lsls	r0, r3, #30
   81df0:	bf58      	it	pl
   81df2:	6961      	ldrpl	r1, [r4, #20]
   81df4:	60a1      	str	r1, [r4, #8]
   81df6:	2a00      	cmp	r2, #0
   81df8:	d1e0      	bne.n	81dbc <__swsetup_r+0x30>
   81dfa:	89a3      	ldrh	r3, [r4, #12]
   81dfc:	061a      	lsls	r2, r3, #24
   81dfe:	d5dd      	bpl.n	81dbc <__swsetup_r+0x30>
   81e00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   81e04:	81a3      	strh	r3, [r4, #12]
   81e06:	f04f 30ff 	mov.w	r0, #4294967295
   81e0a:	bd70      	pop	{r4, r5, r6, pc}
   81e0c:	f000 f8f0 	bl	81ff0 <__sinit>
   81e10:	e7c5      	b.n	81d9e <__swsetup_r+0x12>
   81e12:	6b21      	ldr	r1, [r4, #48]	; 0x30
   81e14:	b149      	cbz	r1, 81e2a <__swsetup_r+0x9e>
   81e16:	f104 0340 	add.w	r3, r4, #64	; 0x40
   81e1a:	4299      	cmp	r1, r3
   81e1c:	d003      	beq.n	81e26 <__swsetup_r+0x9a>
   81e1e:	4630      	mov	r0, r6
   81e20:	f000 f9ca 	bl	821b8 <_free_r>
   81e24:	89a5      	ldrh	r5, [r4, #12]
   81e26:	2300      	movs	r3, #0
   81e28:	6323      	str	r3, [r4, #48]	; 0x30
   81e2a:	6922      	ldr	r2, [r4, #16]
   81e2c:	f025 0524 	bic.w	r5, r5, #36	; 0x24
   81e30:	2100      	movs	r1, #0
   81e32:	b2ad      	uxth	r5, r5
   81e34:	6022      	str	r2, [r4, #0]
   81e36:	6061      	str	r1, [r4, #4]
   81e38:	e7c7      	b.n	81dca <__swsetup_r+0x3e>
   81e3a:	f045 0540 	orr.w	r5, r5, #64	; 0x40
   81e3e:	2309      	movs	r3, #9
   81e40:	6033      	str	r3, [r6, #0]
   81e42:	f04f 30ff 	mov.w	r0, #4294967295
   81e46:	81a5      	strh	r5, [r4, #12]
   81e48:	bd70      	pop	{r4, r5, r6, pc}
   81e4a:	bf00      	nop
   81e4c:	20070560 	.word	0x20070560

00081e50 <register_fini>:
   81e50:	4b02      	ldr	r3, [pc, #8]	; (81e5c <register_fini+0xc>)
   81e52:	b113      	cbz	r3, 81e5a <register_fini+0xa>
   81e54:	4802      	ldr	r0, [pc, #8]	; (81e60 <register_fini+0x10>)
   81e56:	f000 b805 	b.w	81e64 <atexit>
   81e5a:	4770      	bx	lr
   81e5c:	00000000 	.word	0x00000000
   81e60:	000820ed 	.word	0x000820ed

00081e64 <atexit>:
   81e64:	4601      	mov	r1, r0
   81e66:	2000      	movs	r0, #0
   81e68:	4602      	mov	r2, r0
   81e6a:	4603      	mov	r3, r0
   81e6c:	f000 be14 	b.w	82a98 <__register_exitproc>

00081e70 <__sflush_r>:
   81e70:	898b      	ldrh	r3, [r1, #12]
   81e72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   81e76:	b29a      	uxth	r2, r3
   81e78:	460d      	mov	r5, r1
   81e7a:	0711      	lsls	r1, r2, #28
   81e7c:	4680      	mov	r8, r0
   81e7e:	d43c      	bmi.n	81efa <__sflush_r+0x8a>
   81e80:	686a      	ldr	r2, [r5, #4]
   81e82:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   81e86:	2a00      	cmp	r2, #0
   81e88:	81ab      	strh	r3, [r5, #12]
   81e8a:	dd59      	ble.n	81f40 <__sflush_r+0xd0>
   81e8c:	6aac      	ldr	r4, [r5, #40]	; 0x28
   81e8e:	2c00      	cmp	r4, #0
   81e90:	d04b      	beq.n	81f2a <__sflush_r+0xba>
   81e92:	b29b      	uxth	r3, r3
   81e94:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
   81e98:	2100      	movs	r1, #0
   81e9a:	b292      	uxth	r2, r2
   81e9c:	f8d8 6000 	ldr.w	r6, [r8]
   81ea0:	f8c8 1000 	str.w	r1, [r8]
   81ea4:	2a00      	cmp	r2, #0
   81ea6:	d04f      	beq.n	81f48 <__sflush_r+0xd8>
   81ea8:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   81eaa:	075f      	lsls	r7, r3, #29
   81eac:	d505      	bpl.n	81eba <__sflush_r+0x4a>
   81eae:	6869      	ldr	r1, [r5, #4]
   81eb0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   81eb2:	1a52      	subs	r2, r2, r1
   81eb4:	b10b      	cbz	r3, 81eba <__sflush_r+0x4a>
   81eb6:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   81eb8:	1ad2      	subs	r2, r2, r3
   81eba:	4640      	mov	r0, r8
   81ebc:	69e9      	ldr	r1, [r5, #28]
   81ebe:	2300      	movs	r3, #0
   81ec0:	47a0      	blx	r4
   81ec2:	1c44      	adds	r4, r0, #1
   81ec4:	d04a      	beq.n	81f5c <__sflush_r+0xec>
   81ec6:	89ab      	ldrh	r3, [r5, #12]
   81ec8:	692a      	ldr	r2, [r5, #16]
   81eca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   81ece:	b29b      	uxth	r3, r3
   81ed0:	2100      	movs	r1, #0
   81ed2:	602a      	str	r2, [r5, #0]
   81ed4:	04da      	lsls	r2, r3, #19
   81ed6:	81ab      	strh	r3, [r5, #12]
   81ed8:	6069      	str	r1, [r5, #4]
   81eda:	d44c      	bmi.n	81f76 <__sflush_r+0x106>
   81edc:	6b29      	ldr	r1, [r5, #48]	; 0x30
   81ede:	f8c8 6000 	str.w	r6, [r8]
   81ee2:	b311      	cbz	r1, 81f2a <__sflush_r+0xba>
   81ee4:	f105 0340 	add.w	r3, r5, #64	; 0x40
   81ee8:	4299      	cmp	r1, r3
   81eea:	d002      	beq.n	81ef2 <__sflush_r+0x82>
   81eec:	4640      	mov	r0, r8
   81eee:	f000 f963 	bl	821b8 <_free_r>
   81ef2:	2000      	movs	r0, #0
   81ef4:	6328      	str	r0, [r5, #48]	; 0x30
   81ef6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81efa:	692e      	ldr	r6, [r5, #16]
   81efc:	b1ae      	cbz	r6, 81f2a <__sflush_r+0xba>
   81efe:	0791      	lsls	r1, r2, #30
   81f00:	682c      	ldr	r4, [r5, #0]
   81f02:	bf0c      	ite	eq
   81f04:	696b      	ldreq	r3, [r5, #20]
   81f06:	2300      	movne	r3, #0
   81f08:	602e      	str	r6, [r5, #0]
   81f0a:	1ba4      	subs	r4, r4, r6
   81f0c:	60ab      	str	r3, [r5, #8]
   81f0e:	e00a      	b.n	81f26 <__sflush_r+0xb6>
   81f10:	4632      	mov	r2, r6
   81f12:	4623      	mov	r3, r4
   81f14:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   81f16:	4640      	mov	r0, r8
   81f18:	69e9      	ldr	r1, [r5, #28]
   81f1a:	47b8      	blx	r7
   81f1c:	2800      	cmp	r0, #0
   81f1e:	ebc0 0404 	rsb	r4, r0, r4
   81f22:	4406      	add	r6, r0
   81f24:	dd04      	ble.n	81f30 <__sflush_r+0xc0>
   81f26:	2c00      	cmp	r4, #0
   81f28:	dcf2      	bgt.n	81f10 <__sflush_r+0xa0>
   81f2a:	2000      	movs	r0, #0
   81f2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81f30:	89ab      	ldrh	r3, [r5, #12]
   81f32:	f04f 30ff 	mov.w	r0, #4294967295
   81f36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   81f3a:	81ab      	strh	r3, [r5, #12]
   81f3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81f40:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   81f42:	2a00      	cmp	r2, #0
   81f44:	dca2      	bgt.n	81e8c <__sflush_r+0x1c>
   81f46:	e7f0      	b.n	81f2a <__sflush_r+0xba>
   81f48:	2301      	movs	r3, #1
   81f4a:	4640      	mov	r0, r8
   81f4c:	69e9      	ldr	r1, [r5, #28]
   81f4e:	47a0      	blx	r4
   81f50:	1c43      	adds	r3, r0, #1
   81f52:	4602      	mov	r2, r0
   81f54:	d01e      	beq.n	81f94 <__sflush_r+0x124>
   81f56:	89ab      	ldrh	r3, [r5, #12]
   81f58:	6aac      	ldr	r4, [r5, #40]	; 0x28
   81f5a:	e7a6      	b.n	81eaa <__sflush_r+0x3a>
   81f5c:	f8d8 3000 	ldr.w	r3, [r8]
   81f60:	b95b      	cbnz	r3, 81f7a <__sflush_r+0x10a>
   81f62:	89aa      	ldrh	r2, [r5, #12]
   81f64:	6929      	ldr	r1, [r5, #16]
   81f66:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   81f6a:	b292      	uxth	r2, r2
   81f6c:	606b      	str	r3, [r5, #4]
   81f6e:	04d3      	lsls	r3, r2, #19
   81f70:	81aa      	strh	r2, [r5, #12]
   81f72:	6029      	str	r1, [r5, #0]
   81f74:	d5b2      	bpl.n	81edc <__sflush_r+0x6c>
   81f76:	6528      	str	r0, [r5, #80]	; 0x50
   81f78:	e7b0      	b.n	81edc <__sflush_r+0x6c>
   81f7a:	2b1d      	cmp	r3, #29
   81f7c:	d001      	beq.n	81f82 <__sflush_r+0x112>
   81f7e:	2b16      	cmp	r3, #22
   81f80:	d113      	bne.n	81faa <__sflush_r+0x13a>
   81f82:	89a9      	ldrh	r1, [r5, #12]
   81f84:	692b      	ldr	r3, [r5, #16]
   81f86:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
   81f8a:	2200      	movs	r2, #0
   81f8c:	81a9      	strh	r1, [r5, #12]
   81f8e:	602b      	str	r3, [r5, #0]
   81f90:	606a      	str	r2, [r5, #4]
   81f92:	e7a3      	b.n	81edc <__sflush_r+0x6c>
   81f94:	f8d8 3000 	ldr.w	r3, [r8]
   81f98:	2b00      	cmp	r3, #0
   81f9a:	d0dc      	beq.n	81f56 <__sflush_r+0xe6>
   81f9c:	2b1d      	cmp	r3, #29
   81f9e:	d001      	beq.n	81fa4 <__sflush_r+0x134>
   81fa0:	2b16      	cmp	r3, #22
   81fa2:	d1c5      	bne.n	81f30 <__sflush_r+0xc0>
   81fa4:	f8c8 6000 	str.w	r6, [r8]
   81fa8:	e7bf      	b.n	81f2a <__sflush_r+0xba>
   81faa:	89ab      	ldrh	r3, [r5, #12]
   81fac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   81fb0:	81ab      	strh	r3, [r5, #12]
   81fb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81fb6:	bf00      	nop

00081fb8 <_fflush_r>:
   81fb8:	b510      	push	{r4, lr}
   81fba:	4604      	mov	r4, r0
   81fbc:	b082      	sub	sp, #8
   81fbe:	b108      	cbz	r0, 81fc4 <_fflush_r+0xc>
   81fc0:	6b83      	ldr	r3, [r0, #56]	; 0x38
   81fc2:	b153      	cbz	r3, 81fda <_fflush_r+0x22>
   81fc4:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
   81fc8:	b908      	cbnz	r0, 81fce <_fflush_r+0x16>
   81fca:	b002      	add	sp, #8
   81fcc:	bd10      	pop	{r4, pc}
   81fce:	4620      	mov	r0, r4
   81fd0:	b002      	add	sp, #8
   81fd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   81fd6:	f7ff bf4b 	b.w	81e70 <__sflush_r>
   81fda:	9101      	str	r1, [sp, #4]
   81fdc:	f000 f808 	bl	81ff0 <__sinit>
   81fe0:	9901      	ldr	r1, [sp, #4]
   81fe2:	e7ef      	b.n	81fc4 <_fflush_r+0xc>

00081fe4 <_cleanup_r>:
   81fe4:	4901      	ldr	r1, [pc, #4]	; (81fec <_cleanup_r+0x8>)
   81fe6:	f000 b9b3 	b.w	82350 <_fwalk>
   81fea:	bf00      	nop
   81fec:	00082be5 	.word	0x00082be5

00081ff0 <__sinit>:
   81ff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81ff4:	6b84      	ldr	r4, [r0, #56]	; 0x38
   81ff6:	b083      	sub	sp, #12
   81ff8:	4607      	mov	r7, r0
   81ffa:	2c00      	cmp	r4, #0
   81ffc:	d165      	bne.n	820ca <__sinit+0xda>
   81ffe:	687d      	ldr	r5, [r7, #4]
   82000:	4833      	ldr	r0, [pc, #204]	; (820d0 <__sinit+0xe0>)
   82002:	2304      	movs	r3, #4
   82004:	2103      	movs	r1, #3
   82006:	f507 723b 	add.w	r2, r7, #748	; 0x2ec
   8200a:	63f8      	str	r0, [r7, #60]	; 0x3c
   8200c:	f8c7 12e4 	str.w	r1, [r7, #740]	; 0x2e4
   82010:	f8c7 22e8 	str.w	r2, [r7, #744]	; 0x2e8
   82014:	f8c7 42e0 	str.w	r4, [r7, #736]	; 0x2e0
   82018:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   8201c:	81ab      	strh	r3, [r5, #12]
   8201e:	602c      	str	r4, [r5, #0]
   82020:	606c      	str	r4, [r5, #4]
   82022:	60ac      	str	r4, [r5, #8]
   82024:	666c      	str	r4, [r5, #100]	; 0x64
   82026:	81ec      	strh	r4, [r5, #14]
   82028:	612c      	str	r4, [r5, #16]
   8202a:	616c      	str	r4, [r5, #20]
   8202c:	61ac      	str	r4, [r5, #24]
   8202e:	4621      	mov	r1, r4
   82030:	2208      	movs	r2, #8
   82032:	f7ff fd77 	bl	81b24 <memset>
   82036:	f8df b09c 	ldr.w	fp, [pc, #156]	; 820d4 <__sinit+0xe4>
   8203a:	68be      	ldr	r6, [r7, #8]
   8203c:	f8df a098 	ldr.w	sl, [pc, #152]	; 820d8 <__sinit+0xe8>
   82040:	f8df 9098 	ldr.w	r9, [pc, #152]	; 820dc <__sinit+0xec>
   82044:	f8df 8098 	ldr.w	r8, [pc, #152]	; 820e0 <__sinit+0xf0>
   82048:	2301      	movs	r3, #1
   8204a:	2209      	movs	r2, #9
   8204c:	61ed      	str	r5, [r5, #28]
   8204e:	f8c5 b020 	str.w	fp, [r5, #32]
   82052:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   82056:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   8205a:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   8205e:	4621      	mov	r1, r4
   82060:	81f3      	strh	r3, [r6, #14]
   82062:	81b2      	strh	r2, [r6, #12]
   82064:	6034      	str	r4, [r6, #0]
   82066:	6074      	str	r4, [r6, #4]
   82068:	60b4      	str	r4, [r6, #8]
   8206a:	6674      	str	r4, [r6, #100]	; 0x64
   8206c:	6134      	str	r4, [r6, #16]
   8206e:	6174      	str	r4, [r6, #20]
   82070:	61b4      	str	r4, [r6, #24]
   82072:	2208      	movs	r2, #8
   82074:	f106 005c 	add.w	r0, r6, #92	; 0x5c
   82078:	9301      	str	r3, [sp, #4]
   8207a:	f7ff fd53 	bl	81b24 <memset>
   8207e:	68fd      	ldr	r5, [r7, #12]
   82080:	2012      	movs	r0, #18
   82082:	2202      	movs	r2, #2
   82084:	61f6      	str	r6, [r6, #28]
   82086:	f8c6 b020 	str.w	fp, [r6, #32]
   8208a:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
   8208e:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
   82092:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
   82096:	4621      	mov	r1, r4
   82098:	81a8      	strh	r0, [r5, #12]
   8209a:	81ea      	strh	r2, [r5, #14]
   8209c:	602c      	str	r4, [r5, #0]
   8209e:	606c      	str	r4, [r5, #4]
   820a0:	60ac      	str	r4, [r5, #8]
   820a2:	666c      	str	r4, [r5, #100]	; 0x64
   820a4:	612c      	str	r4, [r5, #16]
   820a6:	616c      	str	r4, [r5, #20]
   820a8:	61ac      	str	r4, [r5, #24]
   820aa:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   820ae:	2208      	movs	r2, #8
   820b0:	f7ff fd38 	bl	81b24 <memset>
   820b4:	9b01      	ldr	r3, [sp, #4]
   820b6:	61ed      	str	r5, [r5, #28]
   820b8:	f8c5 b020 	str.w	fp, [r5, #32]
   820bc:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   820c0:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   820c4:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   820c8:	63bb      	str	r3, [r7, #56]	; 0x38
   820ca:	b003      	add	sp, #12
   820cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   820d0:	00081fe5 	.word	0x00081fe5
   820d4:	000829ed 	.word	0x000829ed
   820d8:	00082a11 	.word	0x00082a11
   820dc:	00082a49 	.word	0x00082a49
   820e0:	00082a69 	.word	0x00082a69

000820e4 <__sfp_lock_acquire>:
   820e4:	4770      	bx	lr
   820e6:	bf00      	nop

000820e8 <__sfp_lock_release>:
   820e8:	4770      	bx	lr
   820ea:	bf00      	nop

000820ec <__libc_fini_array>:
   820ec:	b538      	push	{r3, r4, r5, lr}
   820ee:	4d09      	ldr	r5, [pc, #36]	; (82114 <__libc_fini_array+0x28>)
   820f0:	4c09      	ldr	r4, [pc, #36]	; (82118 <__libc_fini_array+0x2c>)
   820f2:	1b64      	subs	r4, r4, r5
   820f4:	10a4      	asrs	r4, r4, #2
   820f6:	bf18      	it	ne
   820f8:	eb05 0584 	addne.w	r5, r5, r4, lsl #2
   820fc:	d005      	beq.n	8210a <__libc_fini_array+0x1e>
   820fe:	3c01      	subs	r4, #1
   82100:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   82104:	4798      	blx	r3
   82106:	2c00      	cmp	r4, #0
   82108:	d1f9      	bne.n	820fe <__libc_fini_array+0x12>
   8210a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   8210e:	f000 bf1b 	b.w	82f48 <_fini>
   82112:	bf00      	nop
   82114:	00082f54 	.word	0x00082f54
   82118:	00082f58 	.word	0x00082f58

0008211c <_malloc_trim_r>:
   8211c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8211e:	4d23      	ldr	r5, [pc, #140]	; (821ac <_malloc_trim_r+0x90>)
   82120:	460f      	mov	r7, r1
   82122:	4604      	mov	r4, r0
   82124:	f000 fc4c 	bl	829c0 <__malloc_lock>
   82128:	68ab      	ldr	r3, [r5, #8]
   8212a:	685e      	ldr	r6, [r3, #4]
   8212c:	f026 0603 	bic.w	r6, r6, #3
   82130:	1bf1      	subs	r1, r6, r7
   82132:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
   82136:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   8213a:	f021 010f 	bic.w	r1, r1, #15
   8213e:	f5a1 5780 	sub.w	r7, r1, #4096	; 0x1000
   82142:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
   82146:	db07      	blt.n	82158 <_malloc_trim_r+0x3c>
   82148:	4620      	mov	r0, r4
   8214a:	2100      	movs	r1, #0
   8214c:	f000 fc3c 	bl	829c8 <_sbrk_r>
   82150:	68ab      	ldr	r3, [r5, #8]
   82152:	4433      	add	r3, r6
   82154:	4298      	cmp	r0, r3
   82156:	d004      	beq.n	82162 <_malloc_trim_r+0x46>
   82158:	4620      	mov	r0, r4
   8215a:	f000 fc33 	bl	829c4 <__malloc_unlock>
   8215e:	2000      	movs	r0, #0
   82160:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82162:	4620      	mov	r0, r4
   82164:	4279      	negs	r1, r7
   82166:	f000 fc2f 	bl	829c8 <_sbrk_r>
   8216a:	3001      	adds	r0, #1
   8216c:	d00d      	beq.n	8218a <_malloc_trim_r+0x6e>
   8216e:	4b10      	ldr	r3, [pc, #64]	; (821b0 <_malloc_trim_r+0x94>)
   82170:	68aa      	ldr	r2, [r5, #8]
   82172:	6819      	ldr	r1, [r3, #0]
   82174:	1bf6      	subs	r6, r6, r7
   82176:	f046 0601 	orr.w	r6, r6, #1
   8217a:	4620      	mov	r0, r4
   8217c:	1bc9      	subs	r1, r1, r7
   8217e:	6056      	str	r6, [r2, #4]
   82180:	6019      	str	r1, [r3, #0]
   82182:	f000 fc1f 	bl	829c4 <__malloc_unlock>
   82186:	2001      	movs	r0, #1
   82188:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8218a:	4620      	mov	r0, r4
   8218c:	2100      	movs	r1, #0
   8218e:	f000 fc1b 	bl	829c8 <_sbrk_r>
   82192:	68ab      	ldr	r3, [r5, #8]
   82194:	1ac2      	subs	r2, r0, r3
   82196:	2a0f      	cmp	r2, #15
   82198:	ddde      	ble.n	82158 <_malloc_trim_r+0x3c>
   8219a:	4d06      	ldr	r5, [pc, #24]	; (821b4 <_malloc_trim_r+0x98>)
   8219c:	4904      	ldr	r1, [pc, #16]	; (821b0 <_malloc_trim_r+0x94>)
   8219e:	682d      	ldr	r5, [r5, #0]
   821a0:	f042 0201 	orr.w	r2, r2, #1
   821a4:	1b40      	subs	r0, r0, r5
   821a6:	605a      	str	r2, [r3, #4]
   821a8:	6008      	str	r0, [r1, #0]
   821aa:	e7d5      	b.n	82158 <_malloc_trim_r+0x3c>
   821ac:	20070564 	.word	0x20070564
   821b0:	20070ab0 	.word	0x20070ab0
   821b4:	20070970 	.word	0x20070970

000821b8 <_free_r>:
   821b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   821bc:	460d      	mov	r5, r1
   821be:	4606      	mov	r6, r0
   821c0:	2900      	cmp	r1, #0
   821c2:	d055      	beq.n	82270 <_free_r+0xb8>
   821c4:	f000 fbfc 	bl	829c0 <__malloc_lock>
   821c8:	f855 1c04 	ldr.w	r1, [r5, #-4]
   821cc:	f8df c170 	ldr.w	ip, [pc, #368]	; 82340 <_free_r+0x188>
   821d0:	f1a5 0408 	sub.w	r4, r5, #8
   821d4:	f021 0301 	bic.w	r3, r1, #1
   821d8:	18e2      	adds	r2, r4, r3
   821da:	f8dc 0008 	ldr.w	r0, [ip, #8]
   821de:	6857      	ldr	r7, [r2, #4]
   821e0:	4290      	cmp	r0, r2
   821e2:	f027 0703 	bic.w	r7, r7, #3
   821e6:	d068      	beq.n	822ba <_free_r+0x102>
   821e8:	f011 0101 	ands.w	r1, r1, #1
   821ec:	6057      	str	r7, [r2, #4]
   821ee:	d032      	beq.n	82256 <_free_r+0x9e>
   821f0:	2100      	movs	r1, #0
   821f2:	19d0      	adds	r0, r2, r7
   821f4:	6840      	ldr	r0, [r0, #4]
   821f6:	07c0      	lsls	r0, r0, #31
   821f8:	d406      	bmi.n	82208 <_free_r+0x50>
   821fa:	443b      	add	r3, r7
   821fc:	6890      	ldr	r0, [r2, #8]
   821fe:	2900      	cmp	r1, #0
   82200:	d04d      	beq.n	8229e <_free_r+0xe6>
   82202:	68d2      	ldr	r2, [r2, #12]
   82204:	60c2      	str	r2, [r0, #12]
   82206:	6090      	str	r0, [r2, #8]
   82208:	f043 0201 	orr.w	r2, r3, #1
   8220c:	6062      	str	r2, [r4, #4]
   8220e:	50e3      	str	r3, [r4, r3]
   82210:	b9e1      	cbnz	r1, 8224c <_free_r+0x94>
   82212:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   82216:	d32d      	bcc.n	82274 <_free_r+0xbc>
   82218:	0a5a      	lsrs	r2, r3, #9
   8221a:	2a04      	cmp	r2, #4
   8221c:	d869      	bhi.n	822f2 <_free_r+0x13a>
   8221e:	0998      	lsrs	r0, r3, #6
   82220:	3038      	adds	r0, #56	; 0x38
   82222:	0041      	lsls	r1, r0, #1
   82224:	eb0c 0c81 	add.w	ip, ip, r1, lsl #2
   82228:	f8dc 2008 	ldr.w	r2, [ip, #8]
   8222c:	4944      	ldr	r1, [pc, #272]	; (82340 <_free_r+0x188>)
   8222e:	4562      	cmp	r2, ip
   82230:	d065      	beq.n	822fe <_free_r+0x146>
   82232:	6851      	ldr	r1, [r2, #4]
   82234:	f021 0103 	bic.w	r1, r1, #3
   82238:	428b      	cmp	r3, r1
   8223a:	d202      	bcs.n	82242 <_free_r+0x8a>
   8223c:	6892      	ldr	r2, [r2, #8]
   8223e:	4594      	cmp	ip, r2
   82240:	d1f7      	bne.n	82232 <_free_r+0x7a>
   82242:	68d3      	ldr	r3, [r2, #12]
   82244:	60e3      	str	r3, [r4, #12]
   82246:	60a2      	str	r2, [r4, #8]
   82248:	609c      	str	r4, [r3, #8]
   8224a:	60d4      	str	r4, [r2, #12]
   8224c:	4630      	mov	r0, r6
   8224e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   82252:	f000 bbb7 	b.w	829c4 <__malloc_unlock>
   82256:	f855 5c08 	ldr.w	r5, [r5, #-8]
   8225a:	f10c 0808 	add.w	r8, ip, #8
   8225e:	1b64      	subs	r4, r4, r5
   82260:	68a0      	ldr	r0, [r4, #8]
   82262:	442b      	add	r3, r5
   82264:	4540      	cmp	r0, r8
   82266:	d042      	beq.n	822ee <_free_r+0x136>
   82268:	68e5      	ldr	r5, [r4, #12]
   8226a:	60c5      	str	r5, [r0, #12]
   8226c:	60a8      	str	r0, [r5, #8]
   8226e:	e7c0      	b.n	821f2 <_free_r+0x3a>
   82270:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82274:	08db      	lsrs	r3, r3, #3
   82276:	109a      	asrs	r2, r3, #2
   82278:	2001      	movs	r0, #1
   8227a:	4090      	lsls	r0, r2
   8227c:	f8dc 1004 	ldr.w	r1, [ip, #4]
   82280:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
   82284:	689a      	ldr	r2, [r3, #8]
   82286:	4301      	orrs	r1, r0
   82288:	60a2      	str	r2, [r4, #8]
   8228a:	60e3      	str	r3, [r4, #12]
   8228c:	f8cc 1004 	str.w	r1, [ip, #4]
   82290:	4630      	mov	r0, r6
   82292:	609c      	str	r4, [r3, #8]
   82294:	60d4      	str	r4, [r2, #12]
   82296:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   8229a:	f000 bb93 	b.w	829c4 <__malloc_unlock>
   8229e:	4d29      	ldr	r5, [pc, #164]	; (82344 <_free_r+0x18c>)
   822a0:	42a8      	cmp	r0, r5
   822a2:	d1ae      	bne.n	82202 <_free_r+0x4a>
   822a4:	f043 0201 	orr.w	r2, r3, #1
   822a8:	f8cc 4014 	str.w	r4, [ip, #20]
   822ac:	f8cc 4010 	str.w	r4, [ip, #16]
   822b0:	60e0      	str	r0, [r4, #12]
   822b2:	60a0      	str	r0, [r4, #8]
   822b4:	6062      	str	r2, [r4, #4]
   822b6:	50e3      	str	r3, [r4, r3]
   822b8:	e7c8      	b.n	8224c <_free_r+0x94>
   822ba:	441f      	add	r7, r3
   822bc:	07cb      	lsls	r3, r1, #31
   822be:	d407      	bmi.n	822d0 <_free_r+0x118>
   822c0:	f855 1c08 	ldr.w	r1, [r5, #-8]
   822c4:	1a64      	subs	r4, r4, r1
   822c6:	68e3      	ldr	r3, [r4, #12]
   822c8:	68a2      	ldr	r2, [r4, #8]
   822ca:	440f      	add	r7, r1
   822cc:	60d3      	str	r3, [r2, #12]
   822ce:	609a      	str	r2, [r3, #8]
   822d0:	4b1d      	ldr	r3, [pc, #116]	; (82348 <_free_r+0x190>)
   822d2:	f047 0201 	orr.w	r2, r7, #1
   822d6:	681b      	ldr	r3, [r3, #0]
   822d8:	6062      	str	r2, [r4, #4]
   822da:	429f      	cmp	r7, r3
   822dc:	f8cc 4008 	str.w	r4, [ip, #8]
   822e0:	d3b4      	bcc.n	8224c <_free_r+0x94>
   822e2:	4b1a      	ldr	r3, [pc, #104]	; (8234c <_free_r+0x194>)
   822e4:	4630      	mov	r0, r6
   822e6:	6819      	ldr	r1, [r3, #0]
   822e8:	f7ff ff18 	bl	8211c <_malloc_trim_r>
   822ec:	e7ae      	b.n	8224c <_free_r+0x94>
   822ee:	2101      	movs	r1, #1
   822f0:	e77f      	b.n	821f2 <_free_r+0x3a>
   822f2:	2a14      	cmp	r2, #20
   822f4:	d80b      	bhi.n	8230e <_free_r+0x156>
   822f6:	f102 005b 	add.w	r0, r2, #91	; 0x5b
   822fa:	0041      	lsls	r1, r0, #1
   822fc:	e792      	b.n	82224 <_free_r+0x6c>
   822fe:	1080      	asrs	r0, r0, #2
   82300:	2501      	movs	r5, #1
   82302:	4085      	lsls	r5, r0
   82304:	6848      	ldr	r0, [r1, #4]
   82306:	4613      	mov	r3, r2
   82308:	4328      	orrs	r0, r5
   8230a:	6048      	str	r0, [r1, #4]
   8230c:	e79a      	b.n	82244 <_free_r+0x8c>
   8230e:	2a54      	cmp	r2, #84	; 0x54
   82310:	d803      	bhi.n	8231a <_free_r+0x162>
   82312:	0b18      	lsrs	r0, r3, #12
   82314:	306e      	adds	r0, #110	; 0x6e
   82316:	0041      	lsls	r1, r0, #1
   82318:	e784      	b.n	82224 <_free_r+0x6c>
   8231a:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   8231e:	d803      	bhi.n	82328 <_free_r+0x170>
   82320:	0bd8      	lsrs	r0, r3, #15
   82322:	3077      	adds	r0, #119	; 0x77
   82324:	0041      	lsls	r1, r0, #1
   82326:	e77d      	b.n	82224 <_free_r+0x6c>
   82328:	f240 5154 	movw	r1, #1364	; 0x554
   8232c:	428a      	cmp	r2, r1
   8232e:	d803      	bhi.n	82338 <_free_r+0x180>
   82330:	0c98      	lsrs	r0, r3, #18
   82332:	307c      	adds	r0, #124	; 0x7c
   82334:	0041      	lsls	r1, r0, #1
   82336:	e775      	b.n	82224 <_free_r+0x6c>
   82338:	21fc      	movs	r1, #252	; 0xfc
   8233a:	207e      	movs	r0, #126	; 0x7e
   8233c:	e772      	b.n	82224 <_free_r+0x6c>
   8233e:	bf00      	nop
   82340:	20070564 	.word	0x20070564
   82344:	2007056c 	.word	0x2007056c
   82348:	2007096c 	.word	0x2007096c
   8234c:	20070aac 	.word	0x20070aac

00082350 <_fwalk>:
   82350:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82354:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
   82358:	4688      	mov	r8, r1
   8235a:	d019      	beq.n	82390 <_fwalk+0x40>
   8235c:	2600      	movs	r6, #0
   8235e:	687d      	ldr	r5, [r7, #4]
   82360:	68bc      	ldr	r4, [r7, #8]
   82362:	3d01      	subs	r5, #1
   82364:	d40e      	bmi.n	82384 <_fwalk+0x34>
   82366:	89a3      	ldrh	r3, [r4, #12]
   82368:	3d01      	subs	r5, #1
   8236a:	2b01      	cmp	r3, #1
   8236c:	d906      	bls.n	8237c <_fwalk+0x2c>
   8236e:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   82372:	4620      	mov	r0, r4
   82374:	3301      	adds	r3, #1
   82376:	d001      	beq.n	8237c <_fwalk+0x2c>
   82378:	47c0      	blx	r8
   8237a:	4306      	orrs	r6, r0
   8237c:	1c6b      	adds	r3, r5, #1
   8237e:	f104 0468 	add.w	r4, r4, #104	; 0x68
   82382:	d1f0      	bne.n	82366 <_fwalk+0x16>
   82384:	683f      	ldr	r7, [r7, #0]
   82386:	2f00      	cmp	r7, #0
   82388:	d1e9      	bne.n	8235e <_fwalk+0xe>
   8238a:	4630      	mov	r0, r6
   8238c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82390:	463e      	mov	r6, r7
   82392:	4630      	mov	r0, r6
   82394:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00082398 <__smakebuf_r>:
   82398:	b5f0      	push	{r4, r5, r6, r7, lr}
   8239a:	898b      	ldrh	r3, [r1, #12]
   8239c:	b091      	sub	sp, #68	; 0x44
   8239e:	b29a      	uxth	r2, r3
   823a0:	0796      	lsls	r6, r2, #30
   823a2:	460c      	mov	r4, r1
   823a4:	4605      	mov	r5, r0
   823a6:	d437      	bmi.n	82418 <__smakebuf_r+0x80>
   823a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   823ac:	2900      	cmp	r1, #0
   823ae:	db17      	blt.n	823e0 <__smakebuf_r+0x48>
   823b0:	aa01      	add	r2, sp, #4
   823b2:	f000 fc1f 	bl	82bf4 <_fstat_r>
   823b6:	2800      	cmp	r0, #0
   823b8:	db10      	blt.n	823dc <__smakebuf_r+0x44>
   823ba:	9b02      	ldr	r3, [sp, #8]
   823bc:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
   823c0:	f5b3 5100 	subs.w	r1, r3, #8192	; 0x2000
   823c4:	424f      	negs	r7, r1
   823c6:	414f      	adcs	r7, r1
   823c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   823cc:	d02c      	beq.n	82428 <__smakebuf_r+0x90>
   823ce:	89a3      	ldrh	r3, [r4, #12]
   823d0:	f44f 6680 	mov.w	r6, #1024	; 0x400
   823d4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   823d8:	81a3      	strh	r3, [r4, #12]
   823da:	e00b      	b.n	823f4 <__smakebuf_r+0x5c>
   823dc:	89a3      	ldrh	r3, [r4, #12]
   823de:	b29a      	uxth	r2, r3
   823e0:	f012 0f80 	tst.w	r2, #128	; 0x80
   823e4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   823e8:	81a3      	strh	r3, [r4, #12]
   823ea:	bf14      	ite	ne
   823ec:	2640      	movne	r6, #64	; 0x40
   823ee:	f44f 6680 	moveq.w	r6, #1024	; 0x400
   823f2:	2700      	movs	r7, #0
   823f4:	4628      	mov	r0, r5
   823f6:	4631      	mov	r1, r6
   823f8:	f000 f846 	bl	82488 <_malloc_r>
   823fc:	89a3      	ldrh	r3, [r4, #12]
   823fe:	2800      	cmp	r0, #0
   82400:	d029      	beq.n	82456 <__smakebuf_r+0xbe>
   82402:	4a1b      	ldr	r2, [pc, #108]	; (82470 <__smakebuf_r+0xd8>)
   82404:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   82408:	63ea      	str	r2, [r5, #60]	; 0x3c
   8240a:	81a3      	strh	r3, [r4, #12]
   8240c:	6020      	str	r0, [r4, #0]
   8240e:	6120      	str	r0, [r4, #16]
   82410:	6166      	str	r6, [r4, #20]
   82412:	b9a7      	cbnz	r7, 8243e <__smakebuf_r+0xa6>
   82414:	b011      	add	sp, #68	; 0x44
   82416:	bdf0      	pop	{r4, r5, r6, r7, pc}
   82418:	f101 0343 	add.w	r3, r1, #67	; 0x43
   8241c:	2201      	movs	r2, #1
   8241e:	600b      	str	r3, [r1, #0]
   82420:	610b      	str	r3, [r1, #16]
   82422:	614a      	str	r2, [r1, #20]
   82424:	b011      	add	sp, #68	; 0x44
   82426:	bdf0      	pop	{r4, r5, r6, r7, pc}
   82428:	4a12      	ldr	r2, [pc, #72]	; (82474 <__smakebuf_r+0xdc>)
   8242a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   8242c:	4293      	cmp	r3, r2
   8242e:	d1ce      	bne.n	823ce <__smakebuf_r+0x36>
   82430:	89a3      	ldrh	r3, [r4, #12]
   82432:	f44f 6680 	mov.w	r6, #1024	; 0x400
   82436:	4333      	orrs	r3, r6
   82438:	81a3      	strh	r3, [r4, #12]
   8243a:	64e6      	str	r6, [r4, #76]	; 0x4c
   8243c:	e7da      	b.n	823f4 <__smakebuf_r+0x5c>
   8243e:	4628      	mov	r0, r5
   82440:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   82444:	f000 fbea 	bl	82c1c <_isatty_r>
   82448:	2800      	cmp	r0, #0
   8244a:	d0e3      	beq.n	82414 <__smakebuf_r+0x7c>
   8244c:	89a3      	ldrh	r3, [r4, #12]
   8244e:	f043 0301 	orr.w	r3, r3, #1
   82452:	81a3      	strh	r3, [r4, #12]
   82454:	e7de      	b.n	82414 <__smakebuf_r+0x7c>
   82456:	059a      	lsls	r2, r3, #22
   82458:	d4dc      	bmi.n	82414 <__smakebuf_r+0x7c>
   8245a:	f104 0243 	add.w	r2, r4, #67	; 0x43
   8245e:	f043 0302 	orr.w	r3, r3, #2
   82462:	2101      	movs	r1, #1
   82464:	81a3      	strh	r3, [r4, #12]
   82466:	6022      	str	r2, [r4, #0]
   82468:	6122      	str	r2, [r4, #16]
   8246a:	6161      	str	r1, [r4, #20]
   8246c:	e7d2      	b.n	82414 <__smakebuf_r+0x7c>
   8246e:	bf00      	nop
   82470:	00081fe5 	.word	0x00081fe5
   82474:	00082a49 	.word	0x00082a49

00082478 <malloc>:
   82478:	4b02      	ldr	r3, [pc, #8]	; (82484 <malloc+0xc>)
   8247a:	4601      	mov	r1, r0
   8247c:	6818      	ldr	r0, [r3, #0]
   8247e:	f000 b803 	b.w	82488 <_malloc_r>
   82482:	bf00      	nop
   82484:	20070560 	.word	0x20070560

00082488 <_malloc_r>:
   82488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8248c:	f101 050b 	add.w	r5, r1, #11
   82490:	2d16      	cmp	r5, #22
   82492:	b083      	sub	sp, #12
   82494:	4606      	mov	r6, r0
   82496:	d927      	bls.n	824e8 <_malloc_r+0x60>
   82498:	f035 0507 	bics.w	r5, r5, #7
   8249c:	d427      	bmi.n	824ee <_malloc_r+0x66>
   8249e:	42a9      	cmp	r1, r5
   824a0:	d825      	bhi.n	824ee <_malloc_r+0x66>
   824a2:	4630      	mov	r0, r6
   824a4:	f000 fa8c 	bl	829c0 <__malloc_lock>
   824a8:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
   824ac:	d226      	bcs.n	824fc <_malloc_r+0x74>
   824ae:	4fc1      	ldr	r7, [pc, #772]	; (827b4 <_malloc_r+0x32c>)
   824b0:	ea4f 0cd5 	mov.w	ip, r5, lsr #3
   824b4:	eb07 03cc 	add.w	r3, r7, ip, lsl #3
   824b8:	68dc      	ldr	r4, [r3, #12]
   824ba:	429c      	cmp	r4, r3
   824bc:	f000 81d2 	beq.w	82864 <_malloc_r+0x3dc>
   824c0:	6863      	ldr	r3, [r4, #4]
   824c2:	68e2      	ldr	r2, [r4, #12]
   824c4:	f023 0303 	bic.w	r3, r3, #3
   824c8:	4423      	add	r3, r4
   824ca:	6858      	ldr	r0, [r3, #4]
   824cc:	68a1      	ldr	r1, [r4, #8]
   824ce:	f040 0501 	orr.w	r5, r0, #1
   824d2:	60ca      	str	r2, [r1, #12]
   824d4:	4630      	mov	r0, r6
   824d6:	6091      	str	r1, [r2, #8]
   824d8:	605d      	str	r5, [r3, #4]
   824da:	f000 fa73 	bl	829c4 <__malloc_unlock>
   824de:	3408      	adds	r4, #8
   824e0:	4620      	mov	r0, r4
   824e2:	b003      	add	sp, #12
   824e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   824e8:	2510      	movs	r5, #16
   824ea:	42a9      	cmp	r1, r5
   824ec:	d9d9      	bls.n	824a2 <_malloc_r+0x1a>
   824ee:	2400      	movs	r4, #0
   824f0:	230c      	movs	r3, #12
   824f2:	4620      	mov	r0, r4
   824f4:	6033      	str	r3, [r6, #0]
   824f6:	b003      	add	sp, #12
   824f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   824fc:	ea5f 2c55 	movs.w	ip, r5, lsr #9
   82500:	f000 8089 	beq.w	82616 <_malloc_r+0x18e>
   82504:	f1bc 0f04 	cmp.w	ip, #4
   82508:	f200 8160 	bhi.w	827cc <_malloc_r+0x344>
   8250c:	ea4f 1c95 	mov.w	ip, r5, lsr #6
   82510:	f10c 0c38 	add.w	ip, ip, #56	; 0x38
   82514:	ea4f 014c 	mov.w	r1, ip, lsl #1
   82518:	4fa6      	ldr	r7, [pc, #664]	; (827b4 <_malloc_r+0x32c>)
   8251a:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   8251e:	68cc      	ldr	r4, [r1, #12]
   82520:	42a1      	cmp	r1, r4
   82522:	d105      	bne.n	82530 <_malloc_r+0xa8>
   82524:	e00c      	b.n	82540 <_malloc_r+0xb8>
   82526:	2b00      	cmp	r3, #0
   82528:	da79      	bge.n	8261e <_malloc_r+0x196>
   8252a:	68e4      	ldr	r4, [r4, #12]
   8252c:	42a1      	cmp	r1, r4
   8252e:	d007      	beq.n	82540 <_malloc_r+0xb8>
   82530:	6862      	ldr	r2, [r4, #4]
   82532:	f022 0203 	bic.w	r2, r2, #3
   82536:	1b53      	subs	r3, r2, r5
   82538:	2b0f      	cmp	r3, #15
   8253a:	ddf4      	ble.n	82526 <_malloc_r+0x9e>
   8253c:	f10c 3cff 	add.w	ip, ip, #4294967295
   82540:	f10c 0c01 	add.w	ip, ip, #1
   82544:	4b9b      	ldr	r3, [pc, #620]	; (827b4 <_malloc_r+0x32c>)
   82546:	693c      	ldr	r4, [r7, #16]
   82548:	f103 0e08 	add.w	lr, r3, #8
   8254c:	4574      	cmp	r4, lr
   8254e:	f000 817e 	beq.w	8284e <_malloc_r+0x3c6>
   82552:	6861      	ldr	r1, [r4, #4]
   82554:	f021 0103 	bic.w	r1, r1, #3
   82558:	1b4a      	subs	r2, r1, r5
   8255a:	2a0f      	cmp	r2, #15
   8255c:	f300 8164 	bgt.w	82828 <_malloc_r+0x3a0>
   82560:	2a00      	cmp	r2, #0
   82562:	f8c3 e014 	str.w	lr, [r3, #20]
   82566:	f8c3 e010 	str.w	lr, [r3, #16]
   8256a:	da69      	bge.n	82640 <_malloc_r+0x1b8>
   8256c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   82570:	f080 813a 	bcs.w	827e8 <_malloc_r+0x360>
   82574:	08c9      	lsrs	r1, r1, #3
   82576:	108a      	asrs	r2, r1, #2
   82578:	f04f 0801 	mov.w	r8, #1
   8257c:	fa08 f802 	lsl.w	r8, r8, r2
   82580:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   82584:	685a      	ldr	r2, [r3, #4]
   82586:	6888      	ldr	r0, [r1, #8]
   82588:	ea48 0202 	orr.w	r2, r8, r2
   8258c:	60a0      	str	r0, [r4, #8]
   8258e:	60e1      	str	r1, [r4, #12]
   82590:	605a      	str	r2, [r3, #4]
   82592:	608c      	str	r4, [r1, #8]
   82594:	60c4      	str	r4, [r0, #12]
   82596:	ea4f 03ac 	mov.w	r3, ip, asr #2
   8259a:	2001      	movs	r0, #1
   8259c:	4098      	lsls	r0, r3
   8259e:	4290      	cmp	r0, r2
   825a0:	d85b      	bhi.n	8265a <_malloc_r+0x1d2>
   825a2:	4202      	tst	r2, r0
   825a4:	d106      	bne.n	825b4 <_malloc_r+0x12c>
   825a6:	f02c 0c03 	bic.w	ip, ip, #3
   825aa:	0040      	lsls	r0, r0, #1
   825ac:	4202      	tst	r2, r0
   825ae:	f10c 0c04 	add.w	ip, ip, #4
   825b2:	d0fa      	beq.n	825aa <_malloc_r+0x122>
   825b4:	eb07 08cc 	add.w	r8, r7, ip, lsl #3
   825b8:	4644      	mov	r4, r8
   825ba:	46e1      	mov	r9, ip
   825bc:	68e3      	ldr	r3, [r4, #12]
   825be:	429c      	cmp	r4, r3
   825c0:	d107      	bne.n	825d2 <_malloc_r+0x14a>
   825c2:	e146      	b.n	82852 <_malloc_r+0x3ca>
   825c4:	2a00      	cmp	r2, #0
   825c6:	f280 8157 	bge.w	82878 <_malloc_r+0x3f0>
   825ca:	68db      	ldr	r3, [r3, #12]
   825cc:	429c      	cmp	r4, r3
   825ce:	f000 8140 	beq.w	82852 <_malloc_r+0x3ca>
   825d2:	6859      	ldr	r1, [r3, #4]
   825d4:	f021 0103 	bic.w	r1, r1, #3
   825d8:	1b4a      	subs	r2, r1, r5
   825da:	2a0f      	cmp	r2, #15
   825dc:	ddf2      	ble.n	825c4 <_malloc_r+0x13c>
   825de:	461c      	mov	r4, r3
   825e0:	f854 cf08 	ldr.w	ip, [r4, #8]!
   825e4:	68d9      	ldr	r1, [r3, #12]
   825e6:	f045 0901 	orr.w	r9, r5, #1
   825ea:	f042 0801 	orr.w	r8, r2, #1
   825ee:	441d      	add	r5, r3
   825f0:	f8c3 9004 	str.w	r9, [r3, #4]
   825f4:	4630      	mov	r0, r6
   825f6:	f8cc 100c 	str.w	r1, [ip, #12]
   825fa:	f8c1 c008 	str.w	ip, [r1, #8]
   825fe:	617d      	str	r5, [r7, #20]
   82600:	613d      	str	r5, [r7, #16]
   82602:	f8c5 e00c 	str.w	lr, [r5, #12]
   82606:	f8c5 e008 	str.w	lr, [r5, #8]
   8260a:	f8c5 8004 	str.w	r8, [r5, #4]
   8260e:	50aa      	str	r2, [r5, r2]
   82610:	f000 f9d8 	bl	829c4 <__malloc_unlock>
   82614:	e764      	b.n	824e0 <_malloc_r+0x58>
   82616:	217e      	movs	r1, #126	; 0x7e
   82618:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
   8261c:	e77c      	b.n	82518 <_malloc_r+0x90>
   8261e:	4422      	add	r2, r4
   82620:	6850      	ldr	r0, [r2, #4]
   82622:	68e3      	ldr	r3, [r4, #12]
   82624:	68a1      	ldr	r1, [r4, #8]
   82626:	f040 0501 	orr.w	r5, r0, #1
   8262a:	60cb      	str	r3, [r1, #12]
   8262c:	4630      	mov	r0, r6
   8262e:	6099      	str	r1, [r3, #8]
   82630:	6055      	str	r5, [r2, #4]
   82632:	f000 f9c7 	bl	829c4 <__malloc_unlock>
   82636:	3408      	adds	r4, #8
   82638:	4620      	mov	r0, r4
   8263a:	b003      	add	sp, #12
   8263c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82640:	4421      	add	r1, r4
   82642:	684b      	ldr	r3, [r1, #4]
   82644:	4630      	mov	r0, r6
   82646:	f043 0301 	orr.w	r3, r3, #1
   8264a:	604b      	str	r3, [r1, #4]
   8264c:	f000 f9ba 	bl	829c4 <__malloc_unlock>
   82650:	3408      	adds	r4, #8
   82652:	4620      	mov	r0, r4
   82654:	b003      	add	sp, #12
   82656:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8265a:	68bc      	ldr	r4, [r7, #8]
   8265c:	6863      	ldr	r3, [r4, #4]
   8265e:	f023 0903 	bic.w	r9, r3, #3
   82662:	45a9      	cmp	r9, r5
   82664:	d304      	bcc.n	82670 <_malloc_r+0x1e8>
   82666:	ebc5 0309 	rsb	r3, r5, r9
   8266a:	2b0f      	cmp	r3, #15
   8266c:	f300 8091 	bgt.w	82792 <_malloc_r+0x30a>
   82670:	4b51      	ldr	r3, [pc, #324]	; (827b8 <_malloc_r+0x330>)
   82672:	4a52      	ldr	r2, [pc, #328]	; (827bc <_malloc_r+0x334>)
   82674:	6819      	ldr	r1, [r3, #0]
   82676:	6813      	ldr	r3, [r2, #0]
   82678:	eb05 0a01 	add.w	sl, r5, r1
   8267c:	3301      	adds	r3, #1
   8267e:	eb04 0b09 	add.w	fp, r4, r9
   82682:	f000 8161 	beq.w	82948 <_malloc_r+0x4c0>
   82686:	f50a 5a80 	add.w	sl, sl, #4096	; 0x1000
   8268a:	f10a 0a0f 	add.w	sl, sl, #15
   8268e:	f42a 6a7f 	bic.w	sl, sl, #4080	; 0xff0
   82692:	f02a 0a0f 	bic.w	sl, sl, #15
   82696:	4630      	mov	r0, r6
   82698:	4651      	mov	r1, sl
   8269a:	9201      	str	r2, [sp, #4]
   8269c:	f000 f994 	bl	829c8 <_sbrk_r>
   826a0:	f1b0 3fff 	cmp.w	r0, #4294967295
   826a4:	4680      	mov	r8, r0
   826a6:	9a01      	ldr	r2, [sp, #4]
   826a8:	f000 8101 	beq.w	828ae <_malloc_r+0x426>
   826ac:	4583      	cmp	fp, r0
   826ae:	f200 80fb 	bhi.w	828a8 <_malloc_r+0x420>
   826b2:	f8df c114 	ldr.w	ip, [pc, #276]	; 827c8 <_malloc_r+0x340>
   826b6:	45c3      	cmp	fp, r8
   826b8:	f8dc 3000 	ldr.w	r3, [ip]
   826bc:	4453      	add	r3, sl
   826be:	f8cc 3000 	str.w	r3, [ip]
   826c2:	f000 814a 	beq.w	8295a <_malloc_r+0x4d2>
   826c6:	6812      	ldr	r2, [r2, #0]
   826c8:	493c      	ldr	r1, [pc, #240]	; (827bc <_malloc_r+0x334>)
   826ca:	3201      	adds	r2, #1
   826cc:	bf1b      	ittet	ne
   826ce:	ebcb 0b08 	rsbne	fp, fp, r8
   826d2:	445b      	addne	r3, fp
   826d4:	f8c1 8000 	streq.w	r8, [r1]
   826d8:	f8cc 3000 	strne.w	r3, [ip]
   826dc:	f018 0307 	ands.w	r3, r8, #7
   826e0:	f000 8114 	beq.w	8290c <_malloc_r+0x484>
   826e4:	f1c3 0208 	rsb	r2, r3, #8
   826e8:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
   826ec:	4490      	add	r8, r2
   826ee:	3308      	adds	r3, #8
   826f0:	44c2      	add	sl, r8
   826f2:	f3ca 0a0b 	ubfx	sl, sl, #0, #12
   826f6:	ebca 0a03 	rsb	sl, sl, r3
   826fa:	4651      	mov	r1, sl
   826fc:	4630      	mov	r0, r6
   826fe:	f8cd c004 	str.w	ip, [sp, #4]
   82702:	f000 f961 	bl	829c8 <_sbrk_r>
   82706:	1c43      	adds	r3, r0, #1
   82708:	f8dd c004 	ldr.w	ip, [sp, #4]
   8270c:	f000 8135 	beq.w	8297a <_malloc_r+0x4f2>
   82710:	ebc8 0200 	rsb	r2, r8, r0
   82714:	4452      	add	r2, sl
   82716:	f042 0201 	orr.w	r2, r2, #1
   8271a:	f8dc 3000 	ldr.w	r3, [ip]
   8271e:	42bc      	cmp	r4, r7
   82720:	4453      	add	r3, sl
   82722:	f8c7 8008 	str.w	r8, [r7, #8]
   82726:	f8cc 3000 	str.w	r3, [ip]
   8272a:	f8c8 2004 	str.w	r2, [r8, #4]
   8272e:	f8df a098 	ldr.w	sl, [pc, #152]	; 827c8 <_malloc_r+0x340>
   82732:	d015      	beq.n	82760 <_malloc_r+0x2d8>
   82734:	f1b9 0f0f 	cmp.w	r9, #15
   82738:	f240 80eb 	bls.w	82912 <_malloc_r+0x48a>
   8273c:	6861      	ldr	r1, [r4, #4]
   8273e:	f1a9 020c 	sub.w	r2, r9, #12
   82742:	f022 0207 	bic.w	r2, r2, #7
   82746:	f001 0101 	and.w	r1, r1, #1
   8274a:	ea42 0e01 	orr.w	lr, r2, r1
   8274e:	2005      	movs	r0, #5
   82750:	18a1      	adds	r1, r4, r2
   82752:	2a0f      	cmp	r2, #15
   82754:	f8c4 e004 	str.w	lr, [r4, #4]
   82758:	6048      	str	r0, [r1, #4]
   8275a:	6088      	str	r0, [r1, #8]
   8275c:	f200 8111 	bhi.w	82982 <_malloc_r+0x4fa>
   82760:	4a17      	ldr	r2, [pc, #92]	; (827c0 <_malloc_r+0x338>)
   82762:	68bc      	ldr	r4, [r7, #8]
   82764:	6811      	ldr	r1, [r2, #0]
   82766:	428b      	cmp	r3, r1
   82768:	bf88      	it	hi
   8276a:	6013      	strhi	r3, [r2, #0]
   8276c:	4a15      	ldr	r2, [pc, #84]	; (827c4 <_malloc_r+0x33c>)
   8276e:	6811      	ldr	r1, [r2, #0]
   82770:	428b      	cmp	r3, r1
   82772:	bf88      	it	hi
   82774:	6013      	strhi	r3, [r2, #0]
   82776:	6862      	ldr	r2, [r4, #4]
   82778:	f022 0203 	bic.w	r2, r2, #3
   8277c:	4295      	cmp	r5, r2
   8277e:	ebc5 0302 	rsb	r3, r5, r2
   82782:	d801      	bhi.n	82788 <_malloc_r+0x300>
   82784:	2b0f      	cmp	r3, #15
   82786:	dc04      	bgt.n	82792 <_malloc_r+0x30a>
   82788:	4630      	mov	r0, r6
   8278a:	f000 f91b 	bl	829c4 <__malloc_unlock>
   8278e:	2400      	movs	r4, #0
   82790:	e6a6      	b.n	824e0 <_malloc_r+0x58>
   82792:	f045 0201 	orr.w	r2, r5, #1
   82796:	f043 0301 	orr.w	r3, r3, #1
   8279a:	4425      	add	r5, r4
   8279c:	6062      	str	r2, [r4, #4]
   8279e:	4630      	mov	r0, r6
   827a0:	60bd      	str	r5, [r7, #8]
   827a2:	606b      	str	r3, [r5, #4]
   827a4:	f000 f90e 	bl	829c4 <__malloc_unlock>
   827a8:	3408      	adds	r4, #8
   827aa:	4620      	mov	r0, r4
   827ac:	b003      	add	sp, #12
   827ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   827b2:	bf00      	nop
   827b4:	20070564 	.word	0x20070564
   827b8:	20070aac 	.word	0x20070aac
   827bc:	20070970 	.word	0x20070970
   827c0:	20070aa8 	.word	0x20070aa8
   827c4:	20070aa4 	.word	0x20070aa4
   827c8:	20070ab0 	.word	0x20070ab0
   827cc:	f1bc 0f14 	cmp.w	ip, #20
   827d0:	d961      	bls.n	82896 <_malloc_r+0x40e>
   827d2:	f1bc 0f54 	cmp.w	ip, #84	; 0x54
   827d6:	f200 808f 	bhi.w	828f8 <_malloc_r+0x470>
   827da:	ea4f 3c15 	mov.w	ip, r5, lsr #12
   827de:	f10c 0c6e 	add.w	ip, ip, #110	; 0x6e
   827e2:	ea4f 014c 	mov.w	r1, ip, lsl #1
   827e6:	e697      	b.n	82518 <_malloc_r+0x90>
   827e8:	0a4b      	lsrs	r3, r1, #9
   827ea:	2b04      	cmp	r3, #4
   827ec:	d958      	bls.n	828a0 <_malloc_r+0x418>
   827ee:	2b14      	cmp	r3, #20
   827f0:	f200 80ad 	bhi.w	8294e <_malloc_r+0x4c6>
   827f4:	f103 025b 	add.w	r2, r3, #91	; 0x5b
   827f8:	0050      	lsls	r0, r2, #1
   827fa:	eb07 0080 	add.w	r0, r7, r0, lsl #2
   827fe:	6883      	ldr	r3, [r0, #8]
   82800:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 829bc <_malloc_r+0x534>
   82804:	4283      	cmp	r3, r0
   82806:	f000 808a 	beq.w	8291e <_malloc_r+0x496>
   8280a:	685a      	ldr	r2, [r3, #4]
   8280c:	f022 0203 	bic.w	r2, r2, #3
   82810:	4291      	cmp	r1, r2
   82812:	d202      	bcs.n	8281a <_malloc_r+0x392>
   82814:	689b      	ldr	r3, [r3, #8]
   82816:	4298      	cmp	r0, r3
   82818:	d1f7      	bne.n	8280a <_malloc_r+0x382>
   8281a:	68d9      	ldr	r1, [r3, #12]
   8281c:	687a      	ldr	r2, [r7, #4]
   8281e:	60e1      	str	r1, [r4, #12]
   82820:	60a3      	str	r3, [r4, #8]
   82822:	608c      	str	r4, [r1, #8]
   82824:	60dc      	str	r4, [r3, #12]
   82826:	e6b6      	b.n	82596 <_malloc_r+0x10e>
   82828:	f045 0701 	orr.w	r7, r5, #1
   8282c:	f042 0101 	orr.w	r1, r2, #1
   82830:	4425      	add	r5, r4
   82832:	6067      	str	r7, [r4, #4]
   82834:	4630      	mov	r0, r6
   82836:	615d      	str	r5, [r3, #20]
   82838:	611d      	str	r5, [r3, #16]
   8283a:	f8c5 e00c 	str.w	lr, [r5, #12]
   8283e:	f8c5 e008 	str.w	lr, [r5, #8]
   82842:	6069      	str	r1, [r5, #4]
   82844:	50aa      	str	r2, [r5, r2]
   82846:	3408      	adds	r4, #8
   82848:	f000 f8bc 	bl	829c4 <__malloc_unlock>
   8284c:	e648      	b.n	824e0 <_malloc_r+0x58>
   8284e:	685a      	ldr	r2, [r3, #4]
   82850:	e6a1      	b.n	82596 <_malloc_r+0x10e>
   82852:	f109 0901 	add.w	r9, r9, #1
   82856:	f019 0f03 	tst.w	r9, #3
   8285a:	f104 0408 	add.w	r4, r4, #8
   8285e:	f47f aead 	bne.w	825bc <_malloc_r+0x134>
   82862:	e02d      	b.n	828c0 <_malloc_r+0x438>
   82864:	f104 0308 	add.w	r3, r4, #8
   82868:	6964      	ldr	r4, [r4, #20]
   8286a:	42a3      	cmp	r3, r4
   8286c:	bf08      	it	eq
   8286e:	f10c 0c02 	addeq.w	ip, ip, #2
   82872:	f43f ae67 	beq.w	82544 <_malloc_r+0xbc>
   82876:	e623      	b.n	824c0 <_malloc_r+0x38>
   82878:	4419      	add	r1, r3
   8287a:	6848      	ldr	r0, [r1, #4]
   8287c:	461c      	mov	r4, r3
   8287e:	f854 2f08 	ldr.w	r2, [r4, #8]!
   82882:	68db      	ldr	r3, [r3, #12]
   82884:	f040 0501 	orr.w	r5, r0, #1
   82888:	604d      	str	r5, [r1, #4]
   8288a:	4630      	mov	r0, r6
   8288c:	60d3      	str	r3, [r2, #12]
   8288e:	609a      	str	r2, [r3, #8]
   82890:	f000 f898 	bl	829c4 <__malloc_unlock>
   82894:	e624      	b.n	824e0 <_malloc_r+0x58>
   82896:	f10c 0c5b 	add.w	ip, ip, #91	; 0x5b
   8289a:	ea4f 014c 	mov.w	r1, ip, lsl #1
   8289e:	e63b      	b.n	82518 <_malloc_r+0x90>
   828a0:	098a      	lsrs	r2, r1, #6
   828a2:	3238      	adds	r2, #56	; 0x38
   828a4:	0050      	lsls	r0, r2, #1
   828a6:	e7a8      	b.n	827fa <_malloc_r+0x372>
   828a8:	42bc      	cmp	r4, r7
   828aa:	f43f af02 	beq.w	826b2 <_malloc_r+0x22a>
   828ae:	68bc      	ldr	r4, [r7, #8]
   828b0:	6862      	ldr	r2, [r4, #4]
   828b2:	f022 0203 	bic.w	r2, r2, #3
   828b6:	e761      	b.n	8277c <_malloc_r+0x2f4>
   828b8:	f8d8 8000 	ldr.w	r8, [r8]
   828bc:	4598      	cmp	r8, r3
   828be:	d17a      	bne.n	829b6 <_malloc_r+0x52e>
   828c0:	f01c 0f03 	tst.w	ip, #3
   828c4:	f1a8 0308 	sub.w	r3, r8, #8
   828c8:	f10c 3cff 	add.w	ip, ip, #4294967295
   828cc:	d1f4      	bne.n	828b8 <_malloc_r+0x430>
   828ce:	687b      	ldr	r3, [r7, #4]
   828d0:	ea23 0300 	bic.w	r3, r3, r0
   828d4:	607b      	str	r3, [r7, #4]
   828d6:	0040      	lsls	r0, r0, #1
   828d8:	4298      	cmp	r0, r3
   828da:	f63f aebe 	bhi.w	8265a <_malloc_r+0x1d2>
   828de:	2800      	cmp	r0, #0
   828e0:	f43f aebb 	beq.w	8265a <_malloc_r+0x1d2>
   828e4:	4203      	tst	r3, r0
   828e6:	46cc      	mov	ip, r9
   828e8:	f47f ae64 	bne.w	825b4 <_malloc_r+0x12c>
   828ec:	0040      	lsls	r0, r0, #1
   828ee:	4203      	tst	r3, r0
   828f0:	f10c 0c04 	add.w	ip, ip, #4
   828f4:	d0fa      	beq.n	828ec <_malloc_r+0x464>
   828f6:	e65d      	b.n	825b4 <_malloc_r+0x12c>
   828f8:	f5bc 7faa 	cmp.w	ip, #340	; 0x154
   828fc:	d819      	bhi.n	82932 <_malloc_r+0x4aa>
   828fe:	ea4f 3cd5 	mov.w	ip, r5, lsr #15
   82902:	f10c 0c77 	add.w	ip, ip, #119	; 0x77
   82906:	ea4f 014c 	mov.w	r1, ip, lsl #1
   8290a:	e605      	b.n	82518 <_malloc_r+0x90>
   8290c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   82910:	e6ee      	b.n	826f0 <_malloc_r+0x268>
   82912:	2301      	movs	r3, #1
   82914:	f8c8 3004 	str.w	r3, [r8, #4]
   82918:	4644      	mov	r4, r8
   8291a:	2200      	movs	r2, #0
   8291c:	e72e      	b.n	8277c <_malloc_r+0x2f4>
   8291e:	1092      	asrs	r2, r2, #2
   82920:	2001      	movs	r0, #1
   82922:	4090      	lsls	r0, r2
   82924:	f8d8 2004 	ldr.w	r2, [r8, #4]
   82928:	4619      	mov	r1, r3
   8292a:	4302      	orrs	r2, r0
   8292c:	f8c8 2004 	str.w	r2, [r8, #4]
   82930:	e775      	b.n	8281e <_malloc_r+0x396>
   82932:	f240 5354 	movw	r3, #1364	; 0x554
   82936:	459c      	cmp	ip, r3
   82938:	d81b      	bhi.n	82972 <_malloc_r+0x4ea>
   8293a:	ea4f 4c95 	mov.w	ip, r5, lsr #18
   8293e:	f10c 0c7c 	add.w	ip, ip, #124	; 0x7c
   82942:	ea4f 014c 	mov.w	r1, ip, lsl #1
   82946:	e5e7      	b.n	82518 <_malloc_r+0x90>
   82948:	f10a 0a10 	add.w	sl, sl, #16
   8294c:	e6a3      	b.n	82696 <_malloc_r+0x20e>
   8294e:	2b54      	cmp	r3, #84	; 0x54
   82950:	d81f      	bhi.n	82992 <_malloc_r+0x50a>
   82952:	0b0a      	lsrs	r2, r1, #12
   82954:	326e      	adds	r2, #110	; 0x6e
   82956:	0050      	lsls	r0, r2, #1
   82958:	e74f      	b.n	827fa <_malloc_r+0x372>
   8295a:	f3cb 010b 	ubfx	r1, fp, #0, #12
   8295e:	2900      	cmp	r1, #0
   82960:	f47f aeb1 	bne.w	826c6 <_malloc_r+0x23e>
   82964:	eb0a 0109 	add.w	r1, sl, r9
   82968:	68ba      	ldr	r2, [r7, #8]
   8296a:	f041 0101 	orr.w	r1, r1, #1
   8296e:	6051      	str	r1, [r2, #4]
   82970:	e6f6      	b.n	82760 <_malloc_r+0x2d8>
   82972:	21fc      	movs	r1, #252	; 0xfc
   82974:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
   82978:	e5ce      	b.n	82518 <_malloc_r+0x90>
   8297a:	2201      	movs	r2, #1
   8297c:	f04f 0a00 	mov.w	sl, #0
   82980:	e6cb      	b.n	8271a <_malloc_r+0x292>
   82982:	f104 0108 	add.w	r1, r4, #8
   82986:	4630      	mov	r0, r6
   82988:	f7ff fc16 	bl	821b8 <_free_r>
   8298c:	f8da 3000 	ldr.w	r3, [sl]
   82990:	e6e6      	b.n	82760 <_malloc_r+0x2d8>
   82992:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   82996:	d803      	bhi.n	829a0 <_malloc_r+0x518>
   82998:	0bca      	lsrs	r2, r1, #15
   8299a:	3277      	adds	r2, #119	; 0x77
   8299c:	0050      	lsls	r0, r2, #1
   8299e:	e72c      	b.n	827fa <_malloc_r+0x372>
   829a0:	f240 5254 	movw	r2, #1364	; 0x554
   829a4:	4293      	cmp	r3, r2
   829a6:	d803      	bhi.n	829b0 <_malloc_r+0x528>
   829a8:	0c8a      	lsrs	r2, r1, #18
   829aa:	327c      	adds	r2, #124	; 0x7c
   829ac:	0050      	lsls	r0, r2, #1
   829ae:	e724      	b.n	827fa <_malloc_r+0x372>
   829b0:	20fc      	movs	r0, #252	; 0xfc
   829b2:	227e      	movs	r2, #126	; 0x7e
   829b4:	e721      	b.n	827fa <_malloc_r+0x372>
   829b6:	687b      	ldr	r3, [r7, #4]
   829b8:	e78d      	b.n	828d6 <_malloc_r+0x44e>
   829ba:	bf00      	nop
   829bc:	20070564 	.word	0x20070564

000829c0 <__malloc_lock>:
   829c0:	4770      	bx	lr
   829c2:	bf00      	nop

000829c4 <__malloc_unlock>:
   829c4:	4770      	bx	lr
   829c6:	bf00      	nop

000829c8 <_sbrk_r>:
   829c8:	b538      	push	{r3, r4, r5, lr}
   829ca:	4c07      	ldr	r4, [pc, #28]	; (829e8 <_sbrk_r+0x20>)
   829cc:	2300      	movs	r3, #0
   829ce:	4605      	mov	r5, r0
   829d0:	4608      	mov	r0, r1
   829d2:	6023      	str	r3, [r4, #0]
   829d4:	f7ff f856 	bl	81a84 <_sbrk>
   829d8:	1c43      	adds	r3, r0, #1
   829da:	d000      	beq.n	829de <_sbrk_r+0x16>
   829dc:	bd38      	pop	{r3, r4, r5, pc}
   829de:	6823      	ldr	r3, [r4, #0]
   829e0:	2b00      	cmp	r3, #0
   829e2:	d0fb      	beq.n	829dc <_sbrk_r+0x14>
   829e4:	602b      	str	r3, [r5, #0]
   829e6:	bd38      	pop	{r3, r4, r5, pc}
   829e8:	20070b78 	.word	0x20070b78

000829ec <__sread>:
   829ec:	b510      	push	{r4, lr}
   829ee:	460c      	mov	r4, r1
   829f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   829f4:	f000 f938 	bl	82c68 <_read_r>
   829f8:	2800      	cmp	r0, #0
   829fa:	db03      	blt.n	82a04 <__sread+0x18>
   829fc:	6d23      	ldr	r3, [r4, #80]	; 0x50
   829fe:	4403      	add	r3, r0
   82a00:	6523      	str	r3, [r4, #80]	; 0x50
   82a02:	bd10      	pop	{r4, pc}
   82a04:	89a3      	ldrh	r3, [r4, #12]
   82a06:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   82a0a:	81a3      	strh	r3, [r4, #12]
   82a0c:	bd10      	pop	{r4, pc}
   82a0e:	bf00      	nop

00082a10 <__swrite>:
   82a10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82a14:	460c      	mov	r4, r1
   82a16:	8989      	ldrh	r1, [r1, #12]
   82a18:	461d      	mov	r5, r3
   82a1a:	05cb      	lsls	r3, r1, #23
   82a1c:	4616      	mov	r6, r2
   82a1e:	4607      	mov	r7, r0
   82a20:	d506      	bpl.n	82a30 <__swrite+0x20>
   82a22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   82a26:	2200      	movs	r2, #0
   82a28:	2302      	movs	r3, #2
   82a2a:	f000 f909 	bl	82c40 <_lseek_r>
   82a2e:	89a1      	ldrh	r1, [r4, #12]
   82a30:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   82a34:	81a1      	strh	r1, [r4, #12]
   82a36:	4638      	mov	r0, r7
   82a38:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   82a3c:	4632      	mov	r2, r6
   82a3e:	462b      	mov	r3, r5
   82a40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   82a44:	f000 b814 	b.w	82a70 <_write_r>

00082a48 <__sseek>:
   82a48:	b510      	push	{r4, lr}
   82a4a:	460c      	mov	r4, r1
   82a4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   82a50:	f000 f8f6 	bl	82c40 <_lseek_r>
   82a54:	89a3      	ldrh	r3, [r4, #12]
   82a56:	1c42      	adds	r2, r0, #1
   82a58:	bf0e      	itee	eq
   82a5a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   82a5e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   82a62:	6520      	strne	r0, [r4, #80]	; 0x50
   82a64:	81a3      	strh	r3, [r4, #12]
   82a66:	bd10      	pop	{r4, pc}

00082a68 <__sclose>:
   82a68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   82a6c:	f000 b868 	b.w	82b40 <_close_r>

00082a70 <_write_r>:
   82a70:	b570      	push	{r4, r5, r6, lr}
   82a72:	4c08      	ldr	r4, [pc, #32]	; (82a94 <_write_r+0x24>)
   82a74:	4606      	mov	r6, r0
   82a76:	2500      	movs	r5, #0
   82a78:	4608      	mov	r0, r1
   82a7a:	4611      	mov	r1, r2
   82a7c:	461a      	mov	r2, r3
   82a7e:	6025      	str	r5, [r4, #0]
   82a80:	f7fd fe2a 	bl	806d8 <_write>
   82a84:	1c43      	adds	r3, r0, #1
   82a86:	d000      	beq.n	82a8a <_write_r+0x1a>
   82a88:	bd70      	pop	{r4, r5, r6, pc}
   82a8a:	6823      	ldr	r3, [r4, #0]
   82a8c:	2b00      	cmp	r3, #0
   82a8e:	d0fb      	beq.n	82a88 <_write_r+0x18>
   82a90:	6033      	str	r3, [r6, #0]
   82a92:	bd70      	pop	{r4, r5, r6, pc}
   82a94:	20070b78 	.word	0x20070b78

00082a98 <__register_exitproc>:
   82a98:	b5f0      	push	{r4, r5, r6, r7, lr}
   82a9a:	4c27      	ldr	r4, [pc, #156]	; (82b38 <__register_exitproc+0xa0>)
   82a9c:	b085      	sub	sp, #20
   82a9e:	6826      	ldr	r6, [r4, #0]
   82aa0:	4607      	mov	r7, r0
   82aa2:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
   82aa6:	2c00      	cmp	r4, #0
   82aa8:	d040      	beq.n	82b2c <__register_exitproc+0x94>
   82aaa:	6865      	ldr	r5, [r4, #4]
   82aac:	2d1f      	cmp	r5, #31
   82aae:	dd1e      	ble.n	82aee <__register_exitproc+0x56>
   82ab0:	4822      	ldr	r0, [pc, #136]	; (82b3c <__register_exitproc+0xa4>)
   82ab2:	b918      	cbnz	r0, 82abc <__register_exitproc+0x24>
   82ab4:	f04f 30ff 	mov.w	r0, #4294967295
   82ab8:	b005      	add	sp, #20
   82aba:	bdf0      	pop	{r4, r5, r6, r7, pc}
   82abc:	f44f 70c8 	mov.w	r0, #400	; 0x190
   82ac0:	9103      	str	r1, [sp, #12]
   82ac2:	9202      	str	r2, [sp, #8]
   82ac4:	9301      	str	r3, [sp, #4]
   82ac6:	f7ff fcd7 	bl	82478 <malloc>
   82aca:	9903      	ldr	r1, [sp, #12]
   82acc:	4604      	mov	r4, r0
   82ace:	9a02      	ldr	r2, [sp, #8]
   82ad0:	9b01      	ldr	r3, [sp, #4]
   82ad2:	2800      	cmp	r0, #0
   82ad4:	d0ee      	beq.n	82ab4 <__register_exitproc+0x1c>
   82ad6:	f8d6 5148 	ldr.w	r5, [r6, #328]	; 0x148
   82ada:	2000      	movs	r0, #0
   82adc:	6025      	str	r5, [r4, #0]
   82ade:	6060      	str	r0, [r4, #4]
   82ae0:	4605      	mov	r5, r0
   82ae2:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   82ae6:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
   82aea:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
   82aee:	b93f      	cbnz	r7, 82b00 <__register_exitproc+0x68>
   82af0:	1c6b      	adds	r3, r5, #1
   82af2:	2000      	movs	r0, #0
   82af4:	3502      	adds	r5, #2
   82af6:	6063      	str	r3, [r4, #4]
   82af8:	f844 1025 	str.w	r1, [r4, r5, lsl #2]
   82afc:	b005      	add	sp, #20
   82afe:	bdf0      	pop	{r4, r5, r6, r7, pc}
   82b00:	2601      	movs	r6, #1
   82b02:	40ae      	lsls	r6, r5
   82b04:	eb04 0085 	add.w	r0, r4, r5, lsl #2
   82b08:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
   82b0c:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
   82b10:	2f02      	cmp	r7, #2
   82b12:	ea42 0206 	orr.w	r2, r2, r6
   82b16:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
   82b1a:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   82b1e:	d1e7      	bne.n	82af0 <__register_exitproc+0x58>
   82b20:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   82b24:	431e      	orrs	r6, r3
   82b26:	f8c4 618c 	str.w	r6, [r4, #396]	; 0x18c
   82b2a:	e7e1      	b.n	82af0 <__register_exitproc+0x58>
   82b2c:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
   82b30:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   82b34:	e7b9      	b.n	82aaa <__register_exitproc+0x12>
   82b36:	bf00      	nop
   82b38:	00082f30 	.word	0x00082f30
   82b3c:	00082479 	.word	0x00082479

00082b40 <_close_r>:
   82b40:	b538      	push	{r3, r4, r5, lr}
   82b42:	4c07      	ldr	r4, [pc, #28]	; (82b60 <_close_r+0x20>)
   82b44:	2300      	movs	r3, #0
   82b46:	4605      	mov	r5, r0
   82b48:	4608      	mov	r0, r1
   82b4a:	6023      	str	r3, [r4, #0]
   82b4c:	f7fe ffb4 	bl	81ab8 <_close>
   82b50:	1c43      	adds	r3, r0, #1
   82b52:	d000      	beq.n	82b56 <_close_r+0x16>
   82b54:	bd38      	pop	{r3, r4, r5, pc}
   82b56:	6823      	ldr	r3, [r4, #0]
   82b58:	2b00      	cmp	r3, #0
   82b5a:	d0fb      	beq.n	82b54 <_close_r+0x14>
   82b5c:	602b      	str	r3, [r5, #0]
   82b5e:	bd38      	pop	{r3, r4, r5, pc}
   82b60:	20070b78 	.word	0x20070b78

00082b64 <_fclose_r>:
   82b64:	b570      	push	{r4, r5, r6, lr}
   82b66:	460c      	mov	r4, r1
   82b68:	4605      	mov	r5, r0
   82b6a:	b131      	cbz	r1, 82b7a <_fclose_r+0x16>
   82b6c:	b110      	cbz	r0, 82b74 <_fclose_r+0x10>
   82b6e:	6b83      	ldr	r3, [r0, #56]	; 0x38
   82b70:	2b00      	cmp	r3, #0
   82b72:	d02f      	beq.n	82bd4 <_fclose_r+0x70>
   82b74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   82b78:	b90b      	cbnz	r3, 82b7e <_fclose_r+0x1a>
   82b7a:	2000      	movs	r0, #0
   82b7c:	bd70      	pop	{r4, r5, r6, pc}
   82b7e:	4628      	mov	r0, r5
   82b80:	4621      	mov	r1, r4
   82b82:	f7ff fa19 	bl	81fb8 <_fflush_r>
   82b86:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   82b88:	4606      	mov	r6, r0
   82b8a:	b133      	cbz	r3, 82b9a <_fclose_r+0x36>
   82b8c:	4628      	mov	r0, r5
   82b8e:	69e1      	ldr	r1, [r4, #28]
   82b90:	4798      	blx	r3
   82b92:	2800      	cmp	r0, #0
   82b94:	bfb8      	it	lt
   82b96:	f04f 36ff 	movlt.w	r6, #4294967295
   82b9a:	89a3      	ldrh	r3, [r4, #12]
   82b9c:	061b      	lsls	r3, r3, #24
   82b9e:	d41c      	bmi.n	82bda <_fclose_r+0x76>
   82ba0:	6b21      	ldr	r1, [r4, #48]	; 0x30
   82ba2:	b141      	cbz	r1, 82bb6 <_fclose_r+0x52>
   82ba4:	f104 0340 	add.w	r3, r4, #64	; 0x40
   82ba8:	4299      	cmp	r1, r3
   82baa:	d002      	beq.n	82bb2 <_fclose_r+0x4e>
   82bac:	4628      	mov	r0, r5
   82bae:	f7ff fb03 	bl	821b8 <_free_r>
   82bb2:	2300      	movs	r3, #0
   82bb4:	6323      	str	r3, [r4, #48]	; 0x30
   82bb6:	6c61      	ldr	r1, [r4, #68]	; 0x44
   82bb8:	b121      	cbz	r1, 82bc4 <_fclose_r+0x60>
   82bba:	4628      	mov	r0, r5
   82bbc:	f7ff fafc 	bl	821b8 <_free_r>
   82bc0:	2300      	movs	r3, #0
   82bc2:	6463      	str	r3, [r4, #68]	; 0x44
   82bc4:	f7ff fa8e 	bl	820e4 <__sfp_lock_acquire>
   82bc8:	2300      	movs	r3, #0
   82bca:	81a3      	strh	r3, [r4, #12]
   82bcc:	f7ff fa8c 	bl	820e8 <__sfp_lock_release>
   82bd0:	4630      	mov	r0, r6
   82bd2:	bd70      	pop	{r4, r5, r6, pc}
   82bd4:	f7ff fa0c 	bl	81ff0 <__sinit>
   82bd8:	e7cc      	b.n	82b74 <_fclose_r+0x10>
   82bda:	4628      	mov	r0, r5
   82bdc:	6921      	ldr	r1, [r4, #16]
   82bde:	f7ff faeb 	bl	821b8 <_free_r>
   82be2:	e7dd      	b.n	82ba0 <_fclose_r+0x3c>

00082be4 <fclose>:
   82be4:	4b02      	ldr	r3, [pc, #8]	; (82bf0 <fclose+0xc>)
   82be6:	4601      	mov	r1, r0
   82be8:	6818      	ldr	r0, [r3, #0]
   82bea:	f7ff bfbb 	b.w	82b64 <_fclose_r>
   82bee:	bf00      	nop
   82bf0:	20070560 	.word	0x20070560

00082bf4 <_fstat_r>:
   82bf4:	b538      	push	{r3, r4, r5, lr}
   82bf6:	4c08      	ldr	r4, [pc, #32]	; (82c18 <_fstat_r+0x24>)
   82bf8:	2300      	movs	r3, #0
   82bfa:	4605      	mov	r5, r0
   82bfc:	4608      	mov	r0, r1
   82bfe:	4611      	mov	r1, r2
   82c00:	6023      	str	r3, [r4, #0]
   82c02:	f7fe ff5d 	bl	81ac0 <_fstat>
   82c06:	1c43      	adds	r3, r0, #1
   82c08:	d000      	beq.n	82c0c <_fstat_r+0x18>
   82c0a:	bd38      	pop	{r3, r4, r5, pc}
   82c0c:	6823      	ldr	r3, [r4, #0]
   82c0e:	2b00      	cmp	r3, #0
   82c10:	d0fb      	beq.n	82c0a <_fstat_r+0x16>
   82c12:	602b      	str	r3, [r5, #0]
   82c14:	bd38      	pop	{r3, r4, r5, pc}
   82c16:	bf00      	nop
   82c18:	20070b78 	.word	0x20070b78

00082c1c <_isatty_r>:
   82c1c:	b538      	push	{r3, r4, r5, lr}
   82c1e:	4c07      	ldr	r4, [pc, #28]	; (82c3c <_isatty_r+0x20>)
   82c20:	2300      	movs	r3, #0
   82c22:	4605      	mov	r5, r0
   82c24:	4608      	mov	r0, r1
   82c26:	6023      	str	r3, [r4, #0]
   82c28:	f7fe ff50 	bl	81acc <_isatty>
   82c2c:	1c43      	adds	r3, r0, #1
   82c2e:	d000      	beq.n	82c32 <_isatty_r+0x16>
   82c30:	bd38      	pop	{r3, r4, r5, pc}
   82c32:	6823      	ldr	r3, [r4, #0]
   82c34:	2b00      	cmp	r3, #0
   82c36:	d0fb      	beq.n	82c30 <_isatty_r+0x14>
   82c38:	602b      	str	r3, [r5, #0]
   82c3a:	bd38      	pop	{r3, r4, r5, pc}
   82c3c:	20070b78 	.word	0x20070b78

00082c40 <_lseek_r>:
   82c40:	b570      	push	{r4, r5, r6, lr}
   82c42:	4c08      	ldr	r4, [pc, #32]	; (82c64 <_lseek_r+0x24>)
   82c44:	4606      	mov	r6, r0
   82c46:	2500      	movs	r5, #0
   82c48:	4608      	mov	r0, r1
   82c4a:	4611      	mov	r1, r2
   82c4c:	461a      	mov	r2, r3
   82c4e:	6025      	str	r5, [r4, #0]
   82c50:	f7fe ff3e 	bl	81ad0 <_lseek>
   82c54:	1c43      	adds	r3, r0, #1
   82c56:	d000      	beq.n	82c5a <_lseek_r+0x1a>
   82c58:	bd70      	pop	{r4, r5, r6, pc}
   82c5a:	6823      	ldr	r3, [r4, #0]
   82c5c:	2b00      	cmp	r3, #0
   82c5e:	d0fb      	beq.n	82c58 <_lseek_r+0x18>
   82c60:	6033      	str	r3, [r6, #0]
   82c62:	bd70      	pop	{r4, r5, r6, pc}
   82c64:	20070b78 	.word	0x20070b78

00082c68 <_read_r>:
   82c68:	b570      	push	{r4, r5, r6, lr}
   82c6a:	4c08      	ldr	r4, [pc, #32]	; (82c8c <_read_r+0x24>)
   82c6c:	4606      	mov	r6, r0
   82c6e:	2500      	movs	r5, #0
   82c70:	4608      	mov	r0, r1
   82c72:	4611      	mov	r1, r2
   82c74:	461a      	mov	r2, r3
   82c76:	6025      	str	r5, [r4, #0]
   82c78:	f7fd fa66 	bl	80148 <_read>
   82c7c:	1c43      	adds	r3, r0, #1
   82c7e:	d000      	beq.n	82c82 <_read_r+0x1a>
   82c80:	bd70      	pop	{r4, r5, r6, pc}
   82c82:	6823      	ldr	r3, [r4, #0]
   82c84:	2b00      	cmp	r3, #0
   82c86:	d0fb      	beq.n	82c80 <_read_r+0x18>
   82c88:	6033      	str	r3, [r6, #0]
   82c8a:	bd70      	pop	{r4, r5, r6, pc}
   82c8c:	20070b78 	.word	0x20070b78

00082c90 <OurTransitionTable>:
   82c90:	00000001 02000001 02030000 04030000     ................
   82ca0:	04050000 06070000 06000700 08000700     ................
   82cb0:	08000000 70784520 65746365 52542064     .... Expected TR
   82cc0:	57204555 46207361 45534c41 00000000     UE Was FALSE....
   82cd0:	742f2e2e 2f747365 74736574 6174735f     ../test/test_sta
   82ce0:	614d6574 6e696863 00632e65 74736574     teMachine.c.test
   82cf0:	6174735f 614d6574 6e696863 61745365     _stateMachineSta
   82d00:	49737472 636f4c6e 5364656b 65746174     rtsInLockedState
   82d10:	00000000 74736574 6174735f 6f476574     ....test_stateGo
   82d20:	6f547365 68737550 57656e4f 466e6568     esToPushOneWhenF
   82d30:	74737269 72726f43 42746365 6f747475     irstCorrectButto
   82d40:	5073496e 73736572 00006465 74736574     nIsPressed..test
   82d50:	6174735f 6f476574 6f547365 6b636f4c     _stateGoesToLock
   82d60:	68576465 69466e65 49747372 726f636e     edWhenFirstIncor
   82d70:	74636572 74747542 73496e6f 73657250     rectButtonIsPres
   82d80:	00646573 74736574 6174735f 6f476574     sed.test_stateGo
   82d90:	6f547365 68737550 576f7754 536e6568     esToPushTwoWhenS
   82da0:	6e6f6365 726f4364 74636572 74747542     econdCorrectButt
   82db0:	73496e6f 73657250 00646573 74736574     onIsPressed.test
   82dc0:	6174735f 6f476574 6f547365 6b636f4c     _stateGoesToLock
   82dd0:	68576465 65536e65 646e6f63 6f636e49     edWhenSecondInco
   82de0:	63657272 74754274 496e6f74 65725073     rrectButtonIsPre
   82df0:	64657373 00000000 74736574 6174735f     ssed....test_sta
   82e00:	6f476574 6f547365 68737550 65726854     teGoesToPushThre
   82e10:	65685765 6968546e 6f436472 63657272     eWhenThirdCorrec
   82e20:	74754274 496e6f74 65725073 64657373     tButtonIsPressed
   82e30:	00000000 74736574 6174735f 6f476574     ....test_stateGo
   82e40:	6f547365 6b636f4c 68576465 68546e65     esToLockedWhenTh
   82e50:	49647269 726f636e 74636572 74747542     irdIncorrectButt
   82e60:	73496e6f 73657250 00646573 74736574     onIsPressed.test
   82e70:	6174735f 6f476574 6f547365 6e65704f     _stateGoesToOpen
   82e80:	6e656857 72756f46 6f436874 63657272     WhenFourthCorrec
   82e90:	74754274 496e6f74 65725073 64657373     tButtonIsPressed
   82ea0:	00000000 74736574 6174735f 6f476574     ....test_stateGo
   82eb0:	6f547365 6b636f4c 68576465 6f466e65     esToLockedWhenFo
   82ec0:	68747275 6f636e49 63657272 74754274     urthIncorrectBut
   82ed0:	496e6f74 65725073 64657373 00000000     tonIsPressed....

00082ee0 <UnityStrOk>:
   82ee0:	00004b4f                                OK..

00082ee4 <UnityStrFail>:
   82ee4:	4c494146 00000000                       FAIL....

00082eec <UnityStrBreaker>:
   82eec:	2d2d2d2d 2d2d2d2d 2d2d2d2d 2d2d2d2d     ----------------
   82efc:	2d2d2d2d 002d2d2d                       -------.

00082f04 <UnityStrResultsFailures>:
   82f04:	69614620 6572756c 00002073               Failures ..

00082f10 <UnityStrResultsIgnored>:
   82f10:	6e674920 6465726f 00000020               Ignored ...

00082f1c <UnityStrResultsTests>:
   82f1c:	73655420 00207374                        Tests .

00082f24 <UnityStrPass>:
   82f24:	53534150 00000000 00000043              PASS....C...

00082f30 <_global_impure_ptr>:
   82f30:	20070138                                8.. 

00082f34 <_init>:
   82f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   82f36:	bf00      	nop
   82f38:	bcf8      	pop	{r3, r4, r5, r6, r7}
   82f3a:	bc08      	pop	{r3}
   82f3c:	469e      	mov	lr, r3
   82f3e:	4770      	bx	lr

00082f40 <__init_array_start>:
   82f40:	00081e51 	.word	0x00081e51

00082f44 <__frame_dummy_init_array_entry>:
   82f44:	00080119                                ....

00082f48 <_fini>:
   82f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   82f4a:	bf00      	nop
   82f4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   82f4e:	bc08      	pop	{r3}
   82f50:	469e      	mov	lr, r3
   82f52:	4770      	bx	lr

00082f54 <__fini_array_start>:
   82f54:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <SystemInit>:
__no_inline
RAMFUNC
void SystemInit(void)
{
	/* Set FWS according to SYS_BOARD_MCKR configuration */
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20070000:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070004:	4a20      	ldr	r2, [pc, #128]	; (20070088 <SystemInit+0x88>)
20070006:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070008:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007000c:	6013      	str	r3, [r2, #0]

	/* Initialize main oscillator */
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007000e:	4b1f      	ldr	r3, [pc, #124]	; (2007008c <SystemInit+0x8c>)
20070010:	6a1b      	ldr	r3, [r3, #32]
20070012:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20070016:	d107      	bne.n	20070028 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070018:	4a1d      	ldr	r2, [pc, #116]	; (20070090 <SystemInit+0x90>)
2007001a:	4b1c      	ldr	r3, [pc, #112]	; (2007008c <SystemInit+0x8c>)
2007001c:	621a      	str	r2, [r3, #32]
			                     CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2007001e:	461a      	mov	r2, r3
20070020:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070022:	f013 0f01 	tst.w	r3, #1
20070026:	d0fb      	beq.n	20070020 <SystemInit+0x20>
		}
	}

	/* Switch to 3-20MHz Xtal oscillator */
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070028:	4a1a      	ldr	r2, [pc, #104]	; (20070094 <SystemInit+0x94>)
2007002a:	4b18      	ldr	r3, [pc, #96]	; (2007008c <SystemInit+0x8c>)
2007002c:	621a      	str	r2, [r3, #32]
	                           CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;

	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007002e:	461a      	mov	r2, r3
20070030:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070032:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20070036:	d0fb      	beq.n	20070030 <SystemInit+0x30>
	}
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070038:	4b14      	ldr	r3, [pc, #80]	; (2007008c <SystemInit+0x8c>)
2007003a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
2007003c:	f022 0203 	bic.w	r2, r2, #3
20070040:	f042 0201 	orr.w	r2, r2, #1
20070044:	631a      	str	r2, [r3, #48]	; 0x30
		                     PMC_MCKR_CSS_MAIN_CLK;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070046:	461a      	mov	r2, r3
20070048:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007004a:	f013 0f08 	tst.w	r3, #8
2007004e:	d0fb      	beq.n	20070048 <SystemInit+0x48>
	}

	/* Initialize PLLA */
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
20070050:	4a11      	ldr	r2, [pc, #68]	; (20070098 <SystemInit+0x98>)
20070052:	4b0e      	ldr	r3, [pc, #56]	; (2007008c <SystemInit+0x8c>)
20070054:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070056:	461a      	mov	r2, r3
20070058:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007005a:	f013 0f02 	tst.w	r3, #2
2007005e:	d0fb      	beq.n	20070058 <SystemInit+0x58>
	}

	/* Switch to main clock */
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
20070060:	2211      	movs	r2, #17
20070062:	4b0a      	ldr	r3, [pc, #40]	; (2007008c <SystemInit+0x8c>)
20070064:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070066:	461a      	mov	r2, r3
20070068:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007006a:	f013 0f08 	tst.w	r3, #8
2007006e:	d0fb      	beq.n	20070068 <SystemInit+0x68>
	}

	/* Switch to PLLA */
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
20070070:	2212      	movs	r2, #18
20070072:	4b06      	ldr	r3, [pc, #24]	; (2007008c <SystemInit+0x8c>)
20070074:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070076:	461a      	mov	r2, r3
20070078:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007007a:	f013 0f08 	tst.w	r3, #8
2007007e:	d0fb      	beq.n	20070078 <SystemInit+0x78>
	}

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
20070080:	4a06      	ldr	r2, [pc, #24]	; (2007009c <SystemInit+0x9c>)
20070082:	4b07      	ldr	r3, [pc, #28]	; (200700a0 <SystemInit+0xa0>)
20070084:	601a      	str	r2, [r3, #0]
20070086:	4770      	bx	lr
20070088:	400e0a00 	.word	0x400e0a00
2007008c:	400e0600 	.word	0x400e0600
20070090:	00370809 	.word	0x00370809
20070094:	01370809 	.word	0x01370809
20070098:	200d3f01 	.word	0x200d3f01
2007009c:	0501bd00 	.word	0x0501bd00
200700a0:	20070130 	.word	0x20070130

200700a4 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700a4:	4b1b      	ldr	r3, [pc, #108]	; (20070114 <system_init_flash+0x70>)
200700a6:	4298      	cmp	r0, r3
200700a8:	d806      	bhi.n	200700b8 <system_init_flash+0x14>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700aa:	2300      	movs	r3, #0
200700ac:	4a1a      	ldr	r2, [pc, #104]	; (20070118 <system_init_flash+0x74>)
200700ae:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700b0:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700b4:	6013      	str	r3, [r2, #0]
200700b6:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700b8:	4b18      	ldr	r3, [pc, #96]	; (2007011c <system_init_flash+0x78>)
200700ba:	4298      	cmp	r0, r3
200700bc:	d807      	bhi.n	200700ce <system_init_flash+0x2a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700be:	f44f 7380 	mov.w	r3, #256	; 0x100
200700c2:	4a15      	ldr	r2, [pc, #84]	; (20070118 <system_init_flash+0x74>)
200700c4:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700c6:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700ca:	6013      	str	r3, [r2, #0]
200700cc:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700ce:	4b14      	ldr	r3, [pc, #80]	; (20070120 <system_init_flash+0x7c>)
200700d0:	4298      	cmp	r0, r3
200700d2:	d807      	bhi.n	200700e4 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200700d4:	f44f 7300 	mov.w	r3, #512	; 0x200
200700d8:	4a0f      	ldr	r2, [pc, #60]	; (20070118 <system_init_flash+0x74>)
200700da:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
200700dc:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700e0:	6013      	str	r3, [r2, #0]
200700e2:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700e4:	4b0f      	ldr	r3, [pc, #60]	; (20070124 <system_init_flash+0x80>)
200700e6:	4298      	cmp	r0, r3
200700e8:	d807      	bhi.n	200700fa <system_init_flash+0x56>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
200700ea:	f44f 7340 	mov.w	r3, #768	; 0x300
200700ee:	4a0a      	ldr	r2, [pc, #40]	; (20070118 <system_init_flash+0x74>)
200700f0:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
200700f2:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700f6:	6013      	str	r3, [r2, #0]
200700f8:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
200700fa:	4b0b      	ldr	r3, [pc, #44]	; (20070128 <system_init_flash+0x84>)
200700fc:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
200700fe:	bf94      	ite	ls
20070100:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
20070104:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
20070108:	4a03      	ldr	r2, [pc, #12]	; (20070118 <system_init_flash+0x74>)
2007010a:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
2007010c:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070110:	6013      	str	r3, [r2, #0]
20070112:	4770      	bx	lr
20070114:	0121eabf 	.word	0x0121eabf
20070118:	400e0a00 	.word	0x400e0a00
2007011c:	02faf07f 	.word	0x02faf07f
20070120:	03d08fff 	.word	0x03d08fff
20070124:	04c4b3ff 	.word	0x04c4b3ff
20070128:	055d4a7f 	.word	0x055d4a7f

2007012c <g_interrupt_enabled>:
2007012c:	00000001                                ....

20070130 <SystemCoreClock>:
20070130:	003d0900 00000000                       ..=.....

20070138 <impure_data>:
20070138:	00000000 20070424 2007048c 200704f4     ....$.. ... ... 
	...
2007016c:	00082f2c 00000000 00000000 00000000     ,/..............
	...
200701e0:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
200701f0:	0005deec 0000000b 00000000 00000000     ................
	...

20070560 <_impure_ptr>:
20070560:	20070138                                8.. 

20070564 <__malloc_av_>:
	...
2007056c:	20070564 20070564 2007056c 2007056c     d.. d.. l.. l.. 
2007057c:	20070574 20070574 2007057c 2007057c     t.. t.. |.. |.. 
2007058c:	20070584 20070584 2007058c 2007058c     ... ... ... ... 
2007059c:	20070594 20070594 2007059c 2007059c     ... ... ... ... 
200705ac:	200705a4 200705a4 200705ac 200705ac     ... ... ... ... 
200705bc:	200705b4 200705b4 200705bc 200705bc     ... ... ... ... 
200705cc:	200705c4 200705c4 200705cc 200705cc     ... ... ... ... 
200705dc:	200705d4 200705d4 200705dc 200705dc     ... ... ... ... 
200705ec:	200705e4 200705e4 200705ec 200705ec     ... ... ... ... 
200705fc:	200705f4 200705f4 200705fc 200705fc     ... ... ... ... 
2007060c:	20070604 20070604 2007060c 2007060c     ... ... ... ... 
2007061c:	20070614 20070614 2007061c 2007061c     ... ... ... ... 
2007062c:	20070624 20070624 2007062c 2007062c     $.. $.. ,.. ,.. 
2007063c:	20070634 20070634 2007063c 2007063c     4.. 4.. <.. <.. 
2007064c:	20070644 20070644 2007064c 2007064c     D.. D.. L.. L.. 
2007065c:	20070654 20070654 2007065c 2007065c     T.. T.. \.. \.. 
2007066c:	20070664 20070664 2007066c 2007066c     d.. d.. l.. l.. 
2007067c:	20070674 20070674 2007067c 2007067c     t.. t.. |.. |.. 
2007068c:	20070684 20070684 2007068c 2007068c     ... ... ... ... 
2007069c:	20070694 20070694 2007069c 2007069c     ... ... ... ... 
200706ac:	200706a4 200706a4 200706ac 200706ac     ... ... ... ... 
200706bc:	200706b4 200706b4 200706bc 200706bc     ... ... ... ... 
200706cc:	200706c4 200706c4 200706cc 200706cc     ... ... ... ... 
200706dc:	200706d4 200706d4 200706dc 200706dc     ... ... ... ... 
200706ec:	200706e4 200706e4 200706ec 200706ec     ... ... ... ... 
200706fc:	200706f4 200706f4 200706fc 200706fc     ... ... ... ... 
2007070c:	20070704 20070704 2007070c 2007070c     ... ... ... ... 
2007071c:	20070714 20070714 2007071c 2007071c     ... ... ... ... 
2007072c:	20070724 20070724 2007072c 2007072c     $.. $.. ,.. ,.. 
2007073c:	20070734 20070734 2007073c 2007073c     4.. 4.. <.. <.. 
2007074c:	20070744 20070744 2007074c 2007074c     D.. D.. L.. L.. 
2007075c:	20070754 20070754 2007075c 2007075c     T.. T.. \.. \.. 
2007076c:	20070764 20070764 2007076c 2007076c     d.. d.. l.. l.. 
2007077c:	20070774 20070774 2007077c 2007077c     t.. t.. |.. |.. 
2007078c:	20070784 20070784 2007078c 2007078c     ... ... ... ... 
2007079c:	20070794 20070794 2007079c 2007079c     ... ... ... ... 
200707ac:	200707a4 200707a4 200707ac 200707ac     ... ... ... ... 
200707bc:	200707b4 200707b4 200707bc 200707bc     ... ... ... ... 
200707cc:	200707c4 200707c4 200707cc 200707cc     ... ... ... ... 
200707dc:	200707d4 200707d4 200707dc 200707dc     ... ... ... ... 
200707ec:	200707e4 200707e4 200707ec 200707ec     ... ... ... ... 
200707fc:	200707f4 200707f4 200707fc 200707fc     ... ... ... ... 
2007080c:	20070804 20070804 2007080c 2007080c     ... ... ... ... 
2007081c:	20070814 20070814 2007081c 2007081c     ... ... ... ... 
2007082c:	20070824 20070824 2007082c 2007082c     $.. $.. ,.. ,.. 
2007083c:	20070834 20070834 2007083c 2007083c     4.. 4.. <.. <.. 
2007084c:	20070844 20070844 2007084c 2007084c     D.. D.. L.. L.. 
2007085c:	20070854 20070854 2007085c 2007085c     T.. T.. \.. \.. 
2007086c:	20070864 20070864 2007086c 2007086c     d.. d.. l.. l.. 
2007087c:	20070874 20070874 2007087c 2007087c     t.. t.. |.. |.. 
2007088c:	20070884 20070884 2007088c 2007088c     ... ... ... ... 
2007089c:	20070894 20070894 2007089c 2007089c     ... ... ... ... 
200708ac:	200708a4 200708a4 200708ac 200708ac     ... ... ... ... 
200708bc:	200708b4 200708b4 200708bc 200708bc     ... ... ... ... 
200708cc:	200708c4 200708c4 200708cc 200708cc     ... ... ... ... 
200708dc:	200708d4 200708d4 200708dc 200708dc     ... ... ... ... 
200708ec:	200708e4 200708e4 200708ec 200708ec     ... ... ... ... 
200708fc:	200708f4 200708f4 200708fc 200708fc     ... ... ... ... 
2007090c:	20070904 20070904 2007090c 2007090c     ... ... ... ... 
2007091c:	20070914 20070914 2007091c 2007091c     ... ... ... ... 
2007092c:	20070924 20070924 2007092c 2007092c     $.. $.. ,.. ,.. 
2007093c:	20070934 20070934 2007093c 2007093c     4.. 4.. <.. <.. 
2007094c:	20070944 20070944 2007094c 2007094c     D.. D.. L.. L.. 
2007095c:	20070954 20070954 2007095c 2007095c     T.. T.. \.. \.. 

2007096c <__malloc_trim_threshold>:
2007096c:	00020000                                ....

20070970 <__malloc_sbrk_base>:
20070970:	ffffffff                                ....
