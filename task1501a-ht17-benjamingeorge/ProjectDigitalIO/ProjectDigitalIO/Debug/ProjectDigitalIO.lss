
ProjectDigitalIO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003d9c  00080000  00080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00083d9c  00083d9c  00013d9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000ae0  20070000  00083da4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00000198  20070ae0  00084884  00020ae0  2**2
                  ALLOC
  4 .stack        00002000  20070c78  00084a1c  00020ae0  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00020ae0  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020b09  2**0
                  CONTENTS, READONLY
  7 .debug_info   0001464b  00000000  00000000  00020b62  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002ff4  00000000  00000000  000351ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00003fc3  00000000  00000000  000381a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000009a8  00000000  00000000  0003c164  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000008e8  00000000  00000000  0003cb0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000195da  00000000  00000000  0003d3f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000e9ea  00000000  00000000  000569ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0006d53b  00000000  00000000  000653b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000021a4  00000000  00000000  000d28f4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	78 2c 07 20 61 0b 08 00 5d 0b 08 00 5d 0b 08 00     x,. a...]...]...
   80010:	5d 0b 08 00 5d 0b 08 00 5d 0b 08 00 00 00 00 00     ]...]...].......
	...
   8002c:	5d 0b 08 00 5d 0b 08 00 00 00 00 00 5d 0b 08 00     ]...].......]...
   8003c:	5d 0b 08 00 5d 0b 08 00 5d 0b 08 00 5d 0b 08 00     ]...]...]...]...
   8004c:	5d 0b 08 00 5d 0b 08 00 5d 0b 08 00 5d 0b 08 00     ]...]...]...]...
   8005c:	5d 0b 08 00 5d 0b 08 00 5d 0b 08 00 00 00 00 00     ]...]...].......
   8006c:	d1 09 08 00 e5 09 08 00 f9 09 08 00 0d 0a 08 00     ................
	...
   80084:	c9 01 08 00 5d 0b 08 00 5d 0b 08 00 5d 0b 08 00     ....]...]...]...
   80094:	5d 0b 08 00 5d 0b 08 00 5d 0b 08 00 5d 0b 08 00     ]...]...]...]...
   800a4:	00 00 00 00 5d 0b 08 00 5d 0b 08 00 5d 0b 08 00     ....]...]...]...
   800b4:	5d 0b 08 00 5d 0b 08 00 5d 0b 08 00 5d 0b 08 00     ]...]...]...]...
   800c4:	5d 0b 08 00 5d 0b 08 00 5d 0b 08 00 5d 0b 08 00     ]...]...]...]...
   800d4:	5d 0b 08 00 5d 0b 08 00 5d 0b 08 00 5d 0b 08 00     ]...]...]...]...
   800e4:	5d 0b 08 00 5d 0b 08 00 5d 0b 08 00 5d 0b 08 00     ]...]...]...]...

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20070ae0 	.word	0x20070ae0
   80110:	00000000 	.word	0x00000000
   80114:	00083da4 	.word	0x00083da4

00080118 <frame_dummy>:
   80118:	4b0c      	ldr	r3, [pc, #48]	; (8014c <frame_dummy+0x34>)
   8011a:	b143      	cbz	r3, 8012e <frame_dummy+0x16>
   8011c:	480c      	ldr	r0, [pc, #48]	; (80150 <frame_dummy+0x38>)
   8011e:	b510      	push	{r4, lr}
   80120:	490c      	ldr	r1, [pc, #48]	; (80154 <frame_dummy+0x3c>)
   80122:	f3af 8000 	nop.w
   80126:	480c      	ldr	r0, [pc, #48]	; (80158 <frame_dummy+0x40>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b923      	cbnz	r3, 80136 <frame_dummy+0x1e>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	480a      	ldr	r0, [pc, #40]	; (80158 <frame_dummy+0x40>)
   80130:	6803      	ldr	r3, [r0, #0]
   80132:	b933      	cbnz	r3, 80142 <frame_dummy+0x2a>
   80134:	4770      	bx	lr
   80136:	4b09      	ldr	r3, [pc, #36]	; (8015c <frame_dummy+0x44>)
   80138:	2b00      	cmp	r3, #0
   8013a:	d0f7      	beq.n	8012c <frame_dummy+0x14>
   8013c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80140:	4718      	bx	r3
   80142:	4b06      	ldr	r3, [pc, #24]	; (8015c <frame_dummy+0x44>)
   80144:	2b00      	cmp	r3, #0
   80146:	d0f5      	beq.n	80134 <frame_dummy+0x1c>
   80148:	4718      	bx	r3
   8014a:	bf00      	nop
   8014c:	00000000 	.word	0x00000000
   80150:	00083da4 	.word	0x00083da4
   80154:	20070ae4 	.word	0x20070ae4
   80158:	00083da4 	.word	0x00083da4
   8015c:	00000000 	.word	0x00000000

00080160 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   80160:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
   80164:	b980      	cbnz	r0, 80188 <_read+0x28>
   80166:	460c      	mov	r4, r1
   80168:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
   8016a:	2a00      	cmp	r2, #0
   8016c:	dd0f      	ble.n	8018e <_read+0x2e>
   8016e:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   80170:	4e08      	ldr	r6, [pc, #32]	; (80194 <_read+0x34>)
   80172:	4d09      	ldr	r5, [pc, #36]	; (80198 <_read+0x38>)
   80174:	6830      	ldr	r0, [r6, #0]
   80176:	4621      	mov	r1, r4
   80178:	682b      	ldr	r3, [r5, #0]
   8017a:	4798      	blx	r3
		ptr++;
   8017c:	3401      	adds	r4, #1
	for (; len > 0; --len) {
   8017e:	42bc      	cmp	r4, r7
   80180:	d1f8      	bne.n	80174 <_read+0x14>
		nChars++;
	}
	return nChars;
}
   80182:	4640      	mov	r0, r8
   80184:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
   80188:	f04f 38ff 	mov.w	r8, #4294967295
   8018c:	e7f9      	b.n	80182 <_read+0x22>
	for (; len > 0; --len) {
   8018e:	4680      	mov	r8, r0
   80190:	e7f7      	b.n	80182 <_read+0x22>
   80192:	bf00      	nop
   80194:	20070c4c 	.word	0x20070c4c
   80198:	20070c44 	.word	0x20070c44

0008019c <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   8019c:	6943      	ldr	r3, [r0, #20]
   8019e:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   801a2:	bf1d      	ittte	ne
   801a4:	f3c1 0108 	ubfxne	r1, r1, #0, #9
   801a8:	61c1      	strne	r1, [r0, #28]
	return 0;
   801aa:	2000      	movne	r0, #0
		return 1;
   801ac:	2001      	moveq	r0, #1
}
   801ae:	4770      	bx	lr

000801b0 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   801b0:	6943      	ldr	r3, [r0, #20]
   801b2:	f013 0f01 	tst.w	r3, #1
   801b6:	d005      	beq.n	801c4 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   801b8:	6983      	ldr	r3, [r0, #24]
   801ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
   801be:	600b      	str	r3, [r1, #0]

	return 0;
   801c0:	2000      	movs	r0, #0
   801c2:	4770      	bx	lr
		return 1;
   801c4:	2001      	movs	r0, #1
}
   801c6:	4770      	bx	lr

000801c8 <USART0_Handler>:
#if SAMD || SAMR21
void USART_HOST_ISR_VECT(uint8_t instance)
#else
USART_HOST_ISR_VECT()
#endif
{
   801c8:	b500      	push	{lr}
   801ca:	b083      	sub	sp, #12
	uint8_t temp;
#if SAMD || SAMR21
	usart_serial_read_packet(&host_uart_module, &temp, 1);
#else
	usart_serial_read_packet(USART_HOST, &temp, 1);
   801cc:	2201      	movs	r2, #1
   801ce:	f10d 0107 	add.w	r1, sp, #7
   801d2:	4810      	ldr	r0, [pc, #64]	; (80214 <USART0_Handler+0x4c>)
   801d4:	4b10      	ldr	r3, [pc, #64]	; (80218 <USART0_Handler+0x50>)
   801d6:	4798      	blx	r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   801d8:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   801da:	f3bf 8f5f 	dmb	sy
#endif

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
   801de:	2200      	movs	r2, #0
   801e0:	4b0e      	ldr	r3, [pc, #56]	; (8021c <USART0_Handler+0x54>)
   801e2:	701a      	strb	r2, [r3, #0]

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */

	serial_rx_buf[serial_rx_buf_tail] = temp;
   801e4:	4b0e      	ldr	r3, [pc, #56]	; (80220 <USART0_Handler+0x58>)
   801e6:	781b      	ldrb	r3, [r3, #0]
   801e8:	f89d 1007 	ldrb.w	r1, [sp, #7]
   801ec:	4a0d      	ldr	r2, [pc, #52]	; (80224 <USART0_Handler+0x5c>)
   801ee:	54d1      	strb	r1, [r2, r3]

	if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_tail) {
   801f0:	2b9b      	cmp	r3, #155	; 0x9b
   801f2:	d00b      	beq.n	8020c <USART0_Handler+0x44>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		serial_rx_buf_tail = 0x00;
	} else {
		serial_rx_buf_tail++;
   801f4:	3301      	adds	r3, #1
   801f6:	4a0a      	ldr	r2, [pc, #40]	; (80220 <USART0_Handler+0x58>)
   801f8:	7013      	strb	r3, [r2, #0]
	}

	cpu_irq_enable();
   801fa:	2201      	movs	r2, #1
   801fc:	4b07      	ldr	r3, [pc, #28]	; (8021c <USART0_Handler+0x54>)
   801fe:	701a      	strb	r2, [r3, #0]
   80200:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   80204:	b662      	cpsie	i
}
   80206:	b003      	add	sp, #12
   80208:	f85d fb04 	ldr.w	pc, [sp], #4
		serial_rx_buf_tail = 0x00;
   8020c:	2200      	movs	r2, #0
   8020e:	4b04      	ldr	r3, [pc, #16]	; (80220 <USART0_Handler+0x58>)
   80210:	701a      	strb	r2, [r3, #0]
   80212:	e7f2      	b.n	801fa <USART0_Handler+0x32>
   80214:	40098000 	.word	0x40098000
   80218:	00080361 	.word	0x00080361
   8021c:	2007012c 	.word	0x2007012c
   80220:	20070b98 	.word	0x20070b98
   80224:	20070afc 	.word	0x20070afc

00080228 <pinMode>:

void pinMode(int pinNumber, mode_definition mode)
{
	uint32_t *const p_PIOB_OER = (uint32_t *) (PIOB_BASE_ADDRESS+0x0010U);	/* defines the address for enabling the parallel output B register */
	uint32_t *const p_PIOB_PER = (uint32_t *) (PIOB_BASE_ADDRESS+0x0000U);	/* defines the address for enabling the parallel Input/output B register */
	if (mode == OUTPUT)	/* You only have to program a function that cares about OUTPUT, and does nothing for the other values */
   80228:	2902      	cmp	r1, #2
   8022a:	d000      	beq.n	8022e <pinMode+0x6>
   8022c:	4770      	bx	lr
	{
		if(pinNumber == 13) {
   8022e:	280d      	cmp	r0, #13
   80230:	d00a      	beq.n	80248 <pinMode+0x20>
			*p_PIOB_PER |= (1<<27); /* Enable the PIO to control the corresponding pin number */
			*p_PIOB_OER |= (1<<27); /* Set specified pin number as an output */
			*p_PIOB_PER ^= (0<<27); /* Disable the PIO to control the corresponding pin number */
		} else if (pinNumber == 22) {
   80232:	2816      	cmp	r0, #22
   80234:	d1fa      	bne.n	8022c <pinMode+0x4>
			*p_PIOB_PER |= (1<<26); /* Enable the PIO to control the corresponding pin number */
			*p_PIOB_OER |= (1<<26); /* Set specified pin number as an output */
   80236:	4a0a      	ldr	r2, [pc, #40]	; (80260 <pinMode+0x38>)
   80238:	6813      	ldr	r3, [r2, #0]
   8023a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   8023e:	6013      	str	r3, [r2, #0]
			*p_PIOB_PER &= (0<<26); /* Disable the PIO to control the corresponding pin number */
   80240:	2200      	movs	r2, #0
   80242:	4b08      	ldr	r3, [pc, #32]	; (80264 <pinMode+0x3c>)
   80244:	601a      	str	r2, [r3, #0]
	}
	else
	{
		/* Do nothing */
	}
}
   80246:	e7f1      	b.n	8022c <pinMode+0x4>
			*p_PIOB_PER |= (1<<27); /* Enable the PIO to control the corresponding pin number */
   80248:	4a06      	ldr	r2, [pc, #24]	; (80264 <pinMode+0x3c>)
   8024a:	6813      	ldr	r3, [r2, #0]
   8024c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
   80250:	6013      	str	r3, [r2, #0]
			*p_PIOB_OER |= (1<<27); /* Set specified pin number as an output */
   80252:	3210      	adds	r2, #16
   80254:	6813      	ldr	r3, [r2, #0]
   80256:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
   8025a:	6013      	str	r3, [r2, #0]
   8025c:	4770      	bx	lr
   8025e:	bf00      	nop
   80260:	400e1010 	.word	0x400e1010
   80264:	400e1000 	.word	0x400e1000

00080268 <digitalWrite>:

void digitalWrite(int pinNumber, int value)
{
   80268:	b508      	push	{r3, lr}
	uint32_t *const p_PIOB_SODR = (uint32_t *) (PIOB_BASE_ADDRESS+0x0030U); //defines the address for status (values) of the output pins of the B register set to HIGH  */
	uint32_t *const p_PIOB_CODR = (uint32_t *) (PIOB_BASE_ADDRESS+0x0034U); //defines the address for status (values) of the output pins of the B register  set to LOW*/
	uint32_t *const p_PIOB_PER = (uint32_t *) (PIOB_BASE_ADDRESS+0x0000U);	/* defines the address for enabling the parallel Input/output B register */
	if (value == HIGH)
   8026a:	2901      	cmp	r1, #1
   8026c:	d005      	beq.n	8027a <digitalWrite+0x12>
			*p_PIOB_PER |= (1<<26);
			*p_PIOB_SODR |= (1<<26); /*Set pin number to high */
			*p_PIOB_PER ^= (1<<26); 
		}
	}
	else if (value == LOW)
   8026e:	b919      	cbnz	r1, 80278 <digitalWrite+0x10>
	{
		if(pinNumber == 13) {
   80270:	280d      	cmp	r0, #13
   80272:	d023      	beq.n	802bc <digitalWrite+0x54>
			*p_PIOB_PER |= (1<<27);
			*p_PIOB_CODR |= (1<<27); /*Set register to high to give a low output */
			*p_PIOB_PER ^= (1<<27);
			printf("LOW\n");
		} 
			else if (pinNumber == 22) {
   80274:	2816      	cmp	r0, #22
   80276:	d031      	beq.n	802dc <digitalWrite+0x74>
   80278:	bd08      	pop	{r3, pc}
		if(pinNumber == 13) {
   8027a:	280d      	cmp	r0, #13
   8027c:	d00e      	beq.n	8029c <digitalWrite+0x34>
			else if (pinNumber == 22) {
   8027e:	2816      	cmp	r0, #22
   80280:	d1fa      	bne.n	80278 <digitalWrite+0x10>
			*p_PIOB_PER |= (1<<26);
   80282:	491d      	ldr	r1, [pc, #116]	; (802f8 <digitalWrite+0x90>)
   80284:	680b      	ldr	r3, [r1, #0]
   80286:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
			*p_PIOB_SODR |= (1<<26); /*Set pin number to high */
   8028a:	481c      	ldr	r0, [pc, #112]	; (802fc <digitalWrite+0x94>)
   8028c:	6802      	ldr	r2, [r0, #0]
   8028e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
   80292:	6002      	str	r2, [r0, #0]
			*p_PIOB_PER ^= (1<<26); 
   80294:	f083 6380 	eor.w	r3, r3, #67108864	; 0x4000000
   80298:	600b      	str	r3, [r1, #0]
   8029a:	bd08      	pop	{r3, pc}
		    *p_PIOB_PER |= (1<<27);
   8029c:	4916      	ldr	r1, [pc, #88]	; (802f8 <digitalWrite+0x90>)
   8029e:	680b      	ldr	r3, [r1, #0]
   802a0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
			*p_PIOB_SODR |= (1<<27); /*Set pin number to high */ 
   802a4:	4815      	ldr	r0, [pc, #84]	; (802fc <digitalWrite+0x94>)
   802a6:	6802      	ldr	r2, [r0, #0]
   802a8:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
   802ac:	6002      	str	r2, [r0, #0]
		    *p_PIOB_PER ^= (1<<27);
   802ae:	f083 6300 	eor.w	r3, r3, #134217728	; 0x8000000
   802b2:	600b      	str	r3, [r1, #0]
			printf("HIGH\n");
   802b4:	4812      	ldr	r0, [pc, #72]	; (80300 <digitalWrite+0x98>)
   802b6:	4b13      	ldr	r3, [pc, #76]	; (80304 <digitalWrite+0x9c>)
   802b8:	4798      	blx	r3
   802ba:	bd08      	pop	{r3, pc}
			*p_PIOB_PER |= (1<<27);
   802bc:	490e      	ldr	r1, [pc, #56]	; (802f8 <digitalWrite+0x90>)
   802be:	680b      	ldr	r3, [r1, #0]
   802c0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
			*p_PIOB_CODR |= (1<<27); /*Set register to high to give a low output */
   802c4:	4810      	ldr	r0, [pc, #64]	; (80308 <digitalWrite+0xa0>)
   802c6:	6802      	ldr	r2, [r0, #0]
   802c8:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
   802cc:	6002      	str	r2, [r0, #0]
			*p_PIOB_PER ^= (1<<27);
   802ce:	f083 6300 	eor.w	r3, r3, #134217728	; 0x8000000
   802d2:	600b      	str	r3, [r1, #0]
			printf("LOW\n");
   802d4:	480d      	ldr	r0, [pc, #52]	; (8030c <digitalWrite+0xa4>)
   802d6:	4b0b      	ldr	r3, [pc, #44]	; (80304 <digitalWrite+0x9c>)
   802d8:	4798      	blx	r3
   802da:	bd08      	pop	{r3, pc}
			*p_PIOB_PER |= (1<<26);
   802dc:	4906      	ldr	r1, [pc, #24]	; (802f8 <digitalWrite+0x90>)
   802de:	680b      	ldr	r3, [r1, #0]
   802e0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
			*p_PIOB_CODR ^= (1<<26); /*Set pin number to high */
   802e4:	4808      	ldr	r0, [pc, #32]	; (80308 <digitalWrite+0xa0>)
   802e6:	6802      	ldr	r2, [r0, #0]
   802e8:	f082 6280 	eor.w	r2, r2, #67108864	; 0x4000000
   802ec:	6002      	str	r2, [r0, #0]
			*p_PIOB_PER ^= (1<<26);
   802ee:	f083 6380 	eor.w	r3, r3, #67108864	; 0x4000000
   802f2:	600b      	str	r3, [r1, #0]
	}
	else
	{
		/* Something is wrong */
	}
}
   802f4:	e7c0      	b.n	80278 <digitalWrite+0x10>
   802f6:	bf00      	nop
   802f8:	400e1000 	.word	0x400e1000
   802fc:	400e1030 	.word	0x400e1030
   80300:	00083be0 	.word	0x00083be0
   80304:	00080db1 	.word	0x00080db1
   80308:	400e1034 	.word	0x400e1034
   8030c:	00083be8 	.word	0x00083be8

00080310 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   80310:	3801      	subs	r0, #1
   80312:	2802      	cmp	r0, #2
   80314:	d815      	bhi.n	80342 <_write+0x32>
{
   80316:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8031a:	460e      	mov	r6, r1
   8031c:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
   8031e:	b19a      	cbz	r2, 80348 <_write+0x38>
   80320:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
   80322:	f8df 8038 	ldr.w	r8, [pc, #56]	; 8035c <_write+0x4c>
   80326:	4f0c      	ldr	r7, [pc, #48]	; (80358 <_write+0x48>)
   80328:	f8d8 0000 	ldr.w	r0, [r8]
   8032c:	f815 1b01 	ldrb.w	r1, [r5], #1
   80330:	683b      	ldr	r3, [r7, #0]
   80332:	4798      	blx	r3
   80334:	2800      	cmp	r0, #0
   80336:	db0a      	blt.n	8034e <_write+0x3e>
   80338:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
   8033a:	3c01      	subs	r4, #1
   8033c:	d1f4      	bne.n	80328 <_write+0x18>
   8033e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
   80342:	f04f 30ff 	mov.w	r0, #4294967295
   80346:	4770      	bx	lr
	for (; len != 0; --len) {
   80348:	4610      	mov	r0, r2
   8034a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
   8034e:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
   80352:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80356:	bf00      	nop
   80358:	20070c48 	.word	0x20070c48
   8035c:	20070c4c 	.word	0x20070c4c

00080360 <usart_serial_read_packet>:
 *
 */
status_code_t usart_serial_read_packet(usart_if usart, uint8_t *data,
		size_t len)
{
	while (len) {
   80360:	2a00      	cmp	r2, #0
   80362:	d051      	beq.n	80408 <usart_serial_read_packet+0xa8>
{
   80364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80368:	b083      	sub	sp, #12
   8036a:	4605      	mov	r5, r0
   8036c:	460c      	mov	r4, r1
   8036e:	4692      	mov	sl, r2
   80370:	448a      	add	sl, r1

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   80372:	4f26      	ldr	r7, [pc, #152]	; (8040c <usart_serial_read_packet+0xac>)
		while (uart_read((Uart*)p_usart, data));
   80374:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 80420 <usart_serial_read_packet+0xc0>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   80378:	4e25      	ldr	r6, [pc, #148]	; (80410 <usart_serial_read_packet+0xb0>)
   8037a:	e01d      	b.n	803b8 <usart_serial_read_packet+0x58>
		while (uart_read((Uart*)p_usart, data));
   8037c:	4621      	mov	r1, r4
   8037e:	4638      	mov	r0, r7
   80380:	47c8      	blx	r9
   80382:	2800      	cmp	r0, #0
   80384:	d1fa      	bne.n	8037c <usart_serial_read_packet+0x1c>
   80386:	e021      	b.n	803cc <usart_serial_read_packet+0x6c>
		while (usart_read(p_usart, &val));
   80388:	469b      	mov	fp, r3
   8038a:	f8df 8098 	ldr.w	r8, [pc, #152]	; 80424 <usart_serial_read_packet+0xc4>
   8038e:	a901      	add	r1, sp, #4
   80390:	4658      	mov	r0, fp
   80392:	47c0      	blx	r8
   80394:	2800      	cmp	r0, #0
   80396:	d1fa      	bne.n	8038e <usart_serial_read_packet+0x2e>
		*data = (uint8_t)(val & 0xFF);
   80398:	9b01      	ldr	r3, [sp, #4]
   8039a:	7023      	strb	r3, [r4, #0]
   8039c:	e019      	b.n	803d2 <usart_serial_read_packet+0x72>
		while (usart_read(p_usart, &val));
   8039e:	469b      	mov	fp, r3
   803a0:	f8df 8080 	ldr.w	r8, [pc, #128]	; 80424 <usart_serial_read_packet+0xc4>
   803a4:	a901      	add	r1, sp, #4
   803a6:	4658      	mov	r0, fp
   803a8:	47c0      	blx	r8
   803aa:	2800      	cmp	r0, #0
   803ac:	d1fa      	bne.n	803a4 <usart_serial_read_packet+0x44>
		*data = (uint8_t)(val & 0xFF);
   803ae:	9b01      	ldr	r3, [sp, #4]
   803b0:	7023      	strb	r3, [r4, #0]
		usart_serial_getchar(usart, data);
		len--;
		data++;
   803b2:	3401      	adds	r4, #1
	while (len) {
   803b4:	4554      	cmp	r4, sl
   803b6:	d023      	beq.n	80400 <usart_serial_read_packet+0xa0>
	uint32_t val = 0;
   803b8:	2300      	movs	r3, #0
   803ba:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
   803bc:	42bd      	cmp	r5, r7
   803be:	d0dd      	beq.n	8037c <usart_serial_read_packet+0x1c>
	if (USART0 == p_usart) {
   803c0:	4b14      	ldr	r3, [pc, #80]	; (80414 <usart_serial_read_packet+0xb4>)
   803c2:	429d      	cmp	r5, r3
   803c4:	d0e0      	beq.n	80388 <usart_serial_read_packet+0x28>
	if (USART1 == p_usart) {
   803c6:	4b14      	ldr	r3, [pc, #80]	; (80418 <usart_serial_read_packet+0xb8>)
   803c8:	429d      	cmp	r5, r3
   803ca:	d0e8      	beq.n	8039e <usart_serial_read_packet+0x3e>
	if (USART2 == p_usart) {
   803cc:	4b13      	ldr	r3, [pc, #76]	; (8041c <usart_serial_read_packet+0xbc>)
   803ce:	429d      	cmp	r5, r3
   803d0:	d00b      	beq.n	803ea <usart_serial_read_packet+0x8a>
	if (USART3 == p_usart) {
   803d2:	42b5      	cmp	r5, r6
   803d4:	d1ed      	bne.n	803b2 <usart_serial_read_packet+0x52>
		while (usart_read(p_usart, &val));
   803d6:	f8df 804c 	ldr.w	r8, [pc, #76]	; 80424 <usart_serial_read_packet+0xc4>
   803da:	a901      	add	r1, sp, #4
   803dc:	4630      	mov	r0, r6
   803de:	47c0      	blx	r8
   803e0:	2800      	cmp	r0, #0
   803e2:	d1fa      	bne.n	803da <usart_serial_read_packet+0x7a>
		*data = (uint8_t)(val & 0xFF);
   803e4:	9b01      	ldr	r3, [sp, #4]
   803e6:	7023      	strb	r3, [r4, #0]
   803e8:	e7e3      	b.n	803b2 <usart_serial_read_packet+0x52>
		while (usart_read(p_usart, &val));
   803ea:	469b      	mov	fp, r3
   803ec:	f8df 8034 	ldr.w	r8, [pc, #52]	; 80424 <usart_serial_read_packet+0xc4>
   803f0:	a901      	add	r1, sp, #4
   803f2:	4658      	mov	r0, fp
   803f4:	47c0      	blx	r8
   803f6:	2800      	cmp	r0, #0
   803f8:	d1fa      	bne.n	803f0 <usart_serial_read_packet+0x90>
		*data = (uint8_t)(val & 0xFF);
   803fa:	9b01      	ldr	r3, [sp, #4]
   803fc:	7023      	strb	r3, [r4, #0]
   803fe:	e7d8      	b.n	803b2 <usart_serial_read_packet+0x52>
	}
	return STATUS_OK;
}
   80400:	2000      	movs	r0, #0
   80402:	b003      	add	sp, #12
   80404:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80408:	2000      	movs	r0, #0
   8040a:	4770      	bx	lr
   8040c:	400e0800 	.word	0x400e0800
   80410:	400a4000 	.word	0x400a4000
   80414:	40098000 	.word	0x40098000
   80418:	4009c000 	.word	0x4009c000
   8041c:	400a0000 	.word	0x400a0000
   80420:	0008046f 	.word	0x0008046f
   80424:	000801b1 	.word	0x000801b1

00080428 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   80428:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   8042a:	23ac      	movs	r3, #172	; 0xac
   8042c:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   8042e:	680b      	ldr	r3, [r1, #0]
   80430:	684a      	ldr	r2, [r1, #4]
   80432:	fbb3 f3f2 	udiv	r3, r3, r2
   80436:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   80438:	1e5c      	subs	r4, r3, #1
   8043a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   8043e:	4294      	cmp	r4, r2
   80440:	d80b      	bhi.n	8045a <uart_init+0x32>
		return 1;

	p_uart->UART_BRGR = cd;
   80442:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   80444:	688b      	ldr	r3, [r1, #8]
   80446:	6043      	str	r3, [r0, #4]

	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   80448:	f240 2302 	movw	r3, #514	; 0x202
   8044c:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   80450:	2350      	movs	r3, #80	; 0x50
   80452:	6003      	str	r3, [r0, #0]

	return 0;
   80454:	2000      	movs	r0, #0
}
   80456:	bc10      	pop	{r4}
   80458:	4770      	bx	lr
		return 1;
   8045a:	2001      	movs	r0, #1
   8045c:	e7fb      	b.n	80456 <uart_init+0x2e>

0008045e <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   8045e:	6943      	ldr	r3, [r0, #20]
   80460:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
   80464:	bf1a      	itte	ne
   80466:	61c1      	strne	r1, [r0, #28]
	return 0;
   80468:	2000      	movne	r0, #0
		return 1;
   8046a:	2001      	moveq	r0, #1
}
   8046c:	4770      	bx	lr

0008046e <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   8046e:	6943      	ldr	r3, [r0, #20]
   80470:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   80474:	bf1d      	ittte	ne
   80476:	6983      	ldrne	r3, [r0, #24]
   80478:	700b      	strbne	r3, [r1, #0]
	return 0;
   8047a:	2000      	movne	r0, #0
		return 1;
   8047c:	2001      	moveq	r0, #1
}
   8047e:	4770      	bx	lr

00080480 <usart_serial_getchar>:
{
   80480:	b5f0      	push	{r4, r5, r6, r7, lr}
   80482:	b083      	sub	sp, #12
   80484:	4604      	mov	r4, r0
   80486:	460d      	mov	r5, r1
	uint32_t val = 0;
   80488:	2300      	movs	r3, #0
   8048a:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
   8048c:	4b20      	ldr	r3, [pc, #128]	; (80510 <usart_serial_getchar+0x90>)
   8048e:	4298      	cmp	r0, r3
   80490:	d00d      	beq.n	804ae <usart_serial_getchar+0x2e>
	if (USART0 == p_usart) {
   80492:	4b20      	ldr	r3, [pc, #128]	; (80514 <usart_serial_getchar+0x94>)
   80494:	4298      	cmp	r0, r3
   80496:	d012      	beq.n	804be <usart_serial_getchar+0x3e>
	if (USART1 == p_usart) {
   80498:	4b1f      	ldr	r3, [pc, #124]	; (80518 <usart_serial_getchar+0x98>)
   8049a:	4298      	cmp	r0, r3
   8049c:	d019      	beq.n	804d2 <usart_serial_getchar+0x52>
	if (USART2 == p_usart) {
   8049e:	4b1f      	ldr	r3, [pc, #124]	; (8051c <usart_serial_getchar+0x9c>)
   804a0:	429c      	cmp	r4, r3
   804a2:	d020      	beq.n	804e6 <usart_serial_getchar+0x66>
	if (USART3 == p_usart) {
   804a4:	4b1e      	ldr	r3, [pc, #120]	; (80520 <usart_serial_getchar+0xa0>)
   804a6:	429c      	cmp	r4, r3
   804a8:	d027      	beq.n	804fa <usart_serial_getchar+0x7a>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   804aa:	b003      	add	sp, #12
   804ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
   804ae:	461f      	mov	r7, r3
   804b0:	4e1c      	ldr	r6, [pc, #112]	; (80524 <usart_serial_getchar+0xa4>)
   804b2:	4629      	mov	r1, r5
   804b4:	4638      	mov	r0, r7
   804b6:	47b0      	blx	r6
   804b8:	2800      	cmp	r0, #0
   804ba:	d1fa      	bne.n	804b2 <usart_serial_getchar+0x32>
   804bc:	e7ef      	b.n	8049e <usart_serial_getchar+0x1e>
		while (usart_read(p_usart, &val));
   804be:	461f      	mov	r7, r3
   804c0:	4e19      	ldr	r6, [pc, #100]	; (80528 <usart_serial_getchar+0xa8>)
   804c2:	a901      	add	r1, sp, #4
   804c4:	4638      	mov	r0, r7
   804c6:	47b0      	blx	r6
   804c8:	2800      	cmp	r0, #0
   804ca:	d1fa      	bne.n	804c2 <usart_serial_getchar+0x42>
		*data = (uint8_t)(val & 0xFF);
   804cc:	9b01      	ldr	r3, [sp, #4]
   804ce:	702b      	strb	r3, [r5, #0]
   804d0:	e7e8      	b.n	804a4 <usart_serial_getchar+0x24>
		while (usart_read(p_usart, &val));
   804d2:	461e      	mov	r6, r3
   804d4:	4c14      	ldr	r4, [pc, #80]	; (80528 <usart_serial_getchar+0xa8>)
   804d6:	a901      	add	r1, sp, #4
   804d8:	4630      	mov	r0, r6
   804da:	47a0      	blx	r4
   804dc:	2800      	cmp	r0, #0
   804de:	d1fa      	bne.n	804d6 <usart_serial_getchar+0x56>
		*data = (uint8_t)(val & 0xFF);
   804e0:	9b01      	ldr	r3, [sp, #4]
   804e2:	702b      	strb	r3, [r5, #0]
   804e4:	e7e1      	b.n	804aa <usart_serial_getchar+0x2a>
		while (usart_read(p_usart, &val));
   804e6:	461e      	mov	r6, r3
   804e8:	4c0f      	ldr	r4, [pc, #60]	; (80528 <usart_serial_getchar+0xa8>)
   804ea:	a901      	add	r1, sp, #4
   804ec:	4630      	mov	r0, r6
   804ee:	47a0      	blx	r4
   804f0:	2800      	cmp	r0, #0
   804f2:	d1fa      	bne.n	804ea <usart_serial_getchar+0x6a>
		*data = (uint8_t)(val & 0xFF);
   804f4:	9b01      	ldr	r3, [sp, #4]
   804f6:	702b      	strb	r3, [r5, #0]
   804f8:	e7d7      	b.n	804aa <usart_serial_getchar+0x2a>
		while (usart_read(p_usart, &val));
   804fa:	461e      	mov	r6, r3
   804fc:	4c0a      	ldr	r4, [pc, #40]	; (80528 <usart_serial_getchar+0xa8>)
   804fe:	a901      	add	r1, sp, #4
   80500:	4630      	mov	r0, r6
   80502:	47a0      	blx	r4
   80504:	2800      	cmp	r0, #0
   80506:	d1fa      	bne.n	804fe <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
   80508:	9b01      	ldr	r3, [sp, #4]
   8050a:	702b      	strb	r3, [r5, #0]
}
   8050c:	e7cd      	b.n	804aa <usart_serial_getchar+0x2a>
   8050e:	bf00      	nop
   80510:	400e0800 	.word	0x400e0800
   80514:	40098000 	.word	0x40098000
   80518:	4009c000 	.word	0x4009c000
   8051c:	400a0000 	.word	0x400a0000
   80520:	400a4000 	.word	0x400a4000
   80524:	0008046f 	.word	0x0008046f
   80528:	000801b1 	.word	0x000801b1

0008052c <usart_serial_putchar>:
{
   8052c:	b570      	push	{r4, r5, r6, lr}
   8052e:	460c      	mov	r4, r1
	if (UART == (Uart*)p_usart) {
   80530:	4b1e      	ldr	r3, [pc, #120]	; (805ac <usart_serial_putchar+0x80>)
   80532:	4298      	cmp	r0, r3
   80534:	d00d      	beq.n	80552 <usart_serial_putchar+0x26>
	if (USART0 == p_usart) {
   80536:	4b1e      	ldr	r3, [pc, #120]	; (805b0 <usart_serial_putchar+0x84>)
   80538:	4298      	cmp	r0, r3
   8053a:	d013      	beq.n	80564 <usart_serial_putchar+0x38>
	if (USART1 == p_usart) {
   8053c:	4b1d      	ldr	r3, [pc, #116]	; (805b4 <usart_serial_putchar+0x88>)
   8053e:	4298      	cmp	r0, r3
   80540:	d019      	beq.n	80576 <usart_serial_putchar+0x4a>
	if (USART2 == p_usart) {
   80542:	4b1d      	ldr	r3, [pc, #116]	; (805b8 <usart_serial_putchar+0x8c>)
   80544:	4298      	cmp	r0, r3
   80546:	d01f      	beq.n	80588 <usart_serial_putchar+0x5c>
	if (USART3 == p_usart) {
   80548:	4b1c      	ldr	r3, [pc, #112]	; (805bc <usart_serial_putchar+0x90>)
   8054a:	4298      	cmp	r0, r3
   8054c:	d025      	beq.n	8059a <usart_serial_putchar+0x6e>
	return 0;
   8054e:	2000      	movs	r0, #0
}
   80550:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
   80552:	461e      	mov	r6, r3
   80554:	4d1a      	ldr	r5, [pc, #104]	; (805c0 <usart_serial_putchar+0x94>)
   80556:	4621      	mov	r1, r4
   80558:	4630      	mov	r0, r6
   8055a:	47a8      	blx	r5
   8055c:	2800      	cmp	r0, #0
   8055e:	d1fa      	bne.n	80556 <usart_serial_putchar+0x2a>
		return 1;
   80560:	2001      	movs	r0, #1
   80562:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   80564:	461e      	mov	r6, r3
   80566:	4d17      	ldr	r5, [pc, #92]	; (805c4 <usart_serial_putchar+0x98>)
   80568:	4621      	mov	r1, r4
   8056a:	4630      	mov	r0, r6
   8056c:	47a8      	blx	r5
   8056e:	2800      	cmp	r0, #0
   80570:	d1fa      	bne.n	80568 <usart_serial_putchar+0x3c>
		return 1;
   80572:	2001      	movs	r0, #1
   80574:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   80576:	461e      	mov	r6, r3
   80578:	4d12      	ldr	r5, [pc, #72]	; (805c4 <usart_serial_putchar+0x98>)
   8057a:	4621      	mov	r1, r4
   8057c:	4630      	mov	r0, r6
   8057e:	47a8      	blx	r5
   80580:	2800      	cmp	r0, #0
   80582:	d1fa      	bne.n	8057a <usart_serial_putchar+0x4e>
		return 1;
   80584:	2001      	movs	r0, #1
   80586:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   80588:	461e      	mov	r6, r3
   8058a:	4d0e      	ldr	r5, [pc, #56]	; (805c4 <usart_serial_putchar+0x98>)
   8058c:	4621      	mov	r1, r4
   8058e:	4630      	mov	r0, r6
   80590:	47a8      	blx	r5
   80592:	2800      	cmp	r0, #0
   80594:	d1fa      	bne.n	8058c <usart_serial_putchar+0x60>
		return 1;
   80596:	2001      	movs	r0, #1
   80598:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   8059a:	461e      	mov	r6, r3
   8059c:	4d09      	ldr	r5, [pc, #36]	; (805c4 <usart_serial_putchar+0x98>)
   8059e:	4621      	mov	r1, r4
   805a0:	4630      	mov	r0, r6
   805a2:	47a8      	blx	r5
   805a4:	2800      	cmp	r0, #0
   805a6:	d1fa      	bne.n	8059e <usart_serial_putchar+0x72>
		return 1;
   805a8:	2001      	movs	r0, #1
   805aa:	bd70      	pop	{r4, r5, r6, pc}
   805ac:	400e0800 	.word	0x400e0800
   805b0:	40098000 	.word	0x40098000
   805b4:	4009c000 	.word	0x4009c000
   805b8:	400a0000 	.word	0x400a0000
   805bc:	400a4000 	.word	0x400a4000
   805c0:	0008045f 	.word	0x0008045f
   805c4:	0008019d 	.word	0x0008019d

000805c8 <main>:
	printf("=============\n");
}


int main(void)
{
   805c8:	b570      	push	{r4, r5, r6, lr}
   805ca:	b084      	sub	sp, #16
	/* Insert system clock initialization code here (sysclk_init()). */
	sysclk_init();
   805cc:	4b1e      	ldr	r3, [pc, #120]	; (80648 <main+0x80>)
   805ce:	4798      	blx	r3
	board_init();
   805d0:	4b1e      	ldr	r3, [pc, #120]	; (8064c <main+0x84>)
   805d2:	4798      	blx	r3
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   805d4:	2008      	movs	r0, #8
   805d6:	4d1e      	ldr	r5, [pc, #120]	; (80650 <main+0x88>)
   805d8:	47a8      	blx	r5
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   805da:	4c1e      	ldr	r4, [pc, #120]	; (80654 <main+0x8c>)
   805dc:	4b1e      	ldr	r3, [pc, #120]	; (80658 <main+0x90>)
   805de:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   805e0:	4a1e      	ldr	r2, [pc, #120]	; (8065c <main+0x94>)
   805e2:	4b1f      	ldr	r3, [pc, #124]	; (80660 <main+0x98>)
   805e4:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   805e6:	4a1f      	ldr	r2, [pc, #124]	; (80664 <main+0x9c>)
   805e8:	4b1f      	ldr	r3, [pc, #124]	; (80668 <main+0xa0>)
   805ea:	601a      	str	r2, [r3, #0]
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   805ec:	4b1f      	ldr	r3, [pc, #124]	; (8066c <main+0xa4>)
   805ee:	9301      	str	r3, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
   805f0:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   805f4:	9302      	str	r3, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
   805f6:	f44f 6300 	mov.w	r3, #2048	; 0x800
   805fa:	9303      	str	r3, [sp, #12]
   805fc:	2008      	movs	r0, #8
   805fe:	47a8      	blx	r5
		uart_init((Uart*)p_usart, &uart_settings);
   80600:	a901      	add	r1, sp, #4
   80602:	4620      	mov	r0, r4
   80604:	4b1a      	ldr	r3, [pc, #104]	; (80670 <main+0xa8>)
   80606:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   80608:	4d1a      	ldr	r5, [pc, #104]	; (80674 <main+0xac>)
   8060a:	682b      	ldr	r3, [r5, #0]
   8060c:	2100      	movs	r1, #0
   8060e:	6898      	ldr	r0, [r3, #8]
   80610:	4c19      	ldr	r4, [pc, #100]	; (80678 <main+0xb0>)
   80612:	47a0      	blx	r4
	setbuf(stdin, NULL);
   80614:	682b      	ldr	r3, [r5, #0]
   80616:	2100      	movs	r1, #0
   80618:	6858      	ldr	r0, [r3, #4]
   8061a:	47a0      	blx	r4
	printf("Console ready\n");
   8061c:	4817      	ldr	r0, [pc, #92]	; (8067c <main+0xb4>)
   8061e:	4c18      	ldr	r4, [pc, #96]	; (80680 <main+0xb8>)
   80620:	47a0      	blx	r4
	printf("=============\n");
   80622:	4818      	ldr	r0, [pc, #96]	; (80684 <main+0xbc>)
   80624:	47a0      	blx	r4
	
	
	/*ioport_init();
	ioport_set_pin_dir(PIO_PB27_IDX, IOPORT_DIR_OUTPUT);*/
	
	pinMode(13, OUTPUT);
   80626:	2102      	movs	r1, #2
   80628:	200d      	movs	r0, #13
   8062a:	4b17      	ldr	r3, [pc, #92]	; (80688 <main+0xc0>)
   8062c:	4798      	blx	r3
	{
		/*ioport_set_pin_level(PIO_PB27_IDX, HIGH);
		ioport_set_pin_level(PIO_PB27_IDX, LOW);
		ioport_set_pin_level(PIO_PB27_IDX, HIGH);*/
		
		digitalWrite(13, HIGH);
   8062e:	2601      	movs	r6, #1
   80630:	250d      	movs	r5, #13
   80632:	4c16      	ldr	r4, [pc, #88]	; (8068c <main+0xc4>)
   80634:	4631      	mov	r1, r6
   80636:	4628      	mov	r0, r5
   80638:	47a0      	blx	r4
		digitalWrite(13, LOW);
   8063a:	2100      	movs	r1, #0
   8063c:	4628      	mov	r0, r5
   8063e:	47a0      	blx	r4
		digitalWrite(13, HIGH);
   80640:	4631      	mov	r1, r6
   80642:	4628      	mov	r0, r5
   80644:	47a0      	blx	r4
   80646:	e7f5      	b.n	80634 <main+0x6c>
   80648:	00080691 	.word	0x00080691
   8064c:	000806f5 	.word	0x000806f5
   80650:	00080b09 	.word	0x00080b09
   80654:	400e0800 	.word	0x400e0800
   80658:	20070c4c 	.word	0x20070c4c
   8065c:	0008052d 	.word	0x0008052d
   80660:	20070c48 	.word	0x20070c48
   80664:	00080481 	.word	0x00080481
   80668:	20070c44 	.word	0x20070c44
   8066c:	0501bd00 	.word	0x0501bd00
   80670:	00080429 	.word	0x00080429
   80674:	20070134 	.word	0x20070134
   80678:	00080e75 	.word	0x00080e75
   8067c:	00083bf0 	.word	0x00083bf0
   80680:	00080db1 	.word	0x00080db1
   80684:	00083c00 	.word	0x00083c00
   80688:	00080229 	.word	0x00080229
   8068c:	00080269 	.word	0x00080269

00080690 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   80690:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   80692:	480e      	ldr	r0, [pc, #56]	; (806cc <sysclk_init+0x3c>)
   80694:	4b0e      	ldr	r3, [pc, #56]	; (806d0 <sysclk_init+0x40>)
   80696:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   80698:	213e      	movs	r1, #62	; 0x3e
   8069a:	2000      	movs	r0, #0
   8069c:	4b0d      	ldr	r3, [pc, #52]	; (806d4 <sysclk_init+0x44>)
   8069e:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   806a0:	4c0d      	ldr	r4, [pc, #52]	; (806d8 <sysclk_init+0x48>)
   806a2:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   806a4:	2800      	cmp	r0, #0
   806a6:	d0fc      	beq.n	806a2 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   806a8:	4b0c      	ldr	r3, [pc, #48]	; (806dc <sysclk_init+0x4c>)
   806aa:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   806ac:	4a0c      	ldr	r2, [pc, #48]	; (806e0 <sysclk_init+0x50>)
   806ae:	4b0d      	ldr	r3, [pc, #52]	; (806e4 <sysclk_init+0x54>)
   806b0:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   806b2:	4c0d      	ldr	r4, [pc, #52]	; (806e8 <sysclk_init+0x58>)
   806b4:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   806b6:	2800      	cmp	r0, #0
   806b8:	d0fc      	beq.n	806b4 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   806ba:	2010      	movs	r0, #16
   806bc:	4b0b      	ldr	r3, [pc, #44]	; (806ec <sysclk_init+0x5c>)
   806be:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   806c0:	4b0b      	ldr	r3, [pc, #44]	; (806f0 <sysclk_init+0x60>)
   806c2:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   806c4:	4801      	ldr	r0, [pc, #4]	; (806cc <sysclk_init+0x3c>)
   806c6:	4b02      	ldr	r3, [pc, #8]	; (806d0 <sysclk_init+0x40>)
   806c8:	4798      	blx	r3
   806ca:	bd10      	pop	{r4, pc}
   806cc:	0501bd00 	.word	0x0501bd00
   806d0:	200700a5 	.word	0x200700a5
   806d4:	00080a85 	.word	0x00080a85
   806d8:	00080ad9 	.word	0x00080ad9
   806dc:	00080ae9 	.word	0x00080ae9
   806e0:	200d3f01 	.word	0x200d3f01
   806e4:	400e0600 	.word	0x400e0600
   806e8:	00080af9 	.word	0x00080af9
   806ec:	00080a21 	.word	0x00080a21
   806f0:	00080bf9 	.word	0x00080bf9

000806f4 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   806f4:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   806f6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   806fa:	4b16      	ldr	r3, [pc, #88]	; (80754 <board_init+0x60>)
   806fc:	605a      	str	r2, [r3, #4]
   806fe:	200b      	movs	r0, #11
   80700:	4c15      	ldr	r4, [pc, #84]	; (80758 <board_init+0x64>)
   80702:	47a0      	blx	r4
   80704:	200c      	movs	r0, #12
   80706:	47a0      	blx	r4
   80708:	200d      	movs	r0, #13
   8070a:	47a0      	blx	r4
   8070c:	200e      	movs	r0, #14
   8070e:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   80710:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80714:	203b      	movs	r0, #59	; 0x3b
   80716:	4c11      	ldr	r4, [pc, #68]	; (8075c <board_init+0x68>)
   80718:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   8071a:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8071e:	2055      	movs	r0, #85	; 0x55
   80720:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   80722:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80726:	2056      	movs	r0, #86	; 0x56
   80728:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   8072a:	490d      	ldr	r1, [pc, #52]	; (80760 <board_init+0x6c>)
   8072c:	2068      	movs	r0, #104	; 0x68
   8072e:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   80730:	490c      	ldr	r1, [pc, #48]	; (80764 <board_init+0x70>)
   80732:	205c      	movs	r0, #92	; 0x5c
   80734:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   80736:	4a0c      	ldr	r2, [pc, #48]	; (80768 <board_init+0x74>)
   80738:	f44f 7140 	mov.w	r1, #768	; 0x300
   8073c:	480b      	ldr	r0, [pc, #44]	; (8076c <board_init+0x78>)
   8073e:	4b0c      	ldr	r3, [pc, #48]	; (80770 <board_init+0x7c>)
   80740:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
#endif

#ifdef CONF_BOARD_USB_PORT
	/* Configure USB_ID (UOTGID) pin */
	gpio_configure_pin(USB_ID_GPIO, USB_ID_FLAGS);
   80742:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80746:	202b      	movs	r0, #43	; 0x2b
   80748:	47a0      	blx	r4
	/* Configure USB_VBOF (UOTGVBOF) pin */
	gpio_configure_pin(USB_VBOF_GPIO, USB_VBOF_FLAGS);
   8074a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8074e:	202a      	movs	r0, #42	; 0x2a
   80750:	47a0      	blx	r4
   80752:	bd10      	pop	{r4, pc}
   80754:	400e1a50 	.word	0x400e1a50
   80758:	00080b09 	.word	0x00080b09
   8075c:	00080815 	.word	0x00080815
   80760:	28000079 	.word	0x28000079
   80764:	28000001 	.word	0x28000001
   80768:	08000001 	.word	0x08000001
   8076c:	400e0e00 	.word	0x400e0e00
   80770:	000808e5 	.word	0x000808e5

00080774 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   80774:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   80776:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   8077a:	d016      	beq.n	807aa <pio_set_peripheral+0x36>
   8077c:	d80b      	bhi.n	80796 <pio_set_peripheral+0x22>
   8077e:	b149      	cbz	r1, 80794 <pio_set_peripheral+0x20>
   80780:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   80784:	d105      	bne.n	80792 <pio_set_peripheral+0x1e>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   80786:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   80788:	6f01      	ldr	r1, [r0, #112]	; 0x70
   8078a:	400b      	ands	r3, r1
   8078c:	ea23 0302 	bic.w	r3, r3, r2
   80790:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   80792:	6042      	str	r2, [r0, #4]
   80794:	4770      	bx	lr
	switch (ul_type) {
   80796:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   8079a:	d0fb      	beq.n	80794 <pio_set_peripheral+0x20>
   8079c:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   807a0:	d0f8      	beq.n	80794 <pio_set_peripheral+0x20>
   807a2:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   807a6:	d1f4      	bne.n	80792 <pio_set_peripheral+0x1e>
   807a8:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABSR;
   807aa:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   807ac:	4313      	orrs	r3, r2
   807ae:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   807b0:	e7ef      	b.n	80792 <pio_set_peripheral+0x1e>

000807b2 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   807b2:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   807b4:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   807b8:	bf14      	ite	ne
   807ba:	6641      	strne	r1, [r0, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   807bc:	6601      	streq	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   807be:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   807c2:	bf14      	ite	ne
   807c4:	6201      	strne	r1, [r0, #32]
		p_pio->PIO_IFDR = ul_mask;
   807c6:	6241      	streq	r1, [r0, #36]	; 0x24
	if (ul_attribute & PIO_DEGLITCH) {
   807c8:	f012 0f02 	tst.w	r2, #2
   807cc:	d107      	bne.n	807de <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
   807ce:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   807d2:	bf18      	it	ne
   807d4:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
	p_pio->PIO_ODR = ul_mask;
   807d8:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   807da:	6001      	str	r1, [r0, #0]
   807dc:	4770      	bx	lr
		p_pio->PIO_SCIFSR = ul_mask;
   807de:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   807e2:	e7f9      	b.n	807d8 <pio_set_input+0x26>

000807e4 <pio_set_output>:
{
   807e4:	b410      	push	{r4}
   807e6:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
   807e8:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   807ea:	b944      	cbnz	r4, 807fe <pio_set_output+0x1a>
		p_pio->PIO_PUDR = ul_mask;
   807ec:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
   807ee:	b143      	cbz	r3, 80802 <pio_set_output+0x1e>
		p_pio->PIO_MDER = ul_mask;
   807f0:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
   807f2:	b942      	cbnz	r2, 80806 <pio_set_output+0x22>
		p_pio->PIO_CODR = ul_mask;
   807f4:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
   807f6:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   807f8:	6001      	str	r1, [r0, #0]
}
   807fa:	bc10      	pop	{r4}
   807fc:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
   807fe:	6641      	str	r1, [r0, #100]	; 0x64
   80800:	e7f5      	b.n	807ee <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
   80802:	6541      	str	r1, [r0, #84]	; 0x54
   80804:	e7f5      	b.n	807f2 <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
   80806:	6301      	str	r1, [r0, #48]	; 0x30
   80808:	e7f5      	b.n	807f6 <pio_set_output+0x12>

0008080a <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   8080a:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   8080c:	4770      	bx	lr

0008080e <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   8080e:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   80810:	4770      	bx	lr
	...

00080814 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   80814:	b570      	push	{r4, r5, r6, lr}
   80816:	b082      	sub	sp, #8
   80818:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   8081a:	0943      	lsrs	r3, r0, #5
   8081c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   80820:	f203 7307 	addw	r3, r3, #1799	; 0x707
   80824:	025c      	lsls	r4, r3, #9
	switch (ul_flags & PIO_TYPE_Msk) {
   80826:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
   8082a:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   8082e:	d031      	beq.n	80894 <pio_configure_pin+0x80>
   80830:	d816      	bhi.n	80860 <pio_configure_pin+0x4c>
   80832:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   80836:	d01b      	beq.n	80870 <pio_configure_pin+0x5c>
   80838:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   8083c:	d116      	bne.n	8086c <pio_configure_pin+0x58>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   8083e:	f000 001f 	and.w	r0, r0, #31
   80842:	2601      	movs	r6, #1
   80844:	4086      	lsls	r6, r0
   80846:	4632      	mov	r2, r6
   80848:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   8084c:	4620      	mov	r0, r4
   8084e:	4b22      	ldr	r3, [pc, #136]	; (808d8 <pio_configure_pin+0xc4>)
   80850:	4798      	blx	r3
	if (ul_pull_up_enable) {
   80852:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80856:	bf14      	ite	ne
   80858:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   8085a:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
   8085c:	2001      	movs	r0, #1
   8085e:	e017      	b.n	80890 <pio_configure_pin+0x7c>
	switch (ul_flags & PIO_TYPE_Msk) {
   80860:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   80864:	d021      	beq.n	808aa <pio_configure_pin+0x96>
   80866:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   8086a:	d01e      	beq.n	808aa <pio_configure_pin+0x96>
		return 0;
   8086c:	2000      	movs	r0, #0
   8086e:	e00f      	b.n	80890 <pio_configure_pin+0x7c>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   80870:	f000 001f 	and.w	r0, r0, #31
   80874:	2601      	movs	r6, #1
   80876:	4086      	lsls	r6, r0
   80878:	4632      	mov	r2, r6
   8087a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8087e:	4620      	mov	r0, r4
   80880:	4b15      	ldr	r3, [pc, #84]	; (808d8 <pio_configure_pin+0xc4>)
   80882:	4798      	blx	r3
	if (ul_pull_up_enable) {
   80884:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80888:	bf14      	ite	ne
   8088a:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   8088c:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
   8088e:	2001      	movs	r0, #1
}
   80890:	b002      	add	sp, #8
   80892:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   80894:	f000 011f 	and.w	r1, r0, #31
   80898:	2601      	movs	r6, #1
   8089a:	462a      	mov	r2, r5
   8089c:	fa06 f101 	lsl.w	r1, r6, r1
   808a0:	4620      	mov	r0, r4
   808a2:	4b0e      	ldr	r3, [pc, #56]	; (808dc <pio_configure_pin+0xc8>)
   808a4:	4798      	blx	r3
	return 1;
   808a6:	4630      	mov	r0, r6
		break;
   808a8:	e7f2      	b.n	80890 <pio_configure_pin+0x7c>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   808aa:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   808ae:	f000 011f 	and.w	r1, r0, #31
   808b2:	2601      	movs	r6, #1
   808b4:	ea05 0306 	and.w	r3, r5, r6
   808b8:	9300      	str	r3, [sp, #0]
   808ba:	f3c5 0380 	ubfx	r3, r5, #2, #1
   808be:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   808c2:	bf14      	ite	ne
   808c4:	2200      	movne	r2, #0
   808c6:	2201      	moveq	r2, #1
   808c8:	fa06 f101 	lsl.w	r1, r6, r1
   808cc:	4620      	mov	r0, r4
   808ce:	4c04      	ldr	r4, [pc, #16]	; (808e0 <pio_configure_pin+0xcc>)
   808d0:	47a0      	blx	r4
	return 1;
   808d2:	4630      	mov	r0, r6
		break;
   808d4:	e7dc      	b.n	80890 <pio_configure_pin+0x7c>
   808d6:	bf00      	nop
   808d8:	00080775 	.word	0x00080775
   808dc:	000807b3 	.word	0x000807b3
   808e0:	000807e5 	.word	0x000807e5

000808e4 <pio_configure_pin_group>:
{
   808e4:	b570      	push	{r4, r5, r6, lr}
   808e6:	b082      	sub	sp, #8
   808e8:	4605      	mov	r5, r0
   808ea:	460e      	mov	r6, r1
   808ec:	4614      	mov	r4, r2
	switch (ul_flags & PIO_TYPE_Msk) {
   808ee:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
   808f2:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   808f6:	d027      	beq.n	80948 <pio_configure_pin_group+0x64>
   808f8:	d811      	bhi.n	8091e <pio_configure_pin_group+0x3a>
   808fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   808fe:	d016      	beq.n	8092e <pio_configure_pin_group+0x4a>
   80900:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   80904:	d111      	bne.n	8092a <pio_configure_pin_group+0x46>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   80906:	460a      	mov	r2, r1
   80908:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   8090c:	4b19      	ldr	r3, [pc, #100]	; (80974 <pio_configure_pin_group+0x90>)
   8090e:	4798      	blx	r3
	if (ul_pull_up_enable) {
   80910:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   80914:	bf14      	ite	ne
   80916:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   80918:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
   8091a:	2001      	movs	r0, #1
   8091c:	e012      	b.n	80944 <pio_configure_pin_group+0x60>
	switch (ul_flags & PIO_TYPE_Msk) {
   8091e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   80922:	d015      	beq.n	80950 <pio_configure_pin_group+0x6c>
   80924:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   80928:	d012      	beq.n	80950 <pio_configure_pin_group+0x6c>
		return 0;
   8092a:	2000      	movs	r0, #0
   8092c:	e00a      	b.n	80944 <pio_configure_pin_group+0x60>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   8092e:	460a      	mov	r2, r1
   80930:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80934:	4b0f      	ldr	r3, [pc, #60]	; (80974 <pio_configure_pin_group+0x90>)
   80936:	4798      	blx	r3
	if (ul_pull_up_enable) {
   80938:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   8093c:	bf14      	ite	ne
   8093e:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   80940:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
   80942:	2001      	movs	r0, #1
}
   80944:	b002      	add	sp, #8
   80946:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, ul_mask, ul_flags);
   80948:	4b0b      	ldr	r3, [pc, #44]	; (80978 <pio_configure_pin_group+0x94>)
   8094a:	4798      	blx	r3
	return 1;
   8094c:	2001      	movs	r0, #1
		break;
   8094e:	e7f9      	b.n	80944 <pio_configure_pin_group+0x60>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   80950:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
		pio_set_output(p_pio, ul_mask,
   80954:	f004 0301 	and.w	r3, r4, #1
   80958:	9300      	str	r3, [sp, #0]
   8095a:	f3c4 0380 	ubfx	r3, r4, #2, #1
   8095e:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   80962:	bf14      	ite	ne
   80964:	2200      	movne	r2, #0
   80966:	2201      	moveq	r2, #1
   80968:	4631      	mov	r1, r6
   8096a:	4628      	mov	r0, r5
   8096c:	4c03      	ldr	r4, [pc, #12]	; (8097c <pio_configure_pin_group+0x98>)
   8096e:	47a0      	blx	r4
	return 1;
   80970:	2001      	movs	r0, #1
		break;
   80972:	e7e7      	b.n	80944 <pio_configure_pin_group+0x60>
   80974:	00080775 	.word	0x00080775
   80978:	000807b3 	.word	0x000807b3
   8097c:	000807e5 	.word	0x000807e5

00080980 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   80980:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80984:	4604      	mov	r4, r0
   80986:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   80988:	4b0e      	ldr	r3, [pc, #56]	; (809c4 <pio_handler_process+0x44>)
   8098a:	4798      	blx	r3
   8098c:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   8098e:	4620      	mov	r0, r4
   80990:	4b0d      	ldr	r3, [pc, #52]	; (809c8 <pio_handler_process+0x48>)
   80992:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   80994:	4005      	ands	r5, r0
   80996:	d013      	beq.n	809c0 <pio_handler_process+0x40>
   80998:	4c0c      	ldr	r4, [pc, #48]	; (809cc <pio_handler_process+0x4c>)
   8099a:	f104 0660 	add.w	r6, r4, #96	; 0x60
   8099e:	e003      	b.n	809a8 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   809a0:	42b4      	cmp	r4, r6
   809a2:	d00d      	beq.n	809c0 <pio_handler_process+0x40>
   809a4:	3410      	adds	r4, #16
		while (status != 0) {
   809a6:	b15d      	cbz	r5, 809c0 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
   809a8:	6820      	ldr	r0, [r4, #0]
   809aa:	4540      	cmp	r0, r8
   809ac:	d1f8      	bne.n	809a0 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   809ae:	6861      	ldr	r1, [r4, #4]
   809b0:	4229      	tst	r1, r5
   809b2:	d0f5      	beq.n	809a0 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   809b4:	68e3      	ldr	r3, [r4, #12]
   809b6:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
   809b8:	6863      	ldr	r3, [r4, #4]
   809ba:	ea25 0503 	bic.w	r5, r5, r3
   809be:	e7ef      	b.n	809a0 <pio_handler_process+0x20>
   809c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   809c4:	0008080b 	.word	0x0008080b
   809c8:	0008080f 	.word	0x0008080f
   809cc:	20070b9c 	.word	0x20070b9c

000809d0 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   809d0:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   809d2:	210b      	movs	r1, #11
   809d4:	4801      	ldr	r0, [pc, #4]	; (809dc <PIOA_Handler+0xc>)
   809d6:	4b02      	ldr	r3, [pc, #8]	; (809e0 <PIOA_Handler+0x10>)
   809d8:	4798      	blx	r3
   809da:	bd08      	pop	{r3, pc}
   809dc:	400e0e00 	.word	0x400e0e00
   809e0:	00080981 	.word	0x00080981

000809e4 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   809e4:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   809e6:	210c      	movs	r1, #12
   809e8:	4801      	ldr	r0, [pc, #4]	; (809f0 <PIOB_Handler+0xc>)
   809ea:	4b02      	ldr	r3, [pc, #8]	; (809f4 <PIOB_Handler+0x10>)
   809ec:	4798      	blx	r3
   809ee:	bd08      	pop	{r3, pc}
   809f0:	400e1000 	.word	0x400e1000
   809f4:	00080981 	.word	0x00080981

000809f8 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   809f8:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   809fa:	210d      	movs	r1, #13
   809fc:	4801      	ldr	r0, [pc, #4]	; (80a04 <PIOC_Handler+0xc>)
   809fe:	4b02      	ldr	r3, [pc, #8]	; (80a08 <PIOC_Handler+0x10>)
   80a00:	4798      	blx	r3
   80a02:	bd08      	pop	{r3, pc}
   80a04:	400e1200 	.word	0x400e1200
   80a08:	00080981 	.word	0x00080981

00080a0c <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   80a0c:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   80a0e:	210e      	movs	r1, #14
   80a10:	4801      	ldr	r0, [pc, #4]	; (80a18 <PIOD_Handler+0xc>)
   80a12:	4b02      	ldr	r3, [pc, #8]	; (80a1c <PIOD_Handler+0x10>)
   80a14:	4798      	blx	r3
   80a16:	bd08      	pop	{r3, pc}
   80a18:	400e1400 	.word	0x400e1400
   80a1c:	00080981 	.word	0x00080981

00080a20 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   80a20:	4a17      	ldr	r2, [pc, #92]	; (80a80 <pmc_switch_mck_to_pllack+0x60>)
   80a22:	6b13      	ldr	r3, [r2, #48]	; 0x30
   80a24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   80a28:	4318      	orrs	r0, r3
   80a2a:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80a2c:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80a2e:	f013 0f08 	tst.w	r3, #8
   80a32:	d10a      	bne.n	80a4a <pmc_switch_mck_to_pllack+0x2a>
   80a34:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80a38:	4911      	ldr	r1, [pc, #68]	; (80a80 <pmc_switch_mck_to_pllack+0x60>)
   80a3a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   80a3c:	f012 0f08 	tst.w	r2, #8
   80a40:	d103      	bne.n	80a4a <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   80a42:	3b01      	subs	r3, #1
   80a44:	d1f9      	bne.n	80a3a <pmc_switch_mck_to_pllack+0x1a>
			return 1;
   80a46:	2001      	movs	r0, #1
   80a48:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   80a4a:	4a0d      	ldr	r2, [pc, #52]	; (80a80 <pmc_switch_mck_to_pllack+0x60>)
   80a4c:	6b13      	ldr	r3, [r2, #48]	; 0x30
   80a4e:	f023 0303 	bic.w	r3, r3, #3
   80a52:	f043 0302 	orr.w	r3, r3, #2
   80a56:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80a58:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80a5a:	f013 0f08 	tst.w	r3, #8
   80a5e:	d10a      	bne.n	80a76 <pmc_switch_mck_to_pllack+0x56>
   80a60:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80a64:	4906      	ldr	r1, [pc, #24]	; (80a80 <pmc_switch_mck_to_pllack+0x60>)
   80a66:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   80a68:	f012 0f08 	tst.w	r2, #8
   80a6c:	d105      	bne.n	80a7a <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   80a6e:	3b01      	subs	r3, #1
   80a70:	d1f9      	bne.n	80a66 <pmc_switch_mck_to_pllack+0x46>
			return 1;
   80a72:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   80a74:	4770      	bx	lr
	return 0;
   80a76:	2000      	movs	r0, #0
   80a78:	4770      	bx	lr
   80a7a:	2000      	movs	r0, #0
   80a7c:	4770      	bx	lr
   80a7e:	bf00      	nop
   80a80:	400e0600 	.word	0x400e0600

00080a84 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   80a84:	b9c8      	cbnz	r0, 80aba <pmc_switch_mainck_to_xtal+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   80a86:	4a11      	ldr	r2, [pc, #68]	; (80acc <pmc_switch_mainck_to_xtal+0x48>)
   80a88:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   80a8a:	0209      	lsls	r1, r1, #8
   80a8c:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   80a8e:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   80a92:	f023 0303 	bic.w	r3, r3, #3
   80a96:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   80a9a:	f043 0301 	orr.w	r3, r3, #1
   80a9e:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   80aa0:	6213      	str	r3, [r2, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   80aa2:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80aa4:	f013 0f01 	tst.w	r3, #1
   80aa8:	d0fb      	beq.n	80aa2 <pmc_switch_mainck_to_xtal+0x1e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   80aaa:	4a08      	ldr	r2, [pc, #32]	; (80acc <pmc_switch_mainck_to_xtal+0x48>)
   80aac:	6a13      	ldr	r3, [r2, #32]
   80aae:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   80ab2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   80ab6:	6213      	str	r3, [r2, #32]
   80ab8:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   80aba:	4904      	ldr	r1, [pc, #16]	; (80acc <pmc_switch_mainck_to_xtal+0x48>)
   80abc:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   80abe:	4a04      	ldr	r2, [pc, #16]	; (80ad0 <pmc_switch_mainck_to_xtal+0x4c>)
   80ac0:	401a      	ands	r2, r3
   80ac2:	4b04      	ldr	r3, [pc, #16]	; (80ad4 <pmc_switch_mainck_to_xtal+0x50>)
   80ac4:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   80ac6:	620b      	str	r3, [r1, #32]
   80ac8:	4770      	bx	lr
   80aca:	bf00      	nop
   80acc:	400e0600 	.word	0x400e0600
   80ad0:	fec8fffc 	.word	0xfec8fffc
   80ad4:	01370002 	.word	0x01370002

00080ad8 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   80ad8:	4b02      	ldr	r3, [pc, #8]	; (80ae4 <pmc_osc_is_ready_mainck+0xc>)
   80ada:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   80adc:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   80ae0:	4770      	bx	lr
   80ae2:	bf00      	nop
   80ae4:	400e0600 	.word	0x400e0600

00080ae8 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   80ae8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   80aec:	4b01      	ldr	r3, [pc, #4]	; (80af4 <pmc_disable_pllack+0xc>)
   80aee:	629a      	str	r2, [r3, #40]	; 0x28
   80af0:	4770      	bx	lr
   80af2:	bf00      	nop
   80af4:	400e0600 	.word	0x400e0600

00080af8 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   80af8:	4b02      	ldr	r3, [pc, #8]	; (80b04 <pmc_is_locked_pllack+0xc>)
   80afa:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   80afc:	f000 0002 	and.w	r0, r0, #2
   80b00:	4770      	bx	lr
   80b02:	bf00      	nop
   80b04:	400e0600 	.word	0x400e0600

00080b08 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   80b08:	282c      	cmp	r0, #44	; 0x2c
   80b0a:	d81e      	bhi.n	80b4a <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
   80b0c:	281f      	cmp	r0, #31
   80b0e:	d80c      	bhi.n	80b2a <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   80b10:	4b11      	ldr	r3, [pc, #68]	; (80b58 <pmc_enable_periph_clk+0x50>)
   80b12:	699a      	ldr	r2, [r3, #24]
   80b14:	2301      	movs	r3, #1
   80b16:	4083      	lsls	r3, r0
   80b18:	4393      	bics	r3, r2
   80b1a:	d018      	beq.n	80b4e <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
   80b1c:	2301      	movs	r3, #1
   80b1e:	fa03 f000 	lsl.w	r0, r3, r0
   80b22:	4b0d      	ldr	r3, [pc, #52]	; (80b58 <pmc_enable_periph_clk+0x50>)
   80b24:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   80b26:	2000      	movs	r0, #0
   80b28:	4770      	bx	lr
		ul_id -= 32;
   80b2a:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   80b2c:	4b0a      	ldr	r3, [pc, #40]	; (80b58 <pmc_enable_periph_clk+0x50>)
   80b2e:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   80b32:	2301      	movs	r3, #1
   80b34:	4083      	lsls	r3, r0
   80b36:	4393      	bics	r3, r2
   80b38:	d00b      	beq.n	80b52 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
   80b3a:	2301      	movs	r3, #1
   80b3c:	fa03 f000 	lsl.w	r0, r3, r0
   80b40:	4b05      	ldr	r3, [pc, #20]	; (80b58 <pmc_enable_periph_clk+0x50>)
   80b42:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
   80b46:	2000      	movs	r0, #0
   80b48:	4770      	bx	lr
		return 1;
   80b4a:	2001      	movs	r0, #1
   80b4c:	4770      	bx	lr
	return 0;
   80b4e:	2000      	movs	r0, #0
   80b50:	4770      	bx	lr
   80b52:	2000      	movs	r0, #0
}
   80b54:	4770      	bx	lr
   80b56:	bf00      	nop
   80b58:	400e0600 	.word	0x400e0600

00080b5c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   80b5c:	e7fe      	b.n	80b5c <Dummy_Handler>
	...

00080b60 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   80b60:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   80b62:	4b1c      	ldr	r3, [pc, #112]	; (80bd4 <Reset_Handler+0x74>)
   80b64:	4a1c      	ldr	r2, [pc, #112]	; (80bd8 <Reset_Handler+0x78>)
   80b66:	429a      	cmp	r2, r3
   80b68:	d010      	beq.n	80b8c <Reset_Handler+0x2c>
		for (; pDest < &_erelocate;) {
   80b6a:	4b1c      	ldr	r3, [pc, #112]	; (80bdc <Reset_Handler+0x7c>)
   80b6c:	4a19      	ldr	r2, [pc, #100]	; (80bd4 <Reset_Handler+0x74>)
   80b6e:	429a      	cmp	r2, r3
   80b70:	d20c      	bcs.n	80b8c <Reset_Handler+0x2c>
   80b72:	3b01      	subs	r3, #1
   80b74:	1a9b      	subs	r3, r3, r2
   80b76:	f023 0303 	bic.w	r3, r3, #3
   80b7a:	3304      	adds	r3, #4
   80b7c:	4413      	add	r3, r2
   80b7e:	4916      	ldr	r1, [pc, #88]	; (80bd8 <Reset_Handler+0x78>)
			*pDest++ = *pSrc++;
   80b80:	f851 0b04 	ldr.w	r0, [r1], #4
   80b84:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
   80b88:	429a      	cmp	r2, r3
   80b8a:	d1f9      	bne.n	80b80 <Reset_Handler+0x20>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   80b8c:	4b14      	ldr	r3, [pc, #80]	; (80be0 <Reset_Handler+0x80>)
   80b8e:	4a15      	ldr	r2, [pc, #84]	; (80be4 <Reset_Handler+0x84>)
   80b90:	429a      	cmp	r2, r3
   80b92:	d20a      	bcs.n	80baa <Reset_Handler+0x4a>
   80b94:	3b01      	subs	r3, #1
   80b96:	1a9b      	subs	r3, r3, r2
   80b98:	f023 0303 	bic.w	r3, r3, #3
   80b9c:	3304      	adds	r3, #4
   80b9e:	4413      	add	r3, r2
		*pDest++ = 0;
   80ba0:	2100      	movs	r1, #0
   80ba2:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
   80ba6:	4293      	cmp	r3, r2
   80ba8:	d1fb      	bne.n	80ba2 <Reset_Handler+0x42>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   80baa:	4b0f      	ldr	r3, [pc, #60]	; (80be8 <Reset_Handler+0x88>)
   80bac:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   80bb0:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   80bb4:	490d      	ldr	r1, [pc, #52]	; (80bec <Reset_Handler+0x8c>)
   80bb6:	608a      	str	r2, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   80bb8:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   80bbc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   80bc0:	d203      	bcs.n	80bca <Reset_Handler+0x6a>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   80bc2:	688b      	ldr	r3, [r1, #8]
   80bc4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   80bc8:	608b      	str	r3, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   80bca:	4b09      	ldr	r3, [pc, #36]	; (80bf0 <Reset_Handler+0x90>)
   80bcc:	4798      	blx	r3

	/* Branch to main function */
	main();
   80bce:	4b09      	ldr	r3, [pc, #36]	; (80bf4 <Reset_Handler+0x94>)
   80bd0:	4798      	blx	r3
   80bd2:	e7fe      	b.n	80bd2 <Reset_Handler+0x72>
   80bd4:	20070000 	.word	0x20070000
   80bd8:	00083da4 	.word	0x00083da4
   80bdc:	20070ae0 	.word	0x20070ae0
   80be0:	20070c78 	.word	0x20070c78
   80be4:	20070ae0 	.word	0x20070ae0
   80be8:	00080000 	.word	0x00080000
   80bec:	e000ed00 	.word	0xe000ed00
   80bf0:	00080d61 	.word	0x00080d61
   80bf4:	000805c9 	.word	0x000805c9

00080bf8 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   80bf8:	4b3d      	ldr	r3, [pc, #244]	; (80cf0 <SystemCoreClockUpdate+0xf8>)
   80bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80bfc:	f003 0303 	and.w	r3, r3, #3
   80c00:	2b03      	cmp	r3, #3
   80c02:	d80e      	bhi.n	80c22 <SystemCoreClockUpdate+0x2a>
   80c04:	e8df f003 	tbb	[pc, r3]
   80c08:	38381c02 	.word	0x38381c02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   80c0c:	4b39      	ldr	r3, [pc, #228]	; (80cf4 <SystemCoreClockUpdate+0xfc>)
   80c0e:	695b      	ldr	r3, [r3, #20]
   80c10:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   80c14:	bf14      	ite	ne
   80c16:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   80c1a:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   80c1e:	4b36      	ldr	r3, [pc, #216]	; (80cf8 <SystemCoreClockUpdate+0x100>)
   80c20:	601a      	str	r2, [r3, #0]
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   80c22:	4b33      	ldr	r3, [pc, #204]	; (80cf0 <SystemCoreClockUpdate+0xf8>)
   80c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80c26:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80c2a:	2b70      	cmp	r3, #112	; 0x70
   80c2c:	d057      	beq.n	80cde <SystemCoreClockUpdate+0xe6>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   80c2e:	4b30      	ldr	r3, [pc, #192]	; (80cf0 <SystemCoreClockUpdate+0xf8>)
   80c30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   80c32:	4931      	ldr	r1, [pc, #196]	; (80cf8 <SystemCoreClockUpdate+0x100>)
   80c34:	f3c2 1202 	ubfx	r2, r2, #4, #3
   80c38:	680b      	ldr	r3, [r1, #0]
   80c3a:	40d3      	lsrs	r3, r2
   80c3c:	600b      	str	r3, [r1, #0]
   80c3e:	4770      	bx	lr
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   80c40:	4b2b      	ldr	r3, [pc, #172]	; (80cf0 <SystemCoreClockUpdate+0xf8>)
   80c42:	6a1b      	ldr	r3, [r3, #32]
   80c44:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   80c48:	d003      	beq.n	80c52 <SystemCoreClockUpdate+0x5a>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   80c4a:	4a2c      	ldr	r2, [pc, #176]	; (80cfc <SystemCoreClockUpdate+0x104>)
   80c4c:	4b2a      	ldr	r3, [pc, #168]	; (80cf8 <SystemCoreClockUpdate+0x100>)
   80c4e:	601a      	str	r2, [r3, #0]
   80c50:	e7e7      	b.n	80c22 <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   80c52:	4a2b      	ldr	r2, [pc, #172]	; (80d00 <SystemCoreClockUpdate+0x108>)
   80c54:	4b28      	ldr	r3, [pc, #160]	; (80cf8 <SystemCoreClockUpdate+0x100>)
   80c56:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   80c58:	4b25      	ldr	r3, [pc, #148]	; (80cf0 <SystemCoreClockUpdate+0xf8>)
   80c5a:	6a1b      	ldr	r3, [r3, #32]
   80c5c:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80c60:	2b10      	cmp	r3, #16
   80c62:	d005      	beq.n	80c70 <SystemCoreClockUpdate+0x78>
   80c64:	2b20      	cmp	r3, #32
   80c66:	d1dc      	bne.n	80c22 <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 3U;
   80c68:	4a24      	ldr	r2, [pc, #144]	; (80cfc <SystemCoreClockUpdate+0x104>)
   80c6a:	4b23      	ldr	r3, [pc, #140]	; (80cf8 <SystemCoreClockUpdate+0x100>)
   80c6c:	601a      	str	r2, [r3, #0]
				break;
   80c6e:	e7d8      	b.n	80c22 <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 2U;
   80c70:	4a24      	ldr	r2, [pc, #144]	; (80d04 <SystemCoreClockUpdate+0x10c>)
   80c72:	4b21      	ldr	r3, [pc, #132]	; (80cf8 <SystemCoreClockUpdate+0x100>)
   80c74:	601a      	str	r2, [r3, #0]
				break;
   80c76:	e7d4      	b.n	80c22 <SystemCoreClockUpdate+0x2a>
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   80c78:	4b1d      	ldr	r3, [pc, #116]	; (80cf0 <SystemCoreClockUpdate+0xf8>)
   80c7a:	6a1b      	ldr	r3, [r3, #32]
   80c7c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   80c80:	d00c      	beq.n	80c9c <SystemCoreClockUpdate+0xa4>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   80c82:	4a1e      	ldr	r2, [pc, #120]	; (80cfc <SystemCoreClockUpdate+0x104>)
   80c84:	4b1c      	ldr	r3, [pc, #112]	; (80cf8 <SystemCoreClockUpdate+0x100>)
   80c86:	601a      	str	r2, [r3, #0]
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   80c88:	4b19      	ldr	r3, [pc, #100]	; (80cf0 <SystemCoreClockUpdate+0xf8>)
   80c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80c8c:	f003 0303 	and.w	r3, r3, #3
   80c90:	2b02      	cmp	r3, #2
   80c92:	d016      	beq.n	80cc2 <SystemCoreClockUpdate+0xca>
			SystemCoreClock = SYS_UTMIPLL / 2U;
   80c94:	4a1c      	ldr	r2, [pc, #112]	; (80d08 <SystemCoreClockUpdate+0x110>)
   80c96:	4b18      	ldr	r3, [pc, #96]	; (80cf8 <SystemCoreClockUpdate+0x100>)
   80c98:	601a      	str	r2, [r3, #0]
   80c9a:	e7c2      	b.n	80c22 <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   80c9c:	4a18      	ldr	r2, [pc, #96]	; (80d00 <SystemCoreClockUpdate+0x108>)
   80c9e:	4b16      	ldr	r3, [pc, #88]	; (80cf8 <SystemCoreClockUpdate+0x100>)
   80ca0:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   80ca2:	4b13      	ldr	r3, [pc, #76]	; (80cf0 <SystemCoreClockUpdate+0xf8>)
   80ca4:	6a1b      	ldr	r3, [r3, #32]
   80ca6:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80caa:	2b10      	cmp	r3, #16
   80cac:	d005      	beq.n	80cba <SystemCoreClockUpdate+0xc2>
   80cae:	2b20      	cmp	r3, #32
   80cb0:	d1ea      	bne.n	80c88 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 3U;
   80cb2:	4a12      	ldr	r2, [pc, #72]	; (80cfc <SystemCoreClockUpdate+0x104>)
   80cb4:	4b10      	ldr	r3, [pc, #64]	; (80cf8 <SystemCoreClockUpdate+0x100>)
   80cb6:	601a      	str	r2, [r3, #0]
				break;
   80cb8:	e7e6      	b.n	80c88 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 2U;
   80cba:	4a12      	ldr	r2, [pc, #72]	; (80d04 <SystemCoreClockUpdate+0x10c>)
   80cbc:	4b0e      	ldr	r3, [pc, #56]	; (80cf8 <SystemCoreClockUpdate+0x100>)
   80cbe:	601a      	str	r2, [r3, #0]
				break;
   80cc0:	e7e2      	b.n	80c88 <SystemCoreClockUpdate+0x90>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   80cc2:	4a0b      	ldr	r2, [pc, #44]	; (80cf0 <SystemCoreClockUpdate+0xf8>)
   80cc4:	6a91      	ldr	r1, [r2, #40]	; 0x28
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   80cc6:	6a92      	ldr	r2, [r2, #40]	; 0x28
   80cc8:	480b      	ldr	r0, [pc, #44]	; (80cf8 <SystemCoreClockUpdate+0x100>)
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   80cca:	f3c1 410a 	ubfx	r1, r1, #16, #11
   80cce:	6803      	ldr	r3, [r0, #0]
   80cd0:	fb01 3303 	mla	r3, r1, r3, r3
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   80cd4:	b2d2      	uxtb	r2, r2
   80cd6:	fbb3 f3f2 	udiv	r3, r3, r2
   80cda:	6003      	str	r3, [r0, #0]
   80cdc:	e7a1      	b.n	80c22 <SystemCoreClockUpdate+0x2a>
		SystemCoreClock /= 3U;
   80cde:	4a06      	ldr	r2, [pc, #24]	; (80cf8 <SystemCoreClockUpdate+0x100>)
   80ce0:	6813      	ldr	r3, [r2, #0]
   80ce2:	490a      	ldr	r1, [pc, #40]	; (80d0c <SystemCoreClockUpdate+0x114>)
   80ce4:	fba1 1303 	umull	r1, r3, r1, r3
   80ce8:	085b      	lsrs	r3, r3, #1
   80cea:	6013      	str	r3, [r2, #0]
   80cec:	4770      	bx	lr
   80cee:	bf00      	nop
   80cf0:	400e0600 	.word	0x400e0600
   80cf4:	400e1a10 	.word	0x400e1a10
   80cf8:	20070130 	.word	0x20070130
   80cfc:	00b71b00 	.word	0x00b71b00
   80d00:	003d0900 	.word	0x003d0900
   80d04:	007a1200 	.word	0x007a1200
   80d08:	0e4e1c00 	.word	0x0e4e1c00
   80d0c:	aaaaaaab 	.word	0xaaaaaaab

00080d10 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   80d10:	4b0a      	ldr	r3, [pc, #40]	; (80d3c <_sbrk+0x2c>)
   80d12:	681b      	ldr	r3, [r3, #0]
   80d14:	b153      	cbz	r3, 80d2c <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
   80d16:	4b09      	ldr	r3, [pc, #36]	; (80d3c <_sbrk+0x2c>)
   80d18:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   80d1a:	181a      	adds	r2, r3, r0
   80d1c:	4908      	ldr	r1, [pc, #32]	; (80d40 <_sbrk+0x30>)
   80d1e:	4291      	cmp	r1, r2
   80d20:	db08      	blt.n	80d34 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
   80d22:	4610      	mov	r0, r2
   80d24:	4a05      	ldr	r2, [pc, #20]	; (80d3c <_sbrk+0x2c>)
   80d26:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   80d28:	4618      	mov	r0, r3
   80d2a:	4770      	bx	lr
		heap = (unsigned char *)&_end;
   80d2c:	4a05      	ldr	r2, [pc, #20]	; (80d44 <_sbrk+0x34>)
   80d2e:	4b03      	ldr	r3, [pc, #12]	; (80d3c <_sbrk+0x2c>)
   80d30:	601a      	str	r2, [r3, #0]
   80d32:	e7f0      	b.n	80d16 <_sbrk+0x6>
		return (caddr_t) -1;	
   80d34:	f04f 30ff 	mov.w	r0, #4294967295
}
   80d38:	4770      	bx	lr
   80d3a:	bf00      	nop
   80d3c:	20070c0c 	.word	0x20070c0c
   80d40:	20087ffc 	.word	0x20087ffc
   80d44:	20072c78 	.word	0x20072c78

00080d48 <_close>:
}

extern int _close(int file)
{
	return -1;
}
   80d48:	f04f 30ff 	mov.w	r0, #4294967295
   80d4c:	4770      	bx	lr

00080d4e <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   80d4e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   80d52:	604b      	str	r3, [r1, #4]

	return 0;
}
   80d54:	2000      	movs	r0, #0
   80d56:	4770      	bx	lr

00080d58 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   80d58:	2001      	movs	r0, #1
   80d5a:	4770      	bx	lr

00080d5c <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   80d5c:	2000      	movs	r0, #0
   80d5e:	4770      	bx	lr

00080d60 <__libc_init_array>:
   80d60:	b570      	push	{r4, r5, r6, lr}
   80d62:	4e0f      	ldr	r6, [pc, #60]	; (80da0 <__libc_init_array+0x40>)
   80d64:	4d0f      	ldr	r5, [pc, #60]	; (80da4 <__libc_init_array+0x44>)
   80d66:	1b76      	subs	r6, r6, r5
   80d68:	10b6      	asrs	r6, r6, #2
   80d6a:	bf18      	it	ne
   80d6c:	2400      	movne	r4, #0
   80d6e:	d005      	beq.n	80d7c <__libc_init_array+0x1c>
   80d70:	3401      	adds	r4, #1
   80d72:	f855 3b04 	ldr.w	r3, [r5], #4
   80d76:	4798      	blx	r3
   80d78:	42a6      	cmp	r6, r4
   80d7a:	d1f9      	bne.n	80d70 <__libc_init_array+0x10>
   80d7c:	4e0a      	ldr	r6, [pc, #40]	; (80da8 <__libc_init_array+0x48>)
   80d7e:	4d0b      	ldr	r5, [pc, #44]	; (80dac <__libc_init_array+0x4c>)
   80d80:	f002 fffa 	bl	83d78 <_init>
   80d84:	1b76      	subs	r6, r6, r5
   80d86:	10b6      	asrs	r6, r6, #2
   80d88:	bf18      	it	ne
   80d8a:	2400      	movne	r4, #0
   80d8c:	d006      	beq.n	80d9c <__libc_init_array+0x3c>
   80d8e:	3401      	adds	r4, #1
   80d90:	f855 3b04 	ldr.w	r3, [r5], #4
   80d94:	4798      	blx	r3
   80d96:	42a6      	cmp	r6, r4
   80d98:	d1f9      	bne.n	80d8e <__libc_init_array+0x2e>
   80d9a:	bd70      	pop	{r4, r5, r6, pc}
   80d9c:	bd70      	pop	{r4, r5, r6, pc}
   80d9e:	bf00      	nop
   80da0:	00083d84 	.word	0x00083d84
   80da4:	00083d84 	.word	0x00083d84
   80da8:	00083d8c 	.word	0x00083d8c
   80dac:	00083d84 	.word	0x00083d84

00080db0 <iprintf>:
   80db0:	b40f      	push	{r0, r1, r2, r3}
   80db2:	b510      	push	{r4, lr}
   80db4:	4b07      	ldr	r3, [pc, #28]	; (80dd4 <iprintf+0x24>)
   80db6:	b082      	sub	sp, #8
   80db8:	ac04      	add	r4, sp, #16
   80dba:	f854 2b04 	ldr.w	r2, [r4], #4
   80dbe:	6818      	ldr	r0, [r3, #0]
   80dc0:	4623      	mov	r3, r4
   80dc2:	6881      	ldr	r1, [r0, #8]
   80dc4:	9401      	str	r4, [sp, #4]
   80dc6:	f000 f965 	bl	81094 <_vfiprintf_r>
   80dca:	b002      	add	sp, #8
   80dcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80dd0:	b004      	add	sp, #16
   80dd2:	4770      	bx	lr
   80dd4:	20070134 	.word	0x20070134

00080dd8 <memset>:
   80dd8:	b470      	push	{r4, r5, r6}
   80dda:	0786      	lsls	r6, r0, #30
   80ddc:	d046      	beq.n	80e6c <memset+0x94>
   80dde:	1e54      	subs	r4, r2, #1
   80de0:	2a00      	cmp	r2, #0
   80de2:	d041      	beq.n	80e68 <memset+0x90>
   80de4:	b2ca      	uxtb	r2, r1
   80de6:	4603      	mov	r3, r0
   80de8:	e002      	b.n	80df0 <memset+0x18>
   80dea:	f114 34ff 	adds.w	r4, r4, #4294967295
   80dee:	d33b      	bcc.n	80e68 <memset+0x90>
   80df0:	f803 2b01 	strb.w	r2, [r3], #1
   80df4:	079d      	lsls	r5, r3, #30
   80df6:	d1f8      	bne.n	80dea <memset+0x12>
   80df8:	2c03      	cmp	r4, #3
   80dfa:	d92e      	bls.n	80e5a <memset+0x82>
   80dfc:	b2cd      	uxtb	r5, r1
   80dfe:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   80e02:	2c0f      	cmp	r4, #15
   80e04:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   80e08:	d919      	bls.n	80e3e <memset+0x66>
   80e0a:	4626      	mov	r6, r4
   80e0c:	f103 0210 	add.w	r2, r3, #16
   80e10:	3e10      	subs	r6, #16
   80e12:	2e0f      	cmp	r6, #15
   80e14:	f842 5c10 	str.w	r5, [r2, #-16]
   80e18:	f842 5c0c 	str.w	r5, [r2, #-12]
   80e1c:	f842 5c08 	str.w	r5, [r2, #-8]
   80e20:	f842 5c04 	str.w	r5, [r2, #-4]
   80e24:	f102 0210 	add.w	r2, r2, #16
   80e28:	d8f2      	bhi.n	80e10 <memset+0x38>
   80e2a:	f1a4 0210 	sub.w	r2, r4, #16
   80e2e:	f022 020f 	bic.w	r2, r2, #15
   80e32:	f004 040f 	and.w	r4, r4, #15
   80e36:	3210      	adds	r2, #16
   80e38:	2c03      	cmp	r4, #3
   80e3a:	4413      	add	r3, r2
   80e3c:	d90d      	bls.n	80e5a <memset+0x82>
   80e3e:	461e      	mov	r6, r3
   80e40:	4622      	mov	r2, r4
   80e42:	3a04      	subs	r2, #4
   80e44:	2a03      	cmp	r2, #3
   80e46:	f846 5b04 	str.w	r5, [r6], #4
   80e4a:	d8fa      	bhi.n	80e42 <memset+0x6a>
   80e4c:	1f22      	subs	r2, r4, #4
   80e4e:	f022 0203 	bic.w	r2, r2, #3
   80e52:	3204      	adds	r2, #4
   80e54:	4413      	add	r3, r2
   80e56:	f004 0403 	and.w	r4, r4, #3
   80e5a:	b12c      	cbz	r4, 80e68 <memset+0x90>
   80e5c:	b2c9      	uxtb	r1, r1
   80e5e:	441c      	add	r4, r3
   80e60:	f803 1b01 	strb.w	r1, [r3], #1
   80e64:	429c      	cmp	r4, r3
   80e66:	d1fb      	bne.n	80e60 <memset+0x88>
   80e68:	bc70      	pop	{r4, r5, r6}
   80e6a:	4770      	bx	lr
   80e6c:	4614      	mov	r4, r2
   80e6e:	4603      	mov	r3, r0
   80e70:	e7c2      	b.n	80df8 <memset+0x20>
   80e72:	bf00      	nop

00080e74 <setbuf>:
   80e74:	2900      	cmp	r1, #0
   80e76:	bf0c      	ite	eq
   80e78:	2202      	moveq	r2, #2
   80e7a:	2200      	movne	r2, #0
   80e7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
   80e80:	f000 b800 	b.w	80e84 <setvbuf>

00080e84 <setvbuf>:
   80e84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   80e88:	4d61      	ldr	r5, [pc, #388]	; (81010 <setvbuf+0x18c>)
   80e8a:	b083      	sub	sp, #12
   80e8c:	682d      	ldr	r5, [r5, #0]
   80e8e:	4604      	mov	r4, r0
   80e90:	460f      	mov	r7, r1
   80e92:	4690      	mov	r8, r2
   80e94:	461e      	mov	r6, r3
   80e96:	b115      	cbz	r5, 80e9e <setvbuf+0x1a>
   80e98:	6bab      	ldr	r3, [r5, #56]	; 0x38
   80e9a:	2b00      	cmp	r3, #0
   80e9c:	d064      	beq.n	80f68 <setvbuf+0xe4>
   80e9e:	f1b8 0f02 	cmp.w	r8, #2
   80ea2:	d006      	beq.n	80eb2 <setvbuf+0x2e>
   80ea4:	f1b8 0f01 	cmp.w	r8, #1
   80ea8:	f200 809f 	bhi.w	80fea <setvbuf+0x166>
   80eac:	2e00      	cmp	r6, #0
   80eae:	f2c0 809c 	blt.w	80fea <setvbuf+0x166>
   80eb2:	6e63      	ldr	r3, [r4, #100]	; 0x64
   80eb4:	07d8      	lsls	r0, r3, #31
   80eb6:	d534      	bpl.n	80f22 <setvbuf+0x9e>
   80eb8:	4621      	mov	r1, r4
   80eba:	4628      	mov	r0, r5
   80ebc:	f001 f8da 	bl	82074 <_fflush_r>
   80ec0:	6b21      	ldr	r1, [r4, #48]	; 0x30
   80ec2:	b141      	cbz	r1, 80ed6 <setvbuf+0x52>
   80ec4:	f104 0340 	add.w	r3, r4, #64	; 0x40
   80ec8:	4299      	cmp	r1, r3
   80eca:	d002      	beq.n	80ed2 <setvbuf+0x4e>
   80ecc:	4628      	mov	r0, r5
   80ece:	f001 fa4f 	bl	82370 <_free_r>
   80ed2:	2300      	movs	r3, #0
   80ed4:	6323      	str	r3, [r4, #48]	; 0x30
   80ed6:	2200      	movs	r2, #0
   80ed8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   80edc:	61a2      	str	r2, [r4, #24]
   80ede:	6062      	str	r2, [r4, #4]
   80ee0:	061a      	lsls	r2, r3, #24
   80ee2:	d43a      	bmi.n	80f5a <setvbuf+0xd6>
   80ee4:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
   80ee8:	f023 0303 	bic.w	r3, r3, #3
   80eec:	f1b8 0f02 	cmp.w	r8, #2
   80ef0:	81a3      	strh	r3, [r4, #12]
   80ef2:	d01d      	beq.n	80f30 <setvbuf+0xac>
   80ef4:	ab01      	add	r3, sp, #4
   80ef6:	466a      	mov	r2, sp
   80ef8:	4621      	mov	r1, r4
   80efa:	4628      	mov	r0, r5
   80efc:	f001 fcd6 	bl	828ac <__swhatbuf_r>
   80f00:	89a3      	ldrh	r3, [r4, #12]
   80f02:	4318      	orrs	r0, r3
   80f04:	81a0      	strh	r0, [r4, #12]
   80f06:	2e00      	cmp	r6, #0
   80f08:	d132      	bne.n	80f70 <setvbuf+0xec>
   80f0a:	9e00      	ldr	r6, [sp, #0]
   80f0c:	4630      	mov	r0, r6
   80f0e:	f001 fd45 	bl	8299c <malloc>
   80f12:	4607      	mov	r7, r0
   80f14:	2800      	cmp	r0, #0
   80f16:	d06b      	beq.n	80ff0 <setvbuf+0x16c>
   80f18:	89a3      	ldrh	r3, [r4, #12]
   80f1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   80f1e:	81a3      	strh	r3, [r4, #12]
   80f20:	e028      	b.n	80f74 <setvbuf+0xf0>
   80f22:	89a3      	ldrh	r3, [r4, #12]
   80f24:	0599      	lsls	r1, r3, #22
   80f26:	d4c7      	bmi.n	80eb8 <setvbuf+0x34>
   80f28:	6da0      	ldr	r0, [r4, #88]	; 0x58
   80f2a:	f001 fcbb 	bl	828a4 <__retarget_lock_acquire_recursive>
   80f2e:	e7c3      	b.n	80eb8 <setvbuf+0x34>
   80f30:	2500      	movs	r5, #0
   80f32:	2600      	movs	r6, #0
   80f34:	2001      	movs	r0, #1
   80f36:	6e61      	ldr	r1, [r4, #100]	; 0x64
   80f38:	f104 0243 	add.w	r2, r4, #67	; 0x43
   80f3c:	f043 0302 	orr.w	r3, r3, #2
   80f40:	60a6      	str	r6, [r4, #8]
   80f42:	07ce      	lsls	r6, r1, #31
   80f44:	81a3      	strh	r3, [r4, #12]
   80f46:	6160      	str	r0, [r4, #20]
   80f48:	6022      	str	r2, [r4, #0]
   80f4a:	6122      	str	r2, [r4, #16]
   80f4c:	d401      	bmi.n	80f52 <setvbuf+0xce>
   80f4e:	0598      	lsls	r0, r3, #22
   80f50:	d53e      	bpl.n	80fd0 <setvbuf+0x14c>
   80f52:	4628      	mov	r0, r5
   80f54:	b003      	add	sp, #12
   80f56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   80f5a:	6921      	ldr	r1, [r4, #16]
   80f5c:	4628      	mov	r0, r5
   80f5e:	f001 fa07 	bl	82370 <_free_r>
   80f62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   80f66:	e7bd      	b.n	80ee4 <setvbuf+0x60>
   80f68:	4628      	mov	r0, r5
   80f6a:	f001 f8db 	bl	82124 <__sinit>
   80f6e:	e796      	b.n	80e9e <setvbuf+0x1a>
   80f70:	2f00      	cmp	r7, #0
   80f72:	d0cb      	beq.n	80f0c <setvbuf+0x88>
   80f74:	6bab      	ldr	r3, [r5, #56]	; 0x38
   80f76:	2b00      	cmp	r3, #0
   80f78:	d033      	beq.n	80fe2 <setvbuf+0x15e>
   80f7a:	9b00      	ldr	r3, [sp, #0]
   80f7c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   80f80:	429e      	cmp	r6, r3
   80f82:	bf1c      	itt	ne
   80f84:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
   80f88:	81a2      	strhne	r2, [r4, #12]
   80f8a:	f1b8 0f01 	cmp.w	r8, #1
   80f8e:	bf04      	itt	eq
   80f90:	f042 0201 	orreq.w	r2, r2, #1
   80f94:	81a2      	strheq	r2, [r4, #12]
   80f96:	b292      	uxth	r2, r2
   80f98:	f012 0308 	ands.w	r3, r2, #8
   80f9c:	6027      	str	r7, [r4, #0]
   80f9e:	6127      	str	r7, [r4, #16]
   80fa0:	6166      	str	r6, [r4, #20]
   80fa2:	d00e      	beq.n	80fc2 <setvbuf+0x13e>
   80fa4:	07d1      	lsls	r1, r2, #31
   80fa6:	d51a      	bpl.n	80fde <setvbuf+0x15a>
   80fa8:	2300      	movs	r3, #0
   80faa:	6e65      	ldr	r5, [r4, #100]	; 0x64
   80fac:	4276      	negs	r6, r6
   80fae:	f015 0501 	ands.w	r5, r5, #1
   80fb2:	61a6      	str	r6, [r4, #24]
   80fb4:	60a3      	str	r3, [r4, #8]
   80fb6:	d009      	beq.n	80fcc <setvbuf+0x148>
   80fb8:	2500      	movs	r5, #0
   80fba:	4628      	mov	r0, r5
   80fbc:	b003      	add	sp, #12
   80fbe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   80fc2:	60a3      	str	r3, [r4, #8]
   80fc4:	6e65      	ldr	r5, [r4, #100]	; 0x64
   80fc6:	f015 0501 	ands.w	r5, r5, #1
   80fca:	d1f5      	bne.n	80fb8 <setvbuf+0x134>
   80fcc:	0593      	lsls	r3, r2, #22
   80fce:	d4c0      	bmi.n	80f52 <setvbuf+0xce>
   80fd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
   80fd2:	f001 fc69 	bl	828a8 <__retarget_lock_release_recursive>
   80fd6:	4628      	mov	r0, r5
   80fd8:	b003      	add	sp, #12
   80fda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   80fde:	60a6      	str	r6, [r4, #8]
   80fe0:	e7f0      	b.n	80fc4 <setvbuf+0x140>
   80fe2:	4628      	mov	r0, r5
   80fe4:	f001 f89e 	bl	82124 <__sinit>
   80fe8:	e7c7      	b.n	80f7a <setvbuf+0xf6>
   80fea:	f04f 35ff 	mov.w	r5, #4294967295
   80fee:	e7b0      	b.n	80f52 <setvbuf+0xce>
   80ff0:	f8dd 9000 	ldr.w	r9, [sp]
   80ff4:	45b1      	cmp	r9, r6
   80ff6:	d004      	beq.n	81002 <setvbuf+0x17e>
   80ff8:	4648      	mov	r0, r9
   80ffa:	f001 fccf 	bl	8299c <malloc>
   80ffe:	4607      	mov	r7, r0
   81000:	b920      	cbnz	r0, 8100c <setvbuf+0x188>
   81002:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   81006:	f04f 35ff 	mov.w	r5, #4294967295
   8100a:	e792      	b.n	80f32 <setvbuf+0xae>
   8100c:	464e      	mov	r6, r9
   8100e:	e783      	b.n	80f18 <setvbuf+0x94>
   81010:	20070134 	.word	0x20070134

00081014 <__sprint_r.part.0>:
   81014:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81018:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   8101a:	4693      	mov	fp, r2
   8101c:	049c      	lsls	r4, r3, #18
   8101e:	d52f      	bpl.n	81080 <__sprint_r.part.0+0x6c>
   81020:	6893      	ldr	r3, [r2, #8]
   81022:	6812      	ldr	r2, [r2, #0]
   81024:	b353      	cbz	r3, 8107c <__sprint_r.part.0+0x68>
   81026:	460e      	mov	r6, r1
   81028:	4607      	mov	r7, r0
   8102a:	f102 0908 	add.w	r9, r2, #8
   8102e:	e919 0420 	ldmdb	r9, {r5, sl}
   81032:	ea5f 089a 	movs.w	r8, sl, lsr #2
   81036:	d017      	beq.n	81068 <__sprint_r.part.0+0x54>
   81038:	2400      	movs	r4, #0
   8103a:	3d04      	subs	r5, #4
   8103c:	e001      	b.n	81042 <__sprint_r.part.0+0x2e>
   8103e:	45a0      	cmp	r8, r4
   81040:	d010      	beq.n	81064 <__sprint_r.part.0+0x50>
   81042:	4632      	mov	r2, r6
   81044:	f855 1f04 	ldr.w	r1, [r5, #4]!
   81048:	4638      	mov	r0, r7
   8104a:	f001 f90d 	bl	82268 <_fputwc_r>
   8104e:	1c43      	adds	r3, r0, #1
   81050:	f104 0401 	add.w	r4, r4, #1
   81054:	d1f3      	bne.n	8103e <__sprint_r.part.0+0x2a>
   81056:	2300      	movs	r3, #0
   81058:	f8cb 3008 	str.w	r3, [fp, #8]
   8105c:	f8cb 3004 	str.w	r3, [fp, #4]
   81060:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81064:	f8db 3008 	ldr.w	r3, [fp, #8]
   81068:	f02a 0a03 	bic.w	sl, sl, #3
   8106c:	eba3 030a 	sub.w	r3, r3, sl
   81070:	f8cb 3008 	str.w	r3, [fp, #8]
   81074:	f109 0908 	add.w	r9, r9, #8
   81078:	2b00      	cmp	r3, #0
   8107a:	d1d8      	bne.n	8102e <__sprint_r.part.0+0x1a>
   8107c:	2000      	movs	r0, #0
   8107e:	e7ea      	b.n	81056 <__sprint_r.part.0+0x42>
   81080:	f001 fa5c 	bl	8253c <__sfvwrite_r>
   81084:	2300      	movs	r3, #0
   81086:	f8cb 3008 	str.w	r3, [fp, #8]
   8108a:	f8cb 3004 	str.w	r3, [fp, #4]
   8108e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81092:	bf00      	nop

00081094 <_vfiprintf_r>:
   81094:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81098:	b0ad      	sub	sp, #180	; 0xb4
   8109a:	461d      	mov	r5, r3
   8109c:	468b      	mov	fp, r1
   8109e:	4690      	mov	r8, r2
   810a0:	9307      	str	r3, [sp, #28]
   810a2:	9006      	str	r0, [sp, #24]
   810a4:	b118      	cbz	r0, 810ae <_vfiprintf_r+0x1a>
   810a6:	6b83      	ldr	r3, [r0, #56]	; 0x38
   810a8:	2b00      	cmp	r3, #0
   810aa:	f000 80f3 	beq.w	81294 <_vfiprintf_r+0x200>
   810ae:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   810b2:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
   810b6:	07df      	lsls	r7, r3, #31
   810b8:	b281      	uxth	r1, r0
   810ba:	d402      	bmi.n	810c2 <_vfiprintf_r+0x2e>
   810bc:	058e      	lsls	r6, r1, #22
   810be:	f140 80fc 	bpl.w	812ba <_vfiprintf_r+0x226>
   810c2:	048c      	lsls	r4, r1, #18
   810c4:	d40a      	bmi.n	810dc <_vfiprintf_r+0x48>
   810c6:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   810ca:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
   810ce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   810d2:	f8ab 100c 	strh.w	r1, [fp, #12]
   810d6:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
   810da:	b289      	uxth	r1, r1
   810dc:	0708      	lsls	r0, r1, #28
   810de:	f140 80b3 	bpl.w	81248 <_vfiprintf_r+0x1b4>
   810e2:	f8db 3010 	ldr.w	r3, [fp, #16]
   810e6:	2b00      	cmp	r3, #0
   810e8:	f000 80ae 	beq.w	81248 <_vfiprintf_r+0x1b4>
   810ec:	f001 031a 	and.w	r3, r1, #26
   810f0:	2b0a      	cmp	r3, #10
   810f2:	f000 80b5 	beq.w	81260 <_vfiprintf_r+0x1cc>
   810f6:	2300      	movs	r3, #0
   810f8:	f10d 0a70 	add.w	sl, sp, #112	; 0x70
   810fc:	46d1      	mov	r9, sl
   810fe:	930b      	str	r3, [sp, #44]	; 0x2c
   81100:	9303      	str	r3, [sp, #12]
   81102:	9311      	str	r3, [sp, #68]	; 0x44
   81104:	9310      	str	r3, [sp, #64]	; 0x40
   81106:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   8110a:	f8cd b010 	str.w	fp, [sp, #16]
   8110e:	f898 3000 	ldrb.w	r3, [r8]
   81112:	4644      	mov	r4, r8
   81114:	b1fb      	cbz	r3, 81156 <_vfiprintf_r+0xc2>
   81116:	2b25      	cmp	r3, #37	; 0x25
   81118:	d102      	bne.n	81120 <_vfiprintf_r+0x8c>
   8111a:	e01c      	b.n	81156 <_vfiprintf_r+0xc2>
   8111c:	2b25      	cmp	r3, #37	; 0x25
   8111e:	d003      	beq.n	81128 <_vfiprintf_r+0x94>
   81120:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   81124:	2b00      	cmp	r3, #0
   81126:	d1f9      	bne.n	8111c <_vfiprintf_r+0x88>
   81128:	eba4 0508 	sub.w	r5, r4, r8
   8112c:	b19d      	cbz	r5, 81156 <_vfiprintf_r+0xc2>
   8112e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   81130:	9a11      	ldr	r2, [sp, #68]	; 0x44
   81132:	3301      	adds	r3, #1
   81134:	442a      	add	r2, r5
   81136:	2b07      	cmp	r3, #7
   81138:	f8c9 8000 	str.w	r8, [r9]
   8113c:	f8c9 5004 	str.w	r5, [r9, #4]
   81140:	9211      	str	r2, [sp, #68]	; 0x44
   81142:	9310      	str	r3, [sp, #64]	; 0x40
   81144:	dd7a      	ble.n	8123c <_vfiprintf_r+0x1a8>
   81146:	2a00      	cmp	r2, #0
   81148:	f040 84b5 	bne.w	81ab6 <_vfiprintf_r+0xa22>
   8114c:	46d1      	mov	r9, sl
   8114e:	9b03      	ldr	r3, [sp, #12]
   81150:	9210      	str	r2, [sp, #64]	; 0x40
   81152:	442b      	add	r3, r5
   81154:	9303      	str	r3, [sp, #12]
   81156:	7823      	ldrb	r3, [r4, #0]
   81158:	2b00      	cmp	r3, #0
   8115a:	f000 83e5 	beq.w	81928 <_vfiprintf_r+0x894>
   8115e:	2000      	movs	r0, #0
   81160:	f04f 0300 	mov.w	r3, #0
   81164:	f104 0801 	add.w	r8, r4, #1
   81168:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
   8116c:	7862      	ldrb	r2, [r4, #1]
   8116e:	4606      	mov	r6, r0
   81170:	4605      	mov	r5, r0
   81172:	4603      	mov	r3, r0
   81174:	f04f 34ff 	mov.w	r4, #4294967295
   81178:	f108 0801 	add.w	r8, r8, #1
   8117c:	f1a2 0120 	sub.w	r1, r2, #32
   81180:	2958      	cmp	r1, #88	; 0x58
   81182:	f200 82d9 	bhi.w	81738 <_vfiprintf_r+0x6a4>
   81186:	e8df f011 	tbh	[pc, r1, lsl #1]
   8118a:	0228      	.short	0x0228
   8118c:	02d702d7 	.word	0x02d702d7
   81190:	02d70230 	.word	0x02d70230
   81194:	02d702d7 	.word	0x02d702d7
   81198:	02d702d7 	.word	0x02d702d7
   8119c:	00a002d7 	.word	0x00a002d7
   811a0:	02d70288 	.word	0x02d70288
   811a4:	02b800a8 	.word	0x02b800a8
   811a8:	01a602d7 	.word	0x01a602d7
   811ac:	01ab01ab 	.word	0x01ab01ab
   811b0:	01ab01ab 	.word	0x01ab01ab
   811b4:	01ab01ab 	.word	0x01ab01ab
   811b8:	01ab01ab 	.word	0x01ab01ab
   811bc:	02d701ab 	.word	0x02d701ab
   811c0:	02d702d7 	.word	0x02d702d7
   811c4:	02d702d7 	.word	0x02d702d7
   811c8:	02d702d7 	.word	0x02d702d7
   811cc:	02d702d7 	.word	0x02d702d7
   811d0:	01b902d7 	.word	0x01b902d7
   811d4:	02d702d7 	.word	0x02d702d7
   811d8:	02d702d7 	.word	0x02d702d7
   811dc:	02d702d7 	.word	0x02d702d7
   811e0:	02d702d7 	.word	0x02d702d7
   811e4:	02d702d7 	.word	0x02d702d7
   811e8:	02d7019e 	.word	0x02d7019e
   811ec:	02d702d7 	.word	0x02d702d7
   811f0:	02d702d7 	.word	0x02d702d7
   811f4:	02d701a2 	.word	0x02d701a2
   811f8:	025a02d7 	.word	0x025a02d7
   811fc:	02d702d7 	.word	0x02d702d7
   81200:	02d702d7 	.word	0x02d702d7
   81204:	02d702d7 	.word	0x02d702d7
   81208:	02d702d7 	.word	0x02d702d7
   8120c:	02d702d7 	.word	0x02d702d7
   81210:	02220261 	.word	0x02220261
   81214:	02d702d7 	.word	0x02d702d7
   81218:	027602d7 	.word	0x027602d7
   8121c:	02d70222 	.word	0x02d70222
   81220:	027b02d7 	.word	0x027b02d7
   81224:	01fc02d7 	.word	0x01fc02d7
   81228:	02100189 	.word	0x02100189
   8122c:	02d702d2 	.word	0x02d702d2
   81230:	02d70295 	.word	0x02d70295
   81234:	02d700ad 	.word	0x02d700ad
   81238:	023502d7 	.word	0x023502d7
   8123c:	f109 0908 	add.w	r9, r9, #8
   81240:	9b03      	ldr	r3, [sp, #12]
   81242:	442b      	add	r3, r5
   81244:	9303      	str	r3, [sp, #12]
   81246:	e786      	b.n	81156 <_vfiprintf_r+0xc2>
   81248:	4659      	mov	r1, fp
   8124a:	9806      	ldr	r0, [sp, #24]
   8124c:	f000 fe02 	bl	81e54 <__swsetup_r>
   81250:	bb18      	cbnz	r0, 8129a <_vfiprintf_r+0x206>
   81252:	f8bb 100c 	ldrh.w	r1, [fp, #12]
   81256:	f001 031a 	and.w	r3, r1, #26
   8125a:	2b0a      	cmp	r3, #10
   8125c:	f47f af4b 	bne.w	810f6 <_vfiprintf_r+0x62>
   81260:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
   81264:	2b00      	cmp	r3, #0
   81266:	f6ff af46 	blt.w	810f6 <_vfiprintf_r+0x62>
   8126a:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   8126e:	07db      	lsls	r3, r3, #31
   81270:	d405      	bmi.n	8127e <_vfiprintf_r+0x1ea>
   81272:	058f      	lsls	r7, r1, #22
   81274:	d403      	bmi.n	8127e <_vfiprintf_r+0x1ea>
   81276:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   8127a:	f001 fb15 	bl	828a8 <__retarget_lock_release_recursive>
   8127e:	462b      	mov	r3, r5
   81280:	4642      	mov	r2, r8
   81282:	4659      	mov	r1, fp
   81284:	9806      	ldr	r0, [sp, #24]
   81286:	f000 fd49 	bl	81d1c <__sbprintf>
   8128a:	9003      	str	r0, [sp, #12]
   8128c:	9803      	ldr	r0, [sp, #12]
   8128e:	b02d      	add	sp, #180	; 0xb4
   81290:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81294:	f000 ff46 	bl	82124 <__sinit>
   81298:	e709      	b.n	810ae <_vfiprintf_r+0x1a>
   8129a:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   8129e:	07d9      	lsls	r1, r3, #31
   812a0:	d404      	bmi.n	812ac <_vfiprintf_r+0x218>
   812a2:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   812a6:	059a      	lsls	r2, r3, #22
   812a8:	f140 84ae 	bpl.w	81c08 <_vfiprintf_r+0xb74>
   812ac:	f04f 33ff 	mov.w	r3, #4294967295
   812b0:	9303      	str	r3, [sp, #12]
   812b2:	9803      	ldr	r0, [sp, #12]
   812b4:	b02d      	add	sp, #180	; 0xb4
   812b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   812ba:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   812be:	f001 faf1 	bl	828a4 <__retarget_lock_acquire_recursive>
   812c2:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
   812c6:	b281      	uxth	r1, r0
   812c8:	e6fb      	b.n	810c2 <_vfiprintf_r+0x2e>
   812ca:	9907      	ldr	r1, [sp, #28]
   812cc:	460a      	mov	r2, r1
   812ce:	680d      	ldr	r5, [r1, #0]
   812d0:	3204      	adds	r2, #4
   812d2:	2d00      	cmp	r5, #0
   812d4:	9207      	str	r2, [sp, #28]
   812d6:	da02      	bge.n	812de <_vfiprintf_r+0x24a>
   812d8:	426d      	negs	r5, r5
   812da:	f043 0304 	orr.w	r3, r3, #4
   812de:	f898 2000 	ldrb.w	r2, [r8]
   812e2:	e749      	b.n	81178 <_vfiprintf_r+0xe4>
   812e4:	9508      	str	r5, [sp, #32]
   812e6:	069e      	lsls	r6, r3, #26
   812e8:	f100 845a 	bmi.w	81ba0 <_vfiprintf_r+0xb0c>
   812ec:	9907      	ldr	r1, [sp, #28]
   812ee:	06dd      	lsls	r5, r3, #27
   812f0:	460a      	mov	r2, r1
   812f2:	f100 83ef 	bmi.w	81ad4 <_vfiprintf_r+0xa40>
   812f6:	0658      	lsls	r0, r3, #25
   812f8:	f140 83ec 	bpl.w	81ad4 <_vfiprintf_r+0xa40>
   812fc:	2700      	movs	r7, #0
   812fe:	2201      	movs	r2, #1
   81300:	880e      	ldrh	r6, [r1, #0]
   81302:	3104      	adds	r1, #4
   81304:	9107      	str	r1, [sp, #28]
   81306:	f04f 0100 	mov.w	r1, #0
   8130a:	2500      	movs	r5, #0
   8130c:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
   81310:	1c61      	adds	r1, r4, #1
   81312:	f000 8117 	beq.w	81544 <_vfiprintf_r+0x4b0>
   81316:	f023 0180 	bic.w	r1, r3, #128	; 0x80
   8131a:	9102      	str	r1, [sp, #8]
   8131c:	ea56 0107 	orrs.w	r1, r6, r7
   81320:	f040 8115 	bne.w	8154e <_vfiprintf_r+0x4ba>
   81324:	2c00      	cmp	r4, #0
   81326:	f040 835b 	bne.w	819e0 <_vfiprintf_r+0x94c>
   8132a:	2a00      	cmp	r2, #0
   8132c:	f040 83b6 	bne.w	81a9c <_vfiprintf_r+0xa08>
   81330:	f013 0301 	ands.w	r3, r3, #1
   81334:	9305      	str	r3, [sp, #20]
   81336:	f000 8455 	beq.w	81be4 <_vfiprintf_r+0xb50>
   8133a:	2330      	movs	r3, #48	; 0x30
   8133c:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
   81340:	f80b 3d41 	strb.w	r3, [fp, #-65]!
   81344:	9b05      	ldr	r3, [sp, #20]
   81346:	42a3      	cmp	r3, r4
   81348:	bfb8      	it	lt
   8134a:	4623      	movlt	r3, r4
   8134c:	9301      	str	r3, [sp, #4]
   8134e:	b10d      	cbz	r5, 81354 <_vfiprintf_r+0x2c0>
   81350:	3301      	adds	r3, #1
   81352:	9301      	str	r3, [sp, #4]
   81354:	9b02      	ldr	r3, [sp, #8]
   81356:	f013 0302 	ands.w	r3, r3, #2
   8135a:	9309      	str	r3, [sp, #36]	; 0x24
   8135c:	d002      	beq.n	81364 <_vfiprintf_r+0x2d0>
   8135e:	9b01      	ldr	r3, [sp, #4]
   81360:	3302      	adds	r3, #2
   81362:	9301      	str	r3, [sp, #4]
   81364:	9b02      	ldr	r3, [sp, #8]
   81366:	f013 0384 	ands.w	r3, r3, #132	; 0x84
   8136a:	930a      	str	r3, [sp, #40]	; 0x28
   8136c:	f040 8215 	bne.w	8179a <_vfiprintf_r+0x706>
   81370:	9b08      	ldr	r3, [sp, #32]
   81372:	9a01      	ldr	r2, [sp, #4]
   81374:	1a9d      	subs	r5, r3, r2
   81376:	2d00      	cmp	r5, #0
   81378:	f340 820f 	ble.w	8179a <_vfiprintf_r+0x706>
   8137c:	2d10      	cmp	r5, #16
   8137e:	f340 8484 	ble.w	81c8a <_vfiprintf_r+0xbf6>
   81382:	9b10      	ldr	r3, [sp, #64]	; 0x40
   81384:	46ce      	mov	lr, r9
   81386:	2710      	movs	r7, #16
   81388:	46a1      	mov	r9, r4
   8138a:	9a11      	ldr	r2, [sp, #68]	; 0x44
   8138c:	4ec5      	ldr	r6, [pc, #788]	; (816a4 <_vfiprintf_r+0x610>)
   8138e:	4619      	mov	r1, r3
   81390:	9c06      	ldr	r4, [sp, #24]
   81392:	e007      	b.n	813a4 <_vfiprintf_r+0x310>
   81394:	f101 0c02 	add.w	ip, r1, #2
   81398:	4601      	mov	r1, r0
   8139a:	f10e 0e08 	add.w	lr, lr, #8
   8139e:	3d10      	subs	r5, #16
   813a0:	2d10      	cmp	r5, #16
   813a2:	dd11      	ble.n	813c8 <_vfiprintf_r+0x334>
   813a4:	1c48      	adds	r0, r1, #1
   813a6:	3210      	adds	r2, #16
   813a8:	2807      	cmp	r0, #7
   813aa:	9211      	str	r2, [sp, #68]	; 0x44
   813ac:	e88e 00c0 	stmia.w	lr, {r6, r7}
   813b0:	9010      	str	r0, [sp, #64]	; 0x40
   813b2:	ddef      	ble.n	81394 <_vfiprintf_r+0x300>
   813b4:	2a00      	cmp	r2, #0
   813b6:	f040 81d9 	bne.w	8176c <_vfiprintf_r+0x6d8>
   813ba:	3d10      	subs	r5, #16
   813bc:	2d10      	cmp	r5, #16
   813be:	4611      	mov	r1, r2
   813c0:	f04f 0c01 	mov.w	ip, #1
   813c4:	46d6      	mov	lr, sl
   813c6:	dced      	bgt.n	813a4 <_vfiprintf_r+0x310>
   813c8:	464c      	mov	r4, r9
   813ca:	4661      	mov	r1, ip
   813cc:	46f1      	mov	r9, lr
   813ce:	442a      	add	r2, r5
   813d0:	2907      	cmp	r1, #7
   813d2:	9211      	str	r2, [sp, #68]	; 0x44
   813d4:	f8c9 6000 	str.w	r6, [r9]
   813d8:	f8c9 5004 	str.w	r5, [r9, #4]
   813dc:	9110      	str	r1, [sp, #64]	; 0x40
   813de:	f300 82eb 	bgt.w	819b8 <_vfiprintf_r+0x924>
   813e2:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   813e6:	f109 0908 	add.w	r9, r9, #8
   813ea:	1c48      	adds	r0, r1, #1
   813ec:	2d00      	cmp	r5, #0
   813ee:	f040 81dc 	bne.w	817aa <_vfiprintf_r+0x716>
   813f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   813f4:	2b00      	cmp	r3, #0
   813f6:	f000 81f6 	beq.w	817e6 <_vfiprintf_r+0x752>
   813fa:	2102      	movs	r1, #2
   813fc:	ab0e      	add	r3, sp, #56	; 0x38
   813fe:	440a      	add	r2, r1
   81400:	2807      	cmp	r0, #7
   81402:	9211      	str	r2, [sp, #68]	; 0x44
   81404:	9010      	str	r0, [sp, #64]	; 0x40
   81406:	f8c9 1004 	str.w	r1, [r9, #4]
   8140a:	f8c9 3000 	str.w	r3, [r9]
   8140e:	f340 81e6 	ble.w	817de <_vfiprintf_r+0x74a>
   81412:	2a00      	cmp	r2, #0
   81414:	f040 8395 	bne.w	81b42 <_vfiprintf_r+0xaae>
   81418:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8141a:	2001      	movs	r0, #1
   8141c:	2b80      	cmp	r3, #128	; 0x80
   8141e:	4611      	mov	r1, r2
   81420:	46d1      	mov	r9, sl
   81422:	f040 81e4 	bne.w	817ee <_vfiprintf_r+0x75a>
   81426:	9b08      	ldr	r3, [sp, #32]
   81428:	9d01      	ldr	r5, [sp, #4]
   8142a:	1b5e      	subs	r6, r3, r5
   8142c:	2e00      	cmp	r6, #0
   8142e:	f340 81de 	ble.w	817ee <_vfiprintf_r+0x75a>
   81432:	2e10      	cmp	r6, #16
   81434:	f340 843c 	ble.w	81cb0 <_vfiprintf_r+0xc1c>
   81438:	46cc      	mov	ip, r9
   8143a:	2710      	movs	r7, #16
   8143c:	46a1      	mov	r9, r4
   8143e:	4d9a      	ldr	r5, [pc, #616]	; (816a8 <_vfiprintf_r+0x614>)
   81440:	9c06      	ldr	r4, [sp, #24]
   81442:	e007      	b.n	81454 <_vfiprintf_r+0x3c0>
   81444:	f101 0e02 	add.w	lr, r1, #2
   81448:	4601      	mov	r1, r0
   8144a:	f10c 0c08 	add.w	ip, ip, #8
   8144e:	3e10      	subs	r6, #16
   81450:	2e10      	cmp	r6, #16
   81452:	dd11      	ble.n	81478 <_vfiprintf_r+0x3e4>
   81454:	1c48      	adds	r0, r1, #1
   81456:	3210      	adds	r2, #16
   81458:	2807      	cmp	r0, #7
   8145a:	9211      	str	r2, [sp, #68]	; 0x44
   8145c:	e88c 00a0 	stmia.w	ip, {r5, r7}
   81460:	9010      	str	r0, [sp, #64]	; 0x40
   81462:	ddef      	ble.n	81444 <_vfiprintf_r+0x3b0>
   81464:	2a00      	cmp	r2, #0
   81466:	f040 829b 	bne.w	819a0 <_vfiprintf_r+0x90c>
   8146a:	3e10      	subs	r6, #16
   8146c:	2e10      	cmp	r6, #16
   8146e:	f04f 0e01 	mov.w	lr, #1
   81472:	4611      	mov	r1, r2
   81474:	46d4      	mov	ip, sl
   81476:	dced      	bgt.n	81454 <_vfiprintf_r+0x3c0>
   81478:	464c      	mov	r4, r9
   8147a:	46e1      	mov	r9, ip
   8147c:	4432      	add	r2, r6
   8147e:	f1be 0f07 	cmp.w	lr, #7
   81482:	9211      	str	r2, [sp, #68]	; 0x44
   81484:	e889 0060 	stmia.w	r9, {r5, r6}
   81488:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
   8148c:	f300 8366 	bgt.w	81b5c <_vfiprintf_r+0xac8>
   81490:	f109 0908 	add.w	r9, r9, #8
   81494:	f10e 0001 	add.w	r0, lr, #1
   81498:	4671      	mov	r1, lr
   8149a:	e1a8      	b.n	817ee <_vfiprintf_r+0x75a>
   8149c:	9508      	str	r5, [sp, #32]
   8149e:	f013 0220 	ands.w	r2, r3, #32
   814a2:	f040 8389 	bne.w	81bb8 <_vfiprintf_r+0xb24>
   814a6:	f013 0110 	ands.w	r1, r3, #16
   814aa:	f040 8319 	bne.w	81ae0 <_vfiprintf_r+0xa4c>
   814ae:	f013 0240 	ands.w	r2, r3, #64	; 0x40
   814b2:	f000 8315 	beq.w	81ae0 <_vfiprintf_r+0xa4c>
   814b6:	9807      	ldr	r0, [sp, #28]
   814b8:	460a      	mov	r2, r1
   814ba:	4601      	mov	r1, r0
   814bc:	3104      	adds	r1, #4
   814be:	8806      	ldrh	r6, [r0, #0]
   814c0:	2700      	movs	r7, #0
   814c2:	9107      	str	r1, [sp, #28]
   814c4:	e71f      	b.n	81306 <_vfiprintf_r+0x272>
   814c6:	9508      	str	r5, [sp, #32]
   814c8:	f043 0310 	orr.w	r3, r3, #16
   814cc:	e7e7      	b.n	8149e <_vfiprintf_r+0x40a>
   814ce:	9508      	str	r5, [sp, #32]
   814d0:	f043 0310 	orr.w	r3, r3, #16
   814d4:	e707      	b.n	812e6 <_vfiprintf_r+0x252>
   814d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   814da:	f898 2000 	ldrb.w	r2, [r8]
   814de:	e64b      	b.n	81178 <_vfiprintf_r+0xe4>
   814e0:	2500      	movs	r5, #0
   814e2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   814e6:	f818 2b01 	ldrb.w	r2, [r8], #1
   814ea:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   814ee:	eb01 0545 	add.w	r5, r1, r5, lsl #1
   814f2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   814f6:	2909      	cmp	r1, #9
   814f8:	d9f5      	bls.n	814e6 <_vfiprintf_r+0x452>
   814fa:	e63f      	b.n	8117c <_vfiprintf_r+0xe8>
   814fc:	9508      	str	r5, [sp, #32]
   814fe:	2800      	cmp	r0, #0
   81500:	f040 8402 	bne.w	81d08 <_vfiprintf_r+0xc74>
   81504:	f043 0310 	orr.w	r3, r3, #16
   81508:	069e      	lsls	r6, r3, #26
   8150a:	f100 833d 	bmi.w	81b88 <_vfiprintf_r+0xaf4>
   8150e:	9907      	ldr	r1, [sp, #28]
   81510:	06dd      	lsls	r5, r3, #27
   81512:	460a      	mov	r2, r1
   81514:	f100 82f0 	bmi.w	81af8 <_vfiprintf_r+0xa64>
   81518:	0658      	lsls	r0, r3, #25
   8151a:	f140 82ed 	bpl.w	81af8 <_vfiprintf_r+0xa64>
   8151e:	f9b1 6000 	ldrsh.w	r6, [r1]
   81522:	3204      	adds	r2, #4
   81524:	17f7      	asrs	r7, r6, #31
   81526:	4630      	mov	r0, r6
   81528:	4639      	mov	r1, r7
   8152a:	9207      	str	r2, [sp, #28]
   8152c:	2800      	cmp	r0, #0
   8152e:	f171 0200 	sbcs.w	r2, r1, #0
   81532:	f2c0 835a 	blt.w	81bea <_vfiprintf_r+0xb56>
   81536:	1c61      	adds	r1, r4, #1
   81538:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   8153c:	f04f 0201 	mov.w	r2, #1
   81540:	f47f aee9 	bne.w	81316 <_vfiprintf_r+0x282>
   81544:	ea56 0107 	orrs.w	r1, r6, r7
   81548:	f000 824b 	beq.w	819e2 <_vfiprintf_r+0x94e>
   8154c:	9302      	str	r3, [sp, #8]
   8154e:	2a01      	cmp	r2, #1
   81550:	f000 828a 	beq.w	81a68 <_vfiprintf_r+0x9d4>
   81554:	2a02      	cmp	r2, #2
   81556:	f040 825a 	bne.w	81a0e <_vfiprintf_r+0x97a>
   8155a:	46d3      	mov	fp, sl
   8155c:	980b      	ldr	r0, [sp, #44]	; 0x2c
   8155e:	0933      	lsrs	r3, r6, #4
   81560:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
   81564:	0939      	lsrs	r1, r7, #4
   81566:	f006 020f 	and.w	r2, r6, #15
   8156a:	460f      	mov	r7, r1
   8156c:	461e      	mov	r6, r3
   8156e:	5c83      	ldrb	r3, [r0, r2]
   81570:	f80b 3d01 	strb.w	r3, [fp, #-1]!
   81574:	ea56 0307 	orrs.w	r3, r6, r7
   81578:	d1f1      	bne.n	8155e <_vfiprintf_r+0x4ca>
   8157a:	ebaa 030b 	sub.w	r3, sl, fp
   8157e:	9305      	str	r3, [sp, #20]
   81580:	e6e0      	b.n	81344 <_vfiprintf_r+0x2b0>
   81582:	2800      	cmp	r0, #0
   81584:	f040 83bd 	bne.w	81d02 <_vfiprintf_r+0xc6e>
   81588:	0699      	lsls	r1, r3, #26
   8158a:	f100 8359 	bmi.w	81c40 <_vfiprintf_r+0xbac>
   8158e:	06da      	lsls	r2, r3, #27
   81590:	f100 80e5 	bmi.w	8175e <_vfiprintf_r+0x6ca>
   81594:	065b      	lsls	r3, r3, #25
   81596:	f140 80e2 	bpl.w	8175e <_vfiprintf_r+0x6ca>
   8159a:	9a07      	ldr	r2, [sp, #28]
   8159c:	6813      	ldr	r3, [r2, #0]
   8159e:	3204      	adds	r2, #4
   815a0:	9207      	str	r2, [sp, #28]
   815a2:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   815a6:	801a      	strh	r2, [r3, #0]
   815a8:	e5b1      	b.n	8110e <_vfiprintf_r+0x7a>
   815aa:	2278      	movs	r2, #120	; 0x78
   815ac:	2130      	movs	r1, #48	; 0x30
   815ae:	9508      	str	r5, [sp, #32]
   815b0:	9d07      	ldr	r5, [sp, #28]
   815b2:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
   815b6:	1d2a      	adds	r2, r5, #4
   815b8:	9207      	str	r2, [sp, #28]
   815ba:	4a3c      	ldr	r2, [pc, #240]	; (816ac <_vfiprintf_r+0x618>)
   815bc:	682e      	ldr	r6, [r5, #0]
   815be:	920b      	str	r2, [sp, #44]	; 0x2c
   815c0:	f043 0302 	orr.w	r3, r3, #2
   815c4:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
   815c8:	2700      	movs	r7, #0
   815ca:	2202      	movs	r2, #2
   815cc:	e69b      	b.n	81306 <_vfiprintf_r+0x272>
   815ce:	9508      	str	r5, [sp, #32]
   815d0:	2800      	cmp	r0, #0
   815d2:	d099      	beq.n	81508 <_vfiprintf_r+0x474>
   815d4:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   815d8:	e796      	b.n	81508 <_vfiprintf_r+0x474>
   815da:	f898 2000 	ldrb.w	r2, [r8]
   815de:	2e00      	cmp	r6, #0
   815e0:	f47f adca 	bne.w	81178 <_vfiprintf_r+0xe4>
   815e4:	2001      	movs	r0, #1
   815e6:	2620      	movs	r6, #32
   815e8:	e5c6      	b.n	81178 <_vfiprintf_r+0xe4>
   815ea:	f043 0301 	orr.w	r3, r3, #1
   815ee:	f898 2000 	ldrb.w	r2, [r8]
   815f2:	e5c1      	b.n	81178 <_vfiprintf_r+0xe4>
   815f4:	9508      	str	r5, [sp, #32]
   815f6:	2800      	cmp	r0, #0
   815f8:	f040 8380 	bne.w	81cfc <_vfiprintf_r+0xc68>
   815fc:	492b      	ldr	r1, [pc, #172]	; (816ac <_vfiprintf_r+0x618>)
   815fe:	910b      	str	r1, [sp, #44]	; 0x2c
   81600:	069f      	lsls	r7, r3, #26
   81602:	f100 82e5 	bmi.w	81bd0 <_vfiprintf_r+0xb3c>
   81606:	9807      	ldr	r0, [sp, #28]
   81608:	06de      	lsls	r6, r3, #27
   8160a:	4601      	mov	r1, r0
   8160c:	f100 826f 	bmi.w	81aee <_vfiprintf_r+0xa5a>
   81610:	065d      	lsls	r5, r3, #25
   81612:	f140 826c 	bpl.w	81aee <_vfiprintf_r+0xa5a>
   81616:	2700      	movs	r7, #0
   81618:	3104      	adds	r1, #4
   8161a:	8806      	ldrh	r6, [r0, #0]
   8161c:	9107      	str	r1, [sp, #28]
   8161e:	07d8      	lsls	r0, r3, #31
   81620:	f140 8220 	bpl.w	81a64 <_vfiprintf_r+0x9d0>
   81624:	ea56 0107 	orrs.w	r1, r6, r7
   81628:	f000 821c 	beq.w	81a64 <_vfiprintf_r+0x9d0>
   8162c:	2130      	movs	r1, #48	; 0x30
   8162e:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
   81632:	f043 0302 	orr.w	r3, r3, #2
   81636:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
   8163a:	2202      	movs	r2, #2
   8163c:	e663      	b.n	81306 <_vfiprintf_r+0x272>
   8163e:	9508      	str	r5, [sp, #32]
   81640:	2800      	cmp	r0, #0
   81642:	f040 8355 	bne.w	81cf0 <_vfiprintf_r+0xc5c>
   81646:	491a      	ldr	r1, [pc, #104]	; (816b0 <_vfiprintf_r+0x61c>)
   81648:	910b      	str	r1, [sp, #44]	; 0x2c
   8164a:	e7d9      	b.n	81600 <_vfiprintf_r+0x56c>
   8164c:	2201      	movs	r2, #1
   8164e:	9807      	ldr	r0, [sp, #28]
   81650:	4611      	mov	r1, r2
   81652:	9201      	str	r2, [sp, #4]
   81654:	6802      	ldr	r2, [r0, #0]
   81656:	f04f 0400 	mov.w	r4, #0
   8165a:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   8165e:	4602      	mov	r2, r0
   81660:	3204      	adds	r2, #4
   81662:	9508      	str	r5, [sp, #32]
   81664:	f88d 4037 	strb.w	r4, [sp, #55]	; 0x37
   81668:	9105      	str	r1, [sp, #20]
   8166a:	9207      	str	r2, [sp, #28]
   8166c:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
   81670:	9302      	str	r3, [sp, #8]
   81672:	2400      	movs	r4, #0
   81674:	e66e      	b.n	81354 <_vfiprintf_r+0x2c0>
   81676:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8167a:	f898 2000 	ldrb.w	r2, [r8]
   8167e:	e57b      	b.n	81178 <_vfiprintf_r+0xe4>
   81680:	f898 2000 	ldrb.w	r2, [r8]
   81684:	2a6c      	cmp	r2, #108	; 0x6c
   81686:	bf03      	ittte	eq
   81688:	f898 2001 	ldrbeq.w	r2, [r8, #1]
   8168c:	f043 0320 	orreq.w	r3, r3, #32
   81690:	f108 0801 	addeq.w	r8, r8, #1
   81694:	f043 0310 	orrne.w	r3, r3, #16
   81698:	e56e      	b.n	81178 <_vfiprintf_r+0xe4>
   8169a:	f898 2000 	ldrb.w	r2, [r8]
   8169e:	2001      	movs	r0, #1
   816a0:	262b      	movs	r6, #43	; 0x2b
   816a2:	e569      	b.n	81178 <_vfiprintf_r+0xe4>
   816a4:	00083c44 	.word	0x00083c44
   816a8:	00083c54 	.word	0x00083c54
   816ac:	00083c28 	.word	0x00083c28
   816b0:	00083c14 	.word	0x00083c14
   816b4:	f04f 0200 	mov.w	r2, #0
   816b8:	9907      	ldr	r1, [sp, #28]
   816ba:	9508      	str	r5, [sp, #32]
   816bc:	f8d1 b000 	ldr.w	fp, [r1]
   816c0:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   816c4:	1d0d      	adds	r5, r1, #4
   816c6:	f1bb 0f00 	cmp.w	fp, #0
   816ca:	f000 82e4 	beq.w	81c96 <_vfiprintf_r+0xc02>
   816ce:	1c67      	adds	r7, r4, #1
   816d0:	f000 82c3 	beq.w	81c5a <_vfiprintf_r+0xbc6>
   816d4:	4622      	mov	r2, r4
   816d6:	2100      	movs	r1, #0
   816d8:	4658      	mov	r0, fp
   816da:	9301      	str	r3, [sp, #4]
   816dc:	f001 fc1e 	bl	82f1c <memchr>
   816e0:	9b01      	ldr	r3, [sp, #4]
   816e2:	2800      	cmp	r0, #0
   816e4:	f000 82e8 	beq.w	81cb8 <_vfiprintf_r+0xc24>
   816e8:	eba0 020b 	sub.w	r2, r0, fp
   816ec:	9507      	str	r5, [sp, #28]
   816ee:	9205      	str	r2, [sp, #20]
   816f0:	9302      	str	r3, [sp, #8]
   816f2:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   816f6:	2400      	movs	r4, #0
   816f8:	e624      	b.n	81344 <_vfiprintf_r+0x2b0>
   816fa:	f898 2000 	ldrb.w	r2, [r8]
   816fe:	f108 0701 	add.w	r7, r8, #1
   81702:	2a2a      	cmp	r2, #42	; 0x2a
   81704:	f000 82e9 	beq.w	81cda <_vfiprintf_r+0xc46>
   81708:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   8170c:	2909      	cmp	r1, #9
   8170e:	46b8      	mov	r8, r7
   81710:	f04f 0400 	mov.w	r4, #0
   81714:	f63f ad32 	bhi.w	8117c <_vfiprintf_r+0xe8>
   81718:	f818 2b01 	ldrb.w	r2, [r8], #1
   8171c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   81720:	eb01 0444 	add.w	r4, r1, r4, lsl #1
   81724:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   81728:	2909      	cmp	r1, #9
   8172a:	d9f5      	bls.n	81718 <_vfiprintf_r+0x684>
   8172c:	e526      	b.n	8117c <_vfiprintf_r+0xe8>
   8172e:	f043 0320 	orr.w	r3, r3, #32
   81732:	f898 2000 	ldrb.w	r2, [r8]
   81736:	e51f      	b.n	81178 <_vfiprintf_r+0xe4>
   81738:	9508      	str	r5, [sp, #32]
   8173a:	2800      	cmp	r0, #0
   8173c:	f040 82db 	bne.w	81cf6 <_vfiprintf_r+0xc62>
   81740:	2a00      	cmp	r2, #0
   81742:	f000 80f1 	beq.w	81928 <_vfiprintf_r+0x894>
   81746:	2101      	movs	r1, #1
   81748:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   8174c:	f04f 0200 	mov.w	r2, #0
   81750:	9101      	str	r1, [sp, #4]
   81752:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   81756:	9105      	str	r1, [sp, #20]
   81758:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
   8175c:	e788      	b.n	81670 <_vfiprintf_r+0x5dc>
   8175e:	9a07      	ldr	r2, [sp, #28]
   81760:	6813      	ldr	r3, [r2, #0]
   81762:	3204      	adds	r2, #4
   81764:	9207      	str	r2, [sp, #28]
   81766:	9a03      	ldr	r2, [sp, #12]
   81768:	601a      	str	r2, [r3, #0]
   8176a:	e4d0      	b.n	8110e <_vfiprintf_r+0x7a>
   8176c:	aa0f      	add	r2, sp, #60	; 0x3c
   8176e:	9904      	ldr	r1, [sp, #16]
   81770:	4620      	mov	r0, r4
   81772:	f7ff fc4f 	bl	81014 <__sprint_r.part.0>
   81776:	2800      	cmp	r0, #0
   81778:	f040 8143 	bne.w	81a02 <_vfiprintf_r+0x96e>
   8177c:	9910      	ldr	r1, [sp, #64]	; 0x40
   8177e:	46d6      	mov	lr, sl
   81780:	9a11      	ldr	r2, [sp, #68]	; 0x44
   81782:	f101 0c01 	add.w	ip, r1, #1
   81786:	e60a      	b.n	8139e <_vfiprintf_r+0x30a>
   81788:	aa0f      	add	r2, sp, #60	; 0x3c
   8178a:	9904      	ldr	r1, [sp, #16]
   8178c:	9806      	ldr	r0, [sp, #24]
   8178e:	f7ff fc41 	bl	81014 <__sprint_r.part.0>
   81792:	2800      	cmp	r0, #0
   81794:	f040 8135 	bne.w	81a02 <_vfiprintf_r+0x96e>
   81798:	46d1      	mov	r9, sl
   8179a:	9910      	ldr	r1, [sp, #64]	; 0x40
   8179c:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   817a0:	9a11      	ldr	r2, [sp, #68]	; 0x44
   817a2:	1c48      	adds	r0, r1, #1
   817a4:	2d00      	cmp	r5, #0
   817a6:	f43f ae24 	beq.w	813f2 <_vfiprintf_r+0x35e>
   817aa:	2101      	movs	r1, #1
   817ac:	f10d 0537 	add.w	r5, sp, #55	; 0x37
   817b0:	440a      	add	r2, r1
   817b2:	2807      	cmp	r0, #7
   817b4:	9211      	str	r2, [sp, #68]	; 0x44
   817b6:	9010      	str	r0, [sp, #64]	; 0x40
   817b8:	f8c9 1004 	str.w	r1, [r9, #4]
   817bc:	f8c9 5000 	str.w	r5, [r9]
   817c0:	f340 8109 	ble.w	819d6 <_vfiprintf_r+0x942>
   817c4:	2a00      	cmp	r2, #0
   817c6:	f040 81af 	bne.w	81b28 <_vfiprintf_r+0xa94>
   817ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
   817cc:	2b00      	cmp	r3, #0
   817ce:	f43f ae23 	beq.w	81418 <_vfiprintf_r+0x384>
   817d2:	2202      	movs	r2, #2
   817d4:	4608      	mov	r0, r1
   817d6:	46d1      	mov	r9, sl
   817d8:	ab0e      	add	r3, sp, #56	; 0x38
   817da:	921d      	str	r2, [sp, #116]	; 0x74
   817dc:	931c      	str	r3, [sp, #112]	; 0x70
   817de:	4601      	mov	r1, r0
   817e0:	f109 0908 	add.w	r9, r9, #8
   817e4:	3001      	adds	r0, #1
   817e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   817e8:	2b80      	cmp	r3, #128	; 0x80
   817ea:	f43f ae1c 	beq.w	81426 <_vfiprintf_r+0x392>
   817ee:	9b05      	ldr	r3, [sp, #20]
   817f0:	1ae4      	subs	r4, r4, r3
   817f2:	2c00      	cmp	r4, #0
   817f4:	dd2f      	ble.n	81856 <_vfiprintf_r+0x7c2>
   817f6:	2c10      	cmp	r4, #16
   817f8:	f340 8220 	ble.w	81c3c <_vfiprintf_r+0xba8>
   817fc:	46ce      	mov	lr, r9
   817fe:	2610      	movs	r6, #16
   81800:	4db2      	ldr	r5, [pc, #712]	; (81acc <_vfiprintf_r+0xa38>)
   81802:	9f06      	ldr	r7, [sp, #24]
   81804:	f8dd 9010 	ldr.w	r9, [sp, #16]
   81808:	e006      	b.n	81818 <_vfiprintf_r+0x784>
   8180a:	1c88      	adds	r0, r1, #2
   8180c:	4619      	mov	r1, r3
   8180e:	f10e 0e08 	add.w	lr, lr, #8
   81812:	3c10      	subs	r4, #16
   81814:	2c10      	cmp	r4, #16
   81816:	dd10      	ble.n	8183a <_vfiprintf_r+0x7a6>
   81818:	1c4b      	adds	r3, r1, #1
   8181a:	3210      	adds	r2, #16
   8181c:	2b07      	cmp	r3, #7
   8181e:	9211      	str	r2, [sp, #68]	; 0x44
   81820:	e88e 0060 	stmia.w	lr, {r5, r6}
   81824:	9310      	str	r3, [sp, #64]	; 0x40
   81826:	ddf0      	ble.n	8180a <_vfiprintf_r+0x776>
   81828:	2a00      	cmp	r2, #0
   8182a:	d165      	bne.n	818f8 <_vfiprintf_r+0x864>
   8182c:	3c10      	subs	r4, #16
   8182e:	2c10      	cmp	r4, #16
   81830:	f04f 0001 	mov.w	r0, #1
   81834:	4611      	mov	r1, r2
   81836:	46d6      	mov	lr, sl
   81838:	dcee      	bgt.n	81818 <_vfiprintf_r+0x784>
   8183a:	46f1      	mov	r9, lr
   8183c:	4422      	add	r2, r4
   8183e:	2807      	cmp	r0, #7
   81840:	9211      	str	r2, [sp, #68]	; 0x44
   81842:	f8c9 5000 	str.w	r5, [r9]
   81846:	f8c9 4004 	str.w	r4, [r9, #4]
   8184a:	9010      	str	r0, [sp, #64]	; 0x40
   8184c:	f300 8085 	bgt.w	8195a <_vfiprintf_r+0x8c6>
   81850:	f109 0908 	add.w	r9, r9, #8
   81854:	3001      	adds	r0, #1
   81856:	9905      	ldr	r1, [sp, #20]
   81858:	2807      	cmp	r0, #7
   8185a:	440a      	add	r2, r1
   8185c:	9211      	str	r2, [sp, #68]	; 0x44
   8185e:	f8c9 b000 	str.w	fp, [r9]
   81862:	f8c9 1004 	str.w	r1, [r9, #4]
   81866:	9010      	str	r0, [sp, #64]	; 0x40
   81868:	f340 8082 	ble.w	81970 <_vfiprintf_r+0x8dc>
   8186c:	2a00      	cmp	r2, #0
   8186e:	f040 8118 	bne.w	81aa2 <_vfiprintf_r+0xa0e>
   81872:	9b02      	ldr	r3, [sp, #8]
   81874:	9210      	str	r2, [sp, #64]	; 0x40
   81876:	0758      	lsls	r0, r3, #29
   81878:	d535      	bpl.n	818e6 <_vfiprintf_r+0x852>
   8187a:	9b08      	ldr	r3, [sp, #32]
   8187c:	9901      	ldr	r1, [sp, #4]
   8187e:	1a5c      	subs	r4, r3, r1
   81880:	2c00      	cmp	r4, #0
   81882:	f340 80e7 	ble.w	81a54 <_vfiprintf_r+0x9c0>
   81886:	46d1      	mov	r9, sl
   81888:	2c10      	cmp	r4, #16
   8188a:	f340 820d 	ble.w	81ca8 <_vfiprintf_r+0xc14>
   8188e:	2510      	movs	r5, #16
   81890:	9910      	ldr	r1, [sp, #64]	; 0x40
   81892:	4e8f      	ldr	r6, [pc, #572]	; (81ad0 <_vfiprintf_r+0xa3c>)
   81894:	9f06      	ldr	r7, [sp, #24]
   81896:	f8dd b010 	ldr.w	fp, [sp, #16]
   8189a:	e006      	b.n	818aa <_vfiprintf_r+0x816>
   8189c:	1c88      	adds	r0, r1, #2
   8189e:	4619      	mov	r1, r3
   818a0:	f109 0908 	add.w	r9, r9, #8
   818a4:	3c10      	subs	r4, #16
   818a6:	2c10      	cmp	r4, #16
   818a8:	dd11      	ble.n	818ce <_vfiprintf_r+0x83a>
   818aa:	1c4b      	adds	r3, r1, #1
   818ac:	3210      	adds	r2, #16
   818ae:	2b07      	cmp	r3, #7
   818b0:	9211      	str	r2, [sp, #68]	; 0x44
   818b2:	f8c9 6000 	str.w	r6, [r9]
   818b6:	f8c9 5004 	str.w	r5, [r9, #4]
   818ba:	9310      	str	r3, [sp, #64]	; 0x40
   818bc:	ddee      	ble.n	8189c <_vfiprintf_r+0x808>
   818be:	bb42      	cbnz	r2, 81912 <_vfiprintf_r+0x87e>
   818c0:	3c10      	subs	r4, #16
   818c2:	2c10      	cmp	r4, #16
   818c4:	f04f 0001 	mov.w	r0, #1
   818c8:	4611      	mov	r1, r2
   818ca:	46d1      	mov	r9, sl
   818cc:	dced      	bgt.n	818aa <_vfiprintf_r+0x816>
   818ce:	4422      	add	r2, r4
   818d0:	2807      	cmp	r0, #7
   818d2:	9211      	str	r2, [sp, #68]	; 0x44
   818d4:	f8c9 6000 	str.w	r6, [r9]
   818d8:	f8c9 4004 	str.w	r4, [r9, #4]
   818dc:	9010      	str	r0, [sp, #64]	; 0x40
   818de:	dd51      	ble.n	81984 <_vfiprintf_r+0x8f0>
   818e0:	2a00      	cmp	r2, #0
   818e2:	f040 819a 	bne.w	81c1a <_vfiprintf_r+0xb86>
   818e6:	9b03      	ldr	r3, [sp, #12]
   818e8:	9a08      	ldr	r2, [sp, #32]
   818ea:	9901      	ldr	r1, [sp, #4]
   818ec:	428a      	cmp	r2, r1
   818ee:	bfac      	ite	ge
   818f0:	189b      	addge	r3, r3, r2
   818f2:	185b      	addlt	r3, r3, r1
   818f4:	9303      	str	r3, [sp, #12]
   818f6:	e04e      	b.n	81996 <_vfiprintf_r+0x902>
   818f8:	aa0f      	add	r2, sp, #60	; 0x3c
   818fa:	4649      	mov	r1, r9
   818fc:	4638      	mov	r0, r7
   818fe:	f7ff fb89 	bl	81014 <__sprint_r.part.0>
   81902:	2800      	cmp	r0, #0
   81904:	f040 813e 	bne.w	81b84 <_vfiprintf_r+0xaf0>
   81908:	9910      	ldr	r1, [sp, #64]	; 0x40
   8190a:	46d6      	mov	lr, sl
   8190c:	9a11      	ldr	r2, [sp, #68]	; 0x44
   8190e:	1c48      	adds	r0, r1, #1
   81910:	e77f      	b.n	81812 <_vfiprintf_r+0x77e>
   81912:	aa0f      	add	r2, sp, #60	; 0x3c
   81914:	4659      	mov	r1, fp
   81916:	4638      	mov	r0, r7
   81918:	f7ff fb7c 	bl	81014 <__sprint_r.part.0>
   8191c:	b960      	cbnz	r0, 81938 <_vfiprintf_r+0x8a4>
   8191e:	9910      	ldr	r1, [sp, #64]	; 0x40
   81920:	46d1      	mov	r9, sl
   81922:	9a11      	ldr	r2, [sp, #68]	; 0x44
   81924:	1c48      	adds	r0, r1, #1
   81926:	e7bd      	b.n	818a4 <_vfiprintf_r+0x810>
   81928:	9b11      	ldr	r3, [sp, #68]	; 0x44
   8192a:	f8dd b010 	ldr.w	fp, [sp, #16]
   8192e:	2b00      	cmp	r3, #0
   81930:	f040 81ca 	bne.w	81cc8 <_vfiprintf_r+0xc34>
   81934:	2300      	movs	r3, #0
   81936:	9310      	str	r3, [sp, #64]	; 0x40
   81938:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   8193c:	f013 0f01 	tst.w	r3, #1
   81940:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   81944:	d102      	bne.n	8194c <_vfiprintf_r+0x8b8>
   81946:	059a      	lsls	r2, r3, #22
   81948:	f140 80dd 	bpl.w	81b06 <_vfiprintf_r+0xa72>
   8194c:	065b      	lsls	r3, r3, #25
   8194e:	f53f acad 	bmi.w	812ac <_vfiprintf_r+0x218>
   81952:	9803      	ldr	r0, [sp, #12]
   81954:	b02d      	add	sp, #180	; 0xb4
   81956:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8195a:	2a00      	cmp	r2, #0
   8195c:	f040 8105 	bne.w	81b6a <_vfiprintf_r+0xad6>
   81960:	2301      	movs	r3, #1
   81962:	46d1      	mov	r9, sl
   81964:	9a05      	ldr	r2, [sp, #20]
   81966:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
   8196a:	921d      	str	r2, [sp, #116]	; 0x74
   8196c:	9211      	str	r2, [sp, #68]	; 0x44
   8196e:	9310      	str	r3, [sp, #64]	; 0x40
   81970:	f109 0908 	add.w	r9, r9, #8
   81974:	9b02      	ldr	r3, [sp, #8]
   81976:	0759      	lsls	r1, r3, #29
   81978:	d504      	bpl.n	81984 <_vfiprintf_r+0x8f0>
   8197a:	9b08      	ldr	r3, [sp, #32]
   8197c:	9901      	ldr	r1, [sp, #4]
   8197e:	1a5c      	subs	r4, r3, r1
   81980:	2c00      	cmp	r4, #0
   81982:	dc81      	bgt.n	81888 <_vfiprintf_r+0x7f4>
   81984:	9b03      	ldr	r3, [sp, #12]
   81986:	9908      	ldr	r1, [sp, #32]
   81988:	9801      	ldr	r0, [sp, #4]
   8198a:	4281      	cmp	r1, r0
   8198c:	bfac      	ite	ge
   8198e:	185b      	addge	r3, r3, r1
   81990:	181b      	addlt	r3, r3, r0
   81992:	9303      	str	r3, [sp, #12]
   81994:	bb72      	cbnz	r2, 819f4 <_vfiprintf_r+0x960>
   81996:	2300      	movs	r3, #0
   81998:	46d1      	mov	r9, sl
   8199a:	9310      	str	r3, [sp, #64]	; 0x40
   8199c:	f7ff bbb7 	b.w	8110e <_vfiprintf_r+0x7a>
   819a0:	aa0f      	add	r2, sp, #60	; 0x3c
   819a2:	9904      	ldr	r1, [sp, #16]
   819a4:	4620      	mov	r0, r4
   819a6:	f7ff fb35 	bl	81014 <__sprint_r.part.0>
   819aa:	bb50      	cbnz	r0, 81a02 <_vfiprintf_r+0x96e>
   819ac:	9910      	ldr	r1, [sp, #64]	; 0x40
   819ae:	46d4      	mov	ip, sl
   819b0:	9a11      	ldr	r2, [sp, #68]	; 0x44
   819b2:	f101 0e01 	add.w	lr, r1, #1
   819b6:	e54a      	b.n	8144e <_vfiprintf_r+0x3ba>
   819b8:	2a00      	cmp	r2, #0
   819ba:	f47f aee5 	bne.w	81788 <_vfiprintf_r+0x6f4>
   819be:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
   819c2:	2900      	cmp	r1, #0
   819c4:	f000 811a 	beq.w	81bfc <_vfiprintf_r+0xb68>
   819c8:	2201      	movs	r2, #1
   819ca:	46d1      	mov	r9, sl
   819cc:	4610      	mov	r0, r2
   819ce:	f10d 0137 	add.w	r1, sp, #55	; 0x37
   819d2:	921d      	str	r2, [sp, #116]	; 0x74
   819d4:	911c      	str	r1, [sp, #112]	; 0x70
   819d6:	4601      	mov	r1, r0
   819d8:	f109 0908 	add.w	r9, r9, #8
   819dc:	3001      	adds	r0, #1
   819de:	e508      	b.n	813f2 <_vfiprintf_r+0x35e>
   819e0:	9b02      	ldr	r3, [sp, #8]
   819e2:	2a01      	cmp	r2, #1
   819e4:	f000 8097 	beq.w	81b16 <_vfiprintf_r+0xa82>
   819e8:	2a02      	cmp	r2, #2
   819ea:	d10d      	bne.n	81a08 <_vfiprintf_r+0x974>
   819ec:	9302      	str	r3, [sp, #8]
   819ee:	2600      	movs	r6, #0
   819f0:	2700      	movs	r7, #0
   819f2:	e5b2      	b.n	8155a <_vfiprintf_r+0x4c6>
   819f4:	aa0f      	add	r2, sp, #60	; 0x3c
   819f6:	9904      	ldr	r1, [sp, #16]
   819f8:	9806      	ldr	r0, [sp, #24]
   819fa:	f7ff fb0b 	bl	81014 <__sprint_r.part.0>
   819fe:	2800      	cmp	r0, #0
   81a00:	d0c9      	beq.n	81996 <_vfiprintf_r+0x902>
   81a02:	f8dd b010 	ldr.w	fp, [sp, #16]
   81a06:	e797      	b.n	81938 <_vfiprintf_r+0x8a4>
   81a08:	2600      	movs	r6, #0
   81a0a:	2700      	movs	r7, #0
   81a0c:	9302      	str	r3, [sp, #8]
   81a0e:	4651      	mov	r1, sl
   81a10:	e000      	b.n	81a14 <_vfiprintf_r+0x980>
   81a12:	4659      	mov	r1, fp
   81a14:	08f2      	lsrs	r2, r6, #3
   81a16:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
   81a1a:	08f8      	lsrs	r0, r7, #3
   81a1c:	f006 0307 	and.w	r3, r6, #7
   81a20:	4607      	mov	r7, r0
   81a22:	4616      	mov	r6, r2
   81a24:	3330      	adds	r3, #48	; 0x30
   81a26:	ea56 0207 	orrs.w	r2, r6, r7
   81a2a:	f801 3c01 	strb.w	r3, [r1, #-1]
   81a2e:	f101 3bff 	add.w	fp, r1, #4294967295
   81a32:	d1ee      	bne.n	81a12 <_vfiprintf_r+0x97e>
   81a34:	9a02      	ldr	r2, [sp, #8]
   81a36:	07d6      	lsls	r6, r2, #31
   81a38:	f57f ad9f 	bpl.w	8157a <_vfiprintf_r+0x4e6>
   81a3c:	2b30      	cmp	r3, #48	; 0x30
   81a3e:	f43f ad9c 	beq.w	8157a <_vfiprintf_r+0x4e6>
   81a42:	2330      	movs	r3, #48	; 0x30
   81a44:	3902      	subs	r1, #2
   81a46:	f80b 3c01 	strb.w	r3, [fp, #-1]
   81a4a:	ebaa 0301 	sub.w	r3, sl, r1
   81a4e:	9305      	str	r3, [sp, #20]
   81a50:	468b      	mov	fp, r1
   81a52:	e477      	b.n	81344 <_vfiprintf_r+0x2b0>
   81a54:	9b03      	ldr	r3, [sp, #12]
   81a56:	9a08      	ldr	r2, [sp, #32]
   81a58:	428a      	cmp	r2, r1
   81a5a:	bfac      	ite	ge
   81a5c:	189b      	addge	r3, r3, r2
   81a5e:	185b      	addlt	r3, r3, r1
   81a60:	9303      	str	r3, [sp, #12]
   81a62:	e798      	b.n	81996 <_vfiprintf_r+0x902>
   81a64:	2202      	movs	r2, #2
   81a66:	e44e      	b.n	81306 <_vfiprintf_r+0x272>
   81a68:	2f00      	cmp	r7, #0
   81a6a:	bf08      	it	eq
   81a6c:	2e0a      	cmpeq	r6, #10
   81a6e:	d351      	bcc.n	81b14 <_vfiprintf_r+0xa80>
   81a70:	46d3      	mov	fp, sl
   81a72:	4630      	mov	r0, r6
   81a74:	4639      	mov	r1, r7
   81a76:	220a      	movs	r2, #10
   81a78:	2300      	movs	r3, #0
   81a7a:	f001 ff29 	bl	838d0 <__aeabi_uldivmod>
   81a7e:	3230      	adds	r2, #48	; 0x30
   81a80:	f80b 2d01 	strb.w	r2, [fp, #-1]!
   81a84:	4630      	mov	r0, r6
   81a86:	4639      	mov	r1, r7
   81a88:	2300      	movs	r3, #0
   81a8a:	220a      	movs	r2, #10
   81a8c:	f001 ff20 	bl	838d0 <__aeabi_uldivmod>
   81a90:	4606      	mov	r6, r0
   81a92:	460f      	mov	r7, r1
   81a94:	ea56 0307 	orrs.w	r3, r6, r7
   81a98:	d1eb      	bne.n	81a72 <_vfiprintf_r+0x9de>
   81a9a:	e56e      	b.n	8157a <_vfiprintf_r+0x4e6>
   81a9c:	9405      	str	r4, [sp, #20]
   81a9e:	46d3      	mov	fp, sl
   81aa0:	e450      	b.n	81344 <_vfiprintf_r+0x2b0>
   81aa2:	aa0f      	add	r2, sp, #60	; 0x3c
   81aa4:	9904      	ldr	r1, [sp, #16]
   81aa6:	9806      	ldr	r0, [sp, #24]
   81aa8:	f7ff fab4 	bl	81014 <__sprint_r.part.0>
   81aac:	2800      	cmp	r0, #0
   81aae:	d1a8      	bne.n	81a02 <_vfiprintf_r+0x96e>
   81ab0:	46d1      	mov	r9, sl
   81ab2:	9a11      	ldr	r2, [sp, #68]	; 0x44
   81ab4:	e75e      	b.n	81974 <_vfiprintf_r+0x8e0>
   81ab6:	aa0f      	add	r2, sp, #60	; 0x3c
   81ab8:	9904      	ldr	r1, [sp, #16]
   81aba:	9806      	ldr	r0, [sp, #24]
   81abc:	f7ff faaa 	bl	81014 <__sprint_r.part.0>
   81ac0:	2800      	cmp	r0, #0
   81ac2:	d19e      	bne.n	81a02 <_vfiprintf_r+0x96e>
   81ac4:	46d1      	mov	r9, sl
   81ac6:	f7ff bbbb 	b.w	81240 <_vfiprintf_r+0x1ac>
   81aca:	bf00      	nop
   81acc:	00083c54 	.word	0x00083c54
   81ad0:	00083c44 	.word	0x00083c44
   81ad4:	3104      	adds	r1, #4
   81ad6:	6816      	ldr	r6, [r2, #0]
   81ad8:	2700      	movs	r7, #0
   81ada:	2201      	movs	r2, #1
   81adc:	9107      	str	r1, [sp, #28]
   81ade:	e412      	b.n	81306 <_vfiprintf_r+0x272>
   81ae0:	9807      	ldr	r0, [sp, #28]
   81ae2:	2700      	movs	r7, #0
   81ae4:	4601      	mov	r1, r0
   81ae6:	3104      	adds	r1, #4
   81ae8:	6806      	ldr	r6, [r0, #0]
   81aea:	9107      	str	r1, [sp, #28]
   81aec:	e40b      	b.n	81306 <_vfiprintf_r+0x272>
   81aee:	680e      	ldr	r6, [r1, #0]
   81af0:	3104      	adds	r1, #4
   81af2:	9107      	str	r1, [sp, #28]
   81af4:	2700      	movs	r7, #0
   81af6:	e592      	b.n	8161e <_vfiprintf_r+0x58a>
   81af8:	6816      	ldr	r6, [r2, #0]
   81afa:	3204      	adds	r2, #4
   81afc:	17f7      	asrs	r7, r6, #31
   81afe:	9207      	str	r2, [sp, #28]
   81b00:	4630      	mov	r0, r6
   81b02:	4639      	mov	r1, r7
   81b04:	e512      	b.n	8152c <_vfiprintf_r+0x498>
   81b06:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   81b0a:	f000 fecd 	bl	828a8 <__retarget_lock_release_recursive>
   81b0e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   81b12:	e71b      	b.n	8194c <_vfiprintf_r+0x8b8>
   81b14:	9b02      	ldr	r3, [sp, #8]
   81b16:	9302      	str	r3, [sp, #8]
   81b18:	2301      	movs	r3, #1
   81b1a:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
   81b1e:	3630      	adds	r6, #48	; 0x30
   81b20:	f80b 6d41 	strb.w	r6, [fp, #-65]!
   81b24:	9305      	str	r3, [sp, #20]
   81b26:	e40d      	b.n	81344 <_vfiprintf_r+0x2b0>
   81b28:	aa0f      	add	r2, sp, #60	; 0x3c
   81b2a:	9904      	ldr	r1, [sp, #16]
   81b2c:	9806      	ldr	r0, [sp, #24]
   81b2e:	f7ff fa71 	bl	81014 <__sprint_r.part.0>
   81b32:	2800      	cmp	r0, #0
   81b34:	f47f af65 	bne.w	81a02 <_vfiprintf_r+0x96e>
   81b38:	9910      	ldr	r1, [sp, #64]	; 0x40
   81b3a:	46d1      	mov	r9, sl
   81b3c:	9a11      	ldr	r2, [sp, #68]	; 0x44
   81b3e:	1c48      	adds	r0, r1, #1
   81b40:	e457      	b.n	813f2 <_vfiprintf_r+0x35e>
   81b42:	aa0f      	add	r2, sp, #60	; 0x3c
   81b44:	9904      	ldr	r1, [sp, #16]
   81b46:	9806      	ldr	r0, [sp, #24]
   81b48:	f7ff fa64 	bl	81014 <__sprint_r.part.0>
   81b4c:	2800      	cmp	r0, #0
   81b4e:	f47f af58 	bne.w	81a02 <_vfiprintf_r+0x96e>
   81b52:	9910      	ldr	r1, [sp, #64]	; 0x40
   81b54:	46d1      	mov	r9, sl
   81b56:	9a11      	ldr	r2, [sp, #68]	; 0x44
   81b58:	1c48      	adds	r0, r1, #1
   81b5a:	e644      	b.n	817e6 <_vfiprintf_r+0x752>
   81b5c:	2a00      	cmp	r2, #0
   81b5e:	f040 8087 	bne.w	81c70 <_vfiprintf_r+0xbdc>
   81b62:	2001      	movs	r0, #1
   81b64:	4611      	mov	r1, r2
   81b66:	46d1      	mov	r9, sl
   81b68:	e641      	b.n	817ee <_vfiprintf_r+0x75a>
   81b6a:	aa0f      	add	r2, sp, #60	; 0x3c
   81b6c:	9904      	ldr	r1, [sp, #16]
   81b6e:	9806      	ldr	r0, [sp, #24]
   81b70:	f7ff fa50 	bl	81014 <__sprint_r.part.0>
   81b74:	2800      	cmp	r0, #0
   81b76:	f47f af44 	bne.w	81a02 <_vfiprintf_r+0x96e>
   81b7a:	9810      	ldr	r0, [sp, #64]	; 0x40
   81b7c:	46d1      	mov	r9, sl
   81b7e:	9a11      	ldr	r2, [sp, #68]	; 0x44
   81b80:	3001      	adds	r0, #1
   81b82:	e668      	b.n	81856 <_vfiprintf_r+0x7c2>
   81b84:	46cb      	mov	fp, r9
   81b86:	e6d7      	b.n	81938 <_vfiprintf_r+0x8a4>
   81b88:	9d07      	ldr	r5, [sp, #28]
   81b8a:	3507      	adds	r5, #7
   81b8c:	f025 0507 	bic.w	r5, r5, #7
   81b90:	f105 0208 	add.w	r2, r5, #8
   81b94:	e9d5 0100 	ldrd	r0, r1, [r5]
   81b98:	9207      	str	r2, [sp, #28]
   81b9a:	4606      	mov	r6, r0
   81b9c:	460f      	mov	r7, r1
   81b9e:	e4c5      	b.n	8152c <_vfiprintf_r+0x498>
   81ba0:	9d07      	ldr	r5, [sp, #28]
   81ba2:	3507      	adds	r5, #7
   81ba4:	f025 0207 	bic.w	r2, r5, #7
   81ba8:	f102 0108 	add.w	r1, r2, #8
   81bac:	e9d2 6700 	ldrd	r6, r7, [r2]
   81bb0:	9107      	str	r1, [sp, #28]
   81bb2:	2201      	movs	r2, #1
   81bb4:	f7ff bba7 	b.w	81306 <_vfiprintf_r+0x272>
   81bb8:	9d07      	ldr	r5, [sp, #28]
   81bba:	3507      	adds	r5, #7
   81bbc:	f025 0207 	bic.w	r2, r5, #7
   81bc0:	f102 0108 	add.w	r1, r2, #8
   81bc4:	e9d2 6700 	ldrd	r6, r7, [r2]
   81bc8:	9107      	str	r1, [sp, #28]
   81bca:	2200      	movs	r2, #0
   81bcc:	f7ff bb9b 	b.w	81306 <_vfiprintf_r+0x272>
   81bd0:	9d07      	ldr	r5, [sp, #28]
   81bd2:	3507      	adds	r5, #7
   81bd4:	f025 0107 	bic.w	r1, r5, #7
   81bd8:	f101 0008 	add.w	r0, r1, #8
   81bdc:	9007      	str	r0, [sp, #28]
   81bde:	e9d1 6700 	ldrd	r6, r7, [r1]
   81be2:	e51c      	b.n	8161e <_vfiprintf_r+0x58a>
   81be4:	46d3      	mov	fp, sl
   81be6:	f7ff bbad 	b.w	81344 <_vfiprintf_r+0x2b0>
   81bea:	252d      	movs	r5, #45	; 0x2d
   81bec:	4276      	negs	r6, r6
   81bee:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
   81bf2:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
   81bf6:	2201      	movs	r2, #1
   81bf8:	f7ff bb8a 	b.w	81310 <_vfiprintf_r+0x27c>
   81bfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   81bfe:	b9b3      	cbnz	r3, 81c2e <_vfiprintf_r+0xb9a>
   81c00:	4611      	mov	r1, r2
   81c02:	2001      	movs	r0, #1
   81c04:	46d1      	mov	r9, sl
   81c06:	e5f2      	b.n	817ee <_vfiprintf_r+0x75a>
   81c08:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   81c0c:	f000 fe4c 	bl	828a8 <__retarget_lock_release_recursive>
   81c10:	f04f 33ff 	mov.w	r3, #4294967295
   81c14:	9303      	str	r3, [sp, #12]
   81c16:	f7ff bb4c 	b.w	812b2 <_vfiprintf_r+0x21e>
   81c1a:	aa0f      	add	r2, sp, #60	; 0x3c
   81c1c:	9904      	ldr	r1, [sp, #16]
   81c1e:	9806      	ldr	r0, [sp, #24]
   81c20:	f7ff f9f8 	bl	81014 <__sprint_r.part.0>
   81c24:	2800      	cmp	r0, #0
   81c26:	f47f aeec 	bne.w	81a02 <_vfiprintf_r+0x96e>
   81c2a:	9a11      	ldr	r2, [sp, #68]	; 0x44
   81c2c:	e6aa      	b.n	81984 <_vfiprintf_r+0x8f0>
   81c2e:	2202      	movs	r2, #2
   81c30:	ab0e      	add	r3, sp, #56	; 0x38
   81c32:	921d      	str	r2, [sp, #116]	; 0x74
   81c34:	931c      	str	r3, [sp, #112]	; 0x70
   81c36:	2001      	movs	r0, #1
   81c38:	46d1      	mov	r9, sl
   81c3a:	e5d0      	b.n	817de <_vfiprintf_r+0x74a>
   81c3c:	4d34      	ldr	r5, [pc, #208]	; (81d10 <_vfiprintf_r+0xc7c>)
   81c3e:	e5fd      	b.n	8183c <_vfiprintf_r+0x7a8>
   81c40:	9a07      	ldr	r2, [sp, #28]
   81c42:	4613      	mov	r3, r2
   81c44:	3304      	adds	r3, #4
   81c46:	9307      	str	r3, [sp, #28]
   81c48:	9b03      	ldr	r3, [sp, #12]
   81c4a:	6811      	ldr	r1, [r2, #0]
   81c4c:	17dd      	asrs	r5, r3, #31
   81c4e:	461a      	mov	r2, r3
   81c50:	462b      	mov	r3, r5
   81c52:	e9c1 2300 	strd	r2, r3, [r1]
   81c56:	f7ff ba5a 	b.w	8110e <_vfiprintf_r+0x7a>
   81c5a:	4658      	mov	r0, fp
   81c5c:	9507      	str	r5, [sp, #28]
   81c5e:	9302      	str	r3, [sp, #8]
   81c60:	f001 fc94 	bl	8358c <strlen>
   81c64:	2400      	movs	r4, #0
   81c66:	9005      	str	r0, [sp, #20]
   81c68:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   81c6c:	f7ff bb6a 	b.w	81344 <_vfiprintf_r+0x2b0>
   81c70:	aa0f      	add	r2, sp, #60	; 0x3c
   81c72:	9904      	ldr	r1, [sp, #16]
   81c74:	9806      	ldr	r0, [sp, #24]
   81c76:	f7ff f9cd 	bl	81014 <__sprint_r.part.0>
   81c7a:	2800      	cmp	r0, #0
   81c7c:	f47f aec1 	bne.w	81a02 <_vfiprintf_r+0x96e>
   81c80:	9910      	ldr	r1, [sp, #64]	; 0x40
   81c82:	46d1      	mov	r9, sl
   81c84:	9a11      	ldr	r2, [sp, #68]	; 0x44
   81c86:	1c48      	adds	r0, r1, #1
   81c88:	e5b1      	b.n	817ee <_vfiprintf_r+0x75a>
   81c8a:	9910      	ldr	r1, [sp, #64]	; 0x40
   81c8c:	9a11      	ldr	r2, [sp, #68]	; 0x44
   81c8e:	3101      	adds	r1, #1
   81c90:	4e20      	ldr	r6, [pc, #128]	; (81d14 <_vfiprintf_r+0xc80>)
   81c92:	f7ff bb9c 	b.w	813ce <_vfiprintf_r+0x33a>
   81c96:	2c06      	cmp	r4, #6
   81c98:	bf28      	it	cs
   81c9a:	2406      	movcs	r4, #6
   81c9c:	9507      	str	r5, [sp, #28]
   81c9e:	9405      	str	r4, [sp, #20]
   81ca0:	9401      	str	r4, [sp, #4]
   81ca2:	f8df b074 	ldr.w	fp, [pc, #116]	; 81d18 <_vfiprintf_r+0xc84>
   81ca6:	e4e3      	b.n	81670 <_vfiprintf_r+0x5dc>
   81ca8:	9810      	ldr	r0, [sp, #64]	; 0x40
   81caa:	4e1a      	ldr	r6, [pc, #104]	; (81d14 <_vfiprintf_r+0xc80>)
   81cac:	3001      	adds	r0, #1
   81cae:	e60e      	b.n	818ce <_vfiprintf_r+0x83a>
   81cb0:	4686      	mov	lr, r0
   81cb2:	4d17      	ldr	r5, [pc, #92]	; (81d10 <_vfiprintf_r+0xc7c>)
   81cb4:	f7ff bbe2 	b.w	8147c <_vfiprintf_r+0x3e8>
   81cb8:	9405      	str	r4, [sp, #20]
   81cba:	9507      	str	r5, [sp, #28]
   81cbc:	9302      	str	r3, [sp, #8]
   81cbe:	4604      	mov	r4, r0
   81cc0:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   81cc4:	f7ff bb3e 	b.w	81344 <_vfiprintf_r+0x2b0>
   81cc8:	9806      	ldr	r0, [sp, #24]
   81cca:	aa0f      	add	r2, sp, #60	; 0x3c
   81ccc:	4659      	mov	r1, fp
   81cce:	f7ff f9a1 	bl	81014 <__sprint_r.part.0>
   81cd2:	2800      	cmp	r0, #0
   81cd4:	f43f ae2e 	beq.w	81934 <_vfiprintf_r+0x8a0>
   81cd8:	e62e      	b.n	81938 <_vfiprintf_r+0x8a4>
   81cda:	9907      	ldr	r1, [sp, #28]
   81cdc:	f898 2001 	ldrb.w	r2, [r8, #1]
   81ce0:	680c      	ldr	r4, [r1, #0]
   81ce2:	3104      	adds	r1, #4
   81ce4:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
   81ce8:	46b8      	mov	r8, r7
   81cea:	9107      	str	r1, [sp, #28]
   81cec:	f7ff ba44 	b.w	81178 <_vfiprintf_r+0xe4>
   81cf0:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   81cf4:	e4a7      	b.n	81646 <_vfiprintf_r+0x5b2>
   81cf6:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   81cfa:	e521      	b.n	81740 <_vfiprintf_r+0x6ac>
   81cfc:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   81d00:	e47c      	b.n	815fc <_vfiprintf_r+0x568>
   81d02:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   81d06:	e43f      	b.n	81588 <_vfiprintf_r+0x4f4>
   81d08:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   81d0c:	f7ff bbfa 	b.w	81504 <_vfiprintf_r+0x470>
   81d10:	00083c54 	.word	0x00083c54
   81d14:	00083c44 	.word	0x00083c44
   81d18:	00083c3c 	.word	0x00083c3c

00081d1c <__sbprintf>:
   81d1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   81d20:	460c      	mov	r4, r1
   81d22:	f04f 0e00 	mov.w	lr, #0
   81d26:	f44f 6580 	mov.w	r5, #1024	; 0x400
   81d2a:	4606      	mov	r6, r0
   81d2c:	4617      	mov	r7, r2
   81d2e:	4698      	mov	r8, r3
   81d30:	6e62      	ldr	r2, [r4, #100]	; 0x64
   81d32:	89e3      	ldrh	r3, [r4, #14]
   81d34:	8989      	ldrh	r1, [r1, #12]
   81d36:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
   81d3a:	f021 0102 	bic.w	r1, r1, #2
   81d3e:	9219      	str	r2, [sp, #100]	; 0x64
   81d40:	f8ad 300e 	strh.w	r3, [sp, #14]
   81d44:	69e2      	ldr	r2, [r4, #28]
   81d46:	6a63      	ldr	r3, [r4, #36]	; 0x24
   81d48:	f8ad 100c 	strh.w	r1, [sp, #12]
   81d4c:	a816      	add	r0, sp, #88	; 0x58
   81d4e:	a91a      	add	r1, sp, #104	; 0x68
   81d50:	f8cd e018 	str.w	lr, [sp, #24]
   81d54:	9207      	str	r2, [sp, #28]
   81d56:	9309      	str	r3, [sp, #36]	; 0x24
   81d58:	9100      	str	r1, [sp, #0]
   81d5a:	9104      	str	r1, [sp, #16]
   81d5c:	9502      	str	r5, [sp, #8]
   81d5e:	9505      	str	r5, [sp, #20]
   81d60:	f000 fd9c 	bl	8289c <__retarget_lock_init_recursive>
   81d64:	4643      	mov	r3, r8
   81d66:	463a      	mov	r2, r7
   81d68:	4669      	mov	r1, sp
   81d6a:	4630      	mov	r0, r6
   81d6c:	f7ff f992 	bl	81094 <_vfiprintf_r>
   81d70:	1e05      	subs	r5, r0, #0
   81d72:	db07      	blt.n	81d84 <__sbprintf+0x68>
   81d74:	4630      	mov	r0, r6
   81d76:	4669      	mov	r1, sp
   81d78:	f000 f97c 	bl	82074 <_fflush_r>
   81d7c:	2800      	cmp	r0, #0
   81d7e:	bf18      	it	ne
   81d80:	f04f 35ff 	movne.w	r5, #4294967295
   81d84:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   81d88:	065b      	lsls	r3, r3, #25
   81d8a:	d503      	bpl.n	81d94 <__sbprintf+0x78>
   81d8c:	89a3      	ldrh	r3, [r4, #12]
   81d8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   81d92:	81a3      	strh	r3, [r4, #12]
   81d94:	9816      	ldr	r0, [sp, #88]	; 0x58
   81d96:	f000 fd83 	bl	828a0 <__retarget_lock_close_recursive>
   81d9a:	4628      	mov	r0, r5
   81d9c:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
   81da0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00081da4 <__swbuf_r>:
   81da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   81da6:	460d      	mov	r5, r1
   81da8:	4614      	mov	r4, r2
   81daa:	4606      	mov	r6, r0
   81dac:	b110      	cbz	r0, 81db4 <__swbuf_r+0x10>
   81dae:	6b83      	ldr	r3, [r0, #56]	; 0x38
   81db0:	2b00      	cmp	r3, #0
   81db2:	d04b      	beq.n	81e4c <__swbuf_r+0xa8>
   81db4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   81db8:	69a3      	ldr	r3, [r4, #24]
   81dba:	b291      	uxth	r1, r2
   81dbc:	0708      	lsls	r0, r1, #28
   81dbe:	60a3      	str	r3, [r4, #8]
   81dc0:	d539      	bpl.n	81e36 <__swbuf_r+0x92>
   81dc2:	6923      	ldr	r3, [r4, #16]
   81dc4:	2b00      	cmp	r3, #0
   81dc6:	d036      	beq.n	81e36 <__swbuf_r+0x92>
   81dc8:	b2ed      	uxtb	r5, r5
   81dca:	0489      	lsls	r1, r1, #18
   81dcc:	462f      	mov	r7, r5
   81dce:	d515      	bpl.n	81dfc <__swbuf_r+0x58>
   81dd0:	6822      	ldr	r2, [r4, #0]
   81dd2:	6961      	ldr	r1, [r4, #20]
   81dd4:	1ad3      	subs	r3, r2, r3
   81dd6:	428b      	cmp	r3, r1
   81dd8:	da1c      	bge.n	81e14 <__swbuf_r+0x70>
   81dda:	3301      	adds	r3, #1
   81ddc:	68a1      	ldr	r1, [r4, #8]
   81dde:	1c50      	adds	r0, r2, #1
   81de0:	3901      	subs	r1, #1
   81de2:	60a1      	str	r1, [r4, #8]
   81de4:	6020      	str	r0, [r4, #0]
   81de6:	7015      	strb	r5, [r2, #0]
   81de8:	6962      	ldr	r2, [r4, #20]
   81dea:	429a      	cmp	r2, r3
   81dec:	d01a      	beq.n	81e24 <__swbuf_r+0x80>
   81dee:	89a3      	ldrh	r3, [r4, #12]
   81df0:	07db      	lsls	r3, r3, #31
   81df2:	d501      	bpl.n	81df8 <__swbuf_r+0x54>
   81df4:	2d0a      	cmp	r5, #10
   81df6:	d015      	beq.n	81e24 <__swbuf_r+0x80>
   81df8:	4638      	mov	r0, r7
   81dfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   81dfc:	6e61      	ldr	r1, [r4, #100]	; 0x64
   81dfe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   81e02:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
   81e06:	81a2      	strh	r2, [r4, #12]
   81e08:	6822      	ldr	r2, [r4, #0]
   81e0a:	6661      	str	r1, [r4, #100]	; 0x64
   81e0c:	6961      	ldr	r1, [r4, #20]
   81e0e:	1ad3      	subs	r3, r2, r3
   81e10:	428b      	cmp	r3, r1
   81e12:	dbe2      	blt.n	81dda <__swbuf_r+0x36>
   81e14:	4621      	mov	r1, r4
   81e16:	4630      	mov	r0, r6
   81e18:	f000 f92c 	bl	82074 <_fflush_r>
   81e1c:	b940      	cbnz	r0, 81e30 <__swbuf_r+0x8c>
   81e1e:	2301      	movs	r3, #1
   81e20:	6822      	ldr	r2, [r4, #0]
   81e22:	e7db      	b.n	81ddc <__swbuf_r+0x38>
   81e24:	4621      	mov	r1, r4
   81e26:	4630      	mov	r0, r6
   81e28:	f000 f924 	bl	82074 <_fflush_r>
   81e2c:	2800      	cmp	r0, #0
   81e2e:	d0e3      	beq.n	81df8 <__swbuf_r+0x54>
   81e30:	f04f 37ff 	mov.w	r7, #4294967295
   81e34:	e7e0      	b.n	81df8 <__swbuf_r+0x54>
   81e36:	4621      	mov	r1, r4
   81e38:	4630      	mov	r0, r6
   81e3a:	f000 f80b 	bl	81e54 <__swsetup_r>
   81e3e:	2800      	cmp	r0, #0
   81e40:	d1f6      	bne.n	81e30 <__swbuf_r+0x8c>
   81e42:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   81e46:	6923      	ldr	r3, [r4, #16]
   81e48:	b291      	uxth	r1, r2
   81e4a:	e7bd      	b.n	81dc8 <__swbuf_r+0x24>
   81e4c:	f000 f96a 	bl	82124 <__sinit>
   81e50:	e7b0      	b.n	81db4 <__swbuf_r+0x10>
   81e52:	bf00      	nop

00081e54 <__swsetup_r>:
   81e54:	b538      	push	{r3, r4, r5, lr}
   81e56:	4b30      	ldr	r3, [pc, #192]	; (81f18 <__swsetup_r+0xc4>)
   81e58:	4605      	mov	r5, r0
   81e5a:	6818      	ldr	r0, [r3, #0]
   81e5c:	460c      	mov	r4, r1
   81e5e:	b110      	cbz	r0, 81e66 <__swsetup_r+0x12>
   81e60:	6b83      	ldr	r3, [r0, #56]	; 0x38
   81e62:	2b00      	cmp	r3, #0
   81e64:	d038      	beq.n	81ed8 <__swsetup_r+0x84>
   81e66:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   81e6a:	b293      	uxth	r3, r2
   81e6c:	0718      	lsls	r0, r3, #28
   81e6e:	d50c      	bpl.n	81e8a <__swsetup_r+0x36>
   81e70:	6920      	ldr	r0, [r4, #16]
   81e72:	b1a8      	cbz	r0, 81ea0 <__swsetup_r+0x4c>
   81e74:	f013 0201 	ands.w	r2, r3, #1
   81e78:	d01e      	beq.n	81eb8 <__swsetup_r+0x64>
   81e7a:	2200      	movs	r2, #0
   81e7c:	6963      	ldr	r3, [r4, #20]
   81e7e:	60a2      	str	r2, [r4, #8]
   81e80:	425b      	negs	r3, r3
   81e82:	61a3      	str	r3, [r4, #24]
   81e84:	b1f0      	cbz	r0, 81ec4 <__swsetup_r+0x70>
   81e86:	2000      	movs	r0, #0
   81e88:	bd38      	pop	{r3, r4, r5, pc}
   81e8a:	06d9      	lsls	r1, r3, #27
   81e8c:	d53b      	bpl.n	81f06 <__swsetup_r+0xb2>
   81e8e:	0758      	lsls	r0, r3, #29
   81e90:	d425      	bmi.n	81ede <__swsetup_r+0x8a>
   81e92:	6920      	ldr	r0, [r4, #16]
   81e94:	f042 0308 	orr.w	r3, r2, #8
   81e98:	81a3      	strh	r3, [r4, #12]
   81e9a:	b29b      	uxth	r3, r3
   81e9c:	2800      	cmp	r0, #0
   81e9e:	d1e9      	bne.n	81e74 <__swsetup_r+0x20>
   81ea0:	f403 7220 	and.w	r2, r3, #640	; 0x280
   81ea4:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   81ea8:	d0e4      	beq.n	81e74 <__swsetup_r+0x20>
   81eaa:	4628      	mov	r0, r5
   81eac:	4621      	mov	r1, r4
   81eae:	f000 fd2b 	bl	82908 <__smakebuf_r>
   81eb2:	89a3      	ldrh	r3, [r4, #12]
   81eb4:	6920      	ldr	r0, [r4, #16]
   81eb6:	e7dd      	b.n	81e74 <__swsetup_r+0x20>
   81eb8:	0799      	lsls	r1, r3, #30
   81eba:	bf58      	it	pl
   81ebc:	6962      	ldrpl	r2, [r4, #20]
   81ebe:	60a2      	str	r2, [r4, #8]
   81ec0:	2800      	cmp	r0, #0
   81ec2:	d1e0      	bne.n	81e86 <__swsetup_r+0x32>
   81ec4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   81ec8:	061a      	lsls	r2, r3, #24
   81eca:	d5dd      	bpl.n	81e88 <__swsetup_r+0x34>
   81ecc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   81ed0:	81a3      	strh	r3, [r4, #12]
   81ed2:	f04f 30ff 	mov.w	r0, #4294967295
   81ed6:	bd38      	pop	{r3, r4, r5, pc}
   81ed8:	f000 f924 	bl	82124 <__sinit>
   81edc:	e7c3      	b.n	81e66 <__swsetup_r+0x12>
   81ede:	6b21      	ldr	r1, [r4, #48]	; 0x30
   81ee0:	b151      	cbz	r1, 81ef8 <__swsetup_r+0xa4>
   81ee2:	f104 0340 	add.w	r3, r4, #64	; 0x40
   81ee6:	4299      	cmp	r1, r3
   81ee8:	d004      	beq.n	81ef4 <__swsetup_r+0xa0>
   81eea:	4628      	mov	r0, r5
   81eec:	f000 fa40 	bl	82370 <_free_r>
   81ef0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   81ef4:	2300      	movs	r3, #0
   81ef6:	6323      	str	r3, [r4, #48]	; 0x30
   81ef8:	2300      	movs	r3, #0
   81efa:	6920      	ldr	r0, [r4, #16]
   81efc:	f022 0224 	bic.w	r2, r2, #36	; 0x24
   81f00:	e884 0009 	stmia.w	r4, {r0, r3}
   81f04:	e7c6      	b.n	81e94 <__swsetup_r+0x40>
   81f06:	2309      	movs	r3, #9
   81f08:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   81f0c:	602b      	str	r3, [r5, #0]
   81f0e:	f04f 30ff 	mov.w	r0, #4294967295
   81f12:	81a2      	strh	r2, [r4, #12]
   81f14:	bd38      	pop	{r3, r4, r5, pc}
   81f16:	bf00      	nop
   81f18:	20070134 	.word	0x20070134

00081f1c <register_fini>:
   81f1c:	4b02      	ldr	r3, [pc, #8]	; (81f28 <register_fini+0xc>)
   81f1e:	b113      	cbz	r3, 81f26 <register_fini+0xa>
   81f20:	4802      	ldr	r0, [pc, #8]	; (81f2c <register_fini+0x10>)
   81f22:	f000 b805 	b.w	81f30 <atexit>
   81f26:	4770      	bx	lr
   81f28:	00000000 	.word	0x00000000
   81f2c:	0008219d 	.word	0x0008219d

00081f30 <atexit>:
   81f30:	2300      	movs	r3, #0
   81f32:	4601      	mov	r1, r0
   81f34:	461a      	mov	r2, r3
   81f36:	4618      	mov	r0, r3
   81f38:	f001 bba2 	b.w	83680 <__register_exitproc>

00081f3c <__sflush_r>:
   81f3c:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   81f40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   81f44:	b29a      	uxth	r2, r3
   81f46:	460d      	mov	r5, r1
   81f48:	0711      	lsls	r1, r2, #28
   81f4a:	4680      	mov	r8, r0
   81f4c:	d43a      	bmi.n	81fc4 <__sflush_r+0x88>
   81f4e:	686a      	ldr	r2, [r5, #4]
   81f50:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   81f54:	2a00      	cmp	r2, #0
   81f56:	81ab      	strh	r3, [r5, #12]
   81f58:	dd70      	ble.n	8203c <__sflush_r+0x100>
   81f5a:	6aac      	ldr	r4, [r5, #40]	; 0x28
   81f5c:	2c00      	cmp	r4, #0
   81f5e:	d04a      	beq.n	81ff6 <__sflush_r+0xba>
   81f60:	2200      	movs	r2, #0
   81f62:	b29b      	uxth	r3, r3
   81f64:	f8d8 6000 	ldr.w	r6, [r8]
   81f68:	f8c8 2000 	str.w	r2, [r8]
   81f6c:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
   81f70:	d068      	beq.n	82044 <__sflush_r+0x108>
   81f72:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   81f74:	075f      	lsls	r7, r3, #29
   81f76:	d505      	bpl.n	81f84 <__sflush_r+0x48>
   81f78:	6869      	ldr	r1, [r5, #4]
   81f7a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   81f7c:	1a52      	subs	r2, r2, r1
   81f7e:	b10b      	cbz	r3, 81f84 <__sflush_r+0x48>
   81f80:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   81f82:	1ad2      	subs	r2, r2, r3
   81f84:	2300      	movs	r3, #0
   81f86:	69e9      	ldr	r1, [r5, #28]
   81f88:	4640      	mov	r0, r8
   81f8a:	47a0      	blx	r4
   81f8c:	1c44      	adds	r4, r0, #1
   81f8e:	d03d      	beq.n	8200c <__sflush_r+0xd0>
   81f90:	2100      	movs	r1, #0
   81f92:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   81f96:	692a      	ldr	r2, [r5, #16]
   81f98:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   81f9c:	81ab      	strh	r3, [r5, #12]
   81f9e:	04db      	lsls	r3, r3, #19
   81fa0:	6069      	str	r1, [r5, #4]
   81fa2:	602a      	str	r2, [r5, #0]
   81fa4:	d448      	bmi.n	82038 <__sflush_r+0xfc>
   81fa6:	6b29      	ldr	r1, [r5, #48]	; 0x30
   81fa8:	f8c8 6000 	str.w	r6, [r8]
   81fac:	b319      	cbz	r1, 81ff6 <__sflush_r+0xba>
   81fae:	f105 0340 	add.w	r3, r5, #64	; 0x40
   81fb2:	4299      	cmp	r1, r3
   81fb4:	d002      	beq.n	81fbc <__sflush_r+0x80>
   81fb6:	4640      	mov	r0, r8
   81fb8:	f000 f9da 	bl	82370 <_free_r>
   81fbc:	2000      	movs	r0, #0
   81fbe:	6328      	str	r0, [r5, #48]	; 0x30
   81fc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81fc4:	692e      	ldr	r6, [r5, #16]
   81fc6:	b1b6      	cbz	r6, 81ff6 <__sflush_r+0xba>
   81fc8:	0791      	lsls	r1, r2, #30
   81fca:	bf18      	it	ne
   81fcc:	2300      	movne	r3, #0
   81fce:	682c      	ldr	r4, [r5, #0]
   81fd0:	bf08      	it	eq
   81fd2:	696b      	ldreq	r3, [r5, #20]
   81fd4:	602e      	str	r6, [r5, #0]
   81fd6:	1ba4      	subs	r4, r4, r6
   81fd8:	60ab      	str	r3, [r5, #8]
   81fda:	e00a      	b.n	81ff2 <__sflush_r+0xb6>
   81fdc:	4623      	mov	r3, r4
   81fde:	4632      	mov	r2, r6
   81fe0:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   81fe2:	69e9      	ldr	r1, [r5, #28]
   81fe4:	4640      	mov	r0, r8
   81fe6:	47b8      	blx	r7
   81fe8:	2800      	cmp	r0, #0
   81fea:	eba4 0400 	sub.w	r4, r4, r0
   81fee:	4406      	add	r6, r0
   81ff0:	dd04      	ble.n	81ffc <__sflush_r+0xc0>
   81ff2:	2c00      	cmp	r4, #0
   81ff4:	dcf2      	bgt.n	81fdc <__sflush_r+0xa0>
   81ff6:	2000      	movs	r0, #0
   81ff8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81ffc:	89ab      	ldrh	r3, [r5, #12]
   81ffe:	f04f 30ff 	mov.w	r0, #4294967295
   82002:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   82006:	81ab      	strh	r3, [r5, #12]
   82008:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8200c:	f8d8 4000 	ldr.w	r4, [r8]
   82010:	2c1d      	cmp	r4, #29
   82012:	d8f3      	bhi.n	81ffc <__sflush_r+0xc0>
   82014:	4b16      	ldr	r3, [pc, #88]	; (82070 <__sflush_r+0x134>)
   82016:	40e3      	lsrs	r3, r4
   82018:	43db      	mvns	r3, r3
   8201a:	f013 0301 	ands.w	r3, r3, #1
   8201e:	d1ed      	bne.n	81ffc <__sflush_r+0xc0>
   82020:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
   82024:	6929      	ldr	r1, [r5, #16]
   82026:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   8202a:	81aa      	strh	r2, [r5, #12]
   8202c:	04d2      	lsls	r2, r2, #19
   8202e:	606b      	str	r3, [r5, #4]
   82030:	6029      	str	r1, [r5, #0]
   82032:	d5b8      	bpl.n	81fa6 <__sflush_r+0x6a>
   82034:	2c00      	cmp	r4, #0
   82036:	d1b6      	bne.n	81fa6 <__sflush_r+0x6a>
   82038:	6528      	str	r0, [r5, #80]	; 0x50
   8203a:	e7b4      	b.n	81fa6 <__sflush_r+0x6a>
   8203c:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   8203e:	2a00      	cmp	r2, #0
   82040:	dc8b      	bgt.n	81f5a <__sflush_r+0x1e>
   82042:	e7d8      	b.n	81ff6 <__sflush_r+0xba>
   82044:	2301      	movs	r3, #1
   82046:	69e9      	ldr	r1, [r5, #28]
   82048:	4640      	mov	r0, r8
   8204a:	47a0      	blx	r4
   8204c:	1c43      	adds	r3, r0, #1
   8204e:	4602      	mov	r2, r0
   82050:	d002      	beq.n	82058 <__sflush_r+0x11c>
   82052:	89ab      	ldrh	r3, [r5, #12]
   82054:	6aac      	ldr	r4, [r5, #40]	; 0x28
   82056:	e78d      	b.n	81f74 <__sflush_r+0x38>
   82058:	f8d8 3000 	ldr.w	r3, [r8]
   8205c:	2b00      	cmp	r3, #0
   8205e:	d0f8      	beq.n	82052 <__sflush_r+0x116>
   82060:	2b1d      	cmp	r3, #29
   82062:	d001      	beq.n	82068 <__sflush_r+0x12c>
   82064:	2b16      	cmp	r3, #22
   82066:	d1c9      	bne.n	81ffc <__sflush_r+0xc0>
   82068:	f8c8 6000 	str.w	r6, [r8]
   8206c:	e7c3      	b.n	81ff6 <__sflush_r+0xba>
   8206e:	bf00      	nop
   82070:	20400001 	.word	0x20400001

00082074 <_fflush_r>:
   82074:	b538      	push	{r3, r4, r5, lr}
   82076:	460d      	mov	r5, r1
   82078:	4604      	mov	r4, r0
   8207a:	b108      	cbz	r0, 82080 <_fflush_r+0xc>
   8207c:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8207e:	b1bb      	cbz	r3, 820b0 <_fflush_r+0x3c>
   82080:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
   82084:	b188      	cbz	r0, 820aa <_fflush_r+0x36>
   82086:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   82088:	07db      	lsls	r3, r3, #31
   8208a:	d401      	bmi.n	82090 <_fflush_r+0x1c>
   8208c:	0581      	lsls	r1, r0, #22
   8208e:	d517      	bpl.n	820c0 <_fflush_r+0x4c>
   82090:	4620      	mov	r0, r4
   82092:	4629      	mov	r1, r5
   82094:	f7ff ff52 	bl	81f3c <__sflush_r>
   82098:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   8209a:	4604      	mov	r4, r0
   8209c:	07da      	lsls	r2, r3, #31
   8209e:	d402      	bmi.n	820a6 <_fflush_r+0x32>
   820a0:	89ab      	ldrh	r3, [r5, #12]
   820a2:	059b      	lsls	r3, r3, #22
   820a4:	d507      	bpl.n	820b6 <_fflush_r+0x42>
   820a6:	4620      	mov	r0, r4
   820a8:	bd38      	pop	{r3, r4, r5, pc}
   820aa:	4604      	mov	r4, r0
   820ac:	4620      	mov	r0, r4
   820ae:	bd38      	pop	{r3, r4, r5, pc}
   820b0:	f000 f838 	bl	82124 <__sinit>
   820b4:	e7e4      	b.n	82080 <_fflush_r+0xc>
   820b6:	6da8      	ldr	r0, [r5, #88]	; 0x58
   820b8:	f000 fbf6 	bl	828a8 <__retarget_lock_release_recursive>
   820bc:	4620      	mov	r0, r4
   820be:	bd38      	pop	{r3, r4, r5, pc}
   820c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
   820c2:	f000 fbef 	bl	828a4 <__retarget_lock_acquire_recursive>
   820c6:	e7e3      	b.n	82090 <_fflush_r+0x1c>

000820c8 <_cleanup_r>:
   820c8:	4901      	ldr	r1, [pc, #4]	; (820d0 <_cleanup_r+0x8>)
   820ca:	f000 bbb1 	b.w	82830 <_fwalk_reent>
   820ce:	bf00      	nop
   820d0:	00083769 	.word	0x00083769

000820d4 <std.isra.0>:
   820d4:	2300      	movs	r3, #0
   820d6:	b510      	push	{r4, lr}
   820d8:	4604      	mov	r4, r0
   820da:	8181      	strh	r1, [r0, #12]
   820dc:	81c2      	strh	r2, [r0, #14]
   820de:	6003      	str	r3, [r0, #0]
   820e0:	6043      	str	r3, [r0, #4]
   820e2:	6083      	str	r3, [r0, #8]
   820e4:	6643      	str	r3, [r0, #100]	; 0x64
   820e6:	6103      	str	r3, [r0, #16]
   820e8:	6143      	str	r3, [r0, #20]
   820ea:	6183      	str	r3, [r0, #24]
   820ec:	4619      	mov	r1, r3
   820ee:	2208      	movs	r2, #8
   820f0:	305c      	adds	r0, #92	; 0x5c
   820f2:	f7fe fe71 	bl	80dd8 <memset>
   820f6:	4807      	ldr	r0, [pc, #28]	; (82114 <std.isra.0+0x40>)
   820f8:	4907      	ldr	r1, [pc, #28]	; (82118 <std.isra.0+0x44>)
   820fa:	4a08      	ldr	r2, [pc, #32]	; (8211c <std.isra.0+0x48>)
   820fc:	4b08      	ldr	r3, [pc, #32]	; (82120 <std.isra.0+0x4c>)
   820fe:	6220      	str	r0, [r4, #32]
   82100:	61e4      	str	r4, [r4, #28]
   82102:	6261      	str	r1, [r4, #36]	; 0x24
   82104:	62a2      	str	r2, [r4, #40]	; 0x28
   82106:	62e3      	str	r3, [r4, #44]	; 0x2c
   82108:	f104 0058 	add.w	r0, r4, #88	; 0x58
   8210c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   82110:	f000 bbc4 	b.w	8289c <__retarget_lock_init_recursive>
   82114:	00083505 	.word	0x00083505
   82118:	00083529 	.word	0x00083529
   8211c:	00083565 	.word	0x00083565
   82120:	00083585 	.word	0x00083585

00082124 <__sinit>:
   82124:	b510      	push	{r4, lr}
   82126:	4604      	mov	r4, r0
   82128:	4814      	ldr	r0, [pc, #80]	; (8217c <__sinit+0x58>)
   8212a:	f000 fbbb 	bl	828a4 <__retarget_lock_acquire_recursive>
   8212e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   82130:	b9fa      	cbnz	r2, 82172 <__sinit+0x4e>
   82132:	2003      	movs	r0, #3
   82134:	4912      	ldr	r1, [pc, #72]	; (82180 <__sinit+0x5c>)
   82136:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
   8213a:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
   8213e:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
   82142:	f8c4 02e4 	str.w	r0, [r4, #740]	; 0x2e4
   82146:	63e1      	str	r1, [r4, #60]	; 0x3c
   82148:	6860      	ldr	r0, [r4, #4]
   8214a:	2104      	movs	r1, #4
   8214c:	f7ff ffc2 	bl	820d4 <std.isra.0>
   82150:	68a0      	ldr	r0, [r4, #8]
   82152:	2201      	movs	r2, #1
   82154:	2109      	movs	r1, #9
   82156:	f7ff ffbd 	bl	820d4 <std.isra.0>
   8215a:	68e0      	ldr	r0, [r4, #12]
   8215c:	2202      	movs	r2, #2
   8215e:	2112      	movs	r1, #18
   82160:	f7ff ffb8 	bl	820d4 <std.isra.0>
   82164:	2301      	movs	r3, #1
   82166:	4805      	ldr	r0, [pc, #20]	; (8217c <__sinit+0x58>)
   82168:	63a3      	str	r3, [r4, #56]	; 0x38
   8216a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   8216e:	f000 bb9b 	b.w	828a8 <__retarget_lock_release_recursive>
   82172:	4802      	ldr	r0, [pc, #8]	; (8217c <__sinit+0x58>)
   82174:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   82178:	f000 bb96 	b.w	828a8 <__retarget_lock_release_recursive>
   8217c:	20070c5c 	.word	0x20070c5c
   82180:	000820c9 	.word	0x000820c9

00082184 <__sfp_lock_acquire>:
   82184:	4801      	ldr	r0, [pc, #4]	; (8218c <__sfp_lock_acquire+0x8>)
   82186:	f000 bb8d 	b.w	828a4 <__retarget_lock_acquire_recursive>
   8218a:	bf00      	nop
   8218c:	20070c70 	.word	0x20070c70

00082190 <__sfp_lock_release>:
   82190:	4801      	ldr	r0, [pc, #4]	; (82198 <__sfp_lock_release+0x8>)
   82192:	f000 bb89 	b.w	828a8 <__retarget_lock_release_recursive>
   82196:	bf00      	nop
   82198:	20070c70 	.word	0x20070c70

0008219c <__libc_fini_array>:
   8219c:	b538      	push	{r3, r4, r5, lr}
   8219e:	4c0a      	ldr	r4, [pc, #40]	; (821c8 <__libc_fini_array+0x2c>)
   821a0:	4d0a      	ldr	r5, [pc, #40]	; (821cc <__libc_fini_array+0x30>)
   821a2:	1b64      	subs	r4, r4, r5
   821a4:	10a4      	asrs	r4, r4, #2
   821a6:	d00a      	beq.n	821be <__libc_fini_array+0x22>
   821a8:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   821ac:	3b01      	subs	r3, #1
   821ae:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   821b2:	3c01      	subs	r4, #1
   821b4:	f855 3904 	ldr.w	r3, [r5], #-4
   821b8:	4798      	blx	r3
   821ba:	2c00      	cmp	r4, #0
   821bc:	d1f9      	bne.n	821b2 <__libc_fini_array+0x16>
   821be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   821c2:	f001 bde3 	b.w	83d8c <_fini>
   821c6:	bf00      	nop
   821c8:	00083d9c 	.word	0x00083d9c
   821cc:	00083d98 	.word	0x00083d98

000821d0 <__fputwc>:
   821d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   821d4:	b083      	sub	sp, #12
   821d6:	4607      	mov	r7, r0
   821d8:	4688      	mov	r8, r1
   821da:	4614      	mov	r4, r2
   821dc:	f000 fb50 	bl	82880 <__locale_mb_cur_max>
   821e0:	2801      	cmp	r0, #1
   821e2:	d033      	beq.n	8224c <__fputwc+0x7c>
   821e4:	4642      	mov	r2, r8
   821e6:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   821ea:	a901      	add	r1, sp, #4
   821ec:	4638      	mov	r0, r7
   821ee:	f001 f9fb 	bl	835e8 <_wcrtomb_r>
   821f2:	1c42      	adds	r2, r0, #1
   821f4:	4606      	mov	r6, r0
   821f6:	d022      	beq.n	8223e <__fputwc+0x6e>
   821f8:	b390      	cbz	r0, 82260 <__fputwc+0x90>
   821fa:	f89d 1004 	ldrb.w	r1, [sp, #4]
   821fe:	2500      	movs	r5, #0
   82200:	f10d 0904 	add.w	r9, sp, #4
   82204:	e008      	b.n	82218 <__fputwc+0x48>
   82206:	6823      	ldr	r3, [r4, #0]
   82208:	1c5a      	adds	r2, r3, #1
   8220a:	6022      	str	r2, [r4, #0]
   8220c:	7019      	strb	r1, [r3, #0]
   8220e:	3501      	adds	r5, #1
   82210:	42b5      	cmp	r5, r6
   82212:	d225      	bcs.n	82260 <__fputwc+0x90>
   82214:	f815 1009 	ldrb.w	r1, [r5, r9]
   82218:	68a3      	ldr	r3, [r4, #8]
   8221a:	3b01      	subs	r3, #1
   8221c:	2b00      	cmp	r3, #0
   8221e:	60a3      	str	r3, [r4, #8]
   82220:	daf1      	bge.n	82206 <__fputwc+0x36>
   82222:	69a2      	ldr	r2, [r4, #24]
   82224:	4293      	cmp	r3, r2
   82226:	db01      	blt.n	8222c <__fputwc+0x5c>
   82228:	290a      	cmp	r1, #10
   8222a:	d1ec      	bne.n	82206 <__fputwc+0x36>
   8222c:	4622      	mov	r2, r4
   8222e:	4638      	mov	r0, r7
   82230:	f7ff fdb8 	bl	81da4 <__swbuf_r>
   82234:	1c43      	adds	r3, r0, #1
   82236:	d1ea      	bne.n	8220e <__fputwc+0x3e>
   82238:	b003      	add	sp, #12
   8223a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   8223e:	89a3      	ldrh	r3, [r4, #12]
   82240:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   82244:	81a3      	strh	r3, [r4, #12]
   82246:	b003      	add	sp, #12
   82248:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   8224c:	f108 33ff 	add.w	r3, r8, #4294967295
   82250:	2bfe      	cmp	r3, #254	; 0xfe
   82252:	d8c7      	bhi.n	821e4 <__fputwc+0x14>
   82254:	fa5f f188 	uxtb.w	r1, r8
   82258:	4606      	mov	r6, r0
   8225a:	f88d 1004 	strb.w	r1, [sp, #4]
   8225e:	e7ce      	b.n	821fe <__fputwc+0x2e>
   82260:	4640      	mov	r0, r8
   82262:	b003      	add	sp, #12
   82264:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00082268 <_fputwc_r>:
   82268:	b530      	push	{r4, r5, lr}
   8226a:	6e53      	ldr	r3, [r2, #100]	; 0x64
   8226c:	4614      	mov	r4, r2
   8226e:	f013 0f01 	tst.w	r3, #1
   82272:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   82276:	b083      	sub	sp, #12
   82278:	4605      	mov	r5, r0
   8227a:	b29a      	uxth	r2, r3
   8227c:	d101      	bne.n	82282 <_fputwc_r+0x1a>
   8227e:	0590      	lsls	r0, r2, #22
   82280:	d51c      	bpl.n	822bc <_fputwc_r+0x54>
   82282:	0490      	lsls	r0, r2, #18
   82284:	d406      	bmi.n	82294 <_fputwc_r+0x2c>
   82286:	6e62      	ldr	r2, [r4, #100]	; 0x64
   82288:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   8228c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   82290:	81a3      	strh	r3, [r4, #12]
   82292:	6662      	str	r2, [r4, #100]	; 0x64
   82294:	4628      	mov	r0, r5
   82296:	4622      	mov	r2, r4
   82298:	f7ff ff9a 	bl	821d0 <__fputwc>
   8229c:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8229e:	4605      	mov	r5, r0
   822a0:	07da      	lsls	r2, r3, #31
   822a2:	d402      	bmi.n	822aa <_fputwc_r+0x42>
   822a4:	89a3      	ldrh	r3, [r4, #12]
   822a6:	059b      	lsls	r3, r3, #22
   822a8:	d502      	bpl.n	822b0 <_fputwc_r+0x48>
   822aa:	4628      	mov	r0, r5
   822ac:	b003      	add	sp, #12
   822ae:	bd30      	pop	{r4, r5, pc}
   822b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
   822b2:	f000 faf9 	bl	828a8 <__retarget_lock_release_recursive>
   822b6:	4628      	mov	r0, r5
   822b8:	b003      	add	sp, #12
   822ba:	bd30      	pop	{r4, r5, pc}
   822bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
   822be:	9101      	str	r1, [sp, #4]
   822c0:	f000 faf0 	bl	828a4 <__retarget_lock_acquire_recursive>
   822c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   822c8:	9901      	ldr	r1, [sp, #4]
   822ca:	b29a      	uxth	r2, r3
   822cc:	e7d9      	b.n	82282 <_fputwc_r+0x1a>
   822ce:	bf00      	nop

000822d0 <_malloc_trim_r>:
   822d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   822d2:	460c      	mov	r4, r1
   822d4:	4f23      	ldr	r7, [pc, #140]	; (82364 <_malloc_trim_r+0x94>)
   822d6:	4606      	mov	r6, r0
   822d8:	f000 ff40 	bl	8315c <__malloc_lock>
   822dc:	68bb      	ldr	r3, [r7, #8]
   822de:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
   822e2:	685d      	ldr	r5, [r3, #4]
   822e4:	310f      	adds	r1, #15
   822e6:	f025 0503 	bic.w	r5, r5, #3
   822ea:	4429      	add	r1, r5
   822ec:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   822f0:	f021 010f 	bic.w	r1, r1, #15
   822f4:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   822f8:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   822fc:	db07      	blt.n	8230e <_malloc_trim_r+0x3e>
   822fe:	2100      	movs	r1, #0
   82300:	4630      	mov	r0, r6
   82302:	f001 f8ed 	bl	834e0 <_sbrk_r>
   82306:	68bb      	ldr	r3, [r7, #8]
   82308:	442b      	add	r3, r5
   8230a:	4298      	cmp	r0, r3
   8230c:	d004      	beq.n	82318 <_malloc_trim_r+0x48>
   8230e:	4630      	mov	r0, r6
   82310:	f000 ff2a 	bl	83168 <__malloc_unlock>
   82314:	2000      	movs	r0, #0
   82316:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82318:	4261      	negs	r1, r4
   8231a:	4630      	mov	r0, r6
   8231c:	f001 f8e0 	bl	834e0 <_sbrk_r>
   82320:	3001      	adds	r0, #1
   82322:	d00d      	beq.n	82340 <_malloc_trim_r+0x70>
   82324:	4b10      	ldr	r3, [pc, #64]	; (82368 <_malloc_trim_r+0x98>)
   82326:	68ba      	ldr	r2, [r7, #8]
   82328:	6819      	ldr	r1, [r3, #0]
   8232a:	1b2d      	subs	r5, r5, r4
   8232c:	f045 0501 	orr.w	r5, r5, #1
   82330:	4630      	mov	r0, r6
   82332:	1b09      	subs	r1, r1, r4
   82334:	6055      	str	r5, [r2, #4]
   82336:	6019      	str	r1, [r3, #0]
   82338:	f000 ff16 	bl	83168 <__malloc_unlock>
   8233c:	2001      	movs	r0, #1
   8233e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82340:	2100      	movs	r1, #0
   82342:	4630      	mov	r0, r6
   82344:	f001 f8cc 	bl	834e0 <_sbrk_r>
   82348:	68ba      	ldr	r2, [r7, #8]
   8234a:	1a83      	subs	r3, r0, r2
   8234c:	2b0f      	cmp	r3, #15
   8234e:	ddde      	ble.n	8230e <_malloc_trim_r+0x3e>
   82350:	4c06      	ldr	r4, [pc, #24]	; (8236c <_malloc_trim_r+0x9c>)
   82352:	4905      	ldr	r1, [pc, #20]	; (82368 <_malloc_trim_r+0x98>)
   82354:	6824      	ldr	r4, [r4, #0]
   82356:	f043 0301 	orr.w	r3, r3, #1
   8235a:	1b00      	subs	r0, r0, r4
   8235c:	6053      	str	r3, [r2, #4]
   8235e:	6008      	str	r0, [r1, #0]
   82360:	e7d5      	b.n	8230e <_malloc_trim_r+0x3e>
   82362:	bf00      	nop
   82364:	200706d0 	.word	0x200706d0
   82368:	20070c10 	.word	0x20070c10
   8236c:	20070ad8 	.word	0x20070ad8

00082370 <_free_r>:
   82370:	2900      	cmp	r1, #0
   82372:	d044      	beq.n	823fe <_free_r+0x8e>
   82374:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82378:	460d      	mov	r5, r1
   8237a:	4680      	mov	r8, r0
   8237c:	f000 feee 	bl	8315c <__malloc_lock>
   82380:	f855 7c04 	ldr.w	r7, [r5, #-4]
   82384:	4969      	ldr	r1, [pc, #420]	; (8252c <_free_r+0x1bc>)
   82386:	f1a5 0408 	sub.w	r4, r5, #8
   8238a:	f027 0301 	bic.w	r3, r7, #1
   8238e:	18e2      	adds	r2, r4, r3
   82390:	688e      	ldr	r6, [r1, #8]
   82392:	6850      	ldr	r0, [r2, #4]
   82394:	42b2      	cmp	r2, r6
   82396:	f020 0003 	bic.w	r0, r0, #3
   8239a:	d05e      	beq.n	8245a <_free_r+0xea>
   8239c:	07fe      	lsls	r6, r7, #31
   8239e:	6050      	str	r0, [r2, #4]
   823a0:	d40b      	bmi.n	823ba <_free_r+0x4a>
   823a2:	f855 7c08 	ldr.w	r7, [r5, #-8]
   823a6:	f101 0e08 	add.w	lr, r1, #8
   823aa:	1be4      	subs	r4, r4, r7
   823ac:	68a5      	ldr	r5, [r4, #8]
   823ae:	443b      	add	r3, r7
   823b0:	4575      	cmp	r5, lr
   823b2:	d06d      	beq.n	82490 <_free_r+0x120>
   823b4:	68e7      	ldr	r7, [r4, #12]
   823b6:	60ef      	str	r7, [r5, #12]
   823b8:	60bd      	str	r5, [r7, #8]
   823ba:	1815      	adds	r5, r2, r0
   823bc:	686d      	ldr	r5, [r5, #4]
   823be:	07ed      	lsls	r5, r5, #31
   823c0:	d53e      	bpl.n	82440 <_free_r+0xd0>
   823c2:	f043 0201 	orr.w	r2, r3, #1
   823c6:	6062      	str	r2, [r4, #4]
   823c8:	50e3      	str	r3, [r4, r3]
   823ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   823ce:	d217      	bcs.n	82400 <_free_r+0x90>
   823d0:	2201      	movs	r2, #1
   823d2:	08db      	lsrs	r3, r3, #3
   823d4:	1098      	asrs	r0, r3, #2
   823d6:	684d      	ldr	r5, [r1, #4]
   823d8:	4413      	add	r3, r2
   823da:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
   823de:	4082      	lsls	r2, r0
   823e0:	eb01 00c3 	add.w	r0, r1, r3, lsl #3
   823e4:	432a      	orrs	r2, r5
   823e6:	3808      	subs	r0, #8
   823e8:	60e0      	str	r0, [r4, #12]
   823ea:	60a7      	str	r7, [r4, #8]
   823ec:	604a      	str	r2, [r1, #4]
   823ee:	f841 4033 	str.w	r4, [r1, r3, lsl #3]
   823f2:	60fc      	str	r4, [r7, #12]
   823f4:	4640      	mov	r0, r8
   823f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   823fa:	f000 beb5 	b.w	83168 <__malloc_unlock>
   823fe:	4770      	bx	lr
   82400:	0a5a      	lsrs	r2, r3, #9
   82402:	2a04      	cmp	r2, #4
   82404:	d852      	bhi.n	824ac <_free_r+0x13c>
   82406:	099a      	lsrs	r2, r3, #6
   82408:	f102 0739 	add.w	r7, r2, #57	; 0x39
   8240c:	00ff      	lsls	r7, r7, #3
   8240e:	f102 0538 	add.w	r5, r2, #56	; 0x38
   82412:	19c8      	adds	r0, r1, r7
   82414:	59ca      	ldr	r2, [r1, r7]
   82416:	3808      	subs	r0, #8
   82418:	4290      	cmp	r0, r2
   8241a:	d04f      	beq.n	824bc <_free_r+0x14c>
   8241c:	6851      	ldr	r1, [r2, #4]
   8241e:	f021 0103 	bic.w	r1, r1, #3
   82422:	428b      	cmp	r3, r1
   82424:	d232      	bcs.n	8248c <_free_r+0x11c>
   82426:	6892      	ldr	r2, [r2, #8]
   82428:	4290      	cmp	r0, r2
   8242a:	d1f7      	bne.n	8241c <_free_r+0xac>
   8242c:	68c3      	ldr	r3, [r0, #12]
   8242e:	60a0      	str	r0, [r4, #8]
   82430:	60e3      	str	r3, [r4, #12]
   82432:	609c      	str	r4, [r3, #8]
   82434:	60c4      	str	r4, [r0, #12]
   82436:	4640      	mov	r0, r8
   82438:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   8243c:	f000 be94 	b.w	83168 <__malloc_unlock>
   82440:	6895      	ldr	r5, [r2, #8]
   82442:	4f3b      	ldr	r7, [pc, #236]	; (82530 <_free_r+0x1c0>)
   82444:	4403      	add	r3, r0
   82446:	42bd      	cmp	r5, r7
   82448:	d040      	beq.n	824cc <_free_r+0x15c>
   8244a:	68d0      	ldr	r0, [r2, #12]
   8244c:	f043 0201 	orr.w	r2, r3, #1
   82450:	60e8      	str	r0, [r5, #12]
   82452:	6085      	str	r5, [r0, #8]
   82454:	6062      	str	r2, [r4, #4]
   82456:	50e3      	str	r3, [r4, r3]
   82458:	e7b7      	b.n	823ca <_free_r+0x5a>
   8245a:	07ff      	lsls	r7, r7, #31
   8245c:	4403      	add	r3, r0
   8245e:	d407      	bmi.n	82470 <_free_r+0x100>
   82460:	f855 5c08 	ldr.w	r5, [r5, #-8]
   82464:	1b64      	subs	r4, r4, r5
   82466:	68e2      	ldr	r2, [r4, #12]
   82468:	68a0      	ldr	r0, [r4, #8]
   8246a:	442b      	add	r3, r5
   8246c:	60c2      	str	r2, [r0, #12]
   8246e:	6090      	str	r0, [r2, #8]
   82470:	4a30      	ldr	r2, [pc, #192]	; (82534 <_free_r+0x1c4>)
   82472:	f043 0001 	orr.w	r0, r3, #1
   82476:	6812      	ldr	r2, [r2, #0]
   82478:	6060      	str	r0, [r4, #4]
   8247a:	4293      	cmp	r3, r2
   8247c:	608c      	str	r4, [r1, #8]
   8247e:	d3b9      	bcc.n	823f4 <_free_r+0x84>
   82480:	4b2d      	ldr	r3, [pc, #180]	; (82538 <_free_r+0x1c8>)
   82482:	4640      	mov	r0, r8
   82484:	6819      	ldr	r1, [r3, #0]
   82486:	f7ff ff23 	bl	822d0 <_malloc_trim_r>
   8248a:	e7b3      	b.n	823f4 <_free_r+0x84>
   8248c:	4610      	mov	r0, r2
   8248e:	e7cd      	b.n	8242c <_free_r+0xbc>
   82490:	1811      	adds	r1, r2, r0
   82492:	6849      	ldr	r1, [r1, #4]
   82494:	07c9      	lsls	r1, r1, #31
   82496:	d444      	bmi.n	82522 <_free_r+0x1b2>
   82498:	6891      	ldr	r1, [r2, #8]
   8249a:	4403      	add	r3, r0
   8249c:	68d2      	ldr	r2, [r2, #12]
   8249e:	f043 0001 	orr.w	r0, r3, #1
   824a2:	60ca      	str	r2, [r1, #12]
   824a4:	6091      	str	r1, [r2, #8]
   824a6:	6060      	str	r0, [r4, #4]
   824a8:	50e3      	str	r3, [r4, r3]
   824aa:	e7a3      	b.n	823f4 <_free_r+0x84>
   824ac:	2a14      	cmp	r2, #20
   824ae:	d816      	bhi.n	824de <_free_r+0x16e>
   824b0:	f102 075c 	add.w	r7, r2, #92	; 0x5c
   824b4:	00ff      	lsls	r7, r7, #3
   824b6:	f102 055b 	add.w	r5, r2, #91	; 0x5b
   824ba:	e7aa      	b.n	82412 <_free_r+0xa2>
   824bc:	2301      	movs	r3, #1
   824be:	10aa      	asrs	r2, r5, #2
   824c0:	684d      	ldr	r5, [r1, #4]
   824c2:	4093      	lsls	r3, r2
   824c4:	432b      	orrs	r3, r5
   824c6:	604b      	str	r3, [r1, #4]
   824c8:	4603      	mov	r3, r0
   824ca:	e7b0      	b.n	8242e <_free_r+0xbe>
   824cc:	f043 0201 	orr.w	r2, r3, #1
   824d0:	614c      	str	r4, [r1, #20]
   824d2:	610c      	str	r4, [r1, #16]
   824d4:	60e5      	str	r5, [r4, #12]
   824d6:	60a5      	str	r5, [r4, #8]
   824d8:	6062      	str	r2, [r4, #4]
   824da:	50e3      	str	r3, [r4, r3]
   824dc:	e78a      	b.n	823f4 <_free_r+0x84>
   824de:	2a54      	cmp	r2, #84	; 0x54
   824e0:	d806      	bhi.n	824f0 <_free_r+0x180>
   824e2:	0b1a      	lsrs	r2, r3, #12
   824e4:	f102 076f 	add.w	r7, r2, #111	; 0x6f
   824e8:	00ff      	lsls	r7, r7, #3
   824ea:	f102 056e 	add.w	r5, r2, #110	; 0x6e
   824ee:	e790      	b.n	82412 <_free_r+0xa2>
   824f0:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   824f4:	d806      	bhi.n	82504 <_free_r+0x194>
   824f6:	0bda      	lsrs	r2, r3, #15
   824f8:	f102 0778 	add.w	r7, r2, #120	; 0x78
   824fc:	00ff      	lsls	r7, r7, #3
   824fe:	f102 0577 	add.w	r5, r2, #119	; 0x77
   82502:	e786      	b.n	82412 <_free_r+0xa2>
   82504:	f240 5054 	movw	r0, #1364	; 0x554
   82508:	4282      	cmp	r2, r0
   8250a:	d806      	bhi.n	8251a <_free_r+0x1aa>
   8250c:	0c9a      	lsrs	r2, r3, #18
   8250e:	f102 077d 	add.w	r7, r2, #125	; 0x7d
   82512:	00ff      	lsls	r7, r7, #3
   82514:	f102 057c 	add.w	r5, r2, #124	; 0x7c
   82518:	e77b      	b.n	82412 <_free_r+0xa2>
   8251a:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
   8251e:	257e      	movs	r5, #126	; 0x7e
   82520:	e777      	b.n	82412 <_free_r+0xa2>
   82522:	f043 0101 	orr.w	r1, r3, #1
   82526:	6061      	str	r1, [r4, #4]
   82528:	6013      	str	r3, [r2, #0]
   8252a:	e763      	b.n	823f4 <_free_r+0x84>
   8252c:	200706d0 	.word	0x200706d0
   82530:	200706d8 	.word	0x200706d8
   82534:	20070adc 	.word	0x20070adc
   82538:	20070c40 	.word	0x20070c40

0008253c <__sfvwrite_r>:
   8253c:	6893      	ldr	r3, [r2, #8]
   8253e:	2b00      	cmp	r3, #0
   82540:	d071      	beq.n	82626 <__sfvwrite_r+0xea>
   82542:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82546:	898b      	ldrh	r3, [r1, #12]
   82548:	b083      	sub	sp, #12
   8254a:	460c      	mov	r4, r1
   8254c:	0719      	lsls	r1, r3, #28
   8254e:	9000      	str	r0, [sp, #0]
   82550:	4616      	mov	r6, r2
   82552:	d525      	bpl.n	825a0 <__sfvwrite_r+0x64>
   82554:	6922      	ldr	r2, [r4, #16]
   82556:	b31a      	cbz	r2, 825a0 <__sfvwrite_r+0x64>
   82558:	f013 0002 	ands.w	r0, r3, #2
   8255c:	6835      	ldr	r5, [r6, #0]
   8255e:	d02b      	beq.n	825b8 <__sfvwrite_r+0x7c>
   82560:	f04f 0900 	mov.w	r9, #0
   82564:	46b0      	mov	r8, r6
   82566:	464f      	mov	r7, r9
   82568:	f8df a2c0 	ldr.w	sl, [pc, #704]	; 8282c <__sfvwrite_r+0x2f0>
   8256c:	2f00      	cmp	r7, #0
   8256e:	d055      	beq.n	8261c <__sfvwrite_r+0xe0>
   82570:	4557      	cmp	r7, sl
   82572:	463b      	mov	r3, r7
   82574:	464a      	mov	r2, r9
   82576:	bf28      	it	cs
   82578:	4653      	movcs	r3, sl
   8257a:	69e1      	ldr	r1, [r4, #28]
   8257c:	9800      	ldr	r0, [sp, #0]
   8257e:	6a66      	ldr	r6, [r4, #36]	; 0x24
   82580:	47b0      	blx	r6
   82582:	2800      	cmp	r0, #0
   82584:	dd56      	ble.n	82634 <__sfvwrite_r+0xf8>
   82586:	f8d8 3008 	ldr.w	r3, [r8, #8]
   8258a:	4481      	add	r9, r0
   8258c:	1a1b      	subs	r3, r3, r0
   8258e:	1a3f      	subs	r7, r7, r0
   82590:	f8c8 3008 	str.w	r3, [r8, #8]
   82594:	2b00      	cmp	r3, #0
   82596:	d1e9      	bne.n	8256c <__sfvwrite_r+0x30>
   82598:	2000      	movs	r0, #0
   8259a:	b003      	add	sp, #12
   8259c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   825a0:	4621      	mov	r1, r4
   825a2:	9800      	ldr	r0, [sp, #0]
   825a4:	f7ff fc56 	bl	81e54 <__swsetup_r>
   825a8:	2800      	cmp	r0, #0
   825aa:	f040 8135 	bne.w	82818 <__sfvwrite_r+0x2dc>
   825ae:	89a3      	ldrh	r3, [r4, #12]
   825b0:	6835      	ldr	r5, [r6, #0]
   825b2:	f013 0002 	ands.w	r0, r3, #2
   825b6:	d1d3      	bne.n	82560 <__sfvwrite_r+0x24>
   825b8:	f013 0901 	ands.w	r9, r3, #1
   825bc:	d144      	bne.n	82648 <__sfvwrite_r+0x10c>
   825be:	464f      	mov	r7, r9
   825c0:	9601      	str	r6, [sp, #4]
   825c2:	b337      	cbz	r7, 82612 <__sfvwrite_r+0xd6>
   825c4:	059a      	lsls	r2, r3, #22
   825c6:	f8d4 8008 	ldr.w	r8, [r4, #8]
   825ca:	f140 8085 	bpl.w	826d8 <__sfvwrite_r+0x19c>
   825ce:	4547      	cmp	r7, r8
   825d0:	46c3      	mov	fp, r8
   825d2:	f0c0 80ad 	bcc.w	82730 <__sfvwrite_r+0x1f4>
   825d6:	f413 6f90 	tst.w	r3, #1152	; 0x480
   825da:	f040 80ae 	bne.w	8273a <__sfvwrite_r+0x1fe>
   825de:	46ba      	mov	sl, r7
   825e0:	6820      	ldr	r0, [r4, #0]
   825e2:	465a      	mov	r2, fp
   825e4:	4649      	mov	r1, r9
   825e6:	f000 fd55 	bl	83094 <memmove>
   825ea:	68a2      	ldr	r2, [r4, #8]
   825ec:	6823      	ldr	r3, [r4, #0]
   825ee:	eba2 0208 	sub.w	r2, r2, r8
   825f2:	445b      	add	r3, fp
   825f4:	60a2      	str	r2, [r4, #8]
   825f6:	6023      	str	r3, [r4, #0]
   825f8:	9a01      	ldr	r2, [sp, #4]
   825fa:	44d1      	add	r9, sl
   825fc:	6893      	ldr	r3, [r2, #8]
   825fe:	eba7 070a 	sub.w	r7, r7, sl
   82602:	eba3 030a 	sub.w	r3, r3, sl
   82606:	6093      	str	r3, [r2, #8]
   82608:	2b00      	cmp	r3, #0
   8260a:	d0c5      	beq.n	82598 <__sfvwrite_r+0x5c>
   8260c:	89a3      	ldrh	r3, [r4, #12]
   8260e:	2f00      	cmp	r7, #0
   82610:	d1d8      	bne.n	825c4 <__sfvwrite_r+0x88>
   82612:	f8d5 9000 	ldr.w	r9, [r5]
   82616:	686f      	ldr	r7, [r5, #4]
   82618:	3508      	adds	r5, #8
   8261a:	e7d2      	b.n	825c2 <__sfvwrite_r+0x86>
   8261c:	f8d5 9000 	ldr.w	r9, [r5]
   82620:	686f      	ldr	r7, [r5, #4]
   82622:	3508      	adds	r5, #8
   82624:	e7a2      	b.n	8256c <__sfvwrite_r+0x30>
   82626:	2000      	movs	r0, #0
   82628:	4770      	bx	lr
   8262a:	4621      	mov	r1, r4
   8262c:	9800      	ldr	r0, [sp, #0]
   8262e:	f7ff fd21 	bl	82074 <_fflush_r>
   82632:	b378      	cbz	r0, 82694 <__sfvwrite_r+0x158>
   82634:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   82638:	f04f 30ff 	mov.w	r0, #4294967295
   8263c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   82640:	81a3      	strh	r3, [r4, #12]
   82642:	b003      	add	sp, #12
   82644:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82648:	4681      	mov	r9, r0
   8264a:	4633      	mov	r3, r6
   8264c:	464e      	mov	r6, r9
   8264e:	46a8      	mov	r8, r5
   82650:	469a      	mov	sl, r3
   82652:	464d      	mov	r5, r9
   82654:	b356      	cbz	r6, 826ac <__sfvwrite_r+0x170>
   82656:	2800      	cmp	r0, #0
   82658:	d032      	beq.n	826c0 <__sfvwrite_r+0x184>
   8265a:	45b1      	cmp	r9, r6
   8265c:	46cb      	mov	fp, r9
   8265e:	bf28      	it	cs
   82660:	46b3      	movcs	fp, r6
   82662:	6820      	ldr	r0, [r4, #0]
   82664:	6923      	ldr	r3, [r4, #16]
   82666:	465f      	mov	r7, fp
   82668:	4298      	cmp	r0, r3
   8266a:	6962      	ldr	r2, [r4, #20]
   8266c:	d904      	bls.n	82678 <__sfvwrite_r+0x13c>
   8266e:	68a3      	ldr	r3, [r4, #8]
   82670:	4413      	add	r3, r2
   82672:	459b      	cmp	fp, r3
   82674:	f300 80a8 	bgt.w	827c8 <__sfvwrite_r+0x28c>
   82678:	4593      	cmp	fp, r2
   8267a:	db4d      	blt.n	82718 <__sfvwrite_r+0x1dc>
   8267c:	4613      	mov	r3, r2
   8267e:	6a67      	ldr	r7, [r4, #36]	; 0x24
   82680:	462a      	mov	r2, r5
   82682:	69e1      	ldr	r1, [r4, #28]
   82684:	9800      	ldr	r0, [sp, #0]
   82686:	47b8      	blx	r7
   82688:	1e07      	subs	r7, r0, #0
   8268a:	ddd3      	ble.n	82634 <__sfvwrite_r+0xf8>
   8268c:	ebb9 0907 	subs.w	r9, r9, r7
   82690:	d0cb      	beq.n	8262a <__sfvwrite_r+0xee>
   82692:	2001      	movs	r0, #1
   82694:	f8da 3008 	ldr.w	r3, [sl, #8]
   82698:	443d      	add	r5, r7
   8269a:	1bdb      	subs	r3, r3, r7
   8269c:	1bf6      	subs	r6, r6, r7
   8269e:	f8ca 3008 	str.w	r3, [sl, #8]
   826a2:	2b00      	cmp	r3, #0
   826a4:	f43f af78 	beq.w	82598 <__sfvwrite_r+0x5c>
   826a8:	2e00      	cmp	r6, #0
   826aa:	d1d4      	bne.n	82656 <__sfvwrite_r+0x11a>
   826ac:	f108 0308 	add.w	r3, r8, #8
   826b0:	f853 6c04 	ldr.w	r6, [r3, #-4]
   826b4:	4698      	mov	r8, r3
   826b6:	f853 5c08 	ldr.w	r5, [r3, #-8]
   826ba:	3308      	adds	r3, #8
   826bc:	2e00      	cmp	r6, #0
   826be:	d0f7      	beq.n	826b0 <__sfvwrite_r+0x174>
   826c0:	4632      	mov	r2, r6
   826c2:	210a      	movs	r1, #10
   826c4:	4628      	mov	r0, r5
   826c6:	f000 fc29 	bl	82f1c <memchr>
   826ca:	2800      	cmp	r0, #0
   826cc:	f000 80a1 	beq.w	82812 <__sfvwrite_r+0x2d6>
   826d0:	3001      	adds	r0, #1
   826d2:	eba0 0905 	sub.w	r9, r0, r5
   826d6:	e7c0      	b.n	8265a <__sfvwrite_r+0x11e>
   826d8:	6820      	ldr	r0, [r4, #0]
   826da:	6923      	ldr	r3, [r4, #16]
   826dc:	4298      	cmp	r0, r3
   826de:	d802      	bhi.n	826e6 <__sfvwrite_r+0x1aa>
   826e0:	6963      	ldr	r3, [r4, #20]
   826e2:	429f      	cmp	r7, r3
   826e4:	d25d      	bcs.n	827a2 <__sfvwrite_r+0x266>
   826e6:	45b8      	cmp	r8, r7
   826e8:	bf28      	it	cs
   826ea:	46b8      	movcs	r8, r7
   826ec:	4649      	mov	r1, r9
   826ee:	4642      	mov	r2, r8
   826f0:	f000 fcd0 	bl	83094 <memmove>
   826f4:	68a3      	ldr	r3, [r4, #8]
   826f6:	6822      	ldr	r2, [r4, #0]
   826f8:	eba3 0308 	sub.w	r3, r3, r8
   826fc:	4442      	add	r2, r8
   826fe:	60a3      	str	r3, [r4, #8]
   82700:	6022      	str	r2, [r4, #0]
   82702:	b10b      	cbz	r3, 82708 <__sfvwrite_r+0x1cc>
   82704:	46c2      	mov	sl, r8
   82706:	e777      	b.n	825f8 <__sfvwrite_r+0xbc>
   82708:	4621      	mov	r1, r4
   8270a:	9800      	ldr	r0, [sp, #0]
   8270c:	f7ff fcb2 	bl	82074 <_fflush_r>
   82710:	2800      	cmp	r0, #0
   82712:	d18f      	bne.n	82634 <__sfvwrite_r+0xf8>
   82714:	46c2      	mov	sl, r8
   82716:	e76f      	b.n	825f8 <__sfvwrite_r+0xbc>
   82718:	465a      	mov	r2, fp
   8271a:	4629      	mov	r1, r5
   8271c:	f000 fcba 	bl	83094 <memmove>
   82720:	68a2      	ldr	r2, [r4, #8]
   82722:	6823      	ldr	r3, [r4, #0]
   82724:	eba2 020b 	sub.w	r2, r2, fp
   82728:	445b      	add	r3, fp
   8272a:	60a2      	str	r2, [r4, #8]
   8272c:	6023      	str	r3, [r4, #0]
   8272e:	e7ad      	b.n	8268c <__sfvwrite_r+0x150>
   82730:	46b8      	mov	r8, r7
   82732:	46ba      	mov	sl, r7
   82734:	46bb      	mov	fp, r7
   82736:	6820      	ldr	r0, [r4, #0]
   82738:	e753      	b.n	825e2 <__sfvwrite_r+0xa6>
   8273a:	6962      	ldr	r2, [r4, #20]
   8273c:	6820      	ldr	r0, [r4, #0]
   8273e:	6921      	ldr	r1, [r4, #16]
   82740:	eb02 0842 	add.w	r8, r2, r2, lsl #1
   82744:	eba0 0a01 	sub.w	sl, r0, r1
   82748:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
   8274c:	f10a 0001 	add.w	r0, sl, #1
   82750:	ea4f 0868 	mov.w	r8, r8, asr #1
   82754:	4438      	add	r0, r7
   82756:	4540      	cmp	r0, r8
   82758:	4642      	mov	r2, r8
   8275a:	bf84      	itt	hi
   8275c:	4680      	movhi	r8, r0
   8275e:	4642      	movhi	r2, r8
   82760:	055b      	lsls	r3, r3, #21
   82762:	d544      	bpl.n	827ee <__sfvwrite_r+0x2b2>
   82764:	4611      	mov	r1, r2
   82766:	9800      	ldr	r0, [sp, #0]
   82768:	f000 f920 	bl	829ac <_malloc_r>
   8276c:	4683      	mov	fp, r0
   8276e:	2800      	cmp	r0, #0
   82770:	d055      	beq.n	8281e <__sfvwrite_r+0x2e2>
   82772:	4652      	mov	r2, sl
   82774:	6921      	ldr	r1, [r4, #16]
   82776:	f000 fc17 	bl	82fa8 <memcpy>
   8277a:	89a3      	ldrh	r3, [r4, #12]
   8277c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   82780:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   82784:	81a3      	strh	r3, [r4, #12]
   82786:	eb0b 000a 	add.w	r0, fp, sl
   8278a:	eba8 030a 	sub.w	r3, r8, sl
   8278e:	f8c4 b010 	str.w	fp, [r4, #16]
   82792:	f8c4 8014 	str.w	r8, [r4, #20]
   82796:	6020      	str	r0, [r4, #0]
   82798:	60a3      	str	r3, [r4, #8]
   8279a:	46b8      	mov	r8, r7
   8279c:	46ba      	mov	sl, r7
   8279e:	46bb      	mov	fp, r7
   827a0:	e71f      	b.n	825e2 <__sfvwrite_r+0xa6>
   827a2:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   827a6:	42ba      	cmp	r2, r7
   827a8:	bf28      	it	cs
   827aa:	463a      	movcs	r2, r7
   827ac:	fb92 f2f3 	sdiv	r2, r2, r3
   827b0:	69e1      	ldr	r1, [r4, #28]
   827b2:	fb03 f302 	mul.w	r3, r3, r2
   827b6:	9800      	ldr	r0, [sp, #0]
   827b8:	464a      	mov	r2, r9
   827ba:	6a66      	ldr	r6, [r4, #36]	; 0x24
   827bc:	47b0      	blx	r6
   827be:	f1b0 0a00 	subs.w	sl, r0, #0
   827c2:	f73f af19 	bgt.w	825f8 <__sfvwrite_r+0xbc>
   827c6:	e735      	b.n	82634 <__sfvwrite_r+0xf8>
   827c8:	461a      	mov	r2, r3
   827ca:	4629      	mov	r1, r5
   827cc:	9301      	str	r3, [sp, #4]
   827ce:	f000 fc61 	bl	83094 <memmove>
   827d2:	6822      	ldr	r2, [r4, #0]
   827d4:	9b01      	ldr	r3, [sp, #4]
   827d6:	4621      	mov	r1, r4
   827d8:	441a      	add	r2, r3
   827da:	6022      	str	r2, [r4, #0]
   827dc:	9800      	ldr	r0, [sp, #0]
   827de:	f7ff fc49 	bl	82074 <_fflush_r>
   827e2:	9b01      	ldr	r3, [sp, #4]
   827e4:	2800      	cmp	r0, #0
   827e6:	f47f af25 	bne.w	82634 <__sfvwrite_r+0xf8>
   827ea:	461f      	mov	r7, r3
   827ec:	e74e      	b.n	8268c <__sfvwrite_r+0x150>
   827ee:	9800      	ldr	r0, [sp, #0]
   827f0:	f000 fcc0 	bl	83174 <_realloc_r>
   827f4:	4683      	mov	fp, r0
   827f6:	2800      	cmp	r0, #0
   827f8:	d1c5      	bne.n	82786 <__sfvwrite_r+0x24a>
   827fa:	9d00      	ldr	r5, [sp, #0]
   827fc:	6921      	ldr	r1, [r4, #16]
   827fe:	4628      	mov	r0, r5
   82800:	f7ff fdb6 	bl	82370 <_free_r>
   82804:	220c      	movs	r2, #12
   82806:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8280a:	602a      	str	r2, [r5, #0]
   8280c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   82810:	e712      	b.n	82638 <__sfvwrite_r+0xfc>
   82812:	f106 0901 	add.w	r9, r6, #1
   82816:	e720      	b.n	8265a <__sfvwrite_r+0x11e>
   82818:	f04f 30ff 	mov.w	r0, #4294967295
   8281c:	e6bd      	b.n	8259a <__sfvwrite_r+0x5e>
   8281e:	220c      	movs	r2, #12
   82820:	9900      	ldr	r1, [sp, #0]
   82822:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   82826:	600a      	str	r2, [r1, #0]
   82828:	e706      	b.n	82638 <__sfvwrite_r+0xfc>
   8282a:	bf00      	nop
   8282c:	7ffffc00 	.word	0x7ffffc00

00082830 <_fwalk_reent>:
   82830:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   82834:	f510 7638 	adds.w	r6, r0, #736	; 0x2e0
   82838:	d01e      	beq.n	82878 <_fwalk_reent+0x48>
   8283a:	4688      	mov	r8, r1
   8283c:	4607      	mov	r7, r0
   8283e:	f04f 0900 	mov.w	r9, #0
   82842:	6875      	ldr	r5, [r6, #4]
   82844:	68b4      	ldr	r4, [r6, #8]
   82846:	3d01      	subs	r5, #1
   82848:	d410      	bmi.n	8286c <_fwalk_reent+0x3c>
   8284a:	89a3      	ldrh	r3, [r4, #12]
   8284c:	3d01      	subs	r5, #1
   8284e:	2b01      	cmp	r3, #1
   82850:	d908      	bls.n	82864 <_fwalk_reent+0x34>
   82852:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   82856:	3301      	adds	r3, #1
   82858:	d004      	beq.n	82864 <_fwalk_reent+0x34>
   8285a:	4621      	mov	r1, r4
   8285c:	4638      	mov	r0, r7
   8285e:	47c0      	blx	r8
   82860:	ea49 0900 	orr.w	r9, r9, r0
   82864:	1c6b      	adds	r3, r5, #1
   82866:	f104 0468 	add.w	r4, r4, #104	; 0x68
   8286a:	d1ee      	bne.n	8284a <_fwalk_reent+0x1a>
   8286c:	6836      	ldr	r6, [r6, #0]
   8286e:	2e00      	cmp	r6, #0
   82870:	d1e7      	bne.n	82842 <_fwalk_reent+0x12>
   82872:	4648      	mov	r0, r9
   82874:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   82878:	46b1      	mov	r9, r6
   8287a:	4648      	mov	r0, r9
   8287c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00082880 <__locale_mb_cur_max>:
   82880:	4b04      	ldr	r3, [pc, #16]	; (82894 <__locale_mb_cur_max+0x14>)
   82882:	4a05      	ldr	r2, [pc, #20]	; (82898 <__locale_mb_cur_max+0x18>)
   82884:	681b      	ldr	r3, [r3, #0]
   82886:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   82888:	2b00      	cmp	r3, #0
   8288a:	bf08      	it	eq
   8288c:	4613      	moveq	r3, r2
   8288e:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
   82892:	4770      	bx	lr
   82894:	20070134 	.word	0x20070134
   82898:	20070564 	.word	0x20070564

0008289c <__retarget_lock_init_recursive>:
   8289c:	4770      	bx	lr
   8289e:	bf00      	nop

000828a0 <__retarget_lock_close_recursive>:
   828a0:	4770      	bx	lr
   828a2:	bf00      	nop

000828a4 <__retarget_lock_acquire_recursive>:
   828a4:	4770      	bx	lr
   828a6:	bf00      	nop

000828a8 <__retarget_lock_release_recursive>:
   828a8:	4770      	bx	lr
   828aa:	bf00      	nop

000828ac <__swhatbuf_r>:
   828ac:	b570      	push	{r4, r5, r6, lr}
   828ae:	460c      	mov	r4, r1
   828b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   828b4:	b090      	sub	sp, #64	; 0x40
   828b6:	2900      	cmp	r1, #0
   828b8:	4615      	mov	r5, r2
   828ba:	461e      	mov	r6, r3
   828bc:	db14      	blt.n	828e8 <__swhatbuf_r+0x3c>
   828be:	aa01      	add	r2, sp, #4
   828c0:	f000 ffb4 	bl	8382c <_fstat_r>
   828c4:	2800      	cmp	r0, #0
   828c6:	db0f      	blt.n	828e8 <__swhatbuf_r+0x3c>
   828c8:	9a02      	ldr	r2, [sp, #8]
   828ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
   828ce:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   828d2:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
   828d6:	fab2 f282 	clz	r2, r2
   828da:	f44f 6000 	mov.w	r0, #2048	; 0x800
   828de:	0952      	lsrs	r2, r2, #5
   828e0:	6032      	str	r2, [r6, #0]
   828e2:	602b      	str	r3, [r5, #0]
   828e4:	b010      	add	sp, #64	; 0x40
   828e6:	bd70      	pop	{r4, r5, r6, pc}
   828e8:	2300      	movs	r3, #0
   828ea:	89a2      	ldrh	r2, [r4, #12]
   828ec:	6033      	str	r3, [r6, #0]
   828ee:	f012 0080 	ands.w	r0, r2, #128	; 0x80
   828f2:	d004      	beq.n	828fe <__swhatbuf_r+0x52>
   828f4:	2240      	movs	r2, #64	; 0x40
   828f6:	4618      	mov	r0, r3
   828f8:	602a      	str	r2, [r5, #0]
   828fa:	b010      	add	sp, #64	; 0x40
   828fc:	bd70      	pop	{r4, r5, r6, pc}
   828fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
   82902:	602b      	str	r3, [r5, #0]
   82904:	b010      	add	sp, #64	; 0x40
   82906:	bd70      	pop	{r4, r5, r6, pc}

00082908 <__smakebuf_r>:
   82908:	898a      	ldrh	r2, [r1, #12]
   8290a:	460b      	mov	r3, r1
   8290c:	0792      	lsls	r2, r2, #30
   8290e:	d506      	bpl.n	8291e <__smakebuf_r+0x16>
   82910:	2101      	movs	r1, #1
   82912:	f103 0243 	add.w	r2, r3, #67	; 0x43
   82916:	6159      	str	r1, [r3, #20]
   82918:	601a      	str	r2, [r3, #0]
   8291a:	611a      	str	r2, [r3, #16]
   8291c:	4770      	bx	lr
   8291e:	b5f0      	push	{r4, r5, r6, r7, lr}
   82920:	b083      	sub	sp, #12
   82922:	ab01      	add	r3, sp, #4
   82924:	466a      	mov	r2, sp
   82926:	460c      	mov	r4, r1
   82928:	4606      	mov	r6, r0
   8292a:	f7ff ffbf 	bl	828ac <__swhatbuf_r>
   8292e:	9900      	ldr	r1, [sp, #0]
   82930:	4605      	mov	r5, r0
   82932:	4630      	mov	r0, r6
   82934:	f000 f83a 	bl	829ac <_malloc_r>
   82938:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8293c:	b1d8      	cbz	r0, 82976 <__smakebuf_r+0x6e>
   8293e:	e89d 0006 	ldmia.w	sp, {r1, r2}
   82942:	4f15      	ldr	r7, [pc, #84]	; (82998 <__smakebuf_r+0x90>)
   82944:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   82948:	63f7      	str	r7, [r6, #60]	; 0x3c
   8294a:	81a3      	strh	r3, [r4, #12]
   8294c:	6020      	str	r0, [r4, #0]
   8294e:	6120      	str	r0, [r4, #16]
   82950:	6161      	str	r1, [r4, #20]
   82952:	b91a      	cbnz	r2, 8295c <__smakebuf_r+0x54>
   82954:	432b      	orrs	r3, r5
   82956:	81a3      	strh	r3, [r4, #12]
   82958:	b003      	add	sp, #12
   8295a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8295c:	4630      	mov	r0, r6
   8295e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   82962:	f000 ff77 	bl	83854 <_isatty_r>
   82966:	b1a0      	cbz	r0, 82992 <__smakebuf_r+0x8a>
   82968:	89a3      	ldrh	r3, [r4, #12]
   8296a:	f023 0303 	bic.w	r3, r3, #3
   8296e:	f043 0301 	orr.w	r3, r3, #1
   82972:	b21b      	sxth	r3, r3
   82974:	e7ee      	b.n	82954 <__smakebuf_r+0x4c>
   82976:	059a      	lsls	r2, r3, #22
   82978:	d4ee      	bmi.n	82958 <__smakebuf_r+0x50>
   8297a:	2101      	movs	r1, #1
   8297c:	f023 0303 	bic.w	r3, r3, #3
   82980:	f104 0243 	add.w	r2, r4, #67	; 0x43
   82984:	f043 0302 	orr.w	r3, r3, #2
   82988:	81a3      	strh	r3, [r4, #12]
   8298a:	6161      	str	r1, [r4, #20]
   8298c:	6022      	str	r2, [r4, #0]
   8298e:	6122      	str	r2, [r4, #16]
   82990:	e7e2      	b.n	82958 <__smakebuf_r+0x50>
   82992:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   82996:	e7dd      	b.n	82954 <__smakebuf_r+0x4c>
   82998:	000820c9 	.word	0x000820c9

0008299c <malloc>:
   8299c:	4b02      	ldr	r3, [pc, #8]	; (829a8 <malloc+0xc>)
   8299e:	4601      	mov	r1, r0
   829a0:	6818      	ldr	r0, [r3, #0]
   829a2:	f000 b803 	b.w	829ac <_malloc_r>
   829a6:	bf00      	nop
   829a8:	20070134 	.word	0x20070134

000829ac <_malloc_r>:
   829ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   829b0:	f101 060b 	add.w	r6, r1, #11
   829b4:	2e16      	cmp	r6, #22
   829b6:	b083      	sub	sp, #12
   829b8:	4605      	mov	r5, r0
   829ba:	f240 809e 	bls.w	82afa <_malloc_r+0x14e>
   829be:	f036 0607 	bics.w	r6, r6, #7
   829c2:	f100 80bd 	bmi.w	82b40 <_malloc_r+0x194>
   829c6:	42b1      	cmp	r1, r6
   829c8:	f200 80ba 	bhi.w	82b40 <_malloc_r+0x194>
   829cc:	f000 fbc6 	bl	8315c <__malloc_lock>
   829d0:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
   829d4:	f0c0 8285 	bcc.w	82ee2 <_malloc_r+0x536>
   829d8:	0a73      	lsrs	r3, r6, #9
   829da:	f000 80b8 	beq.w	82b4e <_malloc_r+0x1a2>
   829de:	2b04      	cmp	r3, #4
   829e0:	f200 816c 	bhi.w	82cbc <_malloc_r+0x310>
   829e4:	09b3      	lsrs	r3, r6, #6
   829e6:	f103 0039 	add.w	r0, r3, #57	; 0x39
   829ea:	f103 0e38 	add.w	lr, r3, #56	; 0x38
   829ee:	00c1      	lsls	r1, r0, #3
   829f0:	4fb8      	ldr	r7, [pc, #736]	; (82cd4 <_malloc_r+0x328>)
   829f2:	4439      	add	r1, r7
   829f4:	684c      	ldr	r4, [r1, #4]
   829f6:	3908      	subs	r1, #8
   829f8:	42a1      	cmp	r1, r4
   829fa:	d106      	bne.n	82a0a <_malloc_r+0x5e>
   829fc:	e00c      	b.n	82a18 <_malloc_r+0x6c>
   829fe:	2a00      	cmp	r2, #0
   82a00:	f280 80ab 	bge.w	82b5a <_malloc_r+0x1ae>
   82a04:	68e4      	ldr	r4, [r4, #12]
   82a06:	42a1      	cmp	r1, r4
   82a08:	d006      	beq.n	82a18 <_malloc_r+0x6c>
   82a0a:	6863      	ldr	r3, [r4, #4]
   82a0c:	f023 0303 	bic.w	r3, r3, #3
   82a10:	1b9a      	subs	r2, r3, r6
   82a12:	2a0f      	cmp	r2, #15
   82a14:	ddf3      	ble.n	829fe <_malloc_r+0x52>
   82a16:	4670      	mov	r0, lr
   82a18:	693c      	ldr	r4, [r7, #16]
   82a1a:	f8df e2cc 	ldr.w	lr, [pc, #716]	; 82ce8 <_malloc_r+0x33c>
   82a1e:	4574      	cmp	r4, lr
   82a20:	f000 819e 	beq.w	82d60 <_malloc_r+0x3b4>
   82a24:	6863      	ldr	r3, [r4, #4]
   82a26:	f023 0303 	bic.w	r3, r3, #3
   82a2a:	1b9a      	subs	r2, r3, r6
   82a2c:	2a0f      	cmp	r2, #15
   82a2e:	f300 8183 	bgt.w	82d38 <_malloc_r+0x38c>
   82a32:	2a00      	cmp	r2, #0
   82a34:	f8c7 e014 	str.w	lr, [r7, #20]
   82a38:	f8c7 e010 	str.w	lr, [r7, #16]
   82a3c:	f280 8091 	bge.w	82b62 <_malloc_r+0x1b6>
   82a40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   82a44:	f080 8154 	bcs.w	82cf0 <_malloc_r+0x344>
   82a48:	2201      	movs	r2, #1
   82a4a:	08db      	lsrs	r3, r3, #3
   82a4c:	6879      	ldr	r1, [r7, #4]
   82a4e:	ea4f 0ca3 	mov.w	ip, r3, asr #2
   82a52:	4413      	add	r3, r2
   82a54:	f857 8033 	ldr.w	r8, [r7, r3, lsl #3]
   82a58:	fa02 f20c 	lsl.w	r2, r2, ip
   82a5c:	eb07 0cc3 	add.w	ip, r7, r3, lsl #3
   82a60:	430a      	orrs	r2, r1
   82a62:	f1ac 0108 	sub.w	r1, ip, #8
   82a66:	60e1      	str	r1, [r4, #12]
   82a68:	f8c4 8008 	str.w	r8, [r4, #8]
   82a6c:	607a      	str	r2, [r7, #4]
   82a6e:	f847 4033 	str.w	r4, [r7, r3, lsl #3]
   82a72:	f8c8 400c 	str.w	r4, [r8, #12]
   82a76:	2401      	movs	r4, #1
   82a78:	1083      	asrs	r3, r0, #2
   82a7a:	409c      	lsls	r4, r3
   82a7c:	4294      	cmp	r4, r2
   82a7e:	d87d      	bhi.n	82b7c <_malloc_r+0x1d0>
   82a80:	4214      	tst	r4, r2
   82a82:	d106      	bne.n	82a92 <_malloc_r+0xe6>
   82a84:	f020 0003 	bic.w	r0, r0, #3
   82a88:	0064      	lsls	r4, r4, #1
   82a8a:	4214      	tst	r4, r2
   82a8c:	f100 0004 	add.w	r0, r0, #4
   82a90:	d0fa      	beq.n	82a88 <_malloc_r+0xdc>
   82a92:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   82a96:	46cc      	mov	ip, r9
   82a98:	4680      	mov	r8, r0
   82a9a:	f8dc 300c 	ldr.w	r3, [ip, #12]
   82a9e:	459c      	cmp	ip, r3
   82aa0:	d107      	bne.n	82ab2 <_malloc_r+0x106>
   82aa2:	e15f      	b.n	82d64 <_malloc_r+0x3b8>
   82aa4:	2a00      	cmp	r2, #0
   82aa6:	f280 816d 	bge.w	82d84 <_malloc_r+0x3d8>
   82aaa:	68db      	ldr	r3, [r3, #12]
   82aac:	459c      	cmp	ip, r3
   82aae:	f000 8159 	beq.w	82d64 <_malloc_r+0x3b8>
   82ab2:	6859      	ldr	r1, [r3, #4]
   82ab4:	f021 0103 	bic.w	r1, r1, #3
   82ab8:	1b8a      	subs	r2, r1, r6
   82aba:	2a0f      	cmp	r2, #15
   82abc:	ddf2      	ble.n	82aa4 <_malloc_r+0xf8>
   82abe:	68dc      	ldr	r4, [r3, #12]
   82ac0:	f8d3 c008 	ldr.w	ip, [r3, #8]
   82ac4:	f046 0801 	orr.w	r8, r6, #1
   82ac8:	4628      	mov	r0, r5
   82aca:	441e      	add	r6, r3
   82acc:	f042 0501 	orr.w	r5, r2, #1
   82ad0:	f8c3 8004 	str.w	r8, [r3, #4]
   82ad4:	f8cc 400c 	str.w	r4, [ip, #12]
   82ad8:	f8c4 c008 	str.w	ip, [r4, #8]
   82adc:	617e      	str	r6, [r7, #20]
   82ade:	613e      	str	r6, [r7, #16]
   82ae0:	f8c6 e00c 	str.w	lr, [r6, #12]
   82ae4:	f8c6 e008 	str.w	lr, [r6, #8]
   82ae8:	6075      	str	r5, [r6, #4]
   82aea:	505a      	str	r2, [r3, r1]
   82aec:	9300      	str	r3, [sp, #0]
   82aee:	f000 fb3b 	bl	83168 <__malloc_unlock>
   82af2:	9b00      	ldr	r3, [sp, #0]
   82af4:	f103 0408 	add.w	r4, r3, #8
   82af8:	e01e      	b.n	82b38 <_malloc_r+0x18c>
   82afa:	2910      	cmp	r1, #16
   82afc:	d820      	bhi.n	82b40 <_malloc_r+0x194>
   82afe:	f000 fb2d 	bl	8315c <__malloc_lock>
   82b02:	2610      	movs	r6, #16
   82b04:	2318      	movs	r3, #24
   82b06:	2002      	movs	r0, #2
   82b08:	4f72      	ldr	r7, [pc, #456]	; (82cd4 <_malloc_r+0x328>)
   82b0a:	443b      	add	r3, r7
   82b0c:	685c      	ldr	r4, [r3, #4]
   82b0e:	f1a3 0208 	sub.w	r2, r3, #8
   82b12:	4294      	cmp	r4, r2
   82b14:	f000 812f 	beq.w	82d76 <_malloc_r+0x3ca>
   82b18:	6863      	ldr	r3, [r4, #4]
   82b1a:	68e1      	ldr	r1, [r4, #12]
   82b1c:	f023 0303 	bic.w	r3, r3, #3
   82b20:	4423      	add	r3, r4
   82b22:	685a      	ldr	r2, [r3, #4]
   82b24:	68a6      	ldr	r6, [r4, #8]
   82b26:	f042 0201 	orr.w	r2, r2, #1
   82b2a:	60f1      	str	r1, [r6, #12]
   82b2c:	4628      	mov	r0, r5
   82b2e:	608e      	str	r6, [r1, #8]
   82b30:	605a      	str	r2, [r3, #4]
   82b32:	f000 fb19 	bl	83168 <__malloc_unlock>
   82b36:	3408      	adds	r4, #8
   82b38:	4620      	mov	r0, r4
   82b3a:	b003      	add	sp, #12
   82b3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82b40:	2400      	movs	r4, #0
   82b42:	230c      	movs	r3, #12
   82b44:	4620      	mov	r0, r4
   82b46:	602b      	str	r3, [r5, #0]
   82b48:	b003      	add	sp, #12
   82b4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82b4e:	2040      	movs	r0, #64	; 0x40
   82b50:	f44f 7100 	mov.w	r1, #512	; 0x200
   82b54:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
   82b58:	e74a      	b.n	829f0 <_malloc_r+0x44>
   82b5a:	4423      	add	r3, r4
   82b5c:	685a      	ldr	r2, [r3, #4]
   82b5e:	68e1      	ldr	r1, [r4, #12]
   82b60:	e7e0      	b.n	82b24 <_malloc_r+0x178>
   82b62:	4423      	add	r3, r4
   82b64:	685a      	ldr	r2, [r3, #4]
   82b66:	4628      	mov	r0, r5
   82b68:	f042 0201 	orr.w	r2, r2, #1
   82b6c:	605a      	str	r2, [r3, #4]
   82b6e:	3408      	adds	r4, #8
   82b70:	f000 fafa 	bl	83168 <__malloc_unlock>
   82b74:	4620      	mov	r0, r4
   82b76:	b003      	add	sp, #12
   82b78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82b7c:	68bc      	ldr	r4, [r7, #8]
   82b7e:	6863      	ldr	r3, [r4, #4]
   82b80:	f023 0803 	bic.w	r8, r3, #3
   82b84:	45b0      	cmp	r8, r6
   82b86:	d304      	bcc.n	82b92 <_malloc_r+0x1e6>
   82b88:	eba8 0306 	sub.w	r3, r8, r6
   82b8c:	2b0f      	cmp	r3, #15
   82b8e:	f300 8085 	bgt.w	82c9c <_malloc_r+0x2f0>
   82b92:	f8df 9158 	ldr.w	r9, [pc, #344]	; 82cec <_malloc_r+0x340>
   82b96:	4b50      	ldr	r3, [pc, #320]	; (82cd8 <_malloc_r+0x32c>)
   82b98:	f8d9 2000 	ldr.w	r2, [r9]
   82b9c:	681b      	ldr	r3, [r3, #0]
   82b9e:	3201      	adds	r2, #1
   82ba0:	4433      	add	r3, r6
   82ba2:	eb04 0a08 	add.w	sl, r4, r8
   82ba6:	f000 8154 	beq.w	82e52 <_malloc_r+0x4a6>
   82baa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   82bae:	330f      	adds	r3, #15
   82bb0:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
   82bb4:	f02b 0b0f 	bic.w	fp, fp, #15
   82bb8:	4659      	mov	r1, fp
   82bba:	4628      	mov	r0, r5
   82bbc:	f000 fc90 	bl	834e0 <_sbrk_r>
   82bc0:	1c41      	adds	r1, r0, #1
   82bc2:	4602      	mov	r2, r0
   82bc4:	f000 80fb 	beq.w	82dbe <_malloc_r+0x412>
   82bc8:	4582      	cmp	sl, r0
   82bca:	f200 80f6 	bhi.w	82dba <_malloc_r+0x40e>
   82bce:	4b43      	ldr	r3, [pc, #268]	; (82cdc <_malloc_r+0x330>)
   82bd0:	6819      	ldr	r1, [r3, #0]
   82bd2:	4459      	add	r1, fp
   82bd4:	6019      	str	r1, [r3, #0]
   82bd6:	f000 814c 	beq.w	82e72 <_malloc_r+0x4c6>
   82bda:	f8d9 0000 	ldr.w	r0, [r9]
   82bde:	3001      	adds	r0, #1
   82be0:	bf1b      	ittet	ne
   82be2:	eba2 0a0a 	subne.w	sl, r2, sl
   82be6:	4451      	addne	r1, sl
   82be8:	f8c9 2000 	streq.w	r2, [r9]
   82bec:	6019      	strne	r1, [r3, #0]
   82bee:	f012 0107 	ands.w	r1, r2, #7
   82bf2:	f000 8114 	beq.w	82e1e <_malloc_r+0x472>
   82bf6:	f1c1 0008 	rsb	r0, r1, #8
   82bfa:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   82bfe:	4402      	add	r2, r0
   82c00:	3108      	adds	r1, #8
   82c02:	eb02 090b 	add.w	r9, r2, fp
   82c06:	f3c9 090b 	ubfx	r9, r9, #0, #12
   82c0a:	eba1 0909 	sub.w	r9, r1, r9
   82c0e:	4649      	mov	r1, r9
   82c10:	4628      	mov	r0, r5
   82c12:	9301      	str	r3, [sp, #4]
   82c14:	9200      	str	r2, [sp, #0]
   82c16:	f000 fc63 	bl	834e0 <_sbrk_r>
   82c1a:	1c43      	adds	r3, r0, #1
   82c1c:	e89d 000c 	ldmia.w	sp, {r2, r3}
   82c20:	f000 8142 	beq.w	82ea8 <_malloc_r+0x4fc>
   82c24:	1a80      	subs	r0, r0, r2
   82c26:	4448      	add	r0, r9
   82c28:	f040 0001 	orr.w	r0, r0, #1
   82c2c:	6819      	ldr	r1, [r3, #0]
   82c2e:	42bc      	cmp	r4, r7
   82c30:	4449      	add	r1, r9
   82c32:	60ba      	str	r2, [r7, #8]
   82c34:	6019      	str	r1, [r3, #0]
   82c36:	6050      	str	r0, [r2, #4]
   82c38:	d017      	beq.n	82c6a <_malloc_r+0x2be>
   82c3a:	f1b8 0f0f 	cmp.w	r8, #15
   82c3e:	f240 80fa 	bls.w	82e36 <_malloc_r+0x48a>
   82c42:	f04f 0c05 	mov.w	ip, #5
   82c46:	6862      	ldr	r2, [r4, #4]
   82c48:	f1a8 000c 	sub.w	r0, r8, #12
   82c4c:	f020 0007 	bic.w	r0, r0, #7
   82c50:	f002 0201 	and.w	r2, r2, #1
   82c54:	eb04 0e00 	add.w	lr, r4, r0
   82c58:	4302      	orrs	r2, r0
   82c5a:	280f      	cmp	r0, #15
   82c5c:	6062      	str	r2, [r4, #4]
   82c5e:	f8ce c004 	str.w	ip, [lr, #4]
   82c62:	f8ce c008 	str.w	ip, [lr, #8]
   82c66:	f200 8116 	bhi.w	82e96 <_malloc_r+0x4ea>
   82c6a:	4b1d      	ldr	r3, [pc, #116]	; (82ce0 <_malloc_r+0x334>)
   82c6c:	68bc      	ldr	r4, [r7, #8]
   82c6e:	681a      	ldr	r2, [r3, #0]
   82c70:	4291      	cmp	r1, r2
   82c72:	bf88      	it	hi
   82c74:	6019      	strhi	r1, [r3, #0]
   82c76:	4b1b      	ldr	r3, [pc, #108]	; (82ce4 <_malloc_r+0x338>)
   82c78:	681a      	ldr	r2, [r3, #0]
   82c7a:	4291      	cmp	r1, r2
   82c7c:	6862      	ldr	r2, [r4, #4]
   82c7e:	bf88      	it	hi
   82c80:	6019      	strhi	r1, [r3, #0]
   82c82:	f022 0203 	bic.w	r2, r2, #3
   82c86:	4296      	cmp	r6, r2
   82c88:	eba2 0306 	sub.w	r3, r2, r6
   82c8c:	d801      	bhi.n	82c92 <_malloc_r+0x2e6>
   82c8e:	2b0f      	cmp	r3, #15
   82c90:	dc04      	bgt.n	82c9c <_malloc_r+0x2f0>
   82c92:	4628      	mov	r0, r5
   82c94:	f000 fa68 	bl	83168 <__malloc_unlock>
   82c98:	2400      	movs	r4, #0
   82c9a:	e74d      	b.n	82b38 <_malloc_r+0x18c>
   82c9c:	f046 0201 	orr.w	r2, r6, #1
   82ca0:	f043 0301 	orr.w	r3, r3, #1
   82ca4:	4426      	add	r6, r4
   82ca6:	6062      	str	r2, [r4, #4]
   82ca8:	4628      	mov	r0, r5
   82caa:	60be      	str	r6, [r7, #8]
   82cac:	3408      	adds	r4, #8
   82cae:	6073      	str	r3, [r6, #4]
   82cb0:	f000 fa5a 	bl	83168 <__malloc_unlock>
   82cb4:	4620      	mov	r0, r4
   82cb6:	b003      	add	sp, #12
   82cb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82cbc:	2b14      	cmp	r3, #20
   82cbe:	d970      	bls.n	82da2 <_malloc_r+0x3f6>
   82cc0:	2b54      	cmp	r3, #84	; 0x54
   82cc2:	f200 80a2 	bhi.w	82e0a <_malloc_r+0x45e>
   82cc6:	0b33      	lsrs	r3, r6, #12
   82cc8:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   82ccc:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
   82cd0:	00c1      	lsls	r1, r0, #3
   82cd2:	e68d      	b.n	829f0 <_malloc_r+0x44>
   82cd4:	200706d0 	.word	0x200706d0
   82cd8:	20070c40 	.word	0x20070c40
   82cdc:	20070c10 	.word	0x20070c10
   82ce0:	20070c38 	.word	0x20070c38
   82ce4:	20070c3c 	.word	0x20070c3c
   82ce8:	200706d8 	.word	0x200706d8
   82cec:	20070ad8 	.word	0x20070ad8
   82cf0:	0a5a      	lsrs	r2, r3, #9
   82cf2:	2a04      	cmp	r2, #4
   82cf4:	d95b      	bls.n	82dae <_malloc_r+0x402>
   82cf6:	2a14      	cmp	r2, #20
   82cf8:	f200 80ae 	bhi.w	82e58 <_malloc_r+0x4ac>
   82cfc:	f102 015c 	add.w	r1, r2, #92	; 0x5c
   82d00:	00c9      	lsls	r1, r1, #3
   82d02:	325b      	adds	r2, #91	; 0x5b
   82d04:	eb07 0c01 	add.w	ip, r7, r1
   82d08:	5879      	ldr	r1, [r7, r1]
   82d0a:	f1ac 0c08 	sub.w	ip, ip, #8
   82d0e:	458c      	cmp	ip, r1
   82d10:	f000 8088 	beq.w	82e24 <_malloc_r+0x478>
   82d14:	684a      	ldr	r2, [r1, #4]
   82d16:	f022 0203 	bic.w	r2, r2, #3
   82d1a:	4293      	cmp	r3, r2
   82d1c:	d273      	bcs.n	82e06 <_malloc_r+0x45a>
   82d1e:	6889      	ldr	r1, [r1, #8]
   82d20:	458c      	cmp	ip, r1
   82d22:	d1f7      	bne.n	82d14 <_malloc_r+0x368>
   82d24:	f8dc 300c 	ldr.w	r3, [ip, #12]
   82d28:	687a      	ldr	r2, [r7, #4]
   82d2a:	60e3      	str	r3, [r4, #12]
   82d2c:	f8c4 c008 	str.w	ip, [r4, #8]
   82d30:	609c      	str	r4, [r3, #8]
   82d32:	f8cc 400c 	str.w	r4, [ip, #12]
   82d36:	e69e      	b.n	82a76 <_malloc_r+0xca>
   82d38:	f046 0c01 	orr.w	ip, r6, #1
   82d3c:	f042 0101 	orr.w	r1, r2, #1
   82d40:	4426      	add	r6, r4
   82d42:	f8c4 c004 	str.w	ip, [r4, #4]
   82d46:	4628      	mov	r0, r5
   82d48:	617e      	str	r6, [r7, #20]
   82d4a:	613e      	str	r6, [r7, #16]
   82d4c:	f8c6 e00c 	str.w	lr, [r6, #12]
   82d50:	f8c6 e008 	str.w	lr, [r6, #8]
   82d54:	6071      	str	r1, [r6, #4]
   82d56:	50e2      	str	r2, [r4, r3]
   82d58:	f000 fa06 	bl	83168 <__malloc_unlock>
   82d5c:	3408      	adds	r4, #8
   82d5e:	e6eb      	b.n	82b38 <_malloc_r+0x18c>
   82d60:	687a      	ldr	r2, [r7, #4]
   82d62:	e688      	b.n	82a76 <_malloc_r+0xca>
   82d64:	f108 0801 	add.w	r8, r8, #1
   82d68:	f018 0f03 	tst.w	r8, #3
   82d6c:	f10c 0c08 	add.w	ip, ip, #8
   82d70:	f47f ae93 	bne.w	82a9a <_malloc_r+0xee>
   82d74:	e02d      	b.n	82dd2 <_malloc_r+0x426>
   82d76:	68dc      	ldr	r4, [r3, #12]
   82d78:	42a3      	cmp	r3, r4
   82d7a:	bf08      	it	eq
   82d7c:	3002      	addeq	r0, #2
   82d7e:	f43f ae4b 	beq.w	82a18 <_malloc_r+0x6c>
   82d82:	e6c9      	b.n	82b18 <_malloc_r+0x16c>
   82d84:	461c      	mov	r4, r3
   82d86:	4419      	add	r1, r3
   82d88:	684a      	ldr	r2, [r1, #4]
   82d8a:	68db      	ldr	r3, [r3, #12]
   82d8c:	f854 6f08 	ldr.w	r6, [r4, #8]!
   82d90:	f042 0201 	orr.w	r2, r2, #1
   82d94:	604a      	str	r2, [r1, #4]
   82d96:	4628      	mov	r0, r5
   82d98:	60f3      	str	r3, [r6, #12]
   82d9a:	609e      	str	r6, [r3, #8]
   82d9c:	f000 f9e4 	bl	83168 <__malloc_unlock>
   82da0:	e6ca      	b.n	82b38 <_malloc_r+0x18c>
   82da2:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   82da6:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
   82daa:	00c1      	lsls	r1, r0, #3
   82dac:	e620      	b.n	829f0 <_malloc_r+0x44>
   82dae:	099a      	lsrs	r2, r3, #6
   82db0:	f102 0139 	add.w	r1, r2, #57	; 0x39
   82db4:	00c9      	lsls	r1, r1, #3
   82db6:	3238      	adds	r2, #56	; 0x38
   82db8:	e7a4      	b.n	82d04 <_malloc_r+0x358>
   82dba:	42bc      	cmp	r4, r7
   82dbc:	d054      	beq.n	82e68 <_malloc_r+0x4bc>
   82dbe:	68bc      	ldr	r4, [r7, #8]
   82dc0:	6862      	ldr	r2, [r4, #4]
   82dc2:	f022 0203 	bic.w	r2, r2, #3
   82dc6:	e75e      	b.n	82c86 <_malloc_r+0x2da>
   82dc8:	f859 3908 	ldr.w	r3, [r9], #-8
   82dcc:	4599      	cmp	r9, r3
   82dce:	f040 8086 	bne.w	82ede <_malloc_r+0x532>
   82dd2:	f010 0f03 	tst.w	r0, #3
   82dd6:	f100 30ff 	add.w	r0, r0, #4294967295
   82dda:	d1f5      	bne.n	82dc8 <_malloc_r+0x41c>
   82ddc:	687b      	ldr	r3, [r7, #4]
   82dde:	ea23 0304 	bic.w	r3, r3, r4
   82de2:	607b      	str	r3, [r7, #4]
   82de4:	0064      	lsls	r4, r4, #1
   82de6:	429c      	cmp	r4, r3
   82de8:	f63f aec8 	bhi.w	82b7c <_malloc_r+0x1d0>
   82dec:	2c00      	cmp	r4, #0
   82dee:	f43f aec5 	beq.w	82b7c <_malloc_r+0x1d0>
   82df2:	421c      	tst	r4, r3
   82df4:	4640      	mov	r0, r8
   82df6:	f47f ae4c 	bne.w	82a92 <_malloc_r+0xe6>
   82dfa:	0064      	lsls	r4, r4, #1
   82dfc:	421c      	tst	r4, r3
   82dfe:	f100 0004 	add.w	r0, r0, #4
   82e02:	d0fa      	beq.n	82dfa <_malloc_r+0x44e>
   82e04:	e645      	b.n	82a92 <_malloc_r+0xe6>
   82e06:	468c      	mov	ip, r1
   82e08:	e78c      	b.n	82d24 <_malloc_r+0x378>
   82e0a:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   82e0e:	d815      	bhi.n	82e3c <_malloc_r+0x490>
   82e10:	0bf3      	lsrs	r3, r6, #15
   82e12:	f103 0078 	add.w	r0, r3, #120	; 0x78
   82e16:	f103 0e77 	add.w	lr, r3, #119	; 0x77
   82e1a:	00c1      	lsls	r1, r0, #3
   82e1c:	e5e8      	b.n	829f0 <_malloc_r+0x44>
   82e1e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   82e22:	e6ee      	b.n	82c02 <_malloc_r+0x256>
   82e24:	2101      	movs	r1, #1
   82e26:	687b      	ldr	r3, [r7, #4]
   82e28:	1092      	asrs	r2, r2, #2
   82e2a:	fa01 f202 	lsl.w	r2, r1, r2
   82e2e:	431a      	orrs	r2, r3
   82e30:	607a      	str	r2, [r7, #4]
   82e32:	4663      	mov	r3, ip
   82e34:	e779      	b.n	82d2a <_malloc_r+0x37e>
   82e36:	2301      	movs	r3, #1
   82e38:	6053      	str	r3, [r2, #4]
   82e3a:	e72a      	b.n	82c92 <_malloc_r+0x2e6>
   82e3c:	f240 5254 	movw	r2, #1364	; 0x554
   82e40:	4293      	cmp	r3, r2
   82e42:	d822      	bhi.n	82e8a <_malloc_r+0x4de>
   82e44:	0cb3      	lsrs	r3, r6, #18
   82e46:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   82e4a:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
   82e4e:	00c1      	lsls	r1, r0, #3
   82e50:	e5ce      	b.n	829f0 <_malloc_r+0x44>
   82e52:	f103 0b10 	add.w	fp, r3, #16
   82e56:	e6af      	b.n	82bb8 <_malloc_r+0x20c>
   82e58:	2a54      	cmp	r2, #84	; 0x54
   82e5a:	d829      	bhi.n	82eb0 <_malloc_r+0x504>
   82e5c:	0b1a      	lsrs	r2, r3, #12
   82e5e:	f102 016f 	add.w	r1, r2, #111	; 0x6f
   82e62:	00c9      	lsls	r1, r1, #3
   82e64:	326e      	adds	r2, #110	; 0x6e
   82e66:	e74d      	b.n	82d04 <_malloc_r+0x358>
   82e68:	4b20      	ldr	r3, [pc, #128]	; (82eec <_malloc_r+0x540>)
   82e6a:	6819      	ldr	r1, [r3, #0]
   82e6c:	4459      	add	r1, fp
   82e6e:	6019      	str	r1, [r3, #0]
   82e70:	e6b3      	b.n	82bda <_malloc_r+0x22e>
   82e72:	f3ca 000b 	ubfx	r0, sl, #0, #12
   82e76:	2800      	cmp	r0, #0
   82e78:	f47f aeaf 	bne.w	82bda <_malloc_r+0x22e>
   82e7c:	eb08 030b 	add.w	r3, r8, fp
   82e80:	68ba      	ldr	r2, [r7, #8]
   82e82:	f043 0301 	orr.w	r3, r3, #1
   82e86:	6053      	str	r3, [r2, #4]
   82e88:	e6ef      	b.n	82c6a <_malloc_r+0x2be>
   82e8a:	207f      	movs	r0, #127	; 0x7f
   82e8c:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   82e90:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
   82e94:	e5ac      	b.n	829f0 <_malloc_r+0x44>
   82e96:	f104 0108 	add.w	r1, r4, #8
   82e9a:	4628      	mov	r0, r5
   82e9c:	9300      	str	r3, [sp, #0]
   82e9e:	f7ff fa67 	bl	82370 <_free_r>
   82ea2:	9b00      	ldr	r3, [sp, #0]
   82ea4:	6819      	ldr	r1, [r3, #0]
   82ea6:	e6e0      	b.n	82c6a <_malloc_r+0x2be>
   82ea8:	2001      	movs	r0, #1
   82eaa:	f04f 0900 	mov.w	r9, #0
   82eae:	e6bd      	b.n	82c2c <_malloc_r+0x280>
   82eb0:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   82eb4:	d805      	bhi.n	82ec2 <_malloc_r+0x516>
   82eb6:	0bda      	lsrs	r2, r3, #15
   82eb8:	f102 0178 	add.w	r1, r2, #120	; 0x78
   82ebc:	00c9      	lsls	r1, r1, #3
   82ebe:	3277      	adds	r2, #119	; 0x77
   82ec0:	e720      	b.n	82d04 <_malloc_r+0x358>
   82ec2:	f240 5154 	movw	r1, #1364	; 0x554
   82ec6:	428a      	cmp	r2, r1
   82ec8:	d805      	bhi.n	82ed6 <_malloc_r+0x52a>
   82eca:	0c9a      	lsrs	r2, r3, #18
   82ecc:	f102 017d 	add.w	r1, r2, #125	; 0x7d
   82ed0:	00c9      	lsls	r1, r1, #3
   82ed2:	327c      	adds	r2, #124	; 0x7c
   82ed4:	e716      	b.n	82d04 <_malloc_r+0x358>
   82ed6:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   82eda:	227e      	movs	r2, #126	; 0x7e
   82edc:	e712      	b.n	82d04 <_malloc_r+0x358>
   82ede:	687b      	ldr	r3, [r7, #4]
   82ee0:	e780      	b.n	82de4 <_malloc_r+0x438>
   82ee2:	08f0      	lsrs	r0, r6, #3
   82ee4:	f106 0308 	add.w	r3, r6, #8
   82ee8:	e60e      	b.n	82b08 <_malloc_r+0x15c>
   82eea:	bf00      	nop
   82eec:	20070c10 	.word	0x20070c10

00082ef0 <__ascii_mbtowc>:
   82ef0:	b082      	sub	sp, #8
   82ef2:	b149      	cbz	r1, 82f08 <__ascii_mbtowc+0x18>
   82ef4:	b15a      	cbz	r2, 82f0e <__ascii_mbtowc+0x1e>
   82ef6:	b16b      	cbz	r3, 82f14 <__ascii_mbtowc+0x24>
   82ef8:	7813      	ldrb	r3, [r2, #0]
   82efa:	600b      	str	r3, [r1, #0]
   82efc:	7812      	ldrb	r2, [r2, #0]
   82efe:	1c10      	adds	r0, r2, #0
   82f00:	bf18      	it	ne
   82f02:	2001      	movne	r0, #1
   82f04:	b002      	add	sp, #8
   82f06:	4770      	bx	lr
   82f08:	a901      	add	r1, sp, #4
   82f0a:	2a00      	cmp	r2, #0
   82f0c:	d1f3      	bne.n	82ef6 <__ascii_mbtowc+0x6>
   82f0e:	4610      	mov	r0, r2
   82f10:	b002      	add	sp, #8
   82f12:	4770      	bx	lr
   82f14:	f06f 0001 	mvn.w	r0, #1
   82f18:	e7f4      	b.n	82f04 <__ascii_mbtowc+0x14>
   82f1a:	bf00      	nop

00082f1c <memchr>:
   82f1c:	0783      	lsls	r3, r0, #30
   82f1e:	b470      	push	{r4, r5, r6}
   82f20:	b2cd      	uxtb	r5, r1
   82f22:	d03d      	beq.n	82fa0 <memchr+0x84>
   82f24:	1e54      	subs	r4, r2, #1
   82f26:	b30a      	cbz	r2, 82f6c <memchr+0x50>
   82f28:	7803      	ldrb	r3, [r0, #0]
   82f2a:	42ab      	cmp	r3, r5
   82f2c:	d01f      	beq.n	82f6e <memchr+0x52>
   82f2e:	1c43      	adds	r3, r0, #1
   82f30:	e005      	b.n	82f3e <memchr+0x22>
   82f32:	f114 34ff 	adds.w	r4, r4, #4294967295
   82f36:	d319      	bcc.n	82f6c <memchr+0x50>
   82f38:	7802      	ldrb	r2, [r0, #0]
   82f3a:	42aa      	cmp	r2, r5
   82f3c:	d017      	beq.n	82f6e <memchr+0x52>
   82f3e:	f013 0f03 	tst.w	r3, #3
   82f42:	4618      	mov	r0, r3
   82f44:	f103 0301 	add.w	r3, r3, #1
   82f48:	d1f3      	bne.n	82f32 <memchr+0x16>
   82f4a:	2c03      	cmp	r4, #3
   82f4c:	d811      	bhi.n	82f72 <memchr+0x56>
   82f4e:	b34c      	cbz	r4, 82fa4 <memchr+0x88>
   82f50:	7803      	ldrb	r3, [r0, #0]
   82f52:	42ab      	cmp	r3, r5
   82f54:	d00b      	beq.n	82f6e <memchr+0x52>
   82f56:	4404      	add	r4, r0
   82f58:	1c43      	adds	r3, r0, #1
   82f5a:	e002      	b.n	82f62 <memchr+0x46>
   82f5c:	7802      	ldrb	r2, [r0, #0]
   82f5e:	42aa      	cmp	r2, r5
   82f60:	d005      	beq.n	82f6e <memchr+0x52>
   82f62:	429c      	cmp	r4, r3
   82f64:	4618      	mov	r0, r3
   82f66:	f103 0301 	add.w	r3, r3, #1
   82f6a:	d1f7      	bne.n	82f5c <memchr+0x40>
   82f6c:	2000      	movs	r0, #0
   82f6e:	bc70      	pop	{r4, r5, r6}
   82f70:	4770      	bx	lr
   82f72:	0209      	lsls	r1, r1, #8
   82f74:	b289      	uxth	r1, r1
   82f76:	4329      	orrs	r1, r5
   82f78:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   82f7c:	6803      	ldr	r3, [r0, #0]
   82f7e:	4606      	mov	r6, r0
   82f80:	404b      	eors	r3, r1
   82f82:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   82f86:	ea22 0303 	bic.w	r3, r2, r3
   82f8a:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   82f8e:	f100 0004 	add.w	r0, r0, #4
   82f92:	d103      	bne.n	82f9c <memchr+0x80>
   82f94:	3c04      	subs	r4, #4
   82f96:	2c03      	cmp	r4, #3
   82f98:	d8f0      	bhi.n	82f7c <memchr+0x60>
   82f9a:	e7d8      	b.n	82f4e <memchr+0x32>
   82f9c:	4630      	mov	r0, r6
   82f9e:	e7d7      	b.n	82f50 <memchr+0x34>
   82fa0:	4614      	mov	r4, r2
   82fa2:	e7d2      	b.n	82f4a <memchr+0x2e>
   82fa4:	4620      	mov	r0, r4
   82fa6:	e7e2      	b.n	82f6e <memchr+0x52>

00082fa8 <memcpy>:
   82fa8:	4684      	mov	ip, r0
   82faa:	ea41 0300 	orr.w	r3, r1, r0
   82fae:	f013 0303 	ands.w	r3, r3, #3
   82fb2:	d149      	bne.n	83048 <memcpy+0xa0>
   82fb4:	3a40      	subs	r2, #64	; 0x40
   82fb6:	d323      	bcc.n	83000 <memcpy+0x58>
   82fb8:	680b      	ldr	r3, [r1, #0]
   82fba:	6003      	str	r3, [r0, #0]
   82fbc:	684b      	ldr	r3, [r1, #4]
   82fbe:	6043      	str	r3, [r0, #4]
   82fc0:	688b      	ldr	r3, [r1, #8]
   82fc2:	6083      	str	r3, [r0, #8]
   82fc4:	68cb      	ldr	r3, [r1, #12]
   82fc6:	60c3      	str	r3, [r0, #12]
   82fc8:	690b      	ldr	r3, [r1, #16]
   82fca:	6103      	str	r3, [r0, #16]
   82fcc:	694b      	ldr	r3, [r1, #20]
   82fce:	6143      	str	r3, [r0, #20]
   82fd0:	698b      	ldr	r3, [r1, #24]
   82fd2:	6183      	str	r3, [r0, #24]
   82fd4:	69cb      	ldr	r3, [r1, #28]
   82fd6:	61c3      	str	r3, [r0, #28]
   82fd8:	6a0b      	ldr	r3, [r1, #32]
   82fda:	6203      	str	r3, [r0, #32]
   82fdc:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   82fde:	6243      	str	r3, [r0, #36]	; 0x24
   82fe0:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   82fe2:	6283      	str	r3, [r0, #40]	; 0x28
   82fe4:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   82fe6:	62c3      	str	r3, [r0, #44]	; 0x2c
   82fe8:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   82fea:	6303      	str	r3, [r0, #48]	; 0x30
   82fec:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   82fee:	6343      	str	r3, [r0, #52]	; 0x34
   82ff0:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   82ff2:	6383      	str	r3, [r0, #56]	; 0x38
   82ff4:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   82ff6:	63c3      	str	r3, [r0, #60]	; 0x3c
   82ff8:	3040      	adds	r0, #64	; 0x40
   82ffa:	3140      	adds	r1, #64	; 0x40
   82ffc:	3a40      	subs	r2, #64	; 0x40
   82ffe:	d2db      	bcs.n	82fb8 <memcpy+0x10>
   83000:	3230      	adds	r2, #48	; 0x30
   83002:	d30b      	bcc.n	8301c <memcpy+0x74>
   83004:	680b      	ldr	r3, [r1, #0]
   83006:	6003      	str	r3, [r0, #0]
   83008:	684b      	ldr	r3, [r1, #4]
   8300a:	6043      	str	r3, [r0, #4]
   8300c:	688b      	ldr	r3, [r1, #8]
   8300e:	6083      	str	r3, [r0, #8]
   83010:	68cb      	ldr	r3, [r1, #12]
   83012:	60c3      	str	r3, [r0, #12]
   83014:	3010      	adds	r0, #16
   83016:	3110      	adds	r1, #16
   83018:	3a10      	subs	r2, #16
   8301a:	d2f3      	bcs.n	83004 <memcpy+0x5c>
   8301c:	320c      	adds	r2, #12
   8301e:	d305      	bcc.n	8302c <memcpy+0x84>
   83020:	f851 3b04 	ldr.w	r3, [r1], #4
   83024:	f840 3b04 	str.w	r3, [r0], #4
   83028:	3a04      	subs	r2, #4
   8302a:	d2f9      	bcs.n	83020 <memcpy+0x78>
   8302c:	3204      	adds	r2, #4
   8302e:	d008      	beq.n	83042 <memcpy+0x9a>
   83030:	07d2      	lsls	r2, r2, #31
   83032:	bf1c      	itt	ne
   83034:	f811 3b01 	ldrbne.w	r3, [r1], #1
   83038:	f800 3b01 	strbne.w	r3, [r0], #1
   8303c:	d301      	bcc.n	83042 <memcpy+0x9a>
   8303e:	880b      	ldrh	r3, [r1, #0]
   83040:	8003      	strh	r3, [r0, #0]
   83042:	4660      	mov	r0, ip
   83044:	4770      	bx	lr
   83046:	bf00      	nop
   83048:	2a08      	cmp	r2, #8
   8304a:	d313      	bcc.n	83074 <memcpy+0xcc>
   8304c:	078b      	lsls	r3, r1, #30
   8304e:	d0b1      	beq.n	82fb4 <memcpy+0xc>
   83050:	f010 0303 	ands.w	r3, r0, #3
   83054:	d0ae      	beq.n	82fb4 <memcpy+0xc>
   83056:	f1c3 0304 	rsb	r3, r3, #4
   8305a:	1ad2      	subs	r2, r2, r3
   8305c:	07db      	lsls	r3, r3, #31
   8305e:	bf1c      	itt	ne
   83060:	f811 3b01 	ldrbne.w	r3, [r1], #1
   83064:	f800 3b01 	strbne.w	r3, [r0], #1
   83068:	d3a4      	bcc.n	82fb4 <memcpy+0xc>
   8306a:	f831 3b02 	ldrh.w	r3, [r1], #2
   8306e:	f820 3b02 	strh.w	r3, [r0], #2
   83072:	e79f      	b.n	82fb4 <memcpy+0xc>
   83074:	3a04      	subs	r2, #4
   83076:	d3d9      	bcc.n	8302c <memcpy+0x84>
   83078:	3a01      	subs	r2, #1
   8307a:	f811 3b01 	ldrb.w	r3, [r1], #1
   8307e:	f800 3b01 	strb.w	r3, [r0], #1
   83082:	d2f9      	bcs.n	83078 <memcpy+0xd0>
   83084:	780b      	ldrb	r3, [r1, #0]
   83086:	7003      	strb	r3, [r0, #0]
   83088:	784b      	ldrb	r3, [r1, #1]
   8308a:	7043      	strb	r3, [r0, #1]
   8308c:	788b      	ldrb	r3, [r1, #2]
   8308e:	7083      	strb	r3, [r0, #2]
   83090:	4660      	mov	r0, ip
   83092:	4770      	bx	lr

00083094 <memmove>:
   83094:	4288      	cmp	r0, r1
   83096:	b5f0      	push	{r4, r5, r6, r7, lr}
   83098:	d90d      	bls.n	830b6 <memmove+0x22>
   8309a:	188b      	adds	r3, r1, r2
   8309c:	4298      	cmp	r0, r3
   8309e:	d20a      	bcs.n	830b6 <memmove+0x22>
   830a0:	1884      	adds	r4, r0, r2
   830a2:	2a00      	cmp	r2, #0
   830a4:	d051      	beq.n	8314a <memmove+0xb6>
   830a6:	4622      	mov	r2, r4
   830a8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   830ac:	4299      	cmp	r1, r3
   830ae:	f802 4d01 	strb.w	r4, [r2, #-1]!
   830b2:	d1f9      	bne.n	830a8 <memmove+0x14>
   830b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   830b6:	2a0f      	cmp	r2, #15
   830b8:	d948      	bls.n	8314c <memmove+0xb8>
   830ba:	ea41 0300 	orr.w	r3, r1, r0
   830be:	079b      	lsls	r3, r3, #30
   830c0:	d146      	bne.n	83150 <memmove+0xbc>
   830c2:	4615      	mov	r5, r2
   830c4:	f100 0410 	add.w	r4, r0, #16
   830c8:	f101 0310 	add.w	r3, r1, #16
   830cc:	f853 6c10 	ldr.w	r6, [r3, #-16]
   830d0:	3d10      	subs	r5, #16
   830d2:	f844 6c10 	str.w	r6, [r4, #-16]
   830d6:	f853 6c0c 	ldr.w	r6, [r3, #-12]
   830da:	2d0f      	cmp	r5, #15
   830dc:	f844 6c0c 	str.w	r6, [r4, #-12]
   830e0:	f853 6c08 	ldr.w	r6, [r3, #-8]
   830e4:	f104 0410 	add.w	r4, r4, #16
   830e8:	f844 6c18 	str.w	r6, [r4, #-24]
   830ec:	f853 6c04 	ldr.w	r6, [r3, #-4]
   830f0:	f103 0310 	add.w	r3, r3, #16
   830f4:	f844 6c14 	str.w	r6, [r4, #-20]
   830f8:	d8e8      	bhi.n	830cc <memmove+0x38>
   830fa:	f1a2 0310 	sub.w	r3, r2, #16
   830fe:	f023 030f 	bic.w	r3, r3, #15
   83102:	f002 0e0f 	and.w	lr, r2, #15
   83106:	3310      	adds	r3, #16
   83108:	f1be 0f03 	cmp.w	lr, #3
   8310c:	4419      	add	r1, r3
   8310e:	4403      	add	r3, r0
   83110:	d921      	bls.n	83156 <memmove+0xc2>
   83112:	460e      	mov	r6, r1
   83114:	4674      	mov	r4, lr
   83116:	1f1d      	subs	r5, r3, #4
   83118:	f856 7b04 	ldr.w	r7, [r6], #4
   8311c:	3c04      	subs	r4, #4
   8311e:	2c03      	cmp	r4, #3
   83120:	f845 7f04 	str.w	r7, [r5, #4]!
   83124:	d8f8      	bhi.n	83118 <memmove+0x84>
   83126:	f1ae 0404 	sub.w	r4, lr, #4
   8312a:	f024 0403 	bic.w	r4, r4, #3
   8312e:	3404      	adds	r4, #4
   83130:	4421      	add	r1, r4
   83132:	4423      	add	r3, r4
   83134:	f002 0203 	and.w	r2, r2, #3
   83138:	b162      	cbz	r2, 83154 <memmove+0xc0>
   8313a:	3b01      	subs	r3, #1
   8313c:	440a      	add	r2, r1
   8313e:	f811 4b01 	ldrb.w	r4, [r1], #1
   83142:	428a      	cmp	r2, r1
   83144:	f803 4f01 	strb.w	r4, [r3, #1]!
   83148:	d1f9      	bne.n	8313e <memmove+0xaa>
   8314a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8314c:	4603      	mov	r3, r0
   8314e:	e7f3      	b.n	83138 <memmove+0xa4>
   83150:	4603      	mov	r3, r0
   83152:	e7f2      	b.n	8313a <memmove+0xa6>
   83154:	bdf0      	pop	{r4, r5, r6, r7, pc}
   83156:	4672      	mov	r2, lr
   83158:	e7ee      	b.n	83138 <memmove+0xa4>
   8315a:	bf00      	nop

0008315c <__malloc_lock>:
   8315c:	4801      	ldr	r0, [pc, #4]	; (83164 <__malloc_lock+0x8>)
   8315e:	f7ff bba1 	b.w	828a4 <__retarget_lock_acquire_recursive>
   83162:	bf00      	nop
   83164:	20070c60 	.word	0x20070c60

00083168 <__malloc_unlock>:
   83168:	4801      	ldr	r0, [pc, #4]	; (83170 <__malloc_unlock+0x8>)
   8316a:	f7ff bb9d 	b.w	828a8 <__retarget_lock_release_recursive>
   8316e:	bf00      	nop
   83170:	20070c60 	.word	0x20070c60

00083174 <_realloc_r>:
   83174:	2900      	cmp	r1, #0
   83176:	f000 8094 	beq.w	832a2 <_realloc_r+0x12e>
   8317a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8317e:	460c      	mov	r4, r1
   83180:	4615      	mov	r5, r2
   83182:	b083      	sub	sp, #12
   83184:	4680      	mov	r8, r0
   83186:	f105 060b 	add.w	r6, r5, #11
   8318a:	f7ff ffe7 	bl	8315c <__malloc_lock>
   8318e:	f854 ec04 	ldr.w	lr, [r4, #-4]
   83192:	2e16      	cmp	r6, #22
   83194:	f02e 0703 	bic.w	r7, lr, #3
   83198:	f1a4 0908 	sub.w	r9, r4, #8
   8319c:	d83c      	bhi.n	83218 <_realloc_r+0xa4>
   8319e:	2210      	movs	r2, #16
   831a0:	4616      	mov	r6, r2
   831a2:	42b5      	cmp	r5, r6
   831a4:	d83d      	bhi.n	83222 <_realloc_r+0xae>
   831a6:	4297      	cmp	r7, r2
   831a8:	da43      	bge.n	83232 <_realloc_r+0xbe>
   831aa:	4bc6      	ldr	r3, [pc, #792]	; (834c4 <_realloc_r+0x350>)
   831ac:	eb09 0007 	add.w	r0, r9, r7
   831b0:	6899      	ldr	r1, [r3, #8]
   831b2:	4288      	cmp	r0, r1
   831b4:	f000 80c3 	beq.w	8333e <_realloc_r+0x1ca>
   831b8:	6843      	ldr	r3, [r0, #4]
   831ba:	f023 0101 	bic.w	r1, r3, #1
   831be:	4401      	add	r1, r0
   831c0:	6849      	ldr	r1, [r1, #4]
   831c2:	07c9      	lsls	r1, r1, #31
   831c4:	d54d      	bpl.n	83262 <_realloc_r+0xee>
   831c6:	f01e 0f01 	tst.w	lr, #1
   831ca:	f000 809b 	beq.w	83304 <_realloc_r+0x190>
   831ce:	4629      	mov	r1, r5
   831d0:	4640      	mov	r0, r8
   831d2:	f7ff fbeb 	bl	829ac <_malloc_r>
   831d6:	4605      	mov	r5, r0
   831d8:	2800      	cmp	r0, #0
   831da:	d03b      	beq.n	83254 <_realloc_r+0xe0>
   831dc:	f854 3c04 	ldr.w	r3, [r4, #-4]
   831e0:	f1a0 0208 	sub.w	r2, r0, #8
   831e4:	f023 0301 	bic.w	r3, r3, #1
   831e8:	444b      	add	r3, r9
   831ea:	429a      	cmp	r2, r3
   831ec:	f000 812b 	beq.w	83446 <_realloc_r+0x2d2>
   831f0:	1f3a      	subs	r2, r7, #4
   831f2:	2a24      	cmp	r2, #36	; 0x24
   831f4:	f200 8118 	bhi.w	83428 <_realloc_r+0x2b4>
   831f8:	2a13      	cmp	r2, #19
   831fa:	f200 80eb 	bhi.w	833d4 <_realloc_r+0x260>
   831fe:	4603      	mov	r3, r0
   83200:	4622      	mov	r2, r4
   83202:	6811      	ldr	r1, [r2, #0]
   83204:	6019      	str	r1, [r3, #0]
   83206:	6851      	ldr	r1, [r2, #4]
   83208:	6059      	str	r1, [r3, #4]
   8320a:	6892      	ldr	r2, [r2, #8]
   8320c:	609a      	str	r2, [r3, #8]
   8320e:	4621      	mov	r1, r4
   83210:	4640      	mov	r0, r8
   83212:	f7ff f8ad 	bl	82370 <_free_r>
   83216:	e01d      	b.n	83254 <_realloc_r+0xe0>
   83218:	f026 0607 	bic.w	r6, r6, #7
   8321c:	2e00      	cmp	r6, #0
   8321e:	4632      	mov	r2, r6
   83220:	dabf      	bge.n	831a2 <_realloc_r+0x2e>
   83222:	2500      	movs	r5, #0
   83224:	230c      	movs	r3, #12
   83226:	4628      	mov	r0, r5
   83228:	f8c8 3000 	str.w	r3, [r8]
   8322c:	b003      	add	sp, #12
   8322e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83232:	4625      	mov	r5, r4
   83234:	1bbb      	subs	r3, r7, r6
   83236:	2b0f      	cmp	r3, #15
   83238:	f8d9 2004 	ldr.w	r2, [r9, #4]
   8323c:	d81d      	bhi.n	8327a <_realloc_r+0x106>
   8323e:	f002 0201 	and.w	r2, r2, #1
   83242:	433a      	orrs	r2, r7
   83244:	eb09 0107 	add.w	r1, r9, r7
   83248:	f8c9 2004 	str.w	r2, [r9, #4]
   8324c:	684b      	ldr	r3, [r1, #4]
   8324e:	f043 0301 	orr.w	r3, r3, #1
   83252:	604b      	str	r3, [r1, #4]
   83254:	4640      	mov	r0, r8
   83256:	f7ff ff87 	bl	83168 <__malloc_unlock>
   8325a:	4628      	mov	r0, r5
   8325c:	b003      	add	sp, #12
   8325e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83262:	f023 0303 	bic.w	r3, r3, #3
   83266:	18f9      	adds	r1, r7, r3
   83268:	4291      	cmp	r1, r2
   8326a:	db1d      	blt.n	832a8 <_realloc_r+0x134>
   8326c:	68c3      	ldr	r3, [r0, #12]
   8326e:	6882      	ldr	r2, [r0, #8]
   83270:	4625      	mov	r5, r4
   83272:	60d3      	str	r3, [r2, #12]
   83274:	460f      	mov	r7, r1
   83276:	609a      	str	r2, [r3, #8]
   83278:	e7dc      	b.n	83234 <_realloc_r+0xc0>
   8327a:	f002 0201 	and.w	r2, r2, #1
   8327e:	eb09 0106 	add.w	r1, r9, r6
   83282:	f043 0301 	orr.w	r3, r3, #1
   83286:	4332      	orrs	r2, r6
   83288:	f8c9 2004 	str.w	r2, [r9, #4]
   8328c:	444f      	add	r7, r9
   8328e:	604b      	str	r3, [r1, #4]
   83290:	687b      	ldr	r3, [r7, #4]
   83292:	3108      	adds	r1, #8
   83294:	f043 0301 	orr.w	r3, r3, #1
   83298:	607b      	str	r3, [r7, #4]
   8329a:	4640      	mov	r0, r8
   8329c:	f7ff f868 	bl	82370 <_free_r>
   832a0:	e7d8      	b.n	83254 <_realloc_r+0xe0>
   832a2:	4611      	mov	r1, r2
   832a4:	f7ff bb82 	b.w	829ac <_malloc_r>
   832a8:	f01e 0f01 	tst.w	lr, #1
   832ac:	d18f      	bne.n	831ce <_realloc_r+0x5a>
   832ae:	f854 1c08 	ldr.w	r1, [r4, #-8]
   832b2:	eba9 0a01 	sub.w	sl, r9, r1
   832b6:	f8da 1004 	ldr.w	r1, [sl, #4]
   832ba:	f021 0103 	bic.w	r1, r1, #3
   832be:	440b      	add	r3, r1
   832c0:	443b      	add	r3, r7
   832c2:	4293      	cmp	r3, r2
   832c4:	db26      	blt.n	83314 <_realloc_r+0x1a0>
   832c6:	4655      	mov	r5, sl
   832c8:	68c1      	ldr	r1, [r0, #12]
   832ca:	6880      	ldr	r0, [r0, #8]
   832cc:	1f3a      	subs	r2, r7, #4
   832ce:	60c1      	str	r1, [r0, #12]
   832d0:	6088      	str	r0, [r1, #8]
   832d2:	f855 0f08 	ldr.w	r0, [r5, #8]!
   832d6:	f8da 100c 	ldr.w	r1, [sl, #12]
   832da:	2a24      	cmp	r2, #36	; 0x24
   832dc:	60c1      	str	r1, [r0, #12]
   832de:	6088      	str	r0, [r1, #8]
   832e0:	d826      	bhi.n	83330 <_realloc_r+0x1bc>
   832e2:	2a13      	cmp	r2, #19
   832e4:	f240 8081 	bls.w	833ea <_realloc_r+0x276>
   832e8:	6821      	ldr	r1, [r4, #0]
   832ea:	2a1b      	cmp	r2, #27
   832ec:	f8ca 1008 	str.w	r1, [sl, #8]
   832f0:	6861      	ldr	r1, [r4, #4]
   832f2:	f8ca 100c 	str.w	r1, [sl, #12]
   832f6:	f200 80ad 	bhi.w	83454 <_realloc_r+0x2e0>
   832fa:	f104 0008 	add.w	r0, r4, #8
   832fe:	f10a 0210 	add.w	r2, sl, #16
   83302:	e074      	b.n	833ee <_realloc_r+0x27a>
   83304:	f854 3c08 	ldr.w	r3, [r4, #-8]
   83308:	eba9 0a03 	sub.w	sl, r9, r3
   8330c:	f8da 1004 	ldr.w	r1, [sl, #4]
   83310:	f021 0103 	bic.w	r1, r1, #3
   83314:	187b      	adds	r3, r7, r1
   83316:	4293      	cmp	r3, r2
   83318:	f6ff af59 	blt.w	831ce <_realloc_r+0x5a>
   8331c:	4655      	mov	r5, sl
   8331e:	f8da 100c 	ldr.w	r1, [sl, #12]
   83322:	f855 0f08 	ldr.w	r0, [r5, #8]!
   83326:	1f3a      	subs	r2, r7, #4
   83328:	2a24      	cmp	r2, #36	; 0x24
   8332a:	60c1      	str	r1, [r0, #12]
   8332c:	6088      	str	r0, [r1, #8]
   8332e:	d9d8      	bls.n	832e2 <_realloc_r+0x16e>
   83330:	4621      	mov	r1, r4
   83332:	4628      	mov	r0, r5
   83334:	461f      	mov	r7, r3
   83336:	46d1      	mov	r9, sl
   83338:	f7ff feac 	bl	83094 <memmove>
   8333c:	e77a      	b.n	83234 <_realloc_r+0xc0>
   8333e:	6841      	ldr	r1, [r0, #4]
   83340:	f106 0010 	add.w	r0, r6, #16
   83344:	f021 0b03 	bic.w	fp, r1, #3
   83348:	44bb      	add	fp, r7
   8334a:	4583      	cmp	fp, r0
   8334c:	da58      	bge.n	83400 <_realloc_r+0x28c>
   8334e:	f01e 0f01 	tst.w	lr, #1
   83352:	f47f af3c 	bne.w	831ce <_realloc_r+0x5a>
   83356:	f854 1c08 	ldr.w	r1, [r4, #-8]
   8335a:	eba9 0a01 	sub.w	sl, r9, r1
   8335e:	f8da 1004 	ldr.w	r1, [sl, #4]
   83362:	f021 0103 	bic.w	r1, r1, #3
   83366:	448b      	add	fp, r1
   83368:	4558      	cmp	r0, fp
   8336a:	dcd3      	bgt.n	83314 <_realloc_r+0x1a0>
   8336c:	4655      	mov	r5, sl
   8336e:	f8da 100c 	ldr.w	r1, [sl, #12]
   83372:	f855 0f08 	ldr.w	r0, [r5, #8]!
   83376:	1f3a      	subs	r2, r7, #4
   83378:	2a24      	cmp	r2, #36	; 0x24
   8337a:	60c1      	str	r1, [r0, #12]
   8337c:	6088      	str	r0, [r1, #8]
   8337e:	f200 808d 	bhi.w	8349c <_realloc_r+0x328>
   83382:	2a13      	cmp	r2, #19
   83384:	f240 8087 	bls.w	83496 <_realloc_r+0x322>
   83388:	6821      	ldr	r1, [r4, #0]
   8338a:	2a1b      	cmp	r2, #27
   8338c:	f8ca 1008 	str.w	r1, [sl, #8]
   83390:	6861      	ldr	r1, [r4, #4]
   83392:	f8ca 100c 	str.w	r1, [sl, #12]
   83396:	f200 8088 	bhi.w	834aa <_realloc_r+0x336>
   8339a:	f104 0108 	add.w	r1, r4, #8
   8339e:	f10a 0210 	add.w	r2, sl, #16
   833a2:	6808      	ldr	r0, [r1, #0]
   833a4:	6010      	str	r0, [r2, #0]
   833a6:	6848      	ldr	r0, [r1, #4]
   833a8:	6050      	str	r0, [r2, #4]
   833aa:	6889      	ldr	r1, [r1, #8]
   833ac:	6091      	str	r1, [r2, #8]
   833ae:	ebab 0206 	sub.w	r2, fp, r6
   833b2:	eb0a 0106 	add.w	r1, sl, r6
   833b6:	f042 0201 	orr.w	r2, r2, #1
   833ba:	6099      	str	r1, [r3, #8]
   833bc:	604a      	str	r2, [r1, #4]
   833be:	f8da 3004 	ldr.w	r3, [sl, #4]
   833c2:	4640      	mov	r0, r8
   833c4:	f003 0301 	and.w	r3, r3, #1
   833c8:	431e      	orrs	r6, r3
   833ca:	f8ca 6004 	str.w	r6, [sl, #4]
   833ce:	f7ff fecb 	bl	83168 <__malloc_unlock>
   833d2:	e742      	b.n	8325a <_realloc_r+0xe6>
   833d4:	6823      	ldr	r3, [r4, #0]
   833d6:	2a1b      	cmp	r2, #27
   833d8:	6003      	str	r3, [r0, #0]
   833da:	6863      	ldr	r3, [r4, #4]
   833dc:	6043      	str	r3, [r0, #4]
   833de:	d827      	bhi.n	83430 <_realloc_r+0x2bc>
   833e0:	f100 0308 	add.w	r3, r0, #8
   833e4:	f104 0208 	add.w	r2, r4, #8
   833e8:	e70b      	b.n	83202 <_realloc_r+0x8e>
   833ea:	4620      	mov	r0, r4
   833ec:	462a      	mov	r2, r5
   833ee:	6801      	ldr	r1, [r0, #0]
   833f0:	461f      	mov	r7, r3
   833f2:	6011      	str	r1, [r2, #0]
   833f4:	6841      	ldr	r1, [r0, #4]
   833f6:	46d1      	mov	r9, sl
   833f8:	6051      	str	r1, [r2, #4]
   833fa:	6883      	ldr	r3, [r0, #8]
   833fc:	6093      	str	r3, [r2, #8]
   833fe:	e719      	b.n	83234 <_realloc_r+0xc0>
   83400:	ebab 0b06 	sub.w	fp, fp, r6
   83404:	eb09 0106 	add.w	r1, r9, r6
   83408:	f04b 0201 	orr.w	r2, fp, #1
   8340c:	6099      	str	r1, [r3, #8]
   8340e:	604a      	str	r2, [r1, #4]
   83410:	f854 3c04 	ldr.w	r3, [r4, #-4]
   83414:	4640      	mov	r0, r8
   83416:	f003 0301 	and.w	r3, r3, #1
   8341a:	431e      	orrs	r6, r3
   8341c:	f844 6c04 	str.w	r6, [r4, #-4]
   83420:	f7ff fea2 	bl	83168 <__malloc_unlock>
   83424:	4625      	mov	r5, r4
   83426:	e718      	b.n	8325a <_realloc_r+0xe6>
   83428:	4621      	mov	r1, r4
   8342a:	f7ff fe33 	bl	83094 <memmove>
   8342e:	e6ee      	b.n	8320e <_realloc_r+0x9a>
   83430:	68a3      	ldr	r3, [r4, #8]
   83432:	2a24      	cmp	r2, #36	; 0x24
   83434:	6083      	str	r3, [r0, #8]
   83436:	68e3      	ldr	r3, [r4, #12]
   83438:	60c3      	str	r3, [r0, #12]
   8343a:	d018      	beq.n	8346e <_realloc_r+0x2fa>
   8343c:	f100 0310 	add.w	r3, r0, #16
   83440:	f104 0210 	add.w	r2, r4, #16
   83444:	e6dd      	b.n	83202 <_realloc_r+0x8e>
   83446:	f850 3c04 	ldr.w	r3, [r0, #-4]
   8344a:	4625      	mov	r5, r4
   8344c:	f023 0303 	bic.w	r3, r3, #3
   83450:	441f      	add	r7, r3
   83452:	e6ef      	b.n	83234 <_realloc_r+0xc0>
   83454:	68a1      	ldr	r1, [r4, #8]
   83456:	2a24      	cmp	r2, #36	; 0x24
   83458:	f8ca 1010 	str.w	r1, [sl, #16]
   8345c:	68e1      	ldr	r1, [r4, #12]
   8345e:	f8ca 1014 	str.w	r1, [sl, #20]
   83462:	d00d      	beq.n	83480 <_realloc_r+0x30c>
   83464:	f104 0010 	add.w	r0, r4, #16
   83468:	f10a 0218 	add.w	r2, sl, #24
   8346c:	e7bf      	b.n	833ee <_realloc_r+0x27a>
   8346e:	6922      	ldr	r2, [r4, #16]
   83470:	f100 0318 	add.w	r3, r0, #24
   83474:	6102      	str	r2, [r0, #16]
   83476:	6961      	ldr	r1, [r4, #20]
   83478:	f104 0218 	add.w	r2, r4, #24
   8347c:	6141      	str	r1, [r0, #20]
   8347e:	e6c0      	b.n	83202 <_realloc_r+0x8e>
   83480:	6922      	ldr	r2, [r4, #16]
   83482:	f104 0018 	add.w	r0, r4, #24
   83486:	f8ca 2018 	str.w	r2, [sl, #24]
   8348a:	6961      	ldr	r1, [r4, #20]
   8348c:	f10a 0220 	add.w	r2, sl, #32
   83490:	f8ca 101c 	str.w	r1, [sl, #28]
   83494:	e7ab      	b.n	833ee <_realloc_r+0x27a>
   83496:	4621      	mov	r1, r4
   83498:	462a      	mov	r2, r5
   8349a:	e782      	b.n	833a2 <_realloc_r+0x22e>
   8349c:	4621      	mov	r1, r4
   8349e:	4628      	mov	r0, r5
   834a0:	9301      	str	r3, [sp, #4]
   834a2:	f7ff fdf7 	bl	83094 <memmove>
   834a6:	9b01      	ldr	r3, [sp, #4]
   834a8:	e781      	b.n	833ae <_realloc_r+0x23a>
   834aa:	68a1      	ldr	r1, [r4, #8]
   834ac:	2a24      	cmp	r2, #36	; 0x24
   834ae:	f8ca 1010 	str.w	r1, [sl, #16]
   834b2:	68e1      	ldr	r1, [r4, #12]
   834b4:	f8ca 1014 	str.w	r1, [sl, #20]
   834b8:	d006      	beq.n	834c8 <_realloc_r+0x354>
   834ba:	f104 0110 	add.w	r1, r4, #16
   834be:	f10a 0218 	add.w	r2, sl, #24
   834c2:	e76e      	b.n	833a2 <_realloc_r+0x22e>
   834c4:	200706d0 	.word	0x200706d0
   834c8:	6922      	ldr	r2, [r4, #16]
   834ca:	f104 0118 	add.w	r1, r4, #24
   834ce:	f8ca 2018 	str.w	r2, [sl, #24]
   834d2:	6960      	ldr	r0, [r4, #20]
   834d4:	f10a 0220 	add.w	r2, sl, #32
   834d8:	f8ca 001c 	str.w	r0, [sl, #28]
   834dc:	e761      	b.n	833a2 <_realloc_r+0x22e>
   834de:	bf00      	nop

000834e0 <_sbrk_r>:
   834e0:	b538      	push	{r3, r4, r5, lr}
   834e2:	2300      	movs	r3, #0
   834e4:	4c06      	ldr	r4, [pc, #24]	; (83500 <_sbrk_r+0x20>)
   834e6:	4605      	mov	r5, r0
   834e8:	4608      	mov	r0, r1
   834ea:	6023      	str	r3, [r4, #0]
   834ec:	f7fd fc10 	bl	80d10 <_sbrk>
   834f0:	1c43      	adds	r3, r0, #1
   834f2:	d000      	beq.n	834f6 <_sbrk_r+0x16>
   834f4:	bd38      	pop	{r3, r4, r5, pc}
   834f6:	6823      	ldr	r3, [r4, #0]
   834f8:	2b00      	cmp	r3, #0
   834fa:	d0fb      	beq.n	834f4 <_sbrk_r+0x14>
   834fc:	602b      	str	r3, [r5, #0]
   834fe:	bd38      	pop	{r3, r4, r5, pc}
   83500:	20070c74 	.word	0x20070c74

00083504 <__sread>:
   83504:	b510      	push	{r4, lr}
   83506:	460c      	mov	r4, r1
   83508:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8350c:	f000 f9ca 	bl	838a4 <_read_r>
   83510:	2800      	cmp	r0, #0
   83512:	db03      	blt.n	8351c <__sread+0x18>
   83514:	6d23      	ldr	r3, [r4, #80]	; 0x50
   83516:	4403      	add	r3, r0
   83518:	6523      	str	r3, [r4, #80]	; 0x50
   8351a:	bd10      	pop	{r4, pc}
   8351c:	89a3      	ldrh	r3, [r4, #12]
   8351e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   83522:	81a3      	strh	r3, [r4, #12]
   83524:	bd10      	pop	{r4, pc}
   83526:	bf00      	nop

00083528 <__swrite>:
   83528:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8352c:	460c      	mov	r4, r1
   8352e:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   83532:	461f      	mov	r7, r3
   83534:	05cb      	lsls	r3, r1, #23
   83536:	4616      	mov	r6, r2
   83538:	4605      	mov	r5, r0
   8353a:	d507      	bpl.n	8354c <__swrite+0x24>
   8353c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   83540:	2302      	movs	r3, #2
   83542:	2200      	movs	r2, #0
   83544:	f000 f998 	bl	83878 <_lseek_r>
   83548:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   8354c:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   83550:	81a1      	strh	r1, [r4, #12]
   83552:	463b      	mov	r3, r7
   83554:	4632      	mov	r2, r6
   83556:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8355a:	4628      	mov	r0, r5
   8355c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   83560:	f000 b878 	b.w	83654 <_write_r>

00083564 <__sseek>:
   83564:	b510      	push	{r4, lr}
   83566:	460c      	mov	r4, r1
   83568:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8356c:	f000 f984 	bl	83878 <_lseek_r>
   83570:	89a3      	ldrh	r3, [r4, #12]
   83572:	1c42      	adds	r2, r0, #1
   83574:	bf0e      	itee	eq
   83576:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   8357a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   8357e:	6520      	strne	r0, [r4, #80]	; 0x50
   83580:	81a3      	strh	r3, [r4, #12]
   83582:	bd10      	pop	{r4, pc}

00083584 <__sclose>:
   83584:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   83588:	f000 b8dc 	b.w	83744 <_close_r>

0008358c <strlen>:
   8358c:	f020 0103 	bic.w	r1, r0, #3
   83590:	f010 0003 	ands.w	r0, r0, #3
   83594:	f1c0 0000 	rsb	r0, r0, #0
   83598:	f851 3b04 	ldr.w	r3, [r1], #4
   8359c:	f100 0c04 	add.w	ip, r0, #4
   835a0:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   835a4:	f06f 0200 	mvn.w	r2, #0
   835a8:	bf1c      	itt	ne
   835aa:	fa22 f20c 	lsrne.w	r2, r2, ip
   835ae:	4313      	orrne	r3, r2
   835b0:	f04f 0c01 	mov.w	ip, #1
   835b4:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   835b8:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   835bc:	eba3 020c 	sub.w	r2, r3, ip
   835c0:	ea22 0203 	bic.w	r2, r2, r3
   835c4:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   835c8:	bf04      	itt	eq
   835ca:	f851 3b04 	ldreq.w	r3, [r1], #4
   835ce:	3004      	addeq	r0, #4
   835d0:	d0f4      	beq.n	835bc <strlen+0x30>
   835d2:	f1c2 0100 	rsb	r1, r2, #0
   835d6:	ea02 0201 	and.w	r2, r2, r1
   835da:	fab2 f282 	clz	r2, r2
   835de:	f1c2 021f 	rsb	r2, r2, #31
   835e2:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   835e6:	4770      	bx	lr

000835e8 <_wcrtomb_r>:
   835e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   835ea:	4606      	mov	r6, r0
   835ec:	b085      	sub	sp, #20
   835ee:	461f      	mov	r7, r3
   835f0:	b189      	cbz	r1, 83616 <_wcrtomb_r+0x2e>
   835f2:	4c10      	ldr	r4, [pc, #64]	; (83634 <_wcrtomb_r+0x4c>)
   835f4:	4d10      	ldr	r5, [pc, #64]	; (83638 <_wcrtomb_r+0x50>)
   835f6:	6824      	ldr	r4, [r4, #0]
   835f8:	6b64      	ldr	r4, [r4, #52]	; 0x34
   835fa:	2c00      	cmp	r4, #0
   835fc:	bf08      	it	eq
   835fe:	462c      	moveq	r4, r5
   83600:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
   83604:	47a0      	blx	r4
   83606:	1c43      	adds	r3, r0, #1
   83608:	d103      	bne.n	83612 <_wcrtomb_r+0x2a>
   8360a:	2200      	movs	r2, #0
   8360c:	238a      	movs	r3, #138	; 0x8a
   8360e:	603a      	str	r2, [r7, #0]
   83610:	6033      	str	r3, [r6, #0]
   83612:	b005      	add	sp, #20
   83614:	bdf0      	pop	{r4, r5, r6, r7, pc}
   83616:	460c      	mov	r4, r1
   83618:	4a06      	ldr	r2, [pc, #24]	; (83634 <_wcrtomb_r+0x4c>)
   8361a:	4d07      	ldr	r5, [pc, #28]	; (83638 <_wcrtomb_r+0x50>)
   8361c:	6811      	ldr	r1, [r2, #0]
   8361e:	4622      	mov	r2, r4
   83620:	6b4c      	ldr	r4, [r1, #52]	; 0x34
   83622:	a901      	add	r1, sp, #4
   83624:	2c00      	cmp	r4, #0
   83626:	bf08      	it	eq
   83628:	462c      	moveq	r4, r5
   8362a:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
   8362e:	47a0      	blx	r4
   83630:	e7e9      	b.n	83606 <_wcrtomb_r+0x1e>
   83632:	bf00      	nop
   83634:	20070134 	.word	0x20070134
   83638:	20070564 	.word	0x20070564

0008363c <__ascii_wctomb>:
   8363c:	b119      	cbz	r1, 83646 <__ascii_wctomb+0xa>
   8363e:	2aff      	cmp	r2, #255	; 0xff
   83640:	d803      	bhi.n	8364a <__ascii_wctomb+0xe>
   83642:	700a      	strb	r2, [r1, #0]
   83644:	2101      	movs	r1, #1
   83646:	4608      	mov	r0, r1
   83648:	4770      	bx	lr
   8364a:	238a      	movs	r3, #138	; 0x8a
   8364c:	f04f 31ff 	mov.w	r1, #4294967295
   83650:	6003      	str	r3, [r0, #0]
   83652:	e7f8      	b.n	83646 <__ascii_wctomb+0xa>

00083654 <_write_r>:
   83654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83656:	460e      	mov	r6, r1
   83658:	2500      	movs	r5, #0
   8365a:	4c08      	ldr	r4, [pc, #32]	; (8367c <_write_r+0x28>)
   8365c:	4611      	mov	r1, r2
   8365e:	4607      	mov	r7, r0
   83660:	461a      	mov	r2, r3
   83662:	4630      	mov	r0, r6
   83664:	6025      	str	r5, [r4, #0]
   83666:	f7fc fe53 	bl	80310 <_write>
   8366a:	1c43      	adds	r3, r0, #1
   8366c:	d000      	beq.n	83670 <_write_r+0x1c>
   8366e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83670:	6823      	ldr	r3, [r4, #0]
   83672:	2b00      	cmp	r3, #0
   83674:	d0fb      	beq.n	8366e <_write_r+0x1a>
   83676:	603b      	str	r3, [r7, #0]
   83678:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8367a:	bf00      	nop
   8367c:	20070c74 	.word	0x20070c74

00083680 <__register_exitproc>:
   83680:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   83684:	4d2c      	ldr	r5, [pc, #176]	; (83738 <__register_exitproc+0xb8>)
   83686:	4606      	mov	r6, r0
   83688:	6828      	ldr	r0, [r5, #0]
   8368a:	4698      	mov	r8, r3
   8368c:	460f      	mov	r7, r1
   8368e:	4691      	mov	r9, r2
   83690:	f7ff f908 	bl	828a4 <__retarget_lock_acquire_recursive>
   83694:	4b29      	ldr	r3, [pc, #164]	; (8373c <__register_exitproc+0xbc>)
   83696:	681c      	ldr	r4, [r3, #0]
   83698:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   8369c:	2b00      	cmp	r3, #0
   8369e:	d03e      	beq.n	8371e <__register_exitproc+0x9e>
   836a0:	685a      	ldr	r2, [r3, #4]
   836a2:	2a1f      	cmp	r2, #31
   836a4:	dc1c      	bgt.n	836e0 <__register_exitproc+0x60>
   836a6:	f102 0e01 	add.w	lr, r2, #1
   836aa:	b176      	cbz	r6, 836ca <__register_exitproc+0x4a>
   836ac:	2101      	movs	r1, #1
   836ae:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   836b2:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   836b6:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   836ba:	4091      	lsls	r1, r2
   836bc:	4308      	orrs	r0, r1
   836be:	2e02      	cmp	r6, #2
   836c0:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   836c4:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   836c8:	d023      	beq.n	83712 <__register_exitproc+0x92>
   836ca:	3202      	adds	r2, #2
   836cc:	f8c3 e004 	str.w	lr, [r3, #4]
   836d0:	6828      	ldr	r0, [r5, #0]
   836d2:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   836d6:	f7ff f8e7 	bl	828a8 <__retarget_lock_release_recursive>
   836da:	2000      	movs	r0, #0
   836dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   836e0:	4b17      	ldr	r3, [pc, #92]	; (83740 <__register_exitproc+0xc0>)
   836e2:	b30b      	cbz	r3, 83728 <__register_exitproc+0xa8>
   836e4:	f44f 70c8 	mov.w	r0, #400	; 0x190
   836e8:	f7ff f958 	bl	8299c <malloc>
   836ec:	4603      	mov	r3, r0
   836ee:	b1d8      	cbz	r0, 83728 <__register_exitproc+0xa8>
   836f0:	2000      	movs	r0, #0
   836f2:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   836f6:	f04f 0e01 	mov.w	lr, #1
   836fa:	6058      	str	r0, [r3, #4]
   836fc:	6019      	str	r1, [r3, #0]
   836fe:	4602      	mov	r2, r0
   83700:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   83704:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   83708:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   8370c:	2e00      	cmp	r6, #0
   8370e:	d0dc      	beq.n	836ca <__register_exitproc+0x4a>
   83710:	e7cc      	b.n	836ac <__register_exitproc+0x2c>
   83712:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   83716:	4301      	orrs	r1, r0
   83718:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   8371c:	e7d5      	b.n	836ca <__register_exitproc+0x4a>
   8371e:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   83722:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   83726:	e7bb      	b.n	836a0 <__register_exitproc+0x20>
   83728:	6828      	ldr	r0, [r5, #0]
   8372a:	f7ff f8bd 	bl	828a8 <__retarget_lock_release_recursive>
   8372e:	f04f 30ff 	mov.w	r0, #4294967295
   83732:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   83736:	bf00      	nop
   83738:	20070560 	.word	0x20070560
   8373c:	00083c10 	.word	0x00083c10
   83740:	0008299d 	.word	0x0008299d

00083744 <_close_r>:
   83744:	b538      	push	{r3, r4, r5, lr}
   83746:	2300      	movs	r3, #0
   83748:	4c06      	ldr	r4, [pc, #24]	; (83764 <_close_r+0x20>)
   8374a:	4605      	mov	r5, r0
   8374c:	4608      	mov	r0, r1
   8374e:	6023      	str	r3, [r4, #0]
   83750:	f7fd fafa 	bl	80d48 <_close>
   83754:	1c43      	adds	r3, r0, #1
   83756:	d000      	beq.n	8375a <_close_r+0x16>
   83758:	bd38      	pop	{r3, r4, r5, pc}
   8375a:	6823      	ldr	r3, [r4, #0]
   8375c:	2b00      	cmp	r3, #0
   8375e:	d0fb      	beq.n	83758 <_close_r+0x14>
   83760:	602b      	str	r3, [r5, #0]
   83762:	bd38      	pop	{r3, r4, r5, pc}
   83764:	20070c74 	.word	0x20070c74

00083768 <_fclose_r>:
   83768:	b570      	push	{r4, r5, r6, lr}
   8376a:	b159      	cbz	r1, 83784 <_fclose_r+0x1c>
   8376c:	4605      	mov	r5, r0
   8376e:	460c      	mov	r4, r1
   83770:	b110      	cbz	r0, 83778 <_fclose_r+0x10>
   83772:	6b83      	ldr	r3, [r0, #56]	; 0x38
   83774:	2b00      	cmp	r3, #0
   83776:	d03c      	beq.n	837f2 <_fclose_r+0x8a>
   83778:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8377a:	07d8      	lsls	r0, r3, #31
   8377c:	d505      	bpl.n	8378a <_fclose_r+0x22>
   8377e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   83782:	b92b      	cbnz	r3, 83790 <_fclose_r+0x28>
   83784:	2600      	movs	r6, #0
   83786:	4630      	mov	r0, r6
   83788:	bd70      	pop	{r4, r5, r6, pc}
   8378a:	89a3      	ldrh	r3, [r4, #12]
   8378c:	0599      	lsls	r1, r3, #22
   8378e:	d53c      	bpl.n	8380a <_fclose_r+0xa2>
   83790:	4621      	mov	r1, r4
   83792:	4628      	mov	r0, r5
   83794:	f7fe fbd2 	bl	81f3c <__sflush_r>
   83798:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   8379a:	4606      	mov	r6, r0
   8379c:	b133      	cbz	r3, 837ac <_fclose_r+0x44>
   8379e:	69e1      	ldr	r1, [r4, #28]
   837a0:	4628      	mov	r0, r5
   837a2:	4798      	blx	r3
   837a4:	2800      	cmp	r0, #0
   837a6:	bfb8      	it	lt
   837a8:	f04f 36ff 	movlt.w	r6, #4294967295
   837ac:	89a3      	ldrh	r3, [r4, #12]
   837ae:	061a      	lsls	r2, r3, #24
   837b0:	d422      	bmi.n	837f8 <_fclose_r+0x90>
   837b2:	6b21      	ldr	r1, [r4, #48]	; 0x30
   837b4:	b141      	cbz	r1, 837c8 <_fclose_r+0x60>
   837b6:	f104 0340 	add.w	r3, r4, #64	; 0x40
   837ba:	4299      	cmp	r1, r3
   837bc:	d002      	beq.n	837c4 <_fclose_r+0x5c>
   837be:	4628      	mov	r0, r5
   837c0:	f7fe fdd6 	bl	82370 <_free_r>
   837c4:	2300      	movs	r3, #0
   837c6:	6323      	str	r3, [r4, #48]	; 0x30
   837c8:	6c61      	ldr	r1, [r4, #68]	; 0x44
   837ca:	b121      	cbz	r1, 837d6 <_fclose_r+0x6e>
   837cc:	4628      	mov	r0, r5
   837ce:	f7fe fdcf 	bl	82370 <_free_r>
   837d2:	2300      	movs	r3, #0
   837d4:	6463      	str	r3, [r4, #68]	; 0x44
   837d6:	f7fe fcd5 	bl	82184 <__sfp_lock_acquire>
   837da:	2200      	movs	r2, #0
   837dc:	6e63      	ldr	r3, [r4, #100]	; 0x64
   837de:	81a2      	strh	r2, [r4, #12]
   837e0:	07db      	lsls	r3, r3, #31
   837e2:	d50e      	bpl.n	83802 <_fclose_r+0x9a>
   837e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
   837e6:	f7ff f85b 	bl	828a0 <__retarget_lock_close_recursive>
   837ea:	f7fe fcd1 	bl	82190 <__sfp_lock_release>
   837ee:	4630      	mov	r0, r6
   837f0:	bd70      	pop	{r4, r5, r6, pc}
   837f2:	f7fe fc97 	bl	82124 <__sinit>
   837f6:	e7bf      	b.n	83778 <_fclose_r+0x10>
   837f8:	6921      	ldr	r1, [r4, #16]
   837fa:	4628      	mov	r0, r5
   837fc:	f7fe fdb8 	bl	82370 <_free_r>
   83800:	e7d7      	b.n	837b2 <_fclose_r+0x4a>
   83802:	6da0      	ldr	r0, [r4, #88]	; 0x58
   83804:	f7ff f850 	bl	828a8 <__retarget_lock_release_recursive>
   83808:	e7ec      	b.n	837e4 <_fclose_r+0x7c>
   8380a:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8380c:	f7ff f84a 	bl	828a4 <__retarget_lock_acquire_recursive>
   83810:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   83814:	2b00      	cmp	r3, #0
   83816:	d1bb      	bne.n	83790 <_fclose_r+0x28>
   83818:	6e66      	ldr	r6, [r4, #100]	; 0x64
   8381a:	f016 0601 	ands.w	r6, r6, #1
   8381e:	d1b1      	bne.n	83784 <_fclose_r+0x1c>
   83820:	6da0      	ldr	r0, [r4, #88]	; 0x58
   83822:	f7ff f841 	bl	828a8 <__retarget_lock_release_recursive>
   83826:	4630      	mov	r0, r6
   83828:	bd70      	pop	{r4, r5, r6, pc}
   8382a:	bf00      	nop

0008382c <_fstat_r>:
   8382c:	b570      	push	{r4, r5, r6, lr}
   8382e:	460d      	mov	r5, r1
   83830:	2300      	movs	r3, #0
   83832:	4c07      	ldr	r4, [pc, #28]	; (83850 <_fstat_r+0x24>)
   83834:	4606      	mov	r6, r0
   83836:	4611      	mov	r1, r2
   83838:	4628      	mov	r0, r5
   8383a:	6023      	str	r3, [r4, #0]
   8383c:	f7fd fa87 	bl	80d4e <_fstat>
   83840:	1c43      	adds	r3, r0, #1
   83842:	d000      	beq.n	83846 <_fstat_r+0x1a>
   83844:	bd70      	pop	{r4, r5, r6, pc}
   83846:	6823      	ldr	r3, [r4, #0]
   83848:	2b00      	cmp	r3, #0
   8384a:	d0fb      	beq.n	83844 <_fstat_r+0x18>
   8384c:	6033      	str	r3, [r6, #0]
   8384e:	bd70      	pop	{r4, r5, r6, pc}
   83850:	20070c74 	.word	0x20070c74

00083854 <_isatty_r>:
   83854:	b538      	push	{r3, r4, r5, lr}
   83856:	2300      	movs	r3, #0
   83858:	4c06      	ldr	r4, [pc, #24]	; (83874 <_isatty_r+0x20>)
   8385a:	4605      	mov	r5, r0
   8385c:	4608      	mov	r0, r1
   8385e:	6023      	str	r3, [r4, #0]
   83860:	f7fd fa7a 	bl	80d58 <_isatty>
   83864:	1c43      	adds	r3, r0, #1
   83866:	d000      	beq.n	8386a <_isatty_r+0x16>
   83868:	bd38      	pop	{r3, r4, r5, pc}
   8386a:	6823      	ldr	r3, [r4, #0]
   8386c:	2b00      	cmp	r3, #0
   8386e:	d0fb      	beq.n	83868 <_isatty_r+0x14>
   83870:	602b      	str	r3, [r5, #0]
   83872:	bd38      	pop	{r3, r4, r5, pc}
   83874:	20070c74 	.word	0x20070c74

00083878 <_lseek_r>:
   83878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8387a:	460e      	mov	r6, r1
   8387c:	2500      	movs	r5, #0
   8387e:	4c08      	ldr	r4, [pc, #32]	; (838a0 <_lseek_r+0x28>)
   83880:	4611      	mov	r1, r2
   83882:	4607      	mov	r7, r0
   83884:	461a      	mov	r2, r3
   83886:	4630      	mov	r0, r6
   83888:	6025      	str	r5, [r4, #0]
   8388a:	f7fd fa67 	bl	80d5c <_lseek>
   8388e:	1c43      	adds	r3, r0, #1
   83890:	d000      	beq.n	83894 <_lseek_r+0x1c>
   83892:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83894:	6823      	ldr	r3, [r4, #0]
   83896:	2b00      	cmp	r3, #0
   83898:	d0fb      	beq.n	83892 <_lseek_r+0x1a>
   8389a:	603b      	str	r3, [r7, #0]
   8389c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8389e:	bf00      	nop
   838a0:	20070c74 	.word	0x20070c74

000838a4 <_read_r>:
   838a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   838a6:	460e      	mov	r6, r1
   838a8:	2500      	movs	r5, #0
   838aa:	4c08      	ldr	r4, [pc, #32]	; (838cc <_read_r+0x28>)
   838ac:	4611      	mov	r1, r2
   838ae:	4607      	mov	r7, r0
   838b0:	461a      	mov	r2, r3
   838b2:	4630      	mov	r0, r6
   838b4:	6025      	str	r5, [r4, #0]
   838b6:	f7fc fc53 	bl	80160 <_read>
   838ba:	1c43      	adds	r3, r0, #1
   838bc:	d000      	beq.n	838c0 <_read_r+0x1c>
   838be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   838c0:	6823      	ldr	r3, [r4, #0]
   838c2:	2b00      	cmp	r3, #0
   838c4:	d0fb      	beq.n	838be <_read_r+0x1a>
   838c6:	603b      	str	r3, [r7, #0]
   838c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   838ca:	bf00      	nop
   838cc:	20070c74 	.word	0x20070c74

000838d0 <__aeabi_uldivmod>:
   838d0:	b953      	cbnz	r3, 838e8 <__aeabi_uldivmod+0x18>
   838d2:	b94a      	cbnz	r2, 838e8 <__aeabi_uldivmod+0x18>
   838d4:	2900      	cmp	r1, #0
   838d6:	bf08      	it	eq
   838d8:	2800      	cmpeq	r0, #0
   838da:	bf1c      	itt	ne
   838dc:	f04f 31ff 	movne.w	r1, #4294967295
   838e0:	f04f 30ff 	movne.w	r0, #4294967295
   838e4:	f000 b97a 	b.w	83bdc <__aeabi_idiv0>
   838e8:	f1ad 0c08 	sub.w	ip, sp, #8
   838ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   838f0:	f000 f806 	bl	83900 <__udivmoddi4>
   838f4:	f8dd e004 	ldr.w	lr, [sp, #4]
   838f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   838fc:	b004      	add	sp, #16
   838fe:	4770      	bx	lr

00083900 <__udivmoddi4>:
   83900:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   83904:	468c      	mov	ip, r1
   83906:	460e      	mov	r6, r1
   83908:	4604      	mov	r4, r0
   8390a:	9d08      	ldr	r5, [sp, #32]
   8390c:	2b00      	cmp	r3, #0
   8390e:	d150      	bne.n	839b2 <__udivmoddi4+0xb2>
   83910:	428a      	cmp	r2, r1
   83912:	4617      	mov	r7, r2
   83914:	d96c      	bls.n	839f0 <__udivmoddi4+0xf0>
   83916:	fab2 fe82 	clz	lr, r2
   8391a:	f1be 0f00 	cmp.w	lr, #0
   8391e:	d00b      	beq.n	83938 <__udivmoddi4+0x38>
   83920:	f1ce 0c20 	rsb	ip, lr, #32
   83924:	fa01 f60e 	lsl.w	r6, r1, lr
   83928:	fa20 fc0c 	lsr.w	ip, r0, ip
   8392c:	fa02 f70e 	lsl.w	r7, r2, lr
   83930:	ea4c 0c06 	orr.w	ip, ip, r6
   83934:	fa00 f40e 	lsl.w	r4, r0, lr
   83938:	0c3a      	lsrs	r2, r7, #16
   8393a:	fbbc f9f2 	udiv	r9, ip, r2
   8393e:	b2bb      	uxth	r3, r7
   83940:	fb02 cc19 	mls	ip, r2, r9, ip
   83944:	fb09 fa03 	mul.w	sl, r9, r3
   83948:	ea4f 4814 	mov.w	r8, r4, lsr #16
   8394c:	ea48 460c 	orr.w	r6, r8, ip, lsl #16
   83950:	45b2      	cmp	sl, r6
   83952:	d90a      	bls.n	8396a <__udivmoddi4+0x6a>
   83954:	19f6      	adds	r6, r6, r7
   83956:	f109 31ff 	add.w	r1, r9, #4294967295
   8395a:	f080 8125 	bcs.w	83ba8 <__udivmoddi4+0x2a8>
   8395e:	45b2      	cmp	sl, r6
   83960:	f240 8122 	bls.w	83ba8 <__udivmoddi4+0x2a8>
   83964:	f1a9 0902 	sub.w	r9, r9, #2
   83968:	443e      	add	r6, r7
   8396a:	eba6 060a 	sub.w	r6, r6, sl
   8396e:	fbb6 f0f2 	udiv	r0, r6, r2
   83972:	fb02 6610 	mls	r6, r2, r0, r6
   83976:	fb00 f303 	mul.w	r3, r0, r3
   8397a:	b2a4      	uxth	r4, r4
   8397c:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   83980:	42a3      	cmp	r3, r4
   83982:	d909      	bls.n	83998 <__udivmoddi4+0x98>
   83984:	19e4      	adds	r4, r4, r7
   83986:	f100 32ff 	add.w	r2, r0, #4294967295
   8398a:	f080 810b 	bcs.w	83ba4 <__udivmoddi4+0x2a4>
   8398e:	42a3      	cmp	r3, r4
   83990:	f240 8108 	bls.w	83ba4 <__udivmoddi4+0x2a4>
   83994:	3802      	subs	r0, #2
   83996:	443c      	add	r4, r7
   83998:	2100      	movs	r1, #0
   8399a:	1ae4      	subs	r4, r4, r3
   8399c:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   839a0:	2d00      	cmp	r5, #0
   839a2:	d062      	beq.n	83a6a <__udivmoddi4+0x16a>
   839a4:	2300      	movs	r3, #0
   839a6:	fa24 f40e 	lsr.w	r4, r4, lr
   839aa:	602c      	str	r4, [r5, #0]
   839ac:	606b      	str	r3, [r5, #4]
   839ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   839b2:	428b      	cmp	r3, r1
   839b4:	d907      	bls.n	839c6 <__udivmoddi4+0xc6>
   839b6:	2d00      	cmp	r5, #0
   839b8:	d055      	beq.n	83a66 <__udivmoddi4+0x166>
   839ba:	2100      	movs	r1, #0
   839bc:	e885 0041 	stmia.w	r5, {r0, r6}
   839c0:	4608      	mov	r0, r1
   839c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   839c6:	fab3 f183 	clz	r1, r3
   839ca:	2900      	cmp	r1, #0
   839cc:	f040 808f 	bne.w	83aee <__udivmoddi4+0x1ee>
   839d0:	42b3      	cmp	r3, r6
   839d2:	d302      	bcc.n	839da <__udivmoddi4+0xda>
   839d4:	4282      	cmp	r2, r0
   839d6:	f200 80fc 	bhi.w	83bd2 <__udivmoddi4+0x2d2>
   839da:	1a84      	subs	r4, r0, r2
   839dc:	eb66 0603 	sbc.w	r6, r6, r3
   839e0:	2001      	movs	r0, #1
   839e2:	46b4      	mov	ip, r6
   839e4:	2d00      	cmp	r5, #0
   839e6:	d040      	beq.n	83a6a <__udivmoddi4+0x16a>
   839e8:	e885 1010 	stmia.w	r5, {r4, ip}
   839ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   839f0:	b912      	cbnz	r2, 839f8 <__udivmoddi4+0xf8>
   839f2:	2701      	movs	r7, #1
   839f4:	fbb7 f7f2 	udiv	r7, r7, r2
   839f8:	fab7 fe87 	clz	lr, r7
   839fc:	f1be 0f00 	cmp.w	lr, #0
   83a00:	d135      	bne.n	83a6e <__udivmoddi4+0x16e>
   83a02:	2101      	movs	r1, #1
   83a04:	1bf6      	subs	r6, r6, r7
   83a06:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   83a0a:	fa1f f887 	uxth.w	r8, r7
   83a0e:	fbb6 f2fc 	udiv	r2, r6, ip
   83a12:	fb0c 6612 	mls	r6, ip, r2, r6
   83a16:	fb08 f002 	mul.w	r0, r8, r2
   83a1a:	0c23      	lsrs	r3, r4, #16
   83a1c:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
   83a20:	42b0      	cmp	r0, r6
   83a22:	d907      	bls.n	83a34 <__udivmoddi4+0x134>
   83a24:	19f6      	adds	r6, r6, r7
   83a26:	f102 33ff 	add.w	r3, r2, #4294967295
   83a2a:	d202      	bcs.n	83a32 <__udivmoddi4+0x132>
   83a2c:	42b0      	cmp	r0, r6
   83a2e:	f200 80d2 	bhi.w	83bd6 <__udivmoddi4+0x2d6>
   83a32:	461a      	mov	r2, r3
   83a34:	1a36      	subs	r6, r6, r0
   83a36:	fbb6 f0fc 	udiv	r0, r6, ip
   83a3a:	fb0c 6610 	mls	r6, ip, r0, r6
   83a3e:	fb08 f800 	mul.w	r8, r8, r0
   83a42:	b2a3      	uxth	r3, r4
   83a44:	ea43 4406 	orr.w	r4, r3, r6, lsl #16
   83a48:	45a0      	cmp	r8, r4
   83a4a:	d907      	bls.n	83a5c <__udivmoddi4+0x15c>
   83a4c:	19e4      	adds	r4, r4, r7
   83a4e:	f100 33ff 	add.w	r3, r0, #4294967295
   83a52:	d202      	bcs.n	83a5a <__udivmoddi4+0x15a>
   83a54:	45a0      	cmp	r8, r4
   83a56:	f200 80b9 	bhi.w	83bcc <__udivmoddi4+0x2cc>
   83a5a:	4618      	mov	r0, r3
   83a5c:	eba4 0408 	sub.w	r4, r4, r8
   83a60:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
   83a64:	e79c      	b.n	839a0 <__udivmoddi4+0xa0>
   83a66:	4629      	mov	r1, r5
   83a68:	4628      	mov	r0, r5
   83a6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   83a6e:	fa07 f70e 	lsl.w	r7, r7, lr
   83a72:	f1ce 0320 	rsb	r3, lr, #32
   83a76:	fa26 f203 	lsr.w	r2, r6, r3
   83a7a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   83a7e:	fbb2 f1fc 	udiv	r1, r2, ip
   83a82:	fa1f f887 	uxth.w	r8, r7
   83a86:	fb0c 2211 	mls	r2, ip, r1, r2
   83a8a:	fa06 f60e 	lsl.w	r6, r6, lr
   83a8e:	fa20 f303 	lsr.w	r3, r0, r3
   83a92:	fb01 f908 	mul.w	r9, r1, r8
   83a96:	4333      	orrs	r3, r6
   83a98:	0c1e      	lsrs	r6, r3, #16
   83a9a:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
   83a9e:	45b1      	cmp	r9, r6
   83aa0:	fa00 f40e 	lsl.w	r4, r0, lr
   83aa4:	d909      	bls.n	83aba <__udivmoddi4+0x1ba>
   83aa6:	19f6      	adds	r6, r6, r7
   83aa8:	f101 32ff 	add.w	r2, r1, #4294967295
   83aac:	f080 808c 	bcs.w	83bc8 <__udivmoddi4+0x2c8>
   83ab0:	45b1      	cmp	r9, r6
   83ab2:	f240 8089 	bls.w	83bc8 <__udivmoddi4+0x2c8>
   83ab6:	3902      	subs	r1, #2
   83ab8:	443e      	add	r6, r7
   83aba:	eba6 0609 	sub.w	r6, r6, r9
   83abe:	fbb6 f0fc 	udiv	r0, r6, ip
   83ac2:	fb0c 6210 	mls	r2, ip, r0, r6
   83ac6:	fb00 f908 	mul.w	r9, r0, r8
   83aca:	b29e      	uxth	r6, r3
   83acc:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
   83ad0:	45b1      	cmp	r9, r6
   83ad2:	d907      	bls.n	83ae4 <__udivmoddi4+0x1e4>
   83ad4:	19f6      	adds	r6, r6, r7
   83ad6:	f100 33ff 	add.w	r3, r0, #4294967295
   83ada:	d271      	bcs.n	83bc0 <__udivmoddi4+0x2c0>
   83adc:	45b1      	cmp	r9, r6
   83ade:	d96f      	bls.n	83bc0 <__udivmoddi4+0x2c0>
   83ae0:	3802      	subs	r0, #2
   83ae2:	443e      	add	r6, r7
   83ae4:	eba6 0609 	sub.w	r6, r6, r9
   83ae8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   83aec:	e78f      	b.n	83a0e <__udivmoddi4+0x10e>
   83aee:	f1c1 0720 	rsb	r7, r1, #32
   83af2:	fa22 f807 	lsr.w	r8, r2, r7
   83af6:	408b      	lsls	r3, r1
   83af8:	ea48 0303 	orr.w	r3, r8, r3
   83afc:	fa26 f407 	lsr.w	r4, r6, r7
   83b00:	ea4f 4e13 	mov.w	lr, r3, lsr #16
   83b04:	fbb4 f9fe 	udiv	r9, r4, lr
   83b08:	fa1f fc83 	uxth.w	ip, r3
   83b0c:	fb0e 4419 	mls	r4, lr, r9, r4
   83b10:	408e      	lsls	r6, r1
   83b12:	fa20 f807 	lsr.w	r8, r0, r7
   83b16:	fb09 fa0c 	mul.w	sl, r9, ip
   83b1a:	ea48 0806 	orr.w	r8, r8, r6
   83b1e:	ea4f 4618 	mov.w	r6, r8, lsr #16
   83b22:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
   83b26:	45a2      	cmp	sl, r4
   83b28:	fa02 f201 	lsl.w	r2, r2, r1
   83b2c:	fa00 f601 	lsl.w	r6, r0, r1
   83b30:	d908      	bls.n	83b44 <__udivmoddi4+0x244>
   83b32:	18e4      	adds	r4, r4, r3
   83b34:	f109 30ff 	add.w	r0, r9, #4294967295
   83b38:	d244      	bcs.n	83bc4 <__udivmoddi4+0x2c4>
   83b3a:	45a2      	cmp	sl, r4
   83b3c:	d942      	bls.n	83bc4 <__udivmoddi4+0x2c4>
   83b3e:	f1a9 0902 	sub.w	r9, r9, #2
   83b42:	441c      	add	r4, r3
   83b44:	eba4 040a 	sub.w	r4, r4, sl
   83b48:	fbb4 f0fe 	udiv	r0, r4, lr
   83b4c:	fb0e 4410 	mls	r4, lr, r0, r4
   83b50:	fb00 fc0c 	mul.w	ip, r0, ip
   83b54:	fa1f f888 	uxth.w	r8, r8
   83b58:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
   83b5c:	45a4      	cmp	ip, r4
   83b5e:	d907      	bls.n	83b70 <__udivmoddi4+0x270>
   83b60:	18e4      	adds	r4, r4, r3
   83b62:	f100 3eff 	add.w	lr, r0, #4294967295
   83b66:	d229      	bcs.n	83bbc <__udivmoddi4+0x2bc>
   83b68:	45a4      	cmp	ip, r4
   83b6a:	d927      	bls.n	83bbc <__udivmoddi4+0x2bc>
   83b6c:	3802      	subs	r0, #2
   83b6e:	441c      	add	r4, r3
   83b70:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   83b74:	fba0 8902 	umull	r8, r9, r0, r2
   83b78:	eba4 0c0c 	sub.w	ip, r4, ip
   83b7c:	45cc      	cmp	ip, r9
   83b7e:	46c2      	mov	sl, r8
   83b80:	46ce      	mov	lr, r9
   83b82:	d315      	bcc.n	83bb0 <__udivmoddi4+0x2b0>
   83b84:	d012      	beq.n	83bac <__udivmoddi4+0x2ac>
   83b86:	b155      	cbz	r5, 83b9e <__udivmoddi4+0x29e>
   83b88:	ebb6 030a 	subs.w	r3, r6, sl
   83b8c:	eb6c 060e 	sbc.w	r6, ip, lr
   83b90:	fa06 f707 	lsl.w	r7, r6, r7
   83b94:	40cb      	lsrs	r3, r1
   83b96:	431f      	orrs	r7, r3
   83b98:	40ce      	lsrs	r6, r1
   83b9a:	602f      	str	r7, [r5, #0]
   83b9c:	606e      	str	r6, [r5, #4]
   83b9e:	2100      	movs	r1, #0
   83ba0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   83ba4:	4610      	mov	r0, r2
   83ba6:	e6f7      	b.n	83998 <__udivmoddi4+0x98>
   83ba8:	4689      	mov	r9, r1
   83baa:	e6de      	b.n	8396a <__udivmoddi4+0x6a>
   83bac:	4546      	cmp	r6, r8
   83bae:	d2ea      	bcs.n	83b86 <__udivmoddi4+0x286>
   83bb0:	ebb8 0a02 	subs.w	sl, r8, r2
   83bb4:	eb69 0e03 	sbc.w	lr, r9, r3
   83bb8:	3801      	subs	r0, #1
   83bba:	e7e4      	b.n	83b86 <__udivmoddi4+0x286>
   83bbc:	4670      	mov	r0, lr
   83bbe:	e7d7      	b.n	83b70 <__udivmoddi4+0x270>
   83bc0:	4618      	mov	r0, r3
   83bc2:	e78f      	b.n	83ae4 <__udivmoddi4+0x1e4>
   83bc4:	4681      	mov	r9, r0
   83bc6:	e7bd      	b.n	83b44 <__udivmoddi4+0x244>
   83bc8:	4611      	mov	r1, r2
   83bca:	e776      	b.n	83aba <__udivmoddi4+0x1ba>
   83bcc:	3802      	subs	r0, #2
   83bce:	443c      	add	r4, r7
   83bd0:	e744      	b.n	83a5c <__udivmoddi4+0x15c>
   83bd2:	4608      	mov	r0, r1
   83bd4:	e706      	b.n	839e4 <__udivmoddi4+0xe4>
   83bd6:	3a02      	subs	r2, #2
   83bd8:	443e      	add	r6, r7
   83bda:	e72b      	b.n	83a34 <__udivmoddi4+0x134>

00083bdc <__aeabi_idiv0>:
   83bdc:	4770      	bx	lr
   83bde:	bf00      	nop
   83be0:	48474948 	.word	0x48474948
   83be4:	0000000a 	.word	0x0000000a
   83be8:	0a574f4c 	.word	0x0a574f4c
   83bec:	00000000 	.word	0x00000000
   83bf0:	736e6f43 	.word	0x736e6f43
   83bf4:	20656c6f 	.word	0x20656c6f
   83bf8:	64616572 	.word	0x64616572
   83bfc:	00000a79 	.word	0x00000a79
   83c00:	3d3d3d3d 	.word	0x3d3d3d3d
   83c04:	3d3d3d3d 	.word	0x3d3d3d3d
   83c08:	3d3d3d3d 	.word	0x3d3d3d3d
   83c0c:	00000a3d 	.word	0x00000a3d

00083c10 <_global_impure_ptr>:
   83c10:	20070138 33323130 37363534 42413938     8.. 0123456789AB
   83c20:	46454443 00000000 33323130 37363534     CDEF....01234567
   83c30:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
   83c40:	0000296c                                l)..

00083c44 <blanks.7217>:
   83c44:	20202020 20202020 20202020 20202020                     

00083c54 <zeroes.7218>:
   83c54:	30303030 30303030 30303030 30303030     0000000000000000
   83c64:	00000043 49534f50 00000058 0000002e     C...POSIX.......

00083c74 <_ctype_>:
   83c74:	20202000 20202020 28282020 20282828     .         ((((( 
   83c84:	20202020 20202020 20202020 20202020                     
   83c94:	10108820 10101010 10101010 10101010      ...............
   83ca4:	04040410 04040404 10040404 10101010     ................
   83cb4:	41411010 41414141 01010101 01010101     ..AAAAAA........
   83cc4:	01010101 01010101 01010101 10101010     ................
   83cd4:	42421010 42424242 02020202 02020202     ..BBBBBB........
   83ce4:	02020202 02020202 02020202 10101010     ................
   83cf4:	00000020 00000000 00000000 00000000      ...............
	...

00083d78 <_init>:
   83d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83d7a:	bf00      	nop
   83d7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   83d7e:	bc08      	pop	{r3}
   83d80:	469e      	mov	lr, r3
   83d82:	4770      	bx	lr

00083d84 <__init_array_start>:
   83d84:	00081f1d 	.word	0x00081f1d

00083d88 <__frame_dummy_init_array_entry>:
   83d88:	00080119                                ....

00083d8c <_fini>:
   83d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83d8e:	bf00      	nop
   83d90:	bcf8      	pop	{r3, r4, r5, r6, r7}
   83d92:	bc08      	pop	{r3}
   83d94:	469e      	mov	lr, r3
   83d96:	4770      	bx	lr

00083d98 <__fini_array_start>:
   83d98:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <SystemInit>:
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20070000:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070004:	4a20      	ldr	r2, [pc, #128]	; (20070088 <SystemInit+0x88>)
20070006:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070008:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007000c:	6013      	str	r3, [r2, #0]
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007000e:	4b1f      	ldr	r3, [pc, #124]	; (2007008c <SystemInit+0x8c>)
20070010:	6a1b      	ldr	r3, [r3, #32]
20070012:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20070016:	d107      	bne.n	20070028 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070018:	4a1d      	ldr	r2, [pc, #116]	; (20070090 <SystemInit+0x90>)
2007001a:	4b1c      	ldr	r3, [pc, #112]	; (2007008c <SystemInit+0x8c>)
2007001c:	621a      	str	r2, [r3, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2007001e:	461a      	mov	r2, r3
20070020:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070022:	f013 0f01 	tst.w	r3, #1
20070026:	d0fb      	beq.n	20070020 <SystemInit+0x20>
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070028:	4a1a      	ldr	r2, [pc, #104]	; (20070094 <SystemInit+0x94>)
2007002a:	4b18      	ldr	r3, [pc, #96]	; (2007008c <SystemInit+0x8c>)
2007002c:	621a      	str	r2, [r3, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007002e:	461a      	mov	r2, r3
20070030:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070032:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20070036:	d0fb      	beq.n	20070030 <SystemInit+0x30>
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070038:	4a14      	ldr	r2, [pc, #80]	; (2007008c <SystemInit+0x8c>)
2007003a:	6b13      	ldr	r3, [r2, #48]	; 0x30
2007003c:	f023 0303 	bic.w	r3, r3, #3
20070040:	f043 0301 	orr.w	r3, r3, #1
20070044:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070046:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070048:	f013 0f08 	tst.w	r3, #8
2007004c:	d0fb      	beq.n	20070046 <SystemInit+0x46>
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
2007004e:	4a12      	ldr	r2, [pc, #72]	; (20070098 <SystemInit+0x98>)
20070050:	4b0e      	ldr	r3, [pc, #56]	; (2007008c <SystemInit+0x8c>)
20070052:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070054:	461a      	mov	r2, r3
20070056:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070058:	f013 0f02 	tst.w	r3, #2
2007005c:	d0fb      	beq.n	20070056 <SystemInit+0x56>
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2007005e:	2211      	movs	r2, #17
20070060:	4b0a      	ldr	r3, [pc, #40]	; (2007008c <SystemInit+0x8c>)
20070062:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070064:	461a      	mov	r2, r3
20070066:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070068:	f013 0f08 	tst.w	r3, #8
2007006c:	d0fb      	beq.n	20070066 <SystemInit+0x66>
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2007006e:	2212      	movs	r2, #18
20070070:	4b06      	ldr	r3, [pc, #24]	; (2007008c <SystemInit+0x8c>)
20070072:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070074:	461a      	mov	r2, r3
20070076:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070078:	f013 0f08 	tst.w	r3, #8
2007007c:	d0fb      	beq.n	20070076 <SystemInit+0x76>
	SystemCoreClock = CHIP_FREQ_CPU_MAX;
2007007e:	4a07      	ldr	r2, [pc, #28]	; (2007009c <SystemInit+0x9c>)
20070080:	4b07      	ldr	r3, [pc, #28]	; (200700a0 <SystemInit+0xa0>)
20070082:	601a      	str	r2, [r3, #0]
20070084:	4770      	bx	lr
20070086:	bf00      	nop
20070088:	400e0a00 	.word	0x400e0a00
2007008c:	400e0600 	.word	0x400e0600
20070090:	00370809 	.word	0x00370809
20070094:	01370809 	.word	0x01370809
20070098:	200d3f01 	.word	0x200d3f01
2007009c:	0501bd00 	.word	0x0501bd00
200700a0:	20070130 	.word	0x20070130

200700a4 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700a4:	4b1b      	ldr	r3, [pc, #108]	; (20070114 <system_init_flash+0x70>)
200700a6:	4298      	cmp	r0, r3
200700a8:	d915      	bls.n	200700d6 <system_init_flash+0x32>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700aa:	4b1b      	ldr	r3, [pc, #108]	; (20070118 <system_init_flash+0x74>)
200700ac:	4298      	cmp	r0, r3
200700ae:	d919      	bls.n	200700e4 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700b0:	4b1a      	ldr	r3, [pc, #104]	; (2007011c <system_init_flash+0x78>)
200700b2:	4298      	cmp	r0, r3
200700b4:	d91e      	bls.n	200700f4 <system_init_flash+0x50>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700b6:	4b1a      	ldr	r3, [pc, #104]	; (20070120 <system_init_flash+0x7c>)
200700b8:	4298      	cmp	r0, r3
200700ba:	d923      	bls.n	20070104 <system_init_flash+0x60>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
200700bc:	4b19      	ldr	r3, [pc, #100]	; (20070124 <system_init_flash+0x80>)
200700be:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
200700c0:	bf94      	ite	ls
200700c2:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
200700c6:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
200700ca:	4a17      	ldr	r2, [pc, #92]	; (20070128 <system_init_flash+0x84>)
200700cc:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
200700ce:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700d2:	6013      	str	r3, [r2, #0]
200700d4:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700d6:	2300      	movs	r3, #0
200700d8:	4a13      	ldr	r2, [pc, #76]	; (20070128 <system_init_flash+0x84>)
200700da:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700dc:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700e0:	6013      	str	r3, [r2, #0]
200700e2:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700e4:	f44f 7380 	mov.w	r3, #256	; 0x100
200700e8:	4a0f      	ldr	r2, [pc, #60]	; (20070128 <system_init_flash+0x84>)
200700ea:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700ec:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700f0:	6013      	str	r3, [r2, #0]
200700f2:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200700f4:	f44f 7300 	mov.w	r3, #512	; 0x200
200700f8:	4a0b      	ldr	r2, [pc, #44]	; (20070128 <system_init_flash+0x84>)
200700fa:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
200700fc:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070100:	6013      	str	r3, [r2, #0]
20070102:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
20070104:	f44f 7340 	mov.w	r3, #768	; 0x300
20070108:	4a07      	ldr	r2, [pc, #28]	; (20070128 <system_init_flash+0x84>)
2007010a:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
2007010c:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070110:	6013      	str	r3, [r2, #0]
20070112:	4770      	bx	lr
20070114:	0121eabf 	.word	0x0121eabf
20070118:	02faf07f 	.word	0x02faf07f
2007011c:	03d08fff 	.word	0x03d08fff
20070120:	04c4b3ff 	.word	0x04c4b3ff
20070124:	055d4a7f 	.word	0x055d4a7f
20070128:	400e0a00 	.word	0x400e0a00

2007012c <g_interrupt_enabled>:
2007012c:	00000001                                ....

20070130 <SystemCoreClock>:
20070130:	003d0900                                ..=.

20070134 <_impure_ptr>:
20070134:	20070138                                8.. 

20070138 <impure_data>:
20070138:	00000000 20070424 2007048c 200704f4     ....$.. ... ... 
	...
200701e0:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
200701f0:	0005deec 0000000b 00000000 00000000     ................
	...

20070560 <__atexit_recursive_mutex>:
20070560:	20070c50                                P.. 

20070564 <__global_locale>:
20070564:	00000043 00000000 00000000 00000000     C...............
	...
20070584:	00000043 00000000 00000000 00000000     C...............
	...
200705a4:	00000043 00000000 00000000 00000000     C...............
	...
200705c4:	00000043 00000000 00000000 00000000     C...............
	...
200705e4:	00000043 00000000 00000000 00000000     C...............
	...
20070604:	00000043 00000000 00000000 00000000     C...............
	...
20070624:	00000043 00000000 00000000 00000000     C...............
	...
20070644:	0008363d 00082ef1 00000000 00083c74     =6..........t<..
20070654:	00083c70 00083bec 00083bec 00083bec     p<...;...;...;..
20070664:	00083bec 00083bec 00083bec 00083bec     .;...;...;...;..
20070674:	00083bec 00083bec ffffffff ffffffff     .;...;..........
20070684:	ffffffff 0000ffff 53410001 00494943     ..........ASCII.
	...
200706ac:	53410000 00494943 00000000 00000000     ..ASCII.........
	...

200706d0 <__malloc_av_>:
	...
200706d8:	200706d0 200706d0 200706d8 200706d8     ... ... ... ... 
200706e8:	200706e0 200706e0 200706e8 200706e8     ... ... ... ... 
200706f8:	200706f0 200706f0 200706f8 200706f8     ... ... ... ... 
20070708:	20070700 20070700 20070708 20070708     ... ... ... ... 
20070718:	20070710 20070710 20070718 20070718     ... ... ... ... 
20070728:	20070720 20070720 20070728 20070728      ..  .. (.. (.. 
20070738:	20070730 20070730 20070738 20070738     0.. 0.. 8.. 8.. 
20070748:	20070740 20070740 20070748 20070748     @.. @.. H.. H.. 
20070758:	20070750 20070750 20070758 20070758     P.. P.. X.. X.. 
20070768:	20070760 20070760 20070768 20070768     `.. `.. h.. h.. 
20070778:	20070770 20070770 20070778 20070778     p.. p.. x.. x.. 
20070788:	20070780 20070780 20070788 20070788     ... ... ... ... 
20070798:	20070790 20070790 20070798 20070798     ... ... ... ... 
200707a8:	200707a0 200707a0 200707a8 200707a8     ... ... ... ... 
200707b8:	200707b0 200707b0 200707b8 200707b8     ... ... ... ... 
200707c8:	200707c0 200707c0 200707c8 200707c8     ... ... ... ... 
200707d8:	200707d0 200707d0 200707d8 200707d8     ... ... ... ... 
200707e8:	200707e0 200707e0 200707e8 200707e8     ... ... ... ... 
200707f8:	200707f0 200707f0 200707f8 200707f8     ... ... ... ... 
20070808:	20070800 20070800 20070808 20070808     ... ... ... ... 
20070818:	20070810 20070810 20070818 20070818     ... ... ... ... 
20070828:	20070820 20070820 20070828 20070828      ..  .. (.. (.. 
20070838:	20070830 20070830 20070838 20070838     0.. 0.. 8.. 8.. 
20070848:	20070840 20070840 20070848 20070848     @.. @.. H.. H.. 
20070858:	20070850 20070850 20070858 20070858     P.. P.. X.. X.. 
20070868:	20070860 20070860 20070868 20070868     `.. `.. h.. h.. 
20070878:	20070870 20070870 20070878 20070878     p.. p.. x.. x.. 
20070888:	20070880 20070880 20070888 20070888     ... ... ... ... 
20070898:	20070890 20070890 20070898 20070898     ... ... ... ... 
200708a8:	200708a0 200708a0 200708a8 200708a8     ... ... ... ... 
200708b8:	200708b0 200708b0 200708b8 200708b8     ... ... ... ... 
200708c8:	200708c0 200708c0 200708c8 200708c8     ... ... ... ... 
200708d8:	200708d0 200708d0 200708d8 200708d8     ... ... ... ... 
200708e8:	200708e0 200708e0 200708e8 200708e8     ... ... ... ... 
200708f8:	200708f0 200708f0 200708f8 200708f8     ... ... ... ... 
20070908:	20070900 20070900 20070908 20070908     ... ... ... ... 
20070918:	20070910 20070910 20070918 20070918     ... ... ... ... 
20070928:	20070920 20070920 20070928 20070928      ..  .. (.. (.. 
20070938:	20070930 20070930 20070938 20070938     0.. 0.. 8.. 8.. 
20070948:	20070940 20070940 20070948 20070948     @.. @.. H.. H.. 
20070958:	20070950 20070950 20070958 20070958     P.. P.. X.. X.. 
20070968:	20070960 20070960 20070968 20070968     `.. `.. h.. h.. 
20070978:	20070970 20070970 20070978 20070978     p.. p.. x.. x.. 
20070988:	20070980 20070980 20070988 20070988     ... ... ... ... 
20070998:	20070990 20070990 20070998 20070998     ... ... ... ... 
200709a8:	200709a0 200709a0 200709a8 200709a8     ... ... ... ... 
200709b8:	200709b0 200709b0 200709b8 200709b8     ... ... ... ... 
200709c8:	200709c0 200709c0 200709c8 200709c8     ... ... ... ... 
200709d8:	200709d0 200709d0 200709d8 200709d8     ... ... ... ... 
200709e8:	200709e0 200709e0 200709e8 200709e8     ... ... ... ... 
200709f8:	200709f0 200709f0 200709f8 200709f8     ... ... ... ... 
20070a08:	20070a00 20070a00 20070a08 20070a08     ... ... ... ... 
20070a18:	20070a10 20070a10 20070a18 20070a18     ... ... ... ... 
20070a28:	20070a20 20070a20 20070a28 20070a28      ..  .. (.. (.. 
20070a38:	20070a30 20070a30 20070a38 20070a38     0.. 0.. 8.. 8.. 
20070a48:	20070a40 20070a40 20070a48 20070a48     @.. @.. H.. H.. 
20070a58:	20070a50 20070a50 20070a58 20070a58     P.. P.. X.. X.. 
20070a68:	20070a60 20070a60 20070a68 20070a68     `.. `.. h.. h.. 
20070a78:	20070a70 20070a70 20070a78 20070a78     p.. p.. x.. x.. 
20070a88:	20070a80 20070a80 20070a88 20070a88     ... ... ... ... 
20070a98:	20070a90 20070a90 20070a98 20070a98     ... ... ... ... 
20070aa8:	20070aa0 20070aa0 20070aa8 20070aa8     ... ... ... ... 
20070ab8:	20070ab0 20070ab0 20070ab8 20070ab8     ... ... ... ... 
20070ac8:	20070ac0 20070ac0 20070ac8 20070ac8     ... ... ... ... 

20070ad8 <__malloc_sbrk_base>:
20070ad8:	ffffffff                                ....

20070adc <__malloc_trim_threshold>:
20070adc:	00020000                                ....
